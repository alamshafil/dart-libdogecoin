// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to libdogecoin
class libdogecoin {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  libdogecoin(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  libdogecoin.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdin =
      _lookup<ffi.Pointer<FILE>>('stdin');

  ffi.Pointer<FILE> get stdin => _stdin.value;

  set stdin(ffi.Pointer<FILE> value) => _stdin.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdout =
      _lookup<ffi.Pointer<FILE>>('stdout');

  ffi.Pointer<FILE> get stdout => _stdout.value;

  set stdout(ffi.Pointer<FILE> value) => _stdout.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stderr =
      _lookup<ffi.Pointer<FILE>>('stderr');

  ffi.Pointer<FILE> get stderr => _stderr.value;

  set stderr(ffi.Pointer<FILE> value) => _stderr.value = value;

  int remove(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove(
      __filename,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat = _renameatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose(
      __stream,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam(
      arg0,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r(
      __s,
    );
  }

  late final _tmpnam_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r = _tmpnam_rPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam(
      __dir,
      __pfx,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush(
      __stream,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked(
      __stream,
    );
  }

  late final _fflush_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked =
      _fflush_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen(
      __filename,
      __modes,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen(
      __fd,
      __modes,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen = _fmemopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Int> __sizeloc,
  ) {
    return _open_memstream(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('open_memstream');
  late final _open_memstream = _open_memstreamPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void setbuf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf(
      __stream,
      __buf,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer = _setbufferPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf(
      __stream,
    );
  }

  late final _setlinebufPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf =
      _setlinebufPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf(
      __stream,
      __format,
    );
  }

  late final _fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf = _fprintfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf(
      __format,
    );
  }

  late final _printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf =
      _printfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf(
      __s,
      __format,
    );
  }

  late final _sprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf = _sprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfprintf');
  late final _vfprintf = _vfprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vprintf(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vprintf(
      __format,
      __arg,
    );
  }

  late final _vprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vprintf');
  late final _vprintf =
      _vprintfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsprintf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsprintf');
  late final _vsprintf = _vsprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int snprintf(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf = _snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsnprintf(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('vsnprintf');
  late final _vsnprintf = _vsnprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int vdprintf(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    int __arg,
  ) {
    return _vdprintf(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('vdprintf');
  late final _vdprintf =
      _vdprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int dprintf(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf(
      __fd,
      __fmt,
    );
  }

  late final _dprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf =
      _dprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf(
      __stream,
      __format,
    );
  }

  late final _fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf = _fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf(
      __format,
    );
  }

  late final _scanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf =
      _scanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf(
      __s,
      __format,
    );
  }

  late final _sscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf = _sscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fscanf1(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf1(
      __stream,
      __format,
    );
  }

  late final _fscanf1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf1 = _fscanf1Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf1(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf1(
      __format,
    );
  }

  late final _scanf1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf1 =
      _scanf1Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf1(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf1(
      __s,
      __format,
    );
  }

  late final _sscanf1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf1 = _sscanf1Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf = _vfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf(
      __format,
      __arg,
    );
  }

  late final _vscanfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf =
      _vscanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf = _vsscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int vfscanf1(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf1(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf1 = _vfscanf1Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf1(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf1(
      __format,
      __arg,
    );
  }

  late final _vscanf1Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf1 =
      _vscanf1Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf1(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf1(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf1 = _vsscanf1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fgetc(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc(
      __stream,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc(
      __stream,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  int getc_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked(
      __stream,
    );
  }

  late final _getc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked =
      _getc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked =
      _getchar_unlockedPtr.asFunction<int Function()>();

  int fgetc_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked(
      __stream,
    );
  }

  late final _fgetc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked =
      _fgetc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc(
      __c,
      __stream,
    );
  }

  late final _fputcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc(
      __c,
      __stream,
    );
  }

  late final _putcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int __c,
  ) {
    return _putchar(
      __c,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int fputc_unlocked(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked(
      __c,
      __stream,
    );
  }

  late final _fputc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked =
      _fputc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked(
      __c,
      __stream,
    );
  }

  late final _putc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked =
      _putc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked(
    int __c,
  ) {
    return _putchar_unlocked(
      __c,
    );
  }

  late final _putchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked =
      _putchar_unlockedPtr.asFunction<int Function(int)>();

  int getw(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw(
      __stream,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw(
      __w,
      __stream,
    );
  }

  late final _putwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelimPtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim = ___getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelimPtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim = _getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getlinePtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<FILE>)>>('getline');
  late final _getline = _getlinePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<FILE>)>();

  int fputs(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs(
      __s,
      __stream,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts(
      __s,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc(
      __c,
      __stream,
    );
  }

  late final _ungetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked = _fread_unlockedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked = _fwrite_unlockedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell(
      __stream,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind(
      __stream,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseekoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko =
      _fseekoPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftelloPtr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello = _ftelloPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos(
      __stream,
      __pos,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos(
      __stream,
      __pos,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr(
      __stream,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof(
      __stream,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror(
      __stream,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked(
      __stream,
    );
  }

  late final _clearerr_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked =
      _clearerr_unlockedPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked(
      __stream,
    );
  }

  late final _feof_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked =
      _feof_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked(
      __stream,
    );
  }

  late final _ferror_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked =
      _ferror_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror(
      __s,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno(
      __stream,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno = _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked(
      __stream,
    );
  }

  late final _fileno_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked =
      _fileno_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose(
      __stream,
    );
  }

  late final _pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose = _pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen(
      __command,
      __modes,
    );
  }

  late final _popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen = _popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid(
      __s,
    );
  }

  late final _ctermidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid = _ctermidPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile(
      __stream,
    );
  }

  late final _flockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile =
      _flockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile(
      __stream,
    );
  }

  late final _ftrylockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile =
      _ftrylockfilePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile(
      __stream,
    );
  }

  late final _funlockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile =
      _funlockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow(
      arg0,
    );
  }

  late final ___uflowPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow =
      ___uflowPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow(
      arg0,
      arg1,
    );
  }

  late final ___overflowPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow =
      ___overflowPtr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __ctype_get_mb_cur_max() {
    return ___ctype_get_mb_cur_max();
  }

  late final ___ctype_get_mb_cur_maxPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max =
      ___ctype_get_mb_cur_maxPtr.asFunction<int Function()>();

  double atof(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof(
      __nptr,
    );
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi(
      __nptr,
    );
  }

  late final _atoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi = _atoiPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol(
      __nptr,
    );
  }

  late final _atolPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol = _atolPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll(
      __nptr,
    );
  }

  late final _atollPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll =
      _atollPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod(
      __nptr,
      __endptr,
    );
  }

  late final _strtodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod = _strtodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof(
      __nptr,
      __endptr,
    );
  }

  late final _strtofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof = _strtofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol = _strtolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul = _strtoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoqPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq = _strtoqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouqPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq = _strtouqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtollPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll = _strtollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull = _strtoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a(
    int __n,
  ) {
    return _l64a(
      __n,
    );
  }

  late final _l64aPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a = _l64aPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l(
      __s,
    );
  }

  late final _a64lPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l = _a64lPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select = _selectPtr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect = _pselectPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random() {
    return _random();
  }

  late final _randomPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random = _randomPtr.asFunction<int Function()>();

  void srandom(
    int __seed,
  ) {
    return _srandom(
      __seed,
    );
  }

  late final _srandomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom = _srandomPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int)>>('initstate');
  late final _initstate = _initstatePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate(
      __statebuf,
    );
  }

  late final _setstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate = _setstatePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r(
      __buf,
      __result,
    );
  }

  late final _random_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r = _random_rPtr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r(
      __seed,
      __buf,
    );
  }

  late final _srandom_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r =
      _srandom_rPtr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r = _initstate_rPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r = _setstate_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand() {
    return _rand();
  }

  late final _randPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand = _randPtr.asFunction<int Function()>();

  void srand(
    int __seed,
  ) {
    return _srand(
      __seed,
    );
  }

  late final _srandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand = _srandPtr.asFunction<void Function(int)>();

  int rand_r(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r(
      __seed,
    );
  }

  late final _rand_rPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r =
      _rand_rPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand48() {
    return _drand48();
  }

  late final _drand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand48 = _drand48Ptr.asFunction<double Function()>();

  double erand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand48(
      __xsubi,
    );
  }

  late final _erand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand48 =
      _erand48Ptr.asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand48 = _lrand48Ptr.asFunction<int Function()>();

  int nrand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand48(
      __xsubi,
    );
  }

  late final _nrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand48 =
      _nrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand48 = _mrand48Ptr.asFunction<int Function()>();

  int jrand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand48(
      __xsubi,
    );
  }

  late final _jrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand48 =
      _jrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand48(
    int __seedval,
  ) {
    return _srand48(
      __seedval,
    );
  }

  late final _srand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand48 = _srand48Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed48(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed48(
      __seed16v,
    );
  }

  late final _seed48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed48 = _seed48Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong48(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong48(
      __param,
    );
  }

  late final _lcong48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong48 =
      _lcong48Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r(
      __buffer,
      __result,
    );
  }

  late final _drand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r = _drand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r = _erand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r(
      __buffer,
      __result,
    );
  }

  late final _lrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r = _lrand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r = _nrand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r(
      __buffer,
      __result,
    );
  }

  late final _mrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r = _mrand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r = _jrand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r =
      _srand48_rPtr.asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r = _seed48_rPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r(
      __param,
      __buffer,
    );
  }

  late final _lcong48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r = _lcong48_rPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int arc4random() {
    return _arc4random();
  }

  late final _arc4randomPtr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random = _arc4randomPtr.asFunction<int Function()>();

  void arc4random_buf(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf(
      __buf,
      __size,
    );
  }

  late final _arc4random_bufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('arc4random_buf');
  late final _arc4random_buf = _arc4random_bufPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform(
    int __upper_bound,
  ) {
    return _arc4random_uniform(
      __upper_bound,
    );
  }

  late final _arc4random_uniformPtr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
          'arc4random_uniform');
  late final _arc4random_uniform =
      _arc4random_uniformPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'malloc');
  late final _malloc =
      _mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc(
    int __nmemb,
    int __size,
  ) {
    return _calloc(
      __nmemb,
      __size,
    );
  }

  late final _callocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'calloc');
  late final _calloc =
      _callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('realloc');
  late final _realloc = _reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free(
      __ptr,
    );
  }

  late final _freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free =
      _freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray = _reallocarrayPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray1(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray1(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray1 = _reallocarray1Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca(
    int __size,
  ) {
    return _alloca(
      __size,
    );
  }

  late final _allocaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'alloca');
  late final _alloca =
      _allocaPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc(
    int __size,
  ) {
    return _valloc(
      __size,
    );
  }

  late final _vallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'valloc');
  late final _valloc =
      _vallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int,
              ffi.Int)>>('posix_memalign');
  late final _posix_memalign = _posix_memalignPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  late final _aligned_allocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'aligned_alloc');
  late final _aligned_alloc =
      _aligned_allocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort() {
    return _abort();
  }

  late final _abortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort = _abortPtr.asFunction<void Function()>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit(
      __func,
    );
  }

  late final _atexitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit = _atexitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit(
      __func,
    );
  }

  late final _at_quick_exitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit = _at_quick_exitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit(
      __func,
      __arg,
    );
  }

  late final _on_exitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit = _on_exitPtr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit(
    int __status,
  ) {
    return _exit(
      __status,
    );
  }

  late final _exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit = _exitPtr.asFunction<void Function(int)>();

  void quick_exit(
    int __status,
  ) {
    return _quick_exit(
      __status,
    );
  }

  late final _quick_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit = _quick_exitPtr.asFunction<void Function(int)>();

  void _Exit(
    int __status,
  ) {
    return __Exit(
      __status,
    );
  }

  late final __ExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv(
      __name,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv(
      __string,
    );
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv =
      _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv = _setenvPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv(
      __name,
    );
  }

  late final _unsetenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv =
      _unsetenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv() {
    return _clearenv();
  }

  late final _clearenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv = _clearenvPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp(
      __template,
    );
  }

  late final _mktempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp = _mktempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp(
      __template,
    );
  }

  late final _mkstempPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp =
      _mkstempPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps(
      __template,
      __suffixlen,
    );
  }

  late final _mkstempsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps =
      _mkstempsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp(
      __template,
    );
  }

  late final _mkdtempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp = _mkdtempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system(
      __command,
    );
  }

  late final _systemPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system =
      _systemPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath(
      __name,
      __resolved,
    );
  }

  late final _realpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath = _realpathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              __compar_fn_t)>>('bsearch');
  late final _bsearch = _bsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              __compar_fn_t)>>('qsort');
  late final _qsort = _qsortPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs(
    int __x,
  ) {
    return _abs(
      __x,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int labs(
    int __x,
  ) {
    return _labs(
      __x,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  int llabs(
    int __x,
  ) {
    return _llabs(
      __x,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  div_t div(
    int __numer,
    int __denom,
  ) {
    return _div(
      __numer,
      __denom,
    );
  }

  late final _divPtr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div = _divPtr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv(
    int __numer,
    int __denom,
  ) {
    return _ldiv(
      __numer,
      __denom,
    );
  }

  late final _ldivPtr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv = _ldivPtr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv(
    int __numer,
    int __denom,
  ) {
    return _lldiv(
      __numer,
      __denom,
    );
  }

  late final _lldivPtr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv = _lldivPtr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt = _ecvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt = _fcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt = _gcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('ecvt_r');
  late final _ecvt_r = _ecvt_rPtr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('fcvt_r');
  late final _fcvt_r = _fcvt_rPtr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen(
      __s,
      __n,
    );
  }

  late final _mblenPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mblen');
  late final _mblen =
      _mblenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc(
    ffi.Pointer<ffi.Int> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb(
      __s,
      __wchar,
    );
  }

  late final _wctombPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'wctomb');
  late final _wctomb =
      _wctombPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs(
    ffi.Pointer<ffi.Int> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Int> __pwcs,
    int __n,
  ) {
    return _wcstombs(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  int rpmatch(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch(
      __response,
    );
  }

  late final _rpmatchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch =
      _rpmatchPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsuboptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt = _getsuboptPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg =
      _getloadavgPtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memcpy');
  late final _memcpy = _memcpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memmove');
  late final _memmove = _memmovePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memccpy');
  late final _memccpy = _memccpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset(
      __s,
      __c,
      __n,
    );
  }

  late final _memsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memset');
  late final _memset = _memsetPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('memcmp');
  late final _memcmp = _memcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__memcmpeq');
  late final ___memcmpeq = ___memcmpeqPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr(
      __s,
      __c,
      __n,
    );
  }

  late final _memchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memchr');
  late final _memchr = _memchrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy(
      __dest,
      __src,
    );
  }

  late final _strcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy = _strcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncpy');
  late final _strncpy = _strncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat(
      __dest,
      __src,
    );
  }

  late final _strcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat = _strcatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncat');
  late final _strncat = _strncatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp(
      __s1,
      __s2,
    );
  }

  late final _strcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp = _strcmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncmp');
  late final _strncmp = _strncmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll(
      __s1,
      __s2,
    );
  }

  late final _strcollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll = _strcollPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strxfrm');
  late final _strxfrm = _strxfrmPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l = _strcoll_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strxfrm_l');
  late final _strxfrm_l = _strxfrm_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup(
      __s,
    );
  }

  late final _strdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup = _strdupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup(
      __string,
      __n,
    );
  }

  late final _strndupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strndup');
  late final _strndup = _strndupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr(
      __s,
      __c,
    );
  }

  late final _strchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr = _strchrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr(
      __s,
      __c,
    );
  }

  late final _strrchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr = _strrchrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn(
      __s,
      __reject,
    );
  }

  late final _strcspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn = _strcspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn(
      __s,
      __accept,
    );
  }

  late final _strspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn = _strspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk(
      __s,
      __accept,
    );
  }

  late final _strpbrkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk = _strpbrkPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr(
      __haystack,
      __needle,
    );
  }

  late final _strstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr = _strstrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok(
      __s,
      __delim,
    );
  }

  late final _strtokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok = _strtokPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r = ___strtok_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r = _strtok_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen(
      __s,
    );
  }

  late final _strlenPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'strlen');
  late final _strlen =
      _strlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen(
      __string,
      __maxlen,
    );
  }

  late final _strnlenPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'strnlen');
  late final _strnlen =
      _strnlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror(
    int __errnum,
  ) {
    return _strerror(
      __errnum,
    );
  }

  late final _strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror =
      _strerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('strerror_r');
  late final _strerror_r = _strerror_rPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l(
      __errnum,
      __l,
    );
  }

  late final _strerror_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l = _strerror_lPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcmp');
  late final _bcmp = _bcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcopy');
  late final _bcopy = _bcopyPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero(
      __s,
      __n,
    );
  }

  late final _bzeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('bzero');
  late final _bzero =
      _bzeroPtr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index(
      __s,
      __c,
    );
  }

  late final _indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index = _indexPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex(
      __s,
      __c,
    );
  }

  late final _rindexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex = _rindexPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs(
    int __i,
  ) {
    return _ffs(
      __i,
    );
  }

  late final _ffsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs = _ffsPtr.asFunction<int Function(int)>();

  int ffsl(
    int __l,
  ) {
    return _ffsl(
      __l,
    );
  }

  late final _ffslPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl = _ffslPtr.asFunction<int Function(int)>();

  int ffsll(
    int __ll,
  ) {
    return _ffsll(
      __ll,
    );
  }

  late final _ffsllPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll = _ffsllPtr.asFunction<int Function(int)>();

  int strcasecmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp(
      __s1,
      __s2,
    );
  }

  late final _strcasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp = _strcasecmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncasecmp');
  late final _strncasecmp = _strncasecmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l = _strcasecmp_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l = _strncasecmp_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero(
      __s,
      __n,
    );
  }

  late final _explicit_bzeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('explicit_bzero');
  late final _explicit_bzero = _explicit_bzeroPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep(
      __stringp,
      __delim,
    );
  }

  late final _strsepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep = _strsepPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal(
    int __sig,
  ) {
    return _strsignal(
      __sig,
    );
  }

  late final _strsignalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal =
      _strsignalPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy(
      __dest,
      __src,
    );
  }

  late final ___stpcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy = ___stpcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy(
      __dest,
      __src,
    );
  }

  late final _stpcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy = _stpcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('__stpncpy');
  late final ___stpncpy = ___stpncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('stpncpy');
  late final _stpncpy = _stpncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int generatePrivPubKeypair(
    ffi.Pointer<ffi.Char> wif_privkey,
    ffi.Pointer<ffi.Char> p2pkh_pubkey,
    int is_testnet,
  ) {
    return _generatePrivPubKeypair(
      wif_privkey,
      p2pkh_pubkey,
      is_testnet,
    );
  }

  late final _generatePrivPubKeypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('generatePrivPubKeypair');
  late final _generatePrivPubKeypair = _generatePrivPubKeypairPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int generateHDMasterPubKeypair(
    ffi.Pointer<ffi.Char> wif_privkey_master,
    ffi.Pointer<ffi.Char> p2pkh_pubkey_master,
    int is_testnet,
  ) {
    return _generateHDMasterPubKeypair(
      wif_privkey_master,
      p2pkh_pubkey_master,
      is_testnet,
    );
  }

  late final _generateHDMasterPubKeypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('generateHDMasterPubKeypair');
  late final _generateHDMasterPubKeypair =
      _generateHDMasterPubKeypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int generateDerivedHDPubkey(
    ffi.Pointer<ffi.Char> wif_privkey_master,
    ffi.Pointer<ffi.Char> p2pkh_pubkey,
  ) {
    return _generateDerivedHDPubkey(
      wif_privkey_master,
      p2pkh_pubkey,
    );
  }

  late final _generateDerivedHDPubkeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('generateDerivedHDPubkey');
  late final _generateDerivedHDPubkey = _generateDerivedHDPubkeyPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int verifyPrivPubKeypair(
    ffi.Pointer<ffi.Char> wif_privkey,
    ffi.Pointer<ffi.Char> p2pkh_pubkey,
    int is_testnet,
  ) {
    return _verifyPrivPubKeypair(
      wif_privkey,
      p2pkh_pubkey,
      is_testnet,
    );
  }

  late final _verifyPrivPubKeypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('verifyPrivPubKeypair');
  late final _verifyPrivPubKeypair = _verifyPrivPubKeypairPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int verifyHDMasterPubKeypair(
    ffi.Pointer<ffi.Char> wif_privkey_master,
    ffi.Pointer<ffi.Char> p2pkh_pubkey_master,
    int is_testnet,
  ) {
    return _verifyHDMasterPubKeypair(
      wif_privkey_master,
      p2pkh_pubkey_master,
      is_testnet,
    );
  }

  late final _verifyHDMasterPubKeypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('verifyHDMasterPubKeypair');
  late final _verifyHDMasterPubKeypair =
      _verifyHDMasterPubKeypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int verifyP2pkhAddress(
    ffi.Pointer<ffi.Char> p2pkh_pubkey,
    int len,
  ) {
    return _verifyP2pkhAddress(
      p2pkh_pubkey,
      len,
    );
  }

  late final _verifyP2pkhAddressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Uint8)>>('verifyP2pkhAddress');
  late final _verifyP2pkhAddress = _verifyP2pkhAddressPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int remove1(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove1(
      __filename,
    );
  }

  late final _remove1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove1 =
      _remove1Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename1(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename1(
      __old,
      __new,
    );
  }

  late final _rename1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename1 = _rename1Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat1(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat1(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameat1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat1 = _renameat1Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose1(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose1(
      __stream,
    );
  }

  late final _fclose1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose1 =
      _fclose1Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile1() {
    return _tmpfile1();
  }

  late final _tmpfile1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile1 =
      _tmpfile1Ptr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam1(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam1(
      arg0,
    );
  }

  late final _tmpnam1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam1 = _tmpnam1Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r1(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r1(
      __s,
    );
  }

  late final _tmpnam_r1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r1 = _tmpnam_r1Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam1(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam1(
      __dir,
      __pfx,
    );
  }

  late final _tempnam1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam1 = _tempnam1Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush1(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush1(
      __stream,
    );
  }

  late final _fflush1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush1 =
      _fflush1Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked1(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked1(
      __stream,
    );
  }

  late final _fflush_unlocked1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked1 =
      _fflush_unlocked1Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen1(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen1(
      __filename,
      __modes,
    );
  }

  late final _fopen1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen1 = _fopen1Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen1(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen1(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopen1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen1 = _freopen1Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen1(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen1(
      __fd,
      __modes,
    );
  }

  late final _fdopen1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen1 = _fdopen1Ptr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen1(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen1(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopen1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen1 = _fmemopen1Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream1(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Int> __sizeloc,
  ) {
    return _open_memstream1(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstream1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('open_memstream');
  late final _open_memstream1 = _open_memstream1Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void setbuf1(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf1(
      __stream,
      __buf,
    );
  }

  late final _setbuf1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf1 = _setbuf1Ptr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf1(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf1(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbuf1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('setvbuf');
  late final _setvbuf1 = _setvbuf1Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer1(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer1(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbuffer1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer1 = _setbuffer1Ptr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf1(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf1(
      __stream,
    );
  }

  late final _setlinebuf1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf1 =
      _setlinebuf1Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf1(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf1(
      __stream,
      __format,
    );
  }

  late final _fprintf1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf1 = _fprintf1Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf1(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf1(
      __format,
    );
  }

  late final _printf1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf1 =
      _printf1Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf1(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf1(
      __s,
      __format,
    );
  }

  late final _sprintf1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf1 = _sprintf1Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf1(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfprintf1(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintf1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfprintf');
  late final _vfprintf1 = _vfprintf1Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vprintf1(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vprintf1(
      __format,
      __arg,
    );
  }

  late final _vprintf1Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vprintf');
  late final _vprintf1 =
      _vprintf1Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsprintf1(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsprintf1(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintf1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsprintf');
  late final _vsprintf1 = _vsprintf1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int snprintf1(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf1(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintf1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf1 = _snprintf1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf1(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsnprintf1(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintf1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('vsnprintf');
  late final _vsnprintf1 = _vsnprintf1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int vdprintf1(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    int __arg,
  ) {
    return _vdprintf1(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintf1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('vdprintf');
  late final _vdprintf1 =
      _vdprintf1Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int dprintf1(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf1(
      __fd,
      __fmt,
    );
  }

  late final _dprintf1Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf1 =
      _dprintf1Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf2(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf2(
      __stream,
      __format,
    );
  }

  late final _fscanf2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf2 = _fscanf2Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf2(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf2(
      __format,
    );
  }

  late final _scanf2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf2 =
      _scanf2Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf2(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf2(
      __s,
      __format,
    );
  }

  late final _sscanf2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf2 = _sscanf2Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fscanf3(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf3(
      __stream,
      __format,
    );
  }

  late final _fscanf3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf3 = _fscanf3Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf3(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf3(
      __format,
    );
  }

  late final _scanf3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf3 =
      _scanf3Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf3(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf3(
      __s,
      __format,
    );
  }

  late final _sscanf3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf3 = _sscanf3Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf2(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf2(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf2 = _vfscanf2Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf2(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf2(
      __format,
      __arg,
    );
  }

  late final _vscanf2Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf2 =
      _vscanf2Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf2(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf2(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf2 = _vsscanf2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int vfscanf3(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf3(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf3 = _vfscanf3Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf3(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf3(
      __format,
      __arg,
    );
  }

  late final _vscanf3Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf3 =
      _vscanf3Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf3(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf3(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf3 = _vsscanf3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fgetc1(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc1(
      __stream,
    );
  }

  late final _fgetc1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc1 = _fgetc1Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc1(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc1(
      __stream,
    );
  }

  late final _getc1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc1 = _getc1Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar1() {
    return _getchar1();
  }

  late final _getchar1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar1 = _getchar1Ptr.asFunction<int Function()>();

  int getc_unlocked1(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked1(
      __stream,
    );
  }

  late final _getc_unlocked1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked1 =
      _getc_unlocked1Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked1() {
    return _getchar_unlocked1();
  }

  late final _getchar_unlocked1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked1 =
      _getchar_unlocked1Ptr.asFunction<int Function()>();

  int fgetc_unlocked1(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked1(
      __stream,
    );
  }

  late final _fgetc_unlocked1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked1 =
      _fgetc_unlocked1Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc1(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc1(
      __c,
      __stream,
    );
  }

  late final _fputc1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc1 =
      _fputc1Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc1(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc1(
      __c,
      __stream,
    );
  }

  late final _putc1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc1 =
      _putc1Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar1(
    int __c,
  ) {
    return _putchar1(
      __c,
    );
  }

  late final _putchar1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar1 = _putchar1Ptr.asFunction<int Function(int)>();

  int fputc_unlocked1(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked1(
      __c,
      __stream,
    );
  }

  late final _fputc_unlocked1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked1 =
      _fputc_unlocked1Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked1(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked1(
      __c,
      __stream,
    );
  }

  late final _putc_unlocked1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked1 =
      _putc_unlocked1Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked1(
    int __c,
  ) {
    return _putchar_unlocked1(
      __c,
    );
  }

  late final _putchar_unlocked1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked1 =
      _putchar_unlocked1Ptr.asFunction<int Function(int)>();

  int getw1(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw1(
      __stream,
    );
  }

  late final _getw1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw1 = _getw1Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw1(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw1(
      __w,
      __stream,
    );
  }

  late final _putw1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw1 =
      _putw1Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets1(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets1(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgets1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets1 = _fgets1Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim1(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim1(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelim1Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim1 = ___getdelim1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getdelim1(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim1(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelim1Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim1 = _getdelim1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getline1(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline1(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getline1Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<FILE>)>>('getline');
  late final _getline1 = _getline1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<FILE>)>();

  int fputs1(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs1(
      __s,
      __stream,
    );
  }

  late final _fputs1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs1 = _fputs1Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts1(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts1(
      __s,
    );
  }

  late final _puts1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts1 =
      _puts1Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc1(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc1(
      __c,
      __stream,
    );
  }

  late final _ungetc1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc1 =
      _ungetc1Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread1(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread1(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread1 = _fread1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite1(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite1(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwrite1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite1 = _fwrite1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked1(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked1(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlocked1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked1 = _fread_unlocked1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked1(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked1(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlocked1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked1 = _fwrite_unlocked1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek1(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek1(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseek1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek1 =
      _fseek1Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell1(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell1(
      __stream,
    );
  }

  late final _ftell1Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell1 = _ftell1Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind1(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind1(
      __stream,
    );
  }

  late final _rewind1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind1 =
      _rewind1Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko1(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko1(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseeko1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko1 =
      _fseeko1Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello1(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello1(
      __stream,
    );
  }

  late final _ftello1Ptr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello1 =
      _ftello1Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos1(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos1(
      __stream,
      __pos,
    );
  }

  late final _fgetpos1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos1 = _fgetpos1Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos1(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos1(
      __stream,
      __pos,
    );
  }

  late final _fsetpos1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos1 = _fsetpos1Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr1(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr1(
      __stream,
    );
  }

  late final _clearerr1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr1 =
      _clearerr1Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof1(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof1(
      __stream,
    );
  }

  late final _feof1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof1 = _feof1Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror1(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror1(
      __stream,
    );
  }

  late final _ferror1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror1 =
      _ferror1Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked1(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked1(
      __stream,
    );
  }

  late final _clearerr_unlocked1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked1 =
      _clearerr_unlocked1Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked1(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked1(
      __stream,
    );
  }

  late final _feof_unlocked1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked1 =
      _feof_unlocked1Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked1(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked1(
      __stream,
    );
  }

  late final _ferror_unlocked1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked1 =
      _ferror_unlocked1Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror1(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror1(
      __s,
    );
  }

  late final _perror1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror1 =
      _perror1Ptr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno1(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno1(
      __stream,
    );
  }

  late final _fileno1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno1 =
      _fileno1Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked1(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked1(
      __stream,
    );
  }

  late final _fileno_unlocked1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked1 =
      _fileno_unlocked1Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose1(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose1(
      __stream,
    );
  }

  late final _pclose1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose1 =
      _pclose1Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen1(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen1(
      __command,
      __modes,
    );
  }

  late final _popen1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen1 = _popen1Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid1(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid1(
      __s,
    );
  }

  late final _ctermid1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid1 = _ctermid1Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile1(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile1(
      __stream,
    );
  }

  late final _flockfile1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile1 =
      _flockfile1Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile1(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile1(
      __stream,
    );
  }

  late final _ftrylockfile1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile1 =
      _ftrylockfile1Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile1(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile1(
      __stream,
    );
  }

  late final _funlockfile1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile1 =
      _funlockfile1Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow1(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow1(
      arg0,
    );
  }

  late final ___uflow1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow1 =
      ___uflow1Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow1(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow1(
      arg0,
      arg1,
    );
  }

  late final ___overflow1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow1 =
      ___overflow1Ptr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __ctype_get_mb_cur_max1() {
    return ___ctype_get_mb_cur_max1();
  }

  late final ___ctype_get_mb_cur_max1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max1 =
      ___ctype_get_mb_cur_max1Ptr.asFunction<int Function()>();

  double atof1(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof1(
      __nptr,
    );
  }

  late final _atof1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof1 =
      _atof1Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi1(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi1(
      __nptr,
    );
  }

  late final _atoi1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi1 =
      _atoi1Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol1(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol1(
      __nptr,
    );
  }

  late final _atol1Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol1 =
      _atol1Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll1(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll1(
      __nptr,
    );
  }

  late final _atoll1Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll1 =
      _atoll1Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod1(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod1(
      __nptr,
      __endptr,
    );
  }

  late final _strtod1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod1 = _strtod1Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof1(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof1(
      __nptr,
      __endptr,
    );
  }

  late final _strtof1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof1 = _strtof1Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol1(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol1(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol1 = _strtol1Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul1(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul1(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul1 = _strtoul1Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq1(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq1(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq1 = _strtoq1Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq1(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq1(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq1 = _strtouq1Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll1(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll1(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll1 = _strtoll1Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull1(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull1(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull1 = _strtoull1Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a1(
    int __n,
  ) {
    return _l64a1(
      __n,
    );
  }

  late final _l64a1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a1 =
      _l64a1Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l1(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l1(
      __s,
    );
  }

  late final _a64l1Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l1 =
      _a64l1Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select1(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select1(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select1 = _select1Ptr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect1(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect1(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect1 = _pselect1Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random1() {
    return _random1();
  }

  late final _random1Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random1 = _random1Ptr.asFunction<int Function()>();

  void srandom1(
    int __seed,
  ) {
    return _srandom1(
      __seed,
    );
  }

  late final _srandom1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom1 = _srandom1Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate1(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate1(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int)>>('initstate');
  late final _initstate1 = _initstate1Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate1(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate1(
      __statebuf,
    );
  }

  late final _setstate1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate1 = _setstate1Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r1(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r1(
      __buf,
      __result,
    );
  }

  late final _random_r1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r1 = _random_r1Ptr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r1(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r1(
      __seed,
      __buf,
    );
  }

  late final _srandom_r1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r1 =
      _srandom_r1Ptr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r1(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r1(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r1 = _initstate_r1Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r1(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r1(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r1 = _setstate_r1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand1() {
    return _rand1();
  }

  late final _rand1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand1 = _rand1Ptr.asFunction<int Function()>();

  void srand1(
    int __seed,
  ) {
    return _srand1(
      __seed,
    );
  }

  late final _srand1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand1 = _srand1Ptr.asFunction<void Function(int)>();

  int rand_r1(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r1(
      __seed,
    );
  }

  late final _rand_r1Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r1 =
      _rand_r1Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand481() {
    return _drand481();
  }

  late final _drand481Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand481 = _drand481Ptr.asFunction<double Function()>();

  double erand481(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand481(
      __xsubi,
    );
  }

  late final _erand481Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand481 = _erand481Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand481() {
    return _lrand481();
  }

  late final _lrand481Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand481 = _lrand481Ptr.asFunction<int Function()>();

  int nrand481(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand481(
      __xsubi,
    );
  }

  late final _nrand481Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand481 =
      _nrand481Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand481() {
    return _mrand481();
  }

  late final _mrand481Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand481 = _mrand481Ptr.asFunction<int Function()>();

  int jrand481(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand481(
      __xsubi,
    );
  }

  late final _jrand481Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand481 =
      _jrand481Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand481(
    int __seedval,
  ) {
    return _srand481(
      __seedval,
    );
  }

  late final _srand481Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand481 = _srand481Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed481(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed481(
      __seed16v,
    );
  }

  late final _seed481Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed481 = _seed481Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong481(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong481(
      __param,
    );
  }

  late final _lcong481Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong481 =
      _lcong481Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r1(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r1(
      __buffer,
      __result,
    );
  }

  late final _drand48_r1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r1 = _drand48_r1Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r1(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r1(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r1 = _erand48_r1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r1(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r1(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r1 = _lrand48_r1Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r1(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r1(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r1 = _nrand48_r1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r1(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r1(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r1 = _mrand48_r1Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r1(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r1(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r1 = _jrand48_r1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r1(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r1(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r1 =
      _srand48_r1Ptr.asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r1(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r1(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r1 = _seed48_r1Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r1(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r1(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r1 = _lcong48_r1Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int arc4random1() {
    return _arc4random1();
  }

  late final _arc4random1Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random1 = _arc4random1Ptr.asFunction<int Function()>();

  void arc4random_buf1(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf1(
      __buf,
      __size,
    );
  }

  late final _arc4random_buf1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('arc4random_buf');
  late final _arc4random_buf1 = _arc4random_buf1Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform1(
    int __upper_bound,
  ) {
    return _arc4random_uniform1(
      __upper_bound,
    );
  }

  late final _arc4random_uniform1Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
          'arc4random_uniform');
  late final _arc4random_uniform1 =
      _arc4random_uniform1Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc1(
    int __size,
  ) {
    return _malloc1(
      __size,
    );
  }

  late final _malloc1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'malloc');
  late final _malloc1 =
      _malloc1Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc1(
    int __nmemb,
    int __size,
  ) {
    return _calloc1(
      __nmemb,
      __size,
    );
  }

  late final _calloc1Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'calloc');
  late final _calloc1 =
      _calloc1Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc1(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc1(
      __ptr,
      __size,
    );
  }

  late final _realloc1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('realloc');
  late final _realloc1 = _realloc1Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free1(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free1(
      __ptr,
    );
  }

  late final _free1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free1 =
      _free1Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray2(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray2(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray2 = _reallocarray2Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray3(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray3(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray3 = _reallocarray3Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca1(
    int __size,
  ) {
    return _alloca1(
      __size,
    );
  }

  late final _alloca1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'alloca');
  late final _alloca1 =
      _alloca1Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc1(
    int __size,
  ) {
    return _valloc1(
      __size,
    );
  }

  late final _valloc1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'valloc');
  late final _valloc1 =
      _valloc1Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign1(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int,
              ffi.Int)>>('posix_memalign');
  late final _posix_memalign1 = _posix_memalign1Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc1(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc1(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc1Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'aligned_alloc');
  late final _aligned_alloc1 =
      _aligned_alloc1Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort1() {
    return _abort1();
  }

  late final _abort1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort1 = _abort1Ptr.asFunction<void Function()>();

  int atexit1(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit1(
      __func,
    );
  }

  late final _atexit1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit1 = _atexit1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit1(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit1(
      __func,
    );
  }

  late final _at_quick_exit1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit1 = _at_quick_exit1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit1(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit1(
      __func,
      __arg,
    );
  }

  late final _on_exit1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit1 = _on_exit1Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit1(
    int __status,
  ) {
    return _exit1(
      __status,
    );
  }

  late final _exit1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit1 = _exit1Ptr.asFunction<void Function(int)>();

  void quick_exit1(
    int __status,
  ) {
    return _quick_exit1(
      __status,
    );
  }

  late final _quick_exit1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit1 = _quick_exit1Ptr.asFunction<void Function(int)>();

  void _Exit1(
    int __status,
  ) {
    return __Exit1(
      __status,
    );
  }

  late final __Exit1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit1 = __Exit1Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv1(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv1(
      __name,
    );
  }

  late final _getenv1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv1 = _getenv1Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv1(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv1(
      __string,
    );
  }

  late final _putenv1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv1 =
      _putenv1Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv1(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv1(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv1 = _setenv1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv1(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv1(
      __name,
    );
  }

  late final _unsetenv1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv1 =
      _unsetenv1Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv1() {
    return _clearenv1();
  }

  late final _clearenv1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv1 = _clearenv1Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp1(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp1(
      __template,
    );
  }

  late final _mktemp1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp1 = _mktemp1Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp1(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp1(
      __template,
    );
  }

  late final _mkstemp1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp1 =
      _mkstemp1Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps1(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps1(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps1Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps1 =
      _mkstemps1Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp1(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp1(
      __template,
    );
  }

  late final _mkdtemp1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp1 = _mkdtemp1Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system1(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system1(
      __command,
    );
  }

  late final _system1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system1 =
      _system1Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath1(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath1(
      __name,
      __resolved,
    );
  }

  late final _realpath1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath1 = _realpath1Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch1(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch1(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              __compar_fn_t)>>('bsearch');
  late final _bsearch1 = _bsearch1Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort1(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort1(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              __compar_fn_t)>>('qsort');
  late final _qsort1 = _qsort1Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs1(
    int __x,
  ) {
    return _abs1(
      __x,
    );
  }

  late final _abs1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs1 = _abs1Ptr.asFunction<int Function(int)>();

  int labs1(
    int __x,
  ) {
    return _labs1(
      __x,
    );
  }

  late final _labs1Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs1 = _labs1Ptr.asFunction<int Function(int)>();

  int llabs1(
    int __x,
  ) {
    return _llabs1(
      __x,
    );
  }

  late final _llabs1Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs1 = _llabs1Ptr.asFunction<int Function(int)>();

  div_t div1(
    int __numer,
    int __denom,
  ) {
    return _div1(
      __numer,
      __denom,
    );
  }

  late final _div1Ptr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div1 = _div1Ptr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv1(
    int __numer,
    int __denom,
  ) {
    return _ldiv1(
      __numer,
      __denom,
    );
  }

  late final _ldiv1Ptr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv1 = _ldiv1Ptr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv1(
    int __numer,
    int __denom,
  ) {
    return _lldiv1(
      __numer,
      __denom,
    );
  }

  late final _lldiv1Ptr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv1 = _lldiv1Ptr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt1(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt1(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt1 = _ecvt1Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt1(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt1(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt1 = _fcvt1Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt1(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt1(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt1 = _gcvt1Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r1(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r1(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('ecvt_r');
  late final _ecvt_r1 = _ecvt_r1Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r1(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r1(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('fcvt_r');
  late final _fcvt_r1 = _fcvt_r1Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen1(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen1(
      __s,
      __n,
    );
  }

  late final _mblen1Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mblen');
  late final _mblen1 =
      _mblen1Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc1(
    ffi.Pointer<ffi.Int> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc1(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('mbtowc');
  late final _mbtowc1 = _mbtowc1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb1(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb1(
      __s,
      __wchar,
    );
  }

  late final _wctomb1Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'wctomb');
  late final _wctomb1 =
      _wctomb1Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs1(
    ffi.Pointer<ffi.Int> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs1(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mbstowcs');
  late final _mbstowcs1 = _mbstowcs1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs1(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Int> __pwcs,
    int __n,
  ) {
    return _wcstombs1(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('wcstombs');
  late final _wcstombs1 = _wcstombs1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  int rpmatch1(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch1(
      __response,
    );
  }

  late final _rpmatch1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch1 =
      _rpmatch1Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt1(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt1(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt1 = _getsubopt1Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg1(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg1(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg1 =
      _getloadavg1Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Void> memcpy1(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy1(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpy1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memcpy');
  late final _memcpy1 = _memcpy1Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove1(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove1(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmove1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memmove');
  late final _memmove1 = _memmove1Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy1(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy1(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpy1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memccpy');
  late final _memccpy1 = _memccpy1Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset1(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset1(
      __s,
      __c,
      __n,
    );
  }

  late final _memset1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memset');
  late final _memset1 = _memset1Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp1(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp1(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmp1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('memcmp');
  late final _memcmp1 = _memcmp1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq1(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq1(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeq1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__memcmpeq');
  late final ___memcmpeq1 = ___memcmpeq1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr1(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr1(
      __s,
      __c,
      __n,
    );
  }

  late final _memchr1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memchr');
  late final _memchr1 = _memchr1Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy1(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy1(
      __dest,
      __src,
    );
  }

  late final _strcpy1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy1 = _strcpy1Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy1(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy1(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpy1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncpy');
  late final _strncpy1 = _strncpy1Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat1(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat1(
      __dest,
      __src,
    );
  }

  late final _strcat1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat1 = _strcat1Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat1(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat1(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncat1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncat');
  late final _strncat1 = _strncat1Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp1(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp1(
      __s1,
      __s2,
    );
  }

  late final _strcmp1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp1 = _strcmp1Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp1(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp1(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmp1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncmp');
  late final _strncmp1 = _strncmp1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll1(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll1(
      __s1,
      __s2,
    );
  }

  late final _strcoll1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll1 = _strcoll1Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm1(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm1(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrm1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strxfrm');
  late final _strxfrm1 = _strxfrm1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l1(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l1(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_l1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l1 = _strcoll_l1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l1(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l1(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_l1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strxfrm_l');
  late final _strxfrm_l1 = _strxfrm_l1Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup1(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup1(
      __s,
    );
  }

  late final _strdup1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup1 = _strdup1Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup1(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup1(
      __string,
      __n,
    );
  }

  late final _strndup1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strndup');
  late final _strndup1 = _strndup1Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr1(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr1(
      __s,
      __c,
    );
  }

  late final _strchr1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr1 = _strchr1Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr1(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr1(
      __s,
      __c,
    );
  }

  late final _strrchr1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr1 = _strrchr1Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn1(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn1(
      __s,
      __reject,
    );
  }

  late final _strcspn1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn1 = _strcspn1Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn1(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn1(
      __s,
      __accept,
    );
  }

  late final _strspn1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn1 = _strspn1Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk1(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk1(
      __s,
      __accept,
    );
  }

  late final _strpbrk1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk1 = _strpbrk1Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr1(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr1(
      __haystack,
      __needle,
    );
  }

  late final _strstr1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr1 = _strstr1Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok1(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok1(
      __s,
      __delim,
    );
  }

  late final _strtok1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok1 = _strtok1Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r1(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r1(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_r1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r1 = ___strtok_r1Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r1(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r1(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_r1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r1 = _strtok_r1Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen1(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen1(
      __s,
    );
  }

  late final _strlen1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'strlen');
  late final _strlen1 =
      _strlen1Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen1(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen1(
      __string,
      __maxlen,
    );
  }

  late final _strnlen1Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'strnlen');
  late final _strnlen1 =
      _strnlen1Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror1(
    int __errnum,
  ) {
    return _strerror1(
      __errnum,
    );
  }

  late final _strerror1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror1 =
      _strerror1Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r1(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r1(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_r1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('strerror_r');
  late final _strerror_r1 = _strerror_r1Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l1(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l1(
      __errnum,
      __l,
    );
  }

  late final _strerror_l1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l1 = _strerror_l1Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp1(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp1(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmp1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcmp');
  late final _bcmp1 = _bcmp1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy1(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy1(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopy1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcopy');
  late final _bcopy1 = _bcopy1Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero1(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero1(
      __s,
      __n,
    );
  }

  late final _bzero1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('bzero');
  late final _bzero1 =
      _bzero1Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index1(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index1(
      __s,
      __c,
    );
  }

  late final _index1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index1 = _index1Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex1(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex1(
      __s,
      __c,
    );
  }

  late final _rindex1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex1 = _rindex1Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs1(
    int __i,
  ) {
    return _ffs1(
      __i,
    );
  }

  late final _ffs1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs1 = _ffs1Ptr.asFunction<int Function(int)>();

  int ffsl1(
    int __l,
  ) {
    return _ffsl1(
      __l,
    );
  }

  late final _ffsl1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl1 = _ffsl1Ptr.asFunction<int Function(int)>();

  int ffsll1(
    int __ll,
  ) {
    return _ffsll1(
      __ll,
    );
  }

  late final _ffsll1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll1 = _ffsll1Ptr.asFunction<int Function(int)>();

  int strcasecmp1(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp1(
      __s1,
      __s2,
    );
  }

  late final _strcasecmp1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp1 = _strcasecmp1Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp1(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp1(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmp1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncasecmp');
  late final _strncasecmp1 = _strncasecmp1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l1(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l1(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_l1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l1 = _strcasecmp_l1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l1(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l1(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_l1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l1 = _strncasecmp_l1Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero1(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero1(
      __s,
      __n,
    );
  }

  late final _explicit_bzero1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('explicit_bzero');
  late final _explicit_bzero1 = _explicit_bzero1Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep1(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep1(
      __stringp,
      __delim,
    );
  }

  late final _strsep1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep1 = _strsep1Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal1(
    int __sig,
  ) {
    return _strsignal1(
      __sig,
    );
  }

  late final _strsignal1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal1 =
      _strsignal1Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy1(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy1(
      __dest,
      __src,
    );
  }

  late final ___stpcpy1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy1 = ___stpcpy1Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy1(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy1(
      __dest,
      __src,
    );
  }

  late final _stpcpy1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy1 = _stpcpy1Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy1(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy1(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpy1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('__stpncpy');
  late final ___stpncpy1 = ___stpncpy1Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy1(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy1(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpy1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('stpncpy');
  late final _stpncpy1 = _stpncpy1Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int aes256_cbc_encrypt(
    ffi.Pointer<ffi.UnsignedChar> aes_key,
    ffi.Pointer<ffi.UnsignedChar> iv,
    ffi.Pointer<ffi.UnsignedChar> data,
    int size,
    int pad,
    ffi.Pointer<ffi.UnsignedChar> out,
  ) {
    return _aes256_cbc_encrypt(
      aes_key,
      iv,
      data,
      size,
      pad,
      out,
    );
  }

  late final _aes256_cbc_encryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>)>>('aes256_cbc_encrypt');
  late final _aes256_cbc_encrypt = _aes256_cbc_encryptPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          int,
          ffi.Pointer<ffi.UnsignedChar>)>();

  int aes256_cbc_decrypt(
    ffi.Pointer<ffi.UnsignedChar> aes_key,
    ffi.Pointer<ffi.UnsignedChar> iv,
    ffi.Pointer<ffi.UnsignedChar> data,
    int size,
    int pad,
    ffi.Pointer<ffi.UnsignedChar> out,
  ) {
    return _aes256_cbc_decrypt(
      aes_key,
      iv,
      data,
      size,
      pad,
      out,
    );
  }

  late final _aes256_cbc_decryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>)>>('aes256_cbc_decrypt');
  late final _aes256_cbc_decrypt = _aes256_cbc_decryptPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          int,
          ffi.Pointer<ffi.UnsignedChar>)>();

  int remove2(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove2(
      __filename,
    );
  }

  late final _remove2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove2 =
      _remove2Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename2(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename2(
      __old,
      __new,
    );
  }

  late final _rename2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename2 = _rename2Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat2(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat2(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameat2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat2 = _renameat2Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose2(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose2(
      __stream,
    );
  }

  late final _fclose2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose2 =
      _fclose2Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile2() {
    return _tmpfile2();
  }

  late final _tmpfile2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile2 =
      _tmpfile2Ptr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam2(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam2(
      arg0,
    );
  }

  late final _tmpnam2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam2 = _tmpnam2Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r2(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r2(
      __s,
    );
  }

  late final _tmpnam_r2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r2 = _tmpnam_r2Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam2(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam2(
      __dir,
      __pfx,
    );
  }

  late final _tempnam2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam2 = _tempnam2Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush2(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush2(
      __stream,
    );
  }

  late final _fflush2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush2 =
      _fflush2Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked2(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked2(
      __stream,
    );
  }

  late final _fflush_unlocked2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked2 =
      _fflush_unlocked2Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen2(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen2(
      __filename,
      __modes,
    );
  }

  late final _fopen2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen2 = _fopen2Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen2(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen2(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopen2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen2 = _freopen2Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen2(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen2(
      __fd,
      __modes,
    );
  }

  late final _fdopen2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen2 = _fdopen2Ptr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen2(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen2(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopen2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen2 = _fmemopen2Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream2(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Int> __sizeloc,
  ) {
    return _open_memstream2(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstream2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('open_memstream');
  late final _open_memstream2 = _open_memstream2Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void setbuf2(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf2(
      __stream,
      __buf,
    );
  }

  late final _setbuf2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf2 = _setbuf2Ptr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf2(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf2(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbuf2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('setvbuf');
  late final _setvbuf2 = _setvbuf2Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer2(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer2(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbuffer2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer2 = _setbuffer2Ptr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf2(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf2(
      __stream,
    );
  }

  late final _setlinebuf2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf2 =
      _setlinebuf2Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf2(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf2(
      __stream,
      __format,
    );
  }

  late final _fprintf2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf2 = _fprintf2Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf2(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf2(
      __format,
    );
  }

  late final _printf2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf2 =
      _printf2Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf2(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf2(
      __s,
      __format,
    );
  }

  late final _sprintf2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf2 = _sprintf2Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf2(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfprintf2(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintf2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfprintf');
  late final _vfprintf2 = _vfprintf2Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vprintf2(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vprintf2(
      __format,
      __arg,
    );
  }

  late final _vprintf2Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vprintf');
  late final _vprintf2 =
      _vprintf2Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsprintf2(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsprintf2(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintf2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsprintf');
  late final _vsprintf2 = _vsprintf2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int snprintf2(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf2(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintf2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf2 = _snprintf2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf2(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsnprintf2(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintf2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('vsnprintf');
  late final _vsnprintf2 = _vsnprintf2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int vdprintf2(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    int __arg,
  ) {
    return _vdprintf2(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintf2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('vdprintf');
  late final _vdprintf2 =
      _vdprintf2Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int dprintf2(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf2(
      __fd,
      __fmt,
    );
  }

  late final _dprintf2Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf2 =
      _dprintf2Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf4(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf4(
      __stream,
      __format,
    );
  }

  late final _fscanf4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf4 = _fscanf4Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf4(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf4(
      __format,
    );
  }

  late final _scanf4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf4 =
      _scanf4Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf4(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf4(
      __s,
      __format,
    );
  }

  late final _sscanf4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf4 = _sscanf4Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fscanf5(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf5(
      __stream,
      __format,
    );
  }

  late final _fscanf5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf5 = _fscanf5Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf5(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf5(
      __format,
    );
  }

  late final _scanf5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf5 =
      _scanf5Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf5(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf5(
      __s,
      __format,
    );
  }

  late final _sscanf5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf5 = _sscanf5Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf4(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf4(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf4 = _vfscanf4Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf4(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf4(
      __format,
      __arg,
    );
  }

  late final _vscanf4Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf4 =
      _vscanf4Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf4(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf4(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf4 = _vsscanf4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int vfscanf5(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf5(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf5 = _vfscanf5Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf5(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf5(
      __format,
      __arg,
    );
  }

  late final _vscanf5Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf5 =
      _vscanf5Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf5(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf5(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf5 = _vsscanf5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fgetc2(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc2(
      __stream,
    );
  }

  late final _fgetc2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc2 = _fgetc2Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc2(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc2(
      __stream,
    );
  }

  late final _getc2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc2 = _getc2Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar2() {
    return _getchar2();
  }

  late final _getchar2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar2 = _getchar2Ptr.asFunction<int Function()>();

  int getc_unlocked2(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked2(
      __stream,
    );
  }

  late final _getc_unlocked2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked2 =
      _getc_unlocked2Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked2() {
    return _getchar_unlocked2();
  }

  late final _getchar_unlocked2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked2 =
      _getchar_unlocked2Ptr.asFunction<int Function()>();

  int fgetc_unlocked2(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked2(
      __stream,
    );
  }

  late final _fgetc_unlocked2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked2 =
      _fgetc_unlocked2Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc2(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc2(
      __c,
      __stream,
    );
  }

  late final _fputc2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc2 =
      _fputc2Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc2(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc2(
      __c,
      __stream,
    );
  }

  late final _putc2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc2 =
      _putc2Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar2(
    int __c,
  ) {
    return _putchar2(
      __c,
    );
  }

  late final _putchar2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar2 = _putchar2Ptr.asFunction<int Function(int)>();

  int fputc_unlocked2(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked2(
      __c,
      __stream,
    );
  }

  late final _fputc_unlocked2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked2 =
      _fputc_unlocked2Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked2(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked2(
      __c,
      __stream,
    );
  }

  late final _putc_unlocked2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked2 =
      _putc_unlocked2Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked2(
    int __c,
  ) {
    return _putchar_unlocked2(
      __c,
    );
  }

  late final _putchar_unlocked2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked2 =
      _putchar_unlocked2Ptr.asFunction<int Function(int)>();

  int getw2(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw2(
      __stream,
    );
  }

  late final _getw2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw2 = _getw2Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw2(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw2(
      __w,
      __stream,
    );
  }

  late final _putw2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw2 =
      _putw2Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets2(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets2(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgets2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets2 = _fgets2Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim2(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim2(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelim2Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim2 = ___getdelim2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getdelim2(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim2(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelim2Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim2 = _getdelim2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getline2(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline2(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getline2Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<FILE>)>>('getline');
  late final _getline2 = _getline2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<FILE>)>();

  int fputs2(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs2(
      __s,
      __stream,
    );
  }

  late final _fputs2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs2 = _fputs2Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts2(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts2(
      __s,
    );
  }

  late final _puts2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts2 =
      _puts2Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc2(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc2(
      __c,
      __stream,
    );
  }

  late final _ungetc2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc2 =
      _ungetc2Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread2(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread2(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread2 = _fread2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite2(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite2(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwrite2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite2 = _fwrite2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked2(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked2(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlocked2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked2 = _fread_unlocked2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked2(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked2(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlocked2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked2 = _fwrite_unlocked2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek2(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek2(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseek2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek2 =
      _fseek2Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell2(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell2(
      __stream,
    );
  }

  late final _ftell2Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell2 = _ftell2Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind2(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind2(
      __stream,
    );
  }

  late final _rewind2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind2 =
      _rewind2Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko2(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko2(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseeko2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko2 =
      _fseeko2Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello2(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello2(
      __stream,
    );
  }

  late final _ftello2Ptr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello2 =
      _ftello2Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos2(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos2(
      __stream,
      __pos,
    );
  }

  late final _fgetpos2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos2 = _fgetpos2Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos2(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos2(
      __stream,
      __pos,
    );
  }

  late final _fsetpos2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos2 = _fsetpos2Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr2(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr2(
      __stream,
    );
  }

  late final _clearerr2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr2 =
      _clearerr2Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof2(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof2(
      __stream,
    );
  }

  late final _feof2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof2 = _feof2Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror2(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror2(
      __stream,
    );
  }

  late final _ferror2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror2 =
      _ferror2Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked2(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked2(
      __stream,
    );
  }

  late final _clearerr_unlocked2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked2 =
      _clearerr_unlocked2Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked2(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked2(
      __stream,
    );
  }

  late final _feof_unlocked2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked2 =
      _feof_unlocked2Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked2(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked2(
      __stream,
    );
  }

  late final _ferror_unlocked2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked2 =
      _ferror_unlocked2Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror2(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror2(
      __s,
    );
  }

  late final _perror2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror2 =
      _perror2Ptr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno2(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno2(
      __stream,
    );
  }

  late final _fileno2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno2 =
      _fileno2Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked2(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked2(
      __stream,
    );
  }

  late final _fileno_unlocked2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked2 =
      _fileno_unlocked2Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose2(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose2(
      __stream,
    );
  }

  late final _pclose2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose2 =
      _pclose2Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen2(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen2(
      __command,
      __modes,
    );
  }

  late final _popen2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen2 = _popen2Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid2(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid2(
      __s,
    );
  }

  late final _ctermid2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid2 = _ctermid2Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile2(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile2(
      __stream,
    );
  }

  late final _flockfile2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile2 =
      _flockfile2Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile2(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile2(
      __stream,
    );
  }

  late final _ftrylockfile2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile2 =
      _ftrylockfile2Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile2(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile2(
      __stream,
    );
  }

  late final _funlockfile2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile2 =
      _funlockfile2Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow2(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow2(
      arg0,
    );
  }

  late final ___uflow2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow2 =
      ___uflow2Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow2(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow2(
      arg0,
      arg1,
    );
  }

  late final ___overflow2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow2 =
      ___overflow2Ptr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __ctype_get_mb_cur_max2() {
    return ___ctype_get_mb_cur_max2();
  }

  late final ___ctype_get_mb_cur_max2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max2 =
      ___ctype_get_mb_cur_max2Ptr.asFunction<int Function()>();

  double atof2(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof2(
      __nptr,
    );
  }

  late final _atof2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof2 =
      _atof2Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi2(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi2(
      __nptr,
    );
  }

  late final _atoi2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi2 =
      _atoi2Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol2(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol2(
      __nptr,
    );
  }

  late final _atol2Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol2 =
      _atol2Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll2(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll2(
      __nptr,
    );
  }

  late final _atoll2Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll2 =
      _atoll2Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod2(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod2(
      __nptr,
      __endptr,
    );
  }

  late final _strtod2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod2 = _strtod2Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof2(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof2(
      __nptr,
      __endptr,
    );
  }

  late final _strtof2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof2 = _strtof2Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol2(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol2(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol2 = _strtol2Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul2(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul2(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul2 = _strtoul2Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq2(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq2(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq2 = _strtoq2Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq2(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq2(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq2 = _strtouq2Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll2(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll2(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll2 = _strtoll2Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull2(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull2(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull2 = _strtoull2Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a2(
    int __n,
  ) {
    return _l64a2(
      __n,
    );
  }

  late final _l64a2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a2 =
      _l64a2Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l2(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l2(
      __s,
    );
  }

  late final _a64l2Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l2 =
      _a64l2Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select2(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select2(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select2 = _select2Ptr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect2(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect2(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect2 = _pselect2Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random2() {
    return _random2();
  }

  late final _random2Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random2 = _random2Ptr.asFunction<int Function()>();

  void srandom2(
    int __seed,
  ) {
    return _srandom2(
      __seed,
    );
  }

  late final _srandom2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom2 = _srandom2Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate2(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate2(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int)>>('initstate');
  late final _initstate2 = _initstate2Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate2(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate2(
      __statebuf,
    );
  }

  late final _setstate2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate2 = _setstate2Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r2(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r2(
      __buf,
      __result,
    );
  }

  late final _random_r2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r2 = _random_r2Ptr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r2(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r2(
      __seed,
      __buf,
    );
  }

  late final _srandom_r2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r2 =
      _srandom_r2Ptr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r2(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r2(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r2 = _initstate_r2Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r2(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r2(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r2 = _setstate_r2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand2() {
    return _rand2();
  }

  late final _rand2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand2 = _rand2Ptr.asFunction<int Function()>();

  void srand2(
    int __seed,
  ) {
    return _srand2(
      __seed,
    );
  }

  late final _srand2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand2 = _srand2Ptr.asFunction<void Function(int)>();

  int rand_r2(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r2(
      __seed,
    );
  }

  late final _rand_r2Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r2 =
      _rand_r2Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand482() {
    return _drand482();
  }

  late final _drand482Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand482 = _drand482Ptr.asFunction<double Function()>();

  double erand482(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand482(
      __xsubi,
    );
  }

  late final _erand482Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand482 = _erand482Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand482() {
    return _lrand482();
  }

  late final _lrand482Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand482 = _lrand482Ptr.asFunction<int Function()>();

  int nrand482(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand482(
      __xsubi,
    );
  }

  late final _nrand482Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand482 =
      _nrand482Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand482() {
    return _mrand482();
  }

  late final _mrand482Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand482 = _mrand482Ptr.asFunction<int Function()>();

  int jrand482(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand482(
      __xsubi,
    );
  }

  late final _jrand482Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand482 =
      _jrand482Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand482(
    int __seedval,
  ) {
    return _srand482(
      __seedval,
    );
  }

  late final _srand482Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand482 = _srand482Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed482(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed482(
      __seed16v,
    );
  }

  late final _seed482Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed482 = _seed482Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong482(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong482(
      __param,
    );
  }

  late final _lcong482Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong482 =
      _lcong482Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r2(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r2(
      __buffer,
      __result,
    );
  }

  late final _drand48_r2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r2 = _drand48_r2Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r2(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r2(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r2 = _erand48_r2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r2(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r2(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r2 = _lrand48_r2Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r2(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r2(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r2 = _nrand48_r2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r2(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r2(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r2 = _mrand48_r2Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r2(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r2(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r2 = _jrand48_r2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r2(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r2(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r2 =
      _srand48_r2Ptr.asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r2(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r2(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r2 = _seed48_r2Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r2(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r2(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r2 = _lcong48_r2Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int arc4random2() {
    return _arc4random2();
  }

  late final _arc4random2Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random2 = _arc4random2Ptr.asFunction<int Function()>();

  void arc4random_buf2(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf2(
      __buf,
      __size,
    );
  }

  late final _arc4random_buf2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('arc4random_buf');
  late final _arc4random_buf2 = _arc4random_buf2Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform2(
    int __upper_bound,
  ) {
    return _arc4random_uniform2(
      __upper_bound,
    );
  }

  late final _arc4random_uniform2Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
          'arc4random_uniform');
  late final _arc4random_uniform2 =
      _arc4random_uniform2Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc2(
    int __size,
  ) {
    return _malloc2(
      __size,
    );
  }

  late final _malloc2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'malloc');
  late final _malloc2 =
      _malloc2Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc2(
    int __nmemb,
    int __size,
  ) {
    return _calloc2(
      __nmemb,
      __size,
    );
  }

  late final _calloc2Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'calloc');
  late final _calloc2 =
      _calloc2Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc2(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc2(
      __ptr,
      __size,
    );
  }

  late final _realloc2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('realloc');
  late final _realloc2 = _realloc2Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free2(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free2(
      __ptr,
    );
  }

  late final _free2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free2 =
      _free2Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray4(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray4(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray4 = _reallocarray4Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray5(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray5(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray5 = _reallocarray5Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca2(
    int __size,
  ) {
    return _alloca2(
      __size,
    );
  }

  late final _alloca2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'alloca');
  late final _alloca2 =
      _alloca2Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc2(
    int __size,
  ) {
    return _valloc2(
      __size,
    );
  }

  late final _valloc2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'valloc');
  late final _valloc2 =
      _valloc2Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign2(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign2(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int,
              ffi.Int)>>('posix_memalign');
  late final _posix_memalign2 = _posix_memalign2Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc2(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc2(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc2Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'aligned_alloc');
  late final _aligned_alloc2 =
      _aligned_alloc2Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort2() {
    return _abort2();
  }

  late final _abort2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort2 = _abort2Ptr.asFunction<void Function()>();

  int atexit2(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit2(
      __func,
    );
  }

  late final _atexit2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit2 = _atexit2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit2(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit2(
      __func,
    );
  }

  late final _at_quick_exit2Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit2 = _at_quick_exit2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit2(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit2(
      __func,
      __arg,
    );
  }

  late final _on_exit2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit2 = _on_exit2Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit2(
    int __status,
  ) {
    return _exit2(
      __status,
    );
  }

  late final _exit2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit2 = _exit2Ptr.asFunction<void Function(int)>();

  void quick_exit2(
    int __status,
  ) {
    return _quick_exit2(
      __status,
    );
  }

  late final _quick_exit2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit2 = _quick_exit2Ptr.asFunction<void Function(int)>();

  void _Exit2(
    int __status,
  ) {
    return __Exit2(
      __status,
    );
  }

  late final __Exit2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit2 = __Exit2Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv2(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv2(
      __name,
    );
  }

  late final _getenv2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv2 = _getenv2Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv2(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv2(
      __string,
    );
  }

  late final _putenv2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv2 =
      _putenv2Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv2(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv2(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv2 = _setenv2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv2(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv2(
      __name,
    );
  }

  late final _unsetenv2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv2 =
      _unsetenv2Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv2() {
    return _clearenv2();
  }

  late final _clearenv2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv2 = _clearenv2Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp2(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp2(
      __template,
    );
  }

  late final _mktemp2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp2 = _mktemp2Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp2(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp2(
      __template,
    );
  }

  late final _mkstemp2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp2 =
      _mkstemp2Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps2(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps2(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps2Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps2 =
      _mkstemps2Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp2(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp2(
      __template,
    );
  }

  late final _mkdtemp2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp2 = _mkdtemp2Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system2(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system2(
      __command,
    );
  }

  late final _system2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system2 =
      _system2Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath2(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath2(
      __name,
      __resolved,
    );
  }

  late final _realpath2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath2 = _realpath2Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch2(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch2(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              __compar_fn_t)>>('bsearch');
  late final _bsearch2 = _bsearch2Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort2(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort2(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              __compar_fn_t)>>('qsort');
  late final _qsort2 = _qsort2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs2(
    int __x,
  ) {
    return _abs2(
      __x,
    );
  }

  late final _abs2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs2 = _abs2Ptr.asFunction<int Function(int)>();

  int labs2(
    int __x,
  ) {
    return _labs2(
      __x,
    );
  }

  late final _labs2Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs2 = _labs2Ptr.asFunction<int Function(int)>();

  int llabs2(
    int __x,
  ) {
    return _llabs2(
      __x,
    );
  }

  late final _llabs2Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs2 = _llabs2Ptr.asFunction<int Function(int)>();

  div_t div2(
    int __numer,
    int __denom,
  ) {
    return _div2(
      __numer,
      __denom,
    );
  }

  late final _div2Ptr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div2 = _div2Ptr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv2(
    int __numer,
    int __denom,
  ) {
    return _ldiv2(
      __numer,
      __denom,
    );
  }

  late final _ldiv2Ptr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv2 = _ldiv2Ptr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv2(
    int __numer,
    int __denom,
  ) {
    return _lldiv2(
      __numer,
      __denom,
    );
  }

  late final _lldiv2Ptr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv2 = _lldiv2Ptr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt2(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt2(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt2 = _ecvt2Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt2(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt2(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt2 = _fcvt2Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt2(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt2(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt2 = _gcvt2Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r2(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r2(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('ecvt_r');
  late final _ecvt_r2 = _ecvt_r2Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r2(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r2(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('fcvt_r');
  late final _fcvt_r2 = _fcvt_r2Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen2(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen2(
      __s,
      __n,
    );
  }

  late final _mblen2Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mblen');
  late final _mblen2 =
      _mblen2Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc2(
    ffi.Pointer<ffi.Int> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc2(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('mbtowc');
  late final _mbtowc2 = _mbtowc2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb2(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb2(
      __s,
      __wchar,
    );
  }

  late final _wctomb2Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'wctomb');
  late final _wctomb2 =
      _wctomb2Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs2(
    ffi.Pointer<ffi.Int> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs2(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mbstowcs');
  late final _mbstowcs2 = _mbstowcs2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs2(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Int> __pwcs,
    int __n,
  ) {
    return _wcstombs2(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('wcstombs');
  late final _wcstombs2 = _wcstombs2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  int rpmatch2(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch2(
      __response,
    );
  }

  late final _rpmatch2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch2 =
      _rpmatch2Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt2(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt2(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt2 = _getsubopt2Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg2(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg2(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg2 =
      _getloadavg2Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Void> memcpy2(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy2(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpy2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memcpy');
  late final _memcpy2 = _memcpy2Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove2(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove2(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmove2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memmove');
  late final _memmove2 = _memmove2Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy2(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy2(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpy2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memccpy');
  late final _memccpy2 = _memccpy2Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset2(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset2(
      __s,
      __c,
      __n,
    );
  }

  late final _memset2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memset');
  late final _memset2 = _memset2Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp2(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp2(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmp2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('memcmp');
  late final _memcmp2 = _memcmp2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq2(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq2(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeq2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__memcmpeq');
  late final ___memcmpeq2 = ___memcmpeq2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr2(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr2(
      __s,
      __c,
      __n,
    );
  }

  late final _memchr2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memchr');
  late final _memchr2 = _memchr2Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy2(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy2(
      __dest,
      __src,
    );
  }

  late final _strcpy2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy2 = _strcpy2Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy2(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy2(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpy2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncpy');
  late final _strncpy2 = _strncpy2Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat2(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat2(
      __dest,
      __src,
    );
  }

  late final _strcat2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat2 = _strcat2Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat2(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat2(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncat2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncat');
  late final _strncat2 = _strncat2Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp2(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp2(
      __s1,
      __s2,
    );
  }

  late final _strcmp2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp2 = _strcmp2Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp2(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp2(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmp2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncmp');
  late final _strncmp2 = _strncmp2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll2(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll2(
      __s1,
      __s2,
    );
  }

  late final _strcoll2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll2 = _strcoll2Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm2(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm2(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrm2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strxfrm');
  late final _strxfrm2 = _strxfrm2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l2(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l2(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_l2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l2 = _strcoll_l2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l2(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l2(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_l2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strxfrm_l');
  late final _strxfrm_l2 = _strxfrm_l2Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup2(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup2(
      __s,
    );
  }

  late final _strdup2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup2 = _strdup2Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup2(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup2(
      __string,
      __n,
    );
  }

  late final _strndup2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strndup');
  late final _strndup2 = _strndup2Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr2(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr2(
      __s,
      __c,
    );
  }

  late final _strchr2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr2 = _strchr2Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr2(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr2(
      __s,
      __c,
    );
  }

  late final _strrchr2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr2 = _strrchr2Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn2(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn2(
      __s,
      __reject,
    );
  }

  late final _strcspn2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn2 = _strcspn2Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn2(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn2(
      __s,
      __accept,
    );
  }

  late final _strspn2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn2 = _strspn2Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk2(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk2(
      __s,
      __accept,
    );
  }

  late final _strpbrk2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk2 = _strpbrk2Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr2(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr2(
      __haystack,
      __needle,
    );
  }

  late final _strstr2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr2 = _strstr2Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok2(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok2(
      __s,
      __delim,
    );
  }

  late final _strtok2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok2 = _strtok2Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r2(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r2(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_r2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r2 = ___strtok_r2Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r2(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r2(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_r2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r2 = _strtok_r2Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen2(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen2(
      __s,
    );
  }

  late final _strlen2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'strlen');
  late final _strlen2 =
      _strlen2Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen2(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen2(
      __string,
      __maxlen,
    );
  }

  late final _strnlen2Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'strnlen');
  late final _strnlen2 =
      _strnlen2Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror2(
    int __errnum,
  ) {
    return _strerror2(
      __errnum,
    );
  }

  late final _strerror2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror2 =
      _strerror2Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r2(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r2(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_r2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('strerror_r');
  late final _strerror_r2 = _strerror_r2Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l2(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l2(
      __errnum,
      __l,
    );
  }

  late final _strerror_l2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l2 = _strerror_l2Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp2(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp2(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmp2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcmp');
  late final _bcmp2 = _bcmp2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy2(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy2(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopy2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcopy');
  late final _bcopy2 = _bcopy2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero2(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero2(
      __s,
      __n,
    );
  }

  late final _bzero2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('bzero');
  late final _bzero2 =
      _bzero2Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index2(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index2(
      __s,
      __c,
    );
  }

  late final _index2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index2 = _index2Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex2(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex2(
      __s,
      __c,
    );
  }

  late final _rindex2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex2 = _rindex2Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs2(
    int __i,
  ) {
    return _ffs2(
      __i,
    );
  }

  late final _ffs2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs2 = _ffs2Ptr.asFunction<int Function(int)>();

  int ffsl2(
    int __l,
  ) {
    return _ffsl2(
      __l,
    );
  }

  late final _ffsl2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl2 = _ffsl2Ptr.asFunction<int Function(int)>();

  int ffsll2(
    int __ll,
  ) {
    return _ffsll2(
      __ll,
    );
  }

  late final _ffsll2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll2 = _ffsll2Ptr.asFunction<int Function(int)>();

  int strcasecmp2(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp2(
      __s1,
      __s2,
    );
  }

  late final _strcasecmp2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp2 = _strcasecmp2Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp2(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp2(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmp2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncasecmp');
  late final _strncasecmp2 = _strncasecmp2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l2(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l2(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_l2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l2 = _strcasecmp_l2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l2(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l2(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_l2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l2 = _strncasecmp_l2Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero2(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero2(
      __s,
      __n,
    );
  }

  late final _explicit_bzero2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('explicit_bzero');
  late final _explicit_bzero2 = _explicit_bzero2Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep2(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep2(
      __stringp,
      __delim,
    );
  }

  late final _strsep2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep2 = _strsep2Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal2(
    int __sig,
  ) {
    return _strsignal2(
      __sig,
    );
  }

  late final _strsignal2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal2 =
      _strsignal2Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy2(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy2(
      __dest,
      __src,
    );
  }

  late final ___stpcpy2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy2 = ___stpcpy2Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy2(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy2(
      __dest,
      __src,
    );
  }

  late final _stpcpy2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy2 = _stpcpy2Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy2(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy2(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpy2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('__stpncpy');
  late final ___stpncpy2 = ___stpncpy2Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy2(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy2(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpy2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('stpncpy');
  late final _stpncpy2 = _stpncpy2Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  late final ffi.Pointer<dogecoin_chainparams> _dogecoin_chainparams_main =
      _lookup<dogecoin_chainparams>('dogecoin_chainparams_main');

  dogecoin_chainparams get dogecoin_chainparams_main =>
      _dogecoin_chainparams_main.ref;

  late final ffi.Pointer<dogecoin_chainparams> _dogecoin_chainparams_test =
      _lookup<dogecoin_chainparams>('dogecoin_chainparams_test');

  dogecoin_chainparams get dogecoin_chainparams_test =>
      _dogecoin_chainparams_test.ref;

  late final ffi.Pointer<dogecoin_chainparams> _dogecoin_chainparams_regtest =
      _lookup<dogecoin_chainparams>('dogecoin_chainparams_regtest');

  dogecoin_chainparams get dogecoin_chainparams_regtest =>
      _dogecoin_chainparams_regtest.ref;

  late final ffi.Pointer<ffi.Pointer<dogecoin_checkpoint>>
      _dogecoin_mainnet_checkpoint_array =
      _lookup<ffi.Pointer<dogecoin_checkpoint>>(
          'dogecoin_mainnet_checkpoint_array');

  ffi.Pointer<dogecoin_checkpoint> get dogecoin_mainnet_checkpoint_array =>
      _dogecoin_mainnet_checkpoint_array.value;

  set dogecoin_mainnet_checkpoint_array(
          ffi.Pointer<dogecoin_checkpoint> value) =>
      _dogecoin_mainnet_checkpoint_array.value = value;

  late final ffi.Pointer<ffi.Pointer<dogecoin_checkpoint>>
      _dogecoin_testnet_checkpoint_array =
      _lookup<ffi.Pointer<dogecoin_checkpoint>>(
          'dogecoin_testnet_checkpoint_array');

  ffi.Pointer<dogecoin_checkpoint> get dogecoin_testnet_checkpoint_array =>
      _dogecoin_testnet_checkpoint_array.value;

  set dogecoin_testnet_checkpoint_array(
          ffi.Pointer<dogecoin_checkpoint> value) =>
      _dogecoin_testnet_checkpoint_array.value = value;

  ffi.Pointer<dogecoin_chainparams> chain_from_b58_prefix(
    ffi.Pointer<ffi.Char> address,
  ) {
    return _chain_from_b58_prefix(
      address,
    );
  }

  late final _chain_from_b58_prefixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<dogecoin_chainparams> Function(
              ffi.Pointer<ffi.Char>)>>('chain_from_b58_prefix');
  late final _chain_from_b58_prefix = _chain_from_b58_prefixPtr.asFunction<
      ffi.Pointer<dogecoin_chainparams> Function(ffi.Pointer<ffi.Char>)>();

  int chain_from_b58_prefix_bool(
    ffi.Pointer<ffi.Char> address,
  ) {
    return _chain_from_b58_prefix_bool(
      address,
    );
  }

  late final _chain_from_b58_prefix_boolPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'chain_from_b58_prefix_bool');
  late final _chain_from_b58_prefix_bool = _chain_from_b58_prefix_boolPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int dogecoin_base58_encode_check(
    ffi.Pointer<ffi.Uint8> data,
    int len,
    ffi.Pointer<ffi.Char> str,
    int base58_length,
  ) {
    return _dogecoin_base58_encode_check(
      data,
      len,
      str,
      base58_length,
    );
  }

  late final _dogecoin_base58_encode_checkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('dogecoin_base58_encode_check');
  late final _dogecoin_base58_encode_check =
      _dogecoin_base58_encode_checkPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Char>, int)>();

  int dogecoin_base58_decode_check(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.Uint8> data,
    int datalen,
  ) {
    return _dogecoin_base58_decode_check(
      str,
      data,
      datalen,
    );
  }

  late final _dogecoin_base58_decode_checkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('dogecoin_base58_decode_check');
  late final _dogecoin_base58_decode_check =
      _dogecoin_base58_decode_checkPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>, int)>();

  int dogecoin_base58_encode(
    ffi.Pointer<ffi.Char> b58,
    ffi.Pointer<ffi.Int> b58sz,
    ffi.Pointer<ffi.Void> data,
    int binsz,
  ) {
    return _dogecoin_base58_encode(
      b58,
      b58sz,
      data,
      binsz,
    );
  }

  late final _dogecoin_base58_encodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('dogecoin_base58_encode');
  late final _dogecoin_base58_encode = _dogecoin_base58_encodePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Void>, int)>();

  int dogecoin_base58_decode(
    ffi.Pointer<ffi.Void> bin,
    ffi.Pointer<ffi.Int> binszp,
    ffi.Pointer<ffi.Char> b58,
    int b58sz,
  ) {
    return _dogecoin_base58_decode(
      bin,
      binszp,
      b58,
      b58sz,
    );
  }

  late final _dogecoin_base58_decodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('dogecoin_base58_decode');
  late final _dogecoin_base58_decode = _dogecoin_base58_decodePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int dogecoin_p2pkh_addr_from_hash160(
    ffi.Pointer<ffi.Uint8> hashin,
    ffi.Pointer<dogecoin_chainparams> chain,
    ffi.Pointer<ffi.Char> addrout,
    int len,
  ) {
    return _dogecoin_p2pkh_addr_from_hash160(
      hashin,
      chain,
      addrout,
      len,
    );
  }

  late final _dogecoin_p2pkh_addr_from_hash160Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('dogecoin_p2pkh_addr_from_hash160');
  late final _dogecoin_p2pkh_addr_from_hash160 =
      _dogecoin_p2pkh_addr_from_hash160Ptr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<dogecoin_chainparams>, ffi.Pointer<ffi.Char>, int)>();

  int dogecoin_p2sh_addr_from_hash160(
    ffi.Pointer<ffi.Uint8> hashin,
    ffi.Pointer<dogecoin_chainparams> chain,
    ffi.Pointer<ffi.Char> addrout,
    int len,
  ) {
    return _dogecoin_p2sh_addr_from_hash160(
      hashin,
      chain,
      addrout,
      len,
    );
  }

  late final _dogecoin_p2sh_addr_from_hash160Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('dogecoin_p2sh_addr_from_hash160');
  late final _dogecoin_p2sh_addr_from_hash160 =
      _dogecoin_p2sh_addr_from_hash160Ptr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<dogecoin_chainparams>, ffi.Pointer<ffi.Char>, int)>();

  int remove3(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove3(
      __filename,
    );
  }

  late final _remove3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove3 =
      _remove3Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename3(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename3(
      __old,
      __new,
    );
  }

  late final _rename3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename3 = _rename3Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat3(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat3(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameat3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat3 = _renameat3Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose3(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose3(
      __stream,
    );
  }

  late final _fclose3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose3 =
      _fclose3Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile3() {
    return _tmpfile3();
  }

  late final _tmpfile3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile3 =
      _tmpfile3Ptr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam3(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam3(
      arg0,
    );
  }

  late final _tmpnam3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam3 = _tmpnam3Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r3(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r3(
      __s,
    );
  }

  late final _tmpnam_r3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r3 = _tmpnam_r3Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam3(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam3(
      __dir,
      __pfx,
    );
  }

  late final _tempnam3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam3 = _tempnam3Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush3(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush3(
      __stream,
    );
  }

  late final _fflush3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush3 =
      _fflush3Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked3(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked3(
      __stream,
    );
  }

  late final _fflush_unlocked3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked3 =
      _fflush_unlocked3Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen3(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen3(
      __filename,
      __modes,
    );
  }

  late final _fopen3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen3 = _fopen3Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen3(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen3(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopen3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen3 = _freopen3Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen3(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen3(
      __fd,
      __modes,
    );
  }

  late final _fdopen3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen3 = _fdopen3Ptr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen3(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen3(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopen3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen3 = _fmemopen3Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream3(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Int> __sizeloc,
  ) {
    return _open_memstream3(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstream3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('open_memstream');
  late final _open_memstream3 = _open_memstream3Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void setbuf3(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf3(
      __stream,
      __buf,
    );
  }

  late final _setbuf3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf3 = _setbuf3Ptr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf3(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf3(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbuf3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('setvbuf');
  late final _setvbuf3 = _setvbuf3Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer3(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer3(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbuffer3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer3 = _setbuffer3Ptr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf3(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf3(
      __stream,
    );
  }

  late final _setlinebuf3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf3 =
      _setlinebuf3Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf3(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf3(
      __stream,
      __format,
    );
  }

  late final _fprintf3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf3 = _fprintf3Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf3(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf3(
      __format,
    );
  }

  late final _printf3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf3 =
      _printf3Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf3(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf3(
      __s,
      __format,
    );
  }

  late final _sprintf3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf3 = _sprintf3Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf3(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfprintf3(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintf3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfprintf');
  late final _vfprintf3 = _vfprintf3Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vprintf3(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vprintf3(
      __format,
      __arg,
    );
  }

  late final _vprintf3Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vprintf');
  late final _vprintf3 =
      _vprintf3Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsprintf3(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsprintf3(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintf3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsprintf');
  late final _vsprintf3 = _vsprintf3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int snprintf3(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf3(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintf3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf3 = _snprintf3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf3(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsnprintf3(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintf3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('vsnprintf');
  late final _vsnprintf3 = _vsnprintf3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int vdprintf3(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    int __arg,
  ) {
    return _vdprintf3(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintf3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('vdprintf');
  late final _vdprintf3 =
      _vdprintf3Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int dprintf3(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf3(
      __fd,
      __fmt,
    );
  }

  late final _dprintf3Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf3 =
      _dprintf3Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf6(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf6(
      __stream,
      __format,
    );
  }

  late final _fscanf6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf6 = _fscanf6Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf6(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf6(
      __format,
    );
  }

  late final _scanf6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf6 =
      _scanf6Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf6(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf6(
      __s,
      __format,
    );
  }

  late final _sscanf6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf6 = _sscanf6Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fscanf7(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf7(
      __stream,
      __format,
    );
  }

  late final _fscanf7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf7 = _fscanf7Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf7(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf7(
      __format,
    );
  }

  late final _scanf7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf7 =
      _scanf7Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf7(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf7(
      __s,
      __format,
    );
  }

  late final _sscanf7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf7 = _sscanf7Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf6(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf6(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf6 = _vfscanf6Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf6(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf6(
      __format,
      __arg,
    );
  }

  late final _vscanf6Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf6 =
      _vscanf6Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf6(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf6(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf6 = _vsscanf6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int vfscanf7(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf7(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf7 = _vfscanf7Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf7(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf7(
      __format,
      __arg,
    );
  }

  late final _vscanf7Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf7 =
      _vscanf7Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf7(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf7(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf7 = _vsscanf7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fgetc3(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc3(
      __stream,
    );
  }

  late final _fgetc3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc3 = _fgetc3Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc3(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc3(
      __stream,
    );
  }

  late final _getc3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc3 = _getc3Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar3() {
    return _getchar3();
  }

  late final _getchar3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar3 = _getchar3Ptr.asFunction<int Function()>();

  int getc_unlocked3(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked3(
      __stream,
    );
  }

  late final _getc_unlocked3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked3 =
      _getc_unlocked3Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked3() {
    return _getchar_unlocked3();
  }

  late final _getchar_unlocked3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked3 =
      _getchar_unlocked3Ptr.asFunction<int Function()>();

  int fgetc_unlocked3(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked3(
      __stream,
    );
  }

  late final _fgetc_unlocked3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked3 =
      _fgetc_unlocked3Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc3(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc3(
      __c,
      __stream,
    );
  }

  late final _fputc3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc3 =
      _fputc3Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc3(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc3(
      __c,
      __stream,
    );
  }

  late final _putc3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc3 =
      _putc3Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar3(
    int __c,
  ) {
    return _putchar3(
      __c,
    );
  }

  late final _putchar3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar3 = _putchar3Ptr.asFunction<int Function(int)>();

  int fputc_unlocked3(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked3(
      __c,
      __stream,
    );
  }

  late final _fputc_unlocked3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked3 =
      _fputc_unlocked3Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked3(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked3(
      __c,
      __stream,
    );
  }

  late final _putc_unlocked3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked3 =
      _putc_unlocked3Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked3(
    int __c,
  ) {
    return _putchar_unlocked3(
      __c,
    );
  }

  late final _putchar_unlocked3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked3 =
      _putchar_unlocked3Ptr.asFunction<int Function(int)>();

  int getw3(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw3(
      __stream,
    );
  }

  late final _getw3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw3 = _getw3Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw3(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw3(
      __w,
      __stream,
    );
  }

  late final _putw3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw3 =
      _putw3Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets3(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets3(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgets3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets3 = _fgets3Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim3(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim3(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelim3Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim3 = ___getdelim3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getdelim3(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim3(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelim3Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim3 = _getdelim3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getline3(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline3(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getline3Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<FILE>)>>('getline');
  late final _getline3 = _getline3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<FILE>)>();

  int fputs3(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs3(
      __s,
      __stream,
    );
  }

  late final _fputs3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs3 = _fputs3Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts3(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts3(
      __s,
    );
  }

  late final _puts3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts3 =
      _puts3Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc3(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc3(
      __c,
      __stream,
    );
  }

  late final _ungetc3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc3 =
      _ungetc3Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread3(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread3(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread3 = _fread3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite3(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite3(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwrite3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite3 = _fwrite3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked3(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked3(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlocked3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked3 = _fread_unlocked3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked3(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked3(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlocked3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked3 = _fwrite_unlocked3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek3(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek3(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseek3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek3 =
      _fseek3Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell3(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell3(
      __stream,
    );
  }

  late final _ftell3Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell3 = _ftell3Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind3(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind3(
      __stream,
    );
  }

  late final _rewind3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind3 =
      _rewind3Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko3(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko3(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseeko3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko3 =
      _fseeko3Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello3(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello3(
      __stream,
    );
  }

  late final _ftello3Ptr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello3 =
      _ftello3Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos3(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos3(
      __stream,
      __pos,
    );
  }

  late final _fgetpos3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos3 = _fgetpos3Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos3(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos3(
      __stream,
      __pos,
    );
  }

  late final _fsetpos3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos3 = _fsetpos3Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr3(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr3(
      __stream,
    );
  }

  late final _clearerr3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr3 =
      _clearerr3Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof3(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof3(
      __stream,
    );
  }

  late final _feof3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof3 = _feof3Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror3(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror3(
      __stream,
    );
  }

  late final _ferror3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror3 =
      _ferror3Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked3(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked3(
      __stream,
    );
  }

  late final _clearerr_unlocked3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked3 =
      _clearerr_unlocked3Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked3(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked3(
      __stream,
    );
  }

  late final _feof_unlocked3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked3 =
      _feof_unlocked3Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked3(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked3(
      __stream,
    );
  }

  late final _ferror_unlocked3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked3 =
      _ferror_unlocked3Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror3(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror3(
      __s,
    );
  }

  late final _perror3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror3 =
      _perror3Ptr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno3(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno3(
      __stream,
    );
  }

  late final _fileno3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno3 =
      _fileno3Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked3(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked3(
      __stream,
    );
  }

  late final _fileno_unlocked3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked3 =
      _fileno_unlocked3Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose3(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose3(
      __stream,
    );
  }

  late final _pclose3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose3 =
      _pclose3Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen3(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen3(
      __command,
      __modes,
    );
  }

  late final _popen3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen3 = _popen3Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid3(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid3(
      __s,
    );
  }

  late final _ctermid3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid3 = _ctermid3Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile3(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile3(
      __stream,
    );
  }

  late final _flockfile3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile3 =
      _flockfile3Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile3(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile3(
      __stream,
    );
  }

  late final _ftrylockfile3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile3 =
      _ftrylockfile3Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile3(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile3(
      __stream,
    );
  }

  late final _funlockfile3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile3 =
      _funlockfile3Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow3(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow3(
      arg0,
    );
  }

  late final ___uflow3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow3 =
      ___uflow3Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow3(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow3(
      arg0,
      arg1,
    );
  }

  late final ___overflow3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow3 =
      ___overflow3Ptr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __ctype_get_mb_cur_max3() {
    return ___ctype_get_mb_cur_max3();
  }

  late final ___ctype_get_mb_cur_max3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max3 =
      ___ctype_get_mb_cur_max3Ptr.asFunction<int Function()>();

  double atof3(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof3(
      __nptr,
    );
  }

  late final _atof3Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof3 =
      _atof3Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi3(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi3(
      __nptr,
    );
  }

  late final _atoi3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi3 =
      _atoi3Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol3(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol3(
      __nptr,
    );
  }

  late final _atol3Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol3 =
      _atol3Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll3(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll3(
      __nptr,
    );
  }

  late final _atoll3Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll3 =
      _atoll3Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod3(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod3(
      __nptr,
      __endptr,
    );
  }

  late final _strtod3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod3 = _strtod3Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof3(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof3(
      __nptr,
      __endptr,
    );
  }

  late final _strtof3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof3 = _strtof3Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol3(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol3(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol3 = _strtol3Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul3(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul3(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul3 = _strtoul3Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq3(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq3(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq3 = _strtoq3Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq3(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq3(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq3 = _strtouq3Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll3(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll3(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll3 = _strtoll3Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull3(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull3(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull3 = _strtoull3Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a3(
    int __n,
  ) {
    return _l64a3(
      __n,
    );
  }

  late final _l64a3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a3 =
      _l64a3Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l3(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l3(
      __s,
    );
  }

  late final _a64l3Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l3 =
      _a64l3Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select3(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select3(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select3 = _select3Ptr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect3(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect3(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect3 = _pselect3Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random3() {
    return _random3();
  }

  late final _random3Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random3 = _random3Ptr.asFunction<int Function()>();

  void srandom3(
    int __seed,
  ) {
    return _srandom3(
      __seed,
    );
  }

  late final _srandom3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom3 = _srandom3Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate3(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate3(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int)>>('initstate');
  late final _initstate3 = _initstate3Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate3(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate3(
      __statebuf,
    );
  }

  late final _setstate3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate3 = _setstate3Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r3(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r3(
      __buf,
      __result,
    );
  }

  late final _random_r3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r3 = _random_r3Ptr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r3(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r3(
      __seed,
      __buf,
    );
  }

  late final _srandom_r3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r3 =
      _srandom_r3Ptr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r3(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r3(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r3 = _initstate_r3Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r3(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r3(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r3 = _setstate_r3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand3() {
    return _rand3();
  }

  late final _rand3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand3 = _rand3Ptr.asFunction<int Function()>();

  void srand3(
    int __seed,
  ) {
    return _srand3(
      __seed,
    );
  }

  late final _srand3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand3 = _srand3Ptr.asFunction<void Function(int)>();

  int rand_r3(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r3(
      __seed,
    );
  }

  late final _rand_r3Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r3 =
      _rand_r3Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand483() {
    return _drand483();
  }

  late final _drand483Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand483 = _drand483Ptr.asFunction<double Function()>();

  double erand483(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand483(
      __xsubi,
    );
  }

  late final _erand483Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand483 = _erand483Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand483() {
    return _lrand483();
  }

  late final _lrand483Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand483 = _lrand483Ptr.asFunction<int Function()>();

  int nrand483(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand483(
      __xsubi,
    );
  }

  late final _nrand483Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand483 =
      _nrand483Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand483() {
    return _mrand483();
  }

  late final _mrand483Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand483 = _mrand483Ptr.asFunction<int Function()>();

  int jrand483(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand483(
      __xsubi,
    );
  }

  late final _jrand483Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand483 =
      _jrand483Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand483(
    int __seedval,
  ) {
    return _srand483(
      __seedval,
    );
  }

  late final _srand483Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand483 = _srand483Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed483(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed483(
      __seed16v,
    );
  }

  late final _seed483Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed483 = _seed483Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong483(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong483(
      __param,
    );
  }

  late final _lcong483Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong483 =
      _lcong483Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r3(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r3(
      __buffer,
      __result,
    );
  }

  late final _drand48_r3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r3 = _drand48_r3Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r3(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r3(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r3 = _erand48_r3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r3(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r3(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r3 = _lrand48_r3Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r3(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r3(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r3 = _nrand48_r3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r3(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r3(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r3 = _mrand48_r3Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r3(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r3(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r3 = _jrand48_r3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r3(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r3(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r3 =
      _srand48_r3Ptr.asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r3(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r3(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r3 = _seed48_r3Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r3(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r3(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r3 = _lcong48_r3Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int arc4random3() {
    return _arc4random3();
  }

  late final _arc4random3Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random3 = _arc4random3Ptr.asFunction<int Function()>();

  void arc4random_buf3(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf3(
      __buf,
      __size,
    );
  }

  late final _arc4random_buf3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('arc4random_buf');
  late final _arc4random_buf3 = _arc4random_buf3Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform3(
    int __upper_bound,
  ) {
    return _arc4random_uniform3(
      __upper_bound,
    );
  }

  late final _arc4random_uniform3Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
          'arc4random_uniform');
  late final _arc4random_uniform3 =
      _arc4random_uniform3Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc3(
    int __size,
  ) {
    return _malloc3(
      __size,
    );
  }

  late final _malloc3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'malloc');
  late final _malloc3 =
      _malloc3Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc3(
    int __nmemb,
    int __size,
  ) {
    return _calloc3(
      __nmemb,
      __size,
    );
  }

  late final _calloc3Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'calloc');
  late final _calloc3 =
      _calloc3Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc3(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc3(
      __ptr,
      __size,
    );
  }

  late final _realloc3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('realloc');
  late final _realloc3 = _realloc3Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free3(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free3(
      __ptr,
    );
  }

  late final _free3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free3 =
      _free3Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray6(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray6(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray6 = _reallocarray6Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray7(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray7(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray7 = _reallocarray7Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca3(
    int __size,
  ) {
    return _alloca3(
      __size,
    );
  }

  late final _alloca3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'alloca');
  late final _alloca3 =
      _alloca3Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc3(
    int __size,
  ) {
    return _valloc3(
      __size,
    );
  }

  late final _valloc3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'valloc');
  late final _valloc3 =
      _valloc3Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign3(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign3(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int,
              ffi.Int)>>('posix_memalign');
  late final _posix_memalign3 = _posix_memalign3Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc3(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc3(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc3Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'aligned_alloc');
  late final _aligned_alloc3 =
      _aligned_alloc3Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort3() {
    return _abort3();
  }

  late final _abort3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort3 = _abort3Ptr.asFunction<void Function()>();

  int atexit3(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit3(
      __func,
    );
  }

  late final _atexit3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit3 = _atexit3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit3(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit3(
      __func,
    );
  }

  late final _at_quick_exit3Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit3 = _at_quick_exit3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit3(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit3(
      __func,
      __arg,
    );
  }

  late final _on_exit3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit3 = _on_exit3Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit3(
    int __status,
  ) {
    return _exit3(
      __status,
    );
  }

  late final _exit3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit3 = _exit3Ptr.asFunction<void Function(int)>();

  void quick_exit3(
    int __status,
  ) {
    return _quick_exit3(
      __status,
    );
  }

  late final _quick_exit3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit3 = _quick_exit3Ptr.asFunction<void Function(int)>();

  void _Exit3(
    int __status,
  ) {
    return __Exit3(
      __status,
    );
  }

  late final __Exit3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit3 = __Exit3Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv3(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv3(
      __name,
    );
  }

  late final _getenv3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv3 = _getenv3Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv3(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv3(
      __string,
    );
  }

  late final _putenv3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv3 =
      _putenv3Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv3(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv3(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv3 = _setenv3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv3(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv3(
      __name,
    );
  }

  late final _unsetenv3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv3 =
      _unsetenv3Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv3() {
    return _clearenv3();
  }

  late final _clearenv3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv3 = _clearenv3Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp3(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp3(
      __template,
    );
  }

  late final _mktemp3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp3 = _mktemp3Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp3(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp3(
      __template,
    );
  }

  late final _mkstemp3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp3 =
      _mkstemp3Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps3(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps3(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps3Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps3 =
      _mkstemps3Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp3(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp3(
      __template,
    );
  }

  late final _mkdtemp3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp3 = _mkdtemp3Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system3(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system3(
      __command,
    );
  }

  late final _system3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system3 =
      _system3Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath3(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath3(
      __name,
      __resolved,
    );
  }

  late final _realpath3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath3 = _realpath3Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch3(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch3(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              __compar_fn_t)>>('bsearch');
  late final _bsearch3 = _bsearch3Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort3(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort3(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              __compar_fn_t)>>('qsort');
  late final _qsort3 = _qsort3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs3(
    int __x,
  ) {
    return _abs3(
      __x,
    );
  }

  late final _abs3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs3 = _abs3Ptr.asFunction<int Function(int)>();

  int labs3(
    int __x,
  ) {
    return _labs3(
      __x,
    );
  }

  late final _labs3Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs3 = _labs3Ptr.asFunction<int Function(int)>();

  int llabs3(
    int __x,
  ) {
    return _llabs3(
      __x,
    );
  }

  late final _llabs3Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs3 = _llabs3Ptr.asFunction<int Function(int)>();

  div_t div3(
    int __numer,
    int __denom,
  ) {
    return _div3(
      __numer,
      __denom,
    );
  }

  late final _div3Ptr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div3 = _div3Ptr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv3(
    int __numer,
    int __denom,
  ) {
    return _ldiv3(
      __numer,
      __denom,
    );
  }

  late final _ldiv3Ptr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv3 = _ldiv3Ptr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv3(
    int __numer,
    int __denom,
  ) {
    return _lldiv3(
      __numer,
      __denom,
    );
  }

  late final _lldiv3Ptr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv3 = _lldiv3Ptr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt3(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt3(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt3 = _ecvt3Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt3(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt3(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt3 = _fcvt3Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt3(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt3(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt3 = _gcvt3Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r3(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r3(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('ecvt_r');
  late final _ecvt_r3 = _ecvt_r3Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r3(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r3(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('fcvt_r');
  late final _fcvt_r3 = _fcvt_r3Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen3(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen3(
      __s,
      __n,
    );
  }

  late final _mblen3Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mblen');
  late final _mblen3 =
      _mblen3Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc3(
    ffi.Pointer<ffi.Int> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc3(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('mbtowc');
  late final _mbtowc3 = _mbtowc3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb3(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb3(
      __s,
      __wchar,
    );
  }

  late final _wctomb3Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'wctomb');
  late final _wctomb3 =
      _wctomb3Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs3(
    ffi.Pointer<ffi.Int> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs3(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mbstowcs');
  late final _mbstowcs3 = _mbstowcs3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs3(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Int> __pwcs,
    int __n,
  ) {
    return _wcstombs3(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('wcstombs');
  late final _wcstombs3 = _wcstombs3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  int rpmatch3(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch3(
      __response,
    );
  }

  late final _rpmatch3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch3 =
      _rpmatch3Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt3(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt3(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt3 = _getsubopt3Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg3(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg3(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg3 =
      _getloadavg3Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Void> memcpy3(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy3(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpy3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memcpy');
  late final _memcpy3 = _memcpy3Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove3(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove3(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmove3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memmove');
  late final _memmove3 = _memmove3Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy3(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy3(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpy3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memccpy');
  late final _memccpy3 = _memccpy3Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset3(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset3(
      __s,
      __c,
      __n,
    );
  }

  late final _memset3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memset');
  late final _memset3 = _memset3Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp3(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp3(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmp3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('memcmp');
  late final _memcmp3 = _memcmp3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq3(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq3(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeq3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__memcmpeq');
  late final ___memcmpeq3 = ___memcmpeq3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr3(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr3(
      __s,
      __c,
      __n,
    );
  }

  late final _memchr3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memchr');
  late final _memchr3 = _memchr3Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy3(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy3(
      __dest,
      __src,
    );
  }

  late final _strcpy3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy3 = _strcpy3Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy3(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy3(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpy3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncpy');
  late final _strncpy3 = _strncpy3Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat3(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat3(
      __dest,
      __src,
    );
  }

  late final _strcat3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat3 = _strcat3Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat3(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat3(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncat3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncat');
  late final _strncat3 = _strncat3Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp3(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp3(
      __s1,
      __s2,
    );
  }

  late final _strcmp3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp3 = _strcmp3Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp3(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp3(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmp3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncmp');
  late final _strncmp3 = _strncmp3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll3(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll3(
      __s1,
      __s2,
    );
  }

  late final _strcoll3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll3 = _strcoll3Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm3(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm3(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrm3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strxfrm');
  late final _strxfrm3 = _strxfrm3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l3(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l3(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_l3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l3 = _strcoll_l3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l3(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l3(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_l3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strxfrm_l');
  late final _strxfrm_l3 = _strxfrm_l3Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup3(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup3(
      __s,
    );
  }

  late final _strdup3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup3 = _strdup3Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup3(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup3(
      __string,
      __n,
    );
  }

  late final _strndup3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strndup');
  late final _strndup3 = _strndup3Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr3(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr3(
      __s,
      __c,
    );
  }

  late final _strchr3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr3 = _strchr3Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr3(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr3(
      __s,
      __c,
    );
  }

  late final _strrchr3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr3 = _strrchr3Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn3(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn3(
      __s,
      __reject,
    );
  }

  late final _strcspn3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn3 = _strcspn3Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn3(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn3(
      __s,
      __accept,
    );
  }

  late final _strspn3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn3 = _strspn3Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk3(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk3(
      __s,
      __accept,
    );
  }

  late final _strpbrk3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk3 = _strpbrk3Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr3(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr3(
      __haystack,
      __needle,
    );
  }

  late final _strstr3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr3 = _strstr3Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok3(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok3(
      __s,
      __delim,
    );
  }

  late final _strtok3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok3 = _strtok3Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r3(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r3(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_r3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r3 = ___strtok_r3Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r3(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r3(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_r3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r3 = _strtok_r3Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen3(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen3(
      __s,
    );
  }

  late final _strlen3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'strlen');
  late final _strlen3 =
      _strlen3Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen3(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen3(
      __string,
      __maxlen,
    );
  }

  late final _strnlen3Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'strnlen');
  late final _strnlen3 =
      _strnlen3Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror3(
    int __errnum,
  ) {
    return _strerror3(
      __errnum,
    );
  }

  late final _strerror3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror3 =
      _strerror3Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r3(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r3(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_r3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('strerror_r');
  late final _strerror_r3 = _strerror_r3Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l3(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l3(
      __errnum,
      __l,
    );
  }

  late final _strerror_l3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l3 = _strerror_l3Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp3(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp3(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmp3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcmp');
  late final _bcmp3 = _bcmp3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy3(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy3(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopy3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcopy');
  late final _bcopy3 = _bcopy3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero3(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero3(
      __s,
      __n,
    );
  }

  late final _bzero3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('bzero');
  late final _bzero3 =
      _bzero3Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index3(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index3(
      __s,
      __c,
    );
  }

  late final _index3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index3 = _index3Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex3(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex3(
      __s,
      __c,
    );
  }

  late final _rindex3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex3 = _rindex3Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs3(
    int __i,
  ) {
    return _ffs3(
      __i,
    );
  }

  late final _ffs3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs3 = _ffs3Ptr.asFunction<int Function(int)>();

  int ffsl3(
    int __l,
  ) {
    return _ffsl3(
      __l,
    );
  }

  late final _ffsl3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl3 = _ffsl3Ptr.asFunction<int Function(int)>();

  int ffsll3(
    int __ll,
  ) {
    return _ffsll3(
      __ll,
    );
  }

  late final _ffsll3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll3 = _ffsll3Ptr.asFunction<int Function(int)>();

  int strcasecmp3(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp3(
      __s1,
      __s2,
    );
  }

  late final _strcasecmp3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp3 = _strcasecmp3Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp3(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp3(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmp3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncasecmp');
  late final _strncasecmp3 = _strncasecmp3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l3(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l3(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_l3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l3 = _strcasecmp_l3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l3(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l3(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_l3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l3 = _strncasecmp_l3Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero3(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero3(
      __s,
      __n,
    );
  }

  late final _explicit_bzero3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('explicit_bzero');
  late final _explicit_bzero3 = _explicit_bzero3Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep3(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep3(
      __stringp,
      __delim,
    );
  }

  late final _strsep3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep3 = _strsep3Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal3(
    int __sig,
  ) {
    return _strsignal3(
      __sig,
    );
  }

  late final _strsignal3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal3 =
      _strsignal3Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy3(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy3(
      __dest,
      __src,
    );
  }

  late final ___stpcpy3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy3 = ___stpcpy3Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy3(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy3(
      __dest,
      __src,
    );
  }

  late final _stpcpy3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy3 = _stpcpy3Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy3(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy3(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpy3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('__stpncpy');
  late final ___stpncpy3 = ___stpncpy3Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy3(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy3(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpy3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('stpncpy');
  late final _stpncpy3 = _stpncpy3Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<dogecoin_chainparams> chain_from_b58_prefix1(
    ffi.Pointer<ffi.Char> address,
  ) {
    return _chain_from_b58_prefix1(
      address,
    );
  }

  late final _chain_from_b58_prefix1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<dogecoin_chainparams> Function(
              ffi.Pointer<ffi.Char>)>>('chain_from_b58_prefix');
  late final _chain_from_b58_prefix1 = _chain_from_b58_prefix1Ptr.asFunction<
      ffi.Pointer<dogecoin_chainparams> Function(ffi.Pointer<ffi.Char>)>();

  int chain_from_b58_prefix_bool1(
    ffi.Pointer<ffi.Char> address,
  ) {
    return _chain_from_b58_prefix_bool1(
      address,
    );
  }

  late final _chain_from_b58_prefix_bool1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'chain_from_b58_prefix_bool');
  late final _chain_from_b58_prefix_bool1 = _chain_from_b58_prefix_bool1Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<dogecoin_hdnode> dogecoin_hdnode_new() {
    return _dogecoin_hdnode_new();
  }

  late final _dogecoin_hdnode_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<dogecoin_hdnode> Function()>>(
          'dogecoin_hdnode_new');
  late final _dogecoin_hdnode_new = _dogecoin_hdnode_newPtr
      .asFunction<ffi.Pointer<dogecoin_hdnode> Function()>();

  ffi.Pointer<dogecoin_hdnode> dogecoin_hdnode_copy(
    ffi.Pointer<dogecoin_hdnode> hdnode,
  ) {
    return _dogecoin_hdnode_copy(
      hdnode,
    );
  }

  late final _dogecoin_hdnode_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<dogecoin_hdnode> Function(
              ffi.Pointer<dogecoin_hdnode>)>>('dogecoin_hdnode_copy');
  late final _dogecoin_hdnode_copy = _dogecoin_hdnode_copyPtr.asFunction<
      ffi.Pointer<dogecoin_hdnode> Function(ffi.Pointer<dogecoin_hdnode>)>();

  void dogecoin_hdnode_free(
    ffi.Pointer<dogecoin_hdnode> node,
  ) {
    return _dogecoin_hdnode_free(
      node,
    );
  }

  late final _dogecoin_hdnode_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_hdnode>)>>(
      'dogecoin_hdnode_free');
  late final _dogecoin_hdnode_free = _dogecoin_hdnode_freePtr
      .asFunction<void Function(ffi.Pointer<dogecoin_hdnode>)>();

  int dogecoin_hdnode_public_ckd(
    ffi.Pointer<dogecoin_hdnode> inout,
    int i,
  ) {
    return _dogecoin_hdnode_public_ckd(
      inout,
      i,
    );
  }

  late final _dogecoin_hdnode_public_ckdPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_hdnode>,
              ffi.Uint32)>>('dogecoin_hdnode_public_ckd');
  late final _dogecoin_hdnode_public_ckd = _dogecoin_hdnode_public_ckdPtr
      .asFunction<int Function(ffi.Pointer<dogecoin_hdnode>, int)>();

  int dogecoin_hdnode_from_seed(
    ffi.Pointer<ffi.Uint8> seed,
    int seed_len,
    ffi.Pointer<dogecoin_hdnode> out,
  ) {
    return _dogecoin_hdnode_from_seed(
      seed,
      seed_len,
      out,
    );
  }

  late final _dogecoin_hdnode_from_seedPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<dogecoin_hdnode>)>>('dogecoin_hdnode_from_seed');
  late final _dogecoin_hdnode_from_seed =
      _dogecoin_hdnode_from_seedPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<dogecoin_hdnode>)>();

  int dogecoin_hdnode_private_ckd(
    ffi.Pointer<dogecoin_hdnode> inout,
    int i,
  ) {
    return _dogecoin_hdnode_private_ckd(
      inout,
      i,
    );
  }

  late final _dogecoin_hdnode_private_ckdPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_hdnode>,
              ffi.Uint32)>>('dogecoin_hdnode_private_ckd');
  late final _dogecoin_hdnode_private_ckd = _dogecoin_hdnode_private_ckdPtr
      .asFunction<int Function(ffi.Pointer<dogecoin_hdnode>, int)>();

  void dogecoin_hdnode_fill_public_key(
    ffi.Pointer<dogecoin_hdnode> node,
  ) {
    return _dogecoin_hdnode_fill_public_key(
      node,
    );
  }

  late final _dogecoin_hdnode_fill_public_keyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_hdnode>)>>(
      'dogecoin_hdnode_fill_public_key');
  late final _dogecoin_hdnode_fill_public_key =
      _dogecoin_hdnode_fill_public_keyPtr
          .asFunction<void Function(ffi.Pointer<dogecoin_hdnode>)>();

  void dogecoin_hdnode_serialize_public(
    ffi.Pointer<dogecoin_hdnode> node,
    ffi.Pointer<dogecoin_chainparams> chain,
    ffi.Pointer<ffi.Char> str,
    int strsize,
  ) {
    return _dogecoin_hdnode_serialize_public(
      node,
      chain,
      str,
      strsize,
    );
  }

  late final _dogecoin_hdnode_serialize_publicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<dogecoin_hdnode>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('dogecoin_hdnode_serialize_public');
  late final _dogecoin_hdnode_serialize_public =
      _dogecoin_hdnode_serialize_publicPtr.asFunction<
          void Function(ffi.Pointer<dogecoin_hdnode>,
              ffi.Pointer<dogecoin_chainparams>, ffi.Pointer<ffi.Char>, int)>();

  void dogecoin_hdnode_serialize_private(
    ffi.Pointer<dogecoin_hdnode> node,
    ffi.Pointer<dogecoin_chainparams> chain,
    ffi.Pointer<ffi.Char> str,
    int strsize,
  ) {
    return _dogecoin_hdnode_serialize_private(
      node,
      chain,
      str,
      strsize,
    );
  }

  late final _dogecoin_hdnode_serialize_privatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<dogecoin_hdnode>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('dogecoin_hdnode_serialize_private');
  late final _dogecoin_hdnode_serialize_private =
      _dogecoin_hdnode_serialize_privatePtr.asFunction<
          void Function(ffi.Pointer<dogecoin_hdnode>,
              ffi.Pointer<dogecoin_chainparams>, ffi.Pointer<ffi.Char>, int)>();

  void dogecoin_hdnode_get_hash160(
    ffi.Pointer<dogecoin_hdnode> node,
    ffi.Pointer<ffi.Uint8> hash160_out,
  ) {
    return _dogecoin_hdnode_get_hash160(
      node,
      hash160_out,
    );
  }

  late final _dogecoin_hdnode_get_hash160Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_hdnode>,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_hdnode_get_hash160');
  late final _dogecoin_hdnode_get_hash160 =
      _dogecoin_hdnode_get_hash160Ptr.asFunction<
          void Function(
              ffi.Pointer<dogecoin_hdnode>, ffi.Pointer<ffi.Uint8>)>();

  void dogecoin_hdnode_get_p2pkh_address(
    ffi.Pointer<dogecoin_hdnode> node,
    ffi.Pointer<dogecoin_chainparams> chain,
    ffi.Pointer<ffi.Char> str,
    int strsize,
  ) {
    return _dogecoin_hdnode_get_p2pkh_address(
      node,
      chain,
      str,
      strsize,
    );
  }

  late final _dogecoin_hdnode_get_p2pkh_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<dogecoin_hdnode>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('dogecoin_hdnode_get_p2pkh_address');
  late final _dogecoin_hdnode_get_p2pkh_address =
      _dogecoin_hdnode_get_p2pkh_addressPtr.asFunction<
          void Function(ffi.Pointer<dogecoin_hdnode>,
              ffi.Pointer<dogecoin_chainparams>, ffi.Pointer<ffi.Char>, int)>();

  int dogecoin_hdnode_get_pub_hex(
    ffi.Pointer<dogecoin_hdnode> node,
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.Int> strsize,
  ) {
    return _dogecoin_hdnode_get_pub_hex(
      node,
      str,
      strsize,
    );
  }

  late final _dogecoin_hdnode_get_pub_hexPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_hdnode>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_hdnode_get_pub_hex');
  late final _dogecoin_hdnode_get_pub_hex =
      _dogecoin_hdnode_get_pub_hexPtr.asFunction<
          int Function(ffi.Pointer<dogecoin_hdnode>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>();

  int dogecoin_hdnode_deserialize(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<dogecoin_chainparams> chain,
    ffi.Pointer<dogecoin_hdnode> node,
  ) {
    return _dogecoin_hdnode_deserialize(
      str,
      chain,
      node,
    );
  }

  late final _dogecoin_hdnode_deserializePtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<dogecoin_hdnode>)>>('dogecoin_hdnode_deserialize');
  late final _dogecoin_hdnode_deserialize =
      _dogecoin_hdnode_deserializePtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<dogecoin_hdnode>)>();

  /// !derive dogecoin_hdnode from extended private or extended public key orkey
  int dogecoin_hd_generate_key(
    ffi.Pointer<dogecoin_hdnode> node,
    ffi.Pointer<ffi.Char> keypath,
    ffi.Pointer<ffi.Uint8> keymaster,
    ffi.Pointer<ffi.Uint8> chaincode,
    int usepubckd,
  ) {
    return _dogecoin_hd_generate_key(
      node,
      keypath,
      keymaster,
      chaincode,
      usepubckd,
    );
  }

  late final _dogecoin_hd_generate_keyPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_hdnode>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              dogecoin_bool)>>('dogecoin_hd_generate_key');
  late final _dogecoin_hd_generate_key =
      _dogecoin_hd_generate_keyPtr.asFunction<
          int Function(ffi.Pointer<dogecoin_hdnode>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)>();

  /// !checks if a node has the according private key (or if its a pubkey only node)
  int dogecoin_hdnode_has_privkey(
    ffi.Pointer<dogecoin_hdnode> node,
  ) {
    return _dogecoin_hdnode_has_privkey(
      node,
    );
  }

  late final _dogecoin_hdnode_has_privkeyPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_hdnode>)>>('dogecoin_hdnode_has_privkey');
  late final _dogecoin_hdnode_has_privkey = _dogecoin_hdnode_has_privkeyPtr
      .asFunction<int Function(ffi.Pointer<dogecoin_hdnode>)>();

  int remove4(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove4(
      __filename,
    );
  }

  late final _remove4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove4 =
      _remove4Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename4(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename4(
      __old,
      __new,
    );
  }

  late final _rename4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename4 = _rename4Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat4(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat4(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameat4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat4 = _renameat4Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose4(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose4(
      __stream,
    );
  }

  late final _fclose4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose4 =
      _fclose4Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile4() {
    return _tmpfile4();
  }

  late final _tmpfile4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile4 =
      _tmpfile4Ptr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam4(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam4(
      arg0,
    );
  }

  late final _tmpnam4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam4 = _tmpnam4Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r4(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r4(
      __s,
    );
  }

  late final _tmpnam_r4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r4 = _tmpnam_r4Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam4(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam4(
      __dir,
      __pfx,
    );
  }

  late final _tempnam4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam4 = _tempnam4Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush4(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush4(
      __stream,
    );
  }

  late final _fflush4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush4 =
      _fflush4Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked4(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked4(
      __stream,
    );
  }

  late final _fflush_unlocked4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked4 =
      _fflush_unlocked4Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen4(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen4(
      __filename,
      __modes,
    );
  }

  late final _fopen4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen4 = _fopen4Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen4(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen4(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopen4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen4 = _freopen4Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen4(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen4(
      __fd,
      __modes,
    );
  }

  late final _fdopen4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen4 = _fdopen4Ptr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen4(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen4(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopen4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen4 = _fmemopen4Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream4(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Int> __sizeloc,
  ) {
    return _open_memstream4(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstream4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('open_memstream');
  late final _open_memstream4 = _open_memstream4Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void setbuf4(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf4(
      __stream,
      __buf,
    );
  }

  late final _setbuf4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf4 = _setbuf4Ptr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf4(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf4(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbuf4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('setvbuf');
  late final _setvbuf4 = _setvbuf4Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer4(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer4(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbuffer4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer4 = _setbuffer4Ptr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf4(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf4(
      __stream,
    );
  }

  late final _setlinebuf4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf4 =
      _setlinebuf4Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf4(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf4(
      __stream,
      __format,
    );
  }

  late final _fprintf4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf4 = _fprintf4Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf4(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf4(
      __format,
    );
  }

  late final _printf4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf4 =
      _printf4Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf4(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf4(
      __s,
      __format,
    );
  }

  late final _sprintf4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf4 = _sprintf4Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf4(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfprintf4(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintf4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfprintf');
  late final _vfprintf4 = _vfprintf4Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vprintf4(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vprintf4(
      __format,
      __arg,
    );
  }

  late final _vprintf4Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vprintf');
  late final _vprintf4 =
      _vprintf4Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsprintf4(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsprintf4(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintf4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsprintf');
  late final _vsprintf4 = _vsprintf4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int snprintf4(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf4(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintf4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf4 = _snprintf4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf4(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsnprintf4(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintf4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('vsnprintf');
  late final _vsnprintf4 = _vsnprintf4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int vdprintf4(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    int __arg,
  ) {
    return _vdprintf4(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintf4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('vdprintf');
  late final _vdprintf4 =
      _vdprintf4Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int dprintf4(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf4(
      __fd,
      __fmt,
    );
  }

  late final _dprintf4Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf4 =
      _dprintf4Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf8(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf8(
      __stream,
      __format,
    );
  }

  late final _fscanf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf8 = _fscanf8Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf8(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf8(
      __format,
    );
  }

  late final _scanf8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf8 =
      _scanf8Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf8(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf8(
      __s,
      __format,
    );
  }

  late final _sscanf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf8 = _sscanf8Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fscanf9(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf9(
      __stream,
      __format,
    );
  }

  late final _fscanf9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf9 = _fscanf9Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf9(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf9(
      __format,
    );
  }

  late final _scanf9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf9 =
      _scanf9Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf9(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf9(
      __s,
      __format,
    );
  }

  late final _sscanf9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf9 = _sscanf9Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf8(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf8(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf8 = _vfscanf8Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf8(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf8(
      __format,
      __arg,
    );
  }

  late final _vscanf8Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf8 =
      _vscanf8Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf8(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf8(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf8 = _vsscanf8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int vfscanf9(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf9(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf9 = _vfscanf9Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf9(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf9(
      __format,
      __arg,
    );
  }

  late final _vscanf9Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf9 =
      _vscanf9Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf9(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf9(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf9 = _vsscanf9Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fgetc4(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc4(
      __stream,
    );
  }

  late final _fgetc4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc4 = _fgetc4Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc4(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc4(
      __stream,
    );
  }

  late final _getc4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc4 = _getc4Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar4() {
    return _getchar4();
  }

  late final _getchar4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar4 = _getchar4Ptr.asFunction<int Function()>();

  int getc_unlocked4(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked4(
      __stream,
    );
  }

  late final _getc_unlocked4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked4 =
      _getc_unlocked4Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked4() {
    return _getchar_unlocked4();
  }

  late final _getchar_unlocked4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked4 =
      _getchar_unlocked4Ptr.asFunction<int Function()>();

  int fgetc_unlocked4(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked4(
      __stream,
    );
  }

  late final _fgetc_unlocked4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked4 =
      _fgetc_unlocked4Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc4(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc4(
      __c,
      __stream,
    );
  }

  late final _fputc4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc4 =
      _fputc4Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc4(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc4(
      __c,
      __stream,
    );
  }

  late final _putc4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc4 =
      _putc4Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar4(
    int __c,
  ) {
    return _putchar4(
      __c,
    );
  }

  late final _putchar4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar4 = _putchar4Ptr.asFunction<int Function(int)>();

  int fputc_unlocked4(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked4(
      __c,
      __stream,
    );
  }

  late final _fputc_unlocked4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked4 =
      _fputc_unlocked4Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked4(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked4(
      __c,
      __stream,
    );
  }

  late final _putc_unlocked4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked4 =
      _putc_unlocked4Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked4(
    int __c,
  ) {
    return _putchar_unlocked4(
      __c,
    );
  }

  late final _putchar_unlocked4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked4 =
      _putchar_unlocked4Ptr.asFunction<int Function(int)>();

  int getw4(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw4(
      __stream,
    );
  }

  late final _getw4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw4 = _getw4Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw4(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw4(
      __w,
      __stream,
    );
  }

  late final _putw4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw4 =
      _putw4Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets4(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets4(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgets4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets4 = _fgets4Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim4(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim4(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelim4Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim4 = ___getdelim4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getdelim4(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim4(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelim4Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim4 = _getdelim4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getline4(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline4(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getline4Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<FILE>)>>('getline');
  late final _getline4 = _getline4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<FILE>)>();

  int fputs4(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs4(
      __s,
      __stream,
    );
  }

  late final _fputs4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs4 = _fputs4Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts4(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts4(
      __s,
    );
  }

  late final _puts4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts4 =
      _puts4Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc4(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc4(
      __c,
      __stream,
    );
  }

  late final _ungetc4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc4 =
      _ungetc4Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread4(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread4(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread4 = _fread4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite4(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite4(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwrite4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite4 = _fwrite4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked4(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked4(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlocked4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked4 = _fread_unlocked4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked4(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked4(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlocked4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked4 = _fwrite_unlocked4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek4(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek4(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseek4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek4 =
      _fseek4Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell4(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell4(
      __stream,
    );
  }

  late final _ftell4Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell4 = _ftell4Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind4(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind4(
      __stream,
    );
  }

  late final _rewind4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind4 =
      _rewind4Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko4(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko4(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseeko4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko4 =
      _fseeko4Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello4(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello4(
      __stream,
    );
  }

  late final _ftello4Ptr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello4 =
      _ftello4Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos4(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos4(
      __stream,
      __pos,
    );
  }

  late final _fgetpos4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos4 = _fgetpos4Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos4(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos4(
      __stream,
      __pos,
    );
  }

  late final _fsetpos4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos4 = _fsetpos4Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr4(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr4(
      __stream,
    );
  }

  late final _clearerr4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr4 =
      _clearerr4Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof4(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof4(
      __stream,
    );
  }

  late final _feof4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof4 = _feof4Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror4(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror4(
      __stream,
    );
  }

  late final _ferror4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror4 =
      _ferror4Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked4(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked4(
      __stream,
    );
  }

  late final _clearerr_unlocked4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked4 =
      _clearerr_unlocked4Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked4(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked4(
      __stream,
    );
  }

  late final _feof_unlocked4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked4 =
      _feof_unlocked4Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked4(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked4(
      __stream,
    );
  }

  late final _ferror_unlocked4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked4 =
      _ferror_unlocked4Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror4(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror4(
      __s,
    );
  }

  late final _perror4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror4 =
      _perror4Ptr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno4(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno4(
      __stream,
    );
  }

  late final _fileno4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno4 =
      _fileno4Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked4(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked4(
      __stream,
    );
  }

  late final _fileno_unlocked4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked4 =
      _fileno_unlocked4Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose4(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose4(
      __stream,
    );
  }

  late final _pclose4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose4 =
      _pclose4Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen4(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen4(
      __command,
      __modes,
    );
  }

  late final _popen4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen4 = _popen4Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid4(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid4(
      __s,
    );
  }

  late final _ctermid4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid4 = _ctermid4Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile4(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile4(
      __stream,
    );
  }

  late final _flockfile4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile4 =
      _flockfile4Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile4(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile4(
      __stream,
    );
  }

  late final _ftrylockfile4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile4 =
      _ftrylockfile4Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile4(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile4(
      __stream,
    );
  }

  late final _funlockfile4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile4 =
      _funlockfile4Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow4(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow4(
      arg0,
    );
  }

  late final ___uflow4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow4 =
      ___uflow4Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow4(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow4(
      arg0,
      arg1,
    );
  }

  late final ___overflow4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow4 =
      ___overflow4Ptr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __ctype_get_mb_cur_max4() {
    return ___ctype_get_mb_cur_max4();
  }

  late final ___ctype_get_mb_cur_max4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max4 =
      ___ctype_get_mb_cur_max4Ptr.asFunction<int Function()>();

  double atof4(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof4(
      __nptr,
    );
  }

  late final _atof4Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof4 =
      _atof4Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi4(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi4(
      __nptr,
    );
  }

  late final _atoi4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi4 =
      _atoi4Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol4(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol4(
      __nptr,
    );
  }

  late final _atol4Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol4 =
      _atol4Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll4(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll4(
      __nptr,
    );
  }

  late final _atoll4Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll4 =
      _atoll4Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod4(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod4(
      __nptr,
      __endptr,
    );
  }

  late final _strtod4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod4 = _strtod4Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof4(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof4(
      __nptr,
      __endptr,
    );
  }

  late final _strtof4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof4 = _strtof4Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol4(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol4(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol4 = _strtol4Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul4(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul4(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul4 = _strtoul4Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq4(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq4(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq4 = _strtoq4Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq4(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq4(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq4 = _strtouq4Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll4(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll4(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll4 = _strtoll4Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull4(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull4(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull4 = _strtoull4Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a4(
    int __n,
  ) {
    return _l64a4(
      __n,
    );
  }

  late final _l64a4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a4 =
      _l64a4Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l4(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l4(
      __s,
    );
  }

  late final _a64l4Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l4 =
      _a64l4Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select4(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select4(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select4 = _select4Ptr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect4(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect4(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect4 = _pselect4Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random4() {
    return _random4();
  }

  late final _random4Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random4 = _random4Ptr.asFunction<int Function()>();

  void srandom4(
    int __seed,
  ) {
    return _srandom4(
      __seed,
    );
  }

  late final _srandom4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom4 = _srandom4Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate4(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate4(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int)>>('initstate');
  late final _initstate4 = _initstate4Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate4(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate4(
      __statebuf,
    );
  }

  late final _setstate4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate4 = _setstate4Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r4(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r4(
      __buf,
      __result,
    );
  }

  late final _random_r4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r4 = _random_r4Ptr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r4(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r4(
      __seed,
      __buf,
    );
  }

  late final _srandom_r4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r4 =
      _srandom_r4Ptr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r4(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r4(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r4 = _initstate_r4Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r4(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r4(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r4 = _setstate_r4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand4() {
    return _rand4();
  }

  late final _rand4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand4 = _rand4Ptr.asFunction<int Function()>();

  void srand4(
    int __seed,
  ) {
    return _srand4(
      __seed,
    );
  }

  late final _srand4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand4 = _srand4Ptr.asFunction<void Function(int)>();

  int rand_r4(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r4(
      __seed,
    );
  }

  late final _rand_r4Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r4 =
      _rand_r4Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand484() {
    return _drand484();
  }

  late final _drand484Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand484 = _drand484Ptr.asFunction<double Function()>();

  double erand484(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand484(
      __xsubi,
    );
  }

  late final _erand484Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand484 = _erand484Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand484() {
    return _lrand484();
  }

  late final _lrand484Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand484 = _lrand484Ptr.asFunction<int Function()>();

  int nrand484(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand484(
      __xsubi,
    );
  }

  late final _nrand484Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand484 =
      _nrand484Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand484() {
    return _mrand484();
  }

  late final _mrand484Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand484 = _mrand484Ptr.asFunction<int Function()>();

  int jrand484(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand484(
      __xsubi,
    );
  }

  late final _jrand484Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand484 =
      _jrand484Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand484(
    int __seedval,
  ) {
    return _srand484(
      __seedval,
    );
  }

  late final _srand484Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand484 = _srand484Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed484(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed484(
      __seed16v,
    );
  }

  late final _seed484Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed484 = _seed484Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong484(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong484(
      __param,
    );
  }

  late final _lcong484Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong484 =
      _lcong484Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r4(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r4(
      __buffer,
      __result,
    );
  }

  late final _drand48_r4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r4 = _drand48_r4Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r4(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r4(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r4 = _erand48_r4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r4(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r4(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r4 = _lrand48_r4Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r4(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r4(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r4 = _nrand48_r4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r4(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r4(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r4 = _mrand48_r4Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r4(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r4(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r4 = _jrand48_r4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r4(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r4(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r4 =
      _srand48_r4Ptr.asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r4(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r4(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r4 = _seed48_r4Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r4(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r4(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r4 = _lcong48_r4Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int arc4random4() {
    return _arc4random4();
  }

  late final _arc4random4Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random4 = _arc4random4Ptr.asFunction<int Function()>();

  void arc4random_buf4(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf4(
      __buf,
      __size,
    );
  }

  late final _arc4random_buf4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('arc4random_buf');
  late final _arc4random_buf4 = _arc4random_buf4Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform4(
    int __upper_bound,
  ) {
    return _arc4random_uniform4(
      __upper_bound,
    );
  }

  late final _arc4random_uniform4Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
          'arc4random_uniform');
  late final _arc4random_uniform4 =
      _arc4random_uniform4Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc4(
    int __size,
  ) {
    return _malloc4(
      __size,
    );
  }

  late final _malloc4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'malloc');
  late final _malloc4 =
      _malloc4Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc4(
    int __nmemb,
    int __size,
  ) {
    return _calloc4(
      __nmemb,
      __size,
    );
  }

  late final _calloc4Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'calloc');
  late final _calloc4 =
      _calloc4Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc4(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc4(
      __ptr,
      __size,
    );
  }

  late final _realloc4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('realloc');
  late final _realloc4 = _realloc4Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free4(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free4(
      __ptr,
    );
  }

  late final _free4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free4 =
      _free4Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray8(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray8(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray8 = _reallocarray8Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray9(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray9(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray9 = _reallocarray9Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca4(
    int __size,
  ) {
    return _alloca4(
      __size,
    );
  }

  late final _alloca4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'alloca');
  late final _alloca4 =
      _alloca4Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc4(
    int __size,
  ) {
    return _valloc4(
      __size,
    );
  }

  late final _valloc4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'valloc');
  late final _valloc4 =
      _valloc4Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign4(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign4(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int,
              ffi.Int)>>('posix_memalign');
  late final _posix_memalign4 = _posix_memalign4Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc4(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc4(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc4Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'aligned_alloc');
  late final _aligned_alloc4 =
      _aligned_alloc4Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort4() {
    return _abort4();
  }

  late final _abort4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort4 = _abort4Ptr.asFunction<void Function()>();

  int atexit4(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit4(
      __func,
    );
  }

  late final _atexit4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit4 = _atexit4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit4(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit4(
      __func,
    );
  }

  late final _at_quick_exit4Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit4 = _at_quick_exit4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit4(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit4(
      __func,
      __arg,
    );
  }

  late final _on_exit4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit4 = _on_exit4Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit4(
    int __status,
  ) {
    return _exit4(
      __status,
    );
  }

  late final _exit4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit4 = _exit4Ptr.asFunction<void Function(int)>();

  void quick_exit4(
    int __status,
  ) {
    return _quick_exit4(
      __status,
    );
  }

  late final _quick_exit4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit4 = _quick_exit4Ptr.asFunction<void Function(int)>();

  void _Exit4(
    int __status,
  ) {
    return __Exit4(
      __status,
    );
  }

  late final __Exit4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit4 = __Exit4Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv4(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv4(
      __name,
    );
  }

  late final _getenv4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv4 = _getenv4Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv4(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv4(
      __string,
    );
  }

  late final _putenv4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv4 =
      _putenv4Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv4(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv4(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv4 = _setenv4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv4(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv4(
      __name,
    );
  }

  late final _unsetenv4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv4 =
      _unsetenv4Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv4() {
    return _clearenv4();
  }

  late final _clearenv4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv4 = _clearenv4Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp4(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp4(
      __template,
    );
  }

  late final _mktemp4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp4 = _mktemp4Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp4(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp4(
      __template,
    );
  }

  late final _mkstemp4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp4 =
      _mkstemp4Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps4(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps4(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps4Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps4 =
      _mkstemps4Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp4(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp4(
      __template,
    );
  }

  late final _mkdtemp4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp4 = _mkdtemp4Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system4(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system4(
      __command,
    );
  }

  late final _system4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system4 =
      _system4Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath4(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath4(
      __name,
      __resolved,
    );
  }

  late final _realpath4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath4 = _realpath4Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch4(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch4(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              __compar_fn_t)>>('bsearch');
  late final _bsearch4 = _bsearch4Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort4(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort4(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              __compar_fn_t)>>('qsort');
  late final _qsort4 = _qsort4Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs4(
    int __x,
  ) {
    return _abs4(
      __x,
    );
  }

  late final _abs4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs4 = _abs4Ptr.asFunction<int Function(int)>();

  int labs4(
    int __x,
  ) {
    return _labs4(
      __x,
    );
  }

  late final _labs4Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs4 = _labs4Ptr.asFunction<int Function(int)>();

  int llabs4(
    int __x,
  ) {
    return _llabs4(
      __x,
    );
  }

  late final _llabs4Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs4 = _llabs4Ptr.asFunction<int Function(int)>();

  div_t div4(
    int __numer,
    int __denom,
  ) {
    return _div4(
      __numer,
      __denom,
    );
  }

  late final _div4Ptr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div4 = _div4Ptr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv4(
    int __numer,
    int __denom,
  ) {
    return _ldiv4(
      __numer,
      __denom,
    );
  }

  late final _ldiv4Ptr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv4 = _ldiv4Ptr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv4(
    int __numer,
    int __denom,
  ) {
    return _lldiv4(
      __numer,
      __denom,
    );
  }

  late final _lldiv4Ptr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv4 = _lldiv4Ptr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt4(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt4(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt4 = _ecvt4Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt4(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt4(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt4 = _fcvt4Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt4(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt4(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt4 = _gcvt4Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r4(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r4(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('ecvt_r');
  late final _ecvt_r4 = _ecvt_r4Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r4(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r4(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('fcvt_r');
  late final _fcvt_r4 = _fcvt_r4Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen4(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen4(
      __s,
      __n,
    );
  }

  late final _mblen4Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mblen');
  late final _mblen4 =
      _mblen4Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc4(
    ffi.Pointer<ffi.Int> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc4(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('mbtowc');
  late final _mbtowc4 = _mbtowc4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb4(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb4(
      __s,
      __wchar,
    );
  }

  late final _wctomb4Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'wctomb');
  late final _wctomb4 =
      _wctomb4Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs4(
    ffi.Pointer<ffi.Int> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs4(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mbstowcs');
  late final _mbstowcs4 = _mbstowcs4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs4(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Int> __pwcs,
    int __n,
  ) {
    return _wcstombs4(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('wcstombs');
  late final _wcstombs4 = _wcstombs4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  int rpmatch4(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch4(
      __response,
    );
  }

  late final _rpmatch4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch4 =
      _rpmatch4Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt4(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt4(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt4 = _getsubopt4Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg4(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg4(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg4 =
      _getloadavg4Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Void> memcpy4(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy4(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpy4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memcpy');
  late final _memcpy4 = _memcpy4Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove4(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove4(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmove4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memmove');
  late final _memmove4 = _memmove4Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy4(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy4(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpy4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memccpy');
  late final _memccpy4 = _memccpy4Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset4(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset4(
      __s,
      __c,
      __n,
    );
  }

  late final _memset4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memset');
  late final _memset4 = _memset4Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp4(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp4(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmp4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('memcmp');
  late final _memcmp4 = _memcmp4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq4(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq4(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeq4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__memcmpeq');
  late final ___memcmpeq4 = ___memcmpeq4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr4(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr4(
      __s,
      __c,
      __n,
    );
  }

  late final _memchr4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memchr');
  late final _memchr4 = _memchr4Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy4(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy4(
      __dest,
      __src,
    );
  }

  late final _strcpy4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy4 = _strcpy4Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy4(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy4(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpy4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncpy');
  late final _strncpy4 = _strncpy4Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat4(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat4(
      __dest,
      __src,
    );
  }

  late final _strcat4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat4 = _strcat4Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat4(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat4(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncat4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncat');
  late final _strncat4 = _strncat4Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp4(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp4(
      __s1,
      __s2,
    );
  }

  late final _strcmp4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp4 = _strcmp4Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp4(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp4(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmp4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncmp');
  late final _strncmp4 = _strncmp4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll4(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll4(
      __s1,
      __s2,
    );
  }

  late final _strcoll4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll4 = _strcoll4Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm4(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm4(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrm4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strxfrm');
  late final _strxfrm4 = _strxfrm4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l4(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l4(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_l4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l4 = _strcoll_l4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l4(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l4(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_l4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strxfrm_l');
  late final _strxfrm_l4 = _strxfrm_l4Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup4(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup4(
      __s,
    );
  }

  late final _strdup4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup4 = _strdup4Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup4(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup4(
      __string,
      __n,
    );
  }

  late final _strndup4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strndup');
  late final _strndup4 = _strndup4Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr4(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr4(
      __s,
      __c,
    );
  }

  late final _strchr4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr4 = _strchr4Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr4(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr4(
      __s,
      __c,
    );
  }

  late final _strrchr4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr4 = _strrchr4Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn4(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn4(
      __s,
      __reject,
    );
  }

  late final _strcspn4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn4 = _strcspn4Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn4(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn4(
      __s,
      __accept,
    );
  }

  late final _strspn4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn4 = _strspn4Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk4(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk4(
      __s,
      __accept,
    );
  }

  late final _strpbrk4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk4 = _strpbrk4Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr4(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr4(
      __haystack,
      __needle,
    );
  }

  late final _strstr4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr4 = _strstr4Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok4(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok4(
      __s,
      __delim,
    );
  }

  late final _strtok4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok4 = _strtok4Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r4(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r4(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_r4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r4 = ___strtok_r4Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r4(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r4(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_r4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r4 = _strtok_r4Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen4(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen4(
      __s,
    );
  }

  late final _strlen4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'strlen');
  late final _strlen4 =
      _strlen4Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen4(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen4(
      __string,
      __maxlen,
    );
  }

  late final _strnlen4Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'strnlen');
  late final _strnlen4 =
      _strnlen4Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror4(
    int __errnum,
  ) {
    return _strerror4(
      __errnum,
    );
  }

  late final _strerror4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror4 =
      _strerror4Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r4(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r4(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_r4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('strerror_r');
  late final _strerror_r4 = _strerror_r4Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l4(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l4(
      __errnum,
      __l,
    );
  }

  late final _strerror_l4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l4 = _strerror_l4Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp4(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp4(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmp4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcmp');
  late final _bcmp4 = _bcmp4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy4(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy4(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopy4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcopy');
  late final _bcopy4 = _bcopy4Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero4(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero4(
      __s,
      __n,
    );
  }

  late final _bzero4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('bzero');
  late final _bzero4 =
      _bzero4Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index4(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index4(
      __s,
      __c,
    );
  }

  late final _index4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index4 = _index4Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex4(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex4(
      __s,
      __c,
    );
  }

  late final _rindex4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex4 = _rindex4Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs4(
    int __i,
  ) {
    return _ffs4(
      __i,
    );
  }

  late final _ffs4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs4 = _ffs4Ptr.asFunction<int Function(int)>();

  int ffsl4(
    int __l,
  ) {
    return _ffsl4(
      __l,
    );
  }

  late final _ffsl4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl4 = _ffsl4Ptr.asFunction<int Function(int)>();

  int ffsll4(
    int __ll,
  ) {
    return _ffsll4(
      __ll,
    );
  }

  late final _ffsll4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll4 = _ffsll4Ptr.asFunction<int Function(int)>();

  int strcasecmp4(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp4(
      __s1,
      __s2,
    );
  }

  late final _strcasecmp4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp4 = _strcasecmp4Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp4(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp4(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmp4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncasecmp');
  late final _strncasecmp4 = _strncasecmp4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l4(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l4(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_l4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l4 = _strcasecmp_l4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l4(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l4(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_l4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l4 = _strncasecmp_l4Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero4(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero4(
      __s,
      __n,
    );
  }

  late final _explicit_bzero4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('explicit_bzero');
  late final _explicit_bzero4 = _explicit_bzero4Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep4(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep4(
      __stringp,
      __delim,
    );
  }

  late final _strsep4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep4 = _strsep4Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal4(
    int __sig,
  ) {
    return _strsignal4(
      __sig,
    );
  }

  late final _strsignal4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal4 =
      _strsignal4Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy4(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy4(
      __dest,
      __src,
    );
  }

  late final ___stpcpy4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy4 = ___stpcpy4Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy4(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy4(
      __dest,
      __src,
    );
  }

  late final _stpcpy4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy4 = _stpcpy4Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy4(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy4(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpy4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('__stpncpy');
  late final ___stpncpy4 = ___stpncpy4Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy4(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy4(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpy4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('stpncpy');
  late final _stpncpy4 = _stpncpy4Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int buffer_equal(
    ffi.Pointer<ffi.Void> a,
    ffi.Pointer<ffi.Void> b,
  ) {
    return _buffer_equal(
      a,
      b,
    );
  }

  late final _buffer_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>('buffer_equal');
  late final _buffer_equal = _buffer_equalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  void buffer_free(
    ffi.Pointer<ffi.Void> struct_buffer,
  ) {
    return _buffer_free(
      struct_buffer,
    );
  }

  late final _buffer_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'buffer_free');
  late final _buffer_free =
      _buffer_freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<buffer> buffer_copy(
    ffi.Pointer<ffi.Void> data,
    int data_len,
  ) {
    return _buffer_copy(
      data,
      data_len,
    );
  }

  late final _buffer_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<buffer> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('buffer_copy');
  late final _buffer_copy = _buffer_copyPtr
      .asFunction<ffi.Pointer<buffer> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<cstring> cstr_new(
    ffi.Pointer<ffi.Char> init_str,
  ) {
    return _cstr_new(
      init_str,
    );
  }

  late final _cstr_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cstring> Function(ffi.Pointer<ffi.Char>)>>('cstr_new');
  late final _cstr_new = _cstr_newPtr
      .asFunction<ffi.Pointer<cstring> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<cstring> cstr_new_sz(
    int sz,
  ) {
    return _cstr_new_sz(
      sz,
    );
  }

  late final _cstr_new_szPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<cstring> Function(ffi.Int)>>(
          'cstr_new_sz');
  late final _cstr_new_sz =
      _cstr_new_szPtr.asFunction<ffi.Pointer<cstring> Function(int)>();

  ffi.Pointer<cstring> cstr_new_buf(
    ffi.Pointer<ffi.Void> buf,
    int sz,
  ) {
    return _cstr_new_buf(
      buf,
      sz,
    );
  }

  late final _cstr_new_bufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cstring> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('cstr_new_buf');
  late final _cstr_new_buf = _cstr_new_bufPtr
      .asFunction<ffi.Pointer<cstring> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<cstring> cstr_new_cstr(
    ffi.Pointer<cstring> copy_str,
  ) {
    return _cstr_new_cstr(
      copy_str,
    );
  }

  late final _cstr_new_cstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cstring> Function(
              ffi.Pointer<cstring>)>>('cstr_new_cstr');
  late final _cstr_new_cstr = _cstr_new_cstrPtr
      .asFunction<ffi.Pointer<cstring> Function(ffi.Pointer<cstring>)>();

  void cstr_free(
    ffi.Pointer<cstring> s,
    int free_buf,
  ) {
    return _cstr_free(
      s,
      free_buf,
    );
  }

  late final _cstr_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_free');
  late final _cstr_free =
      _cstr_freePtr.asFunction<void Function(ffi.Pointer<cstring>, int)>();

  int cstr_equal(
    ffi.Pointer<cstring> a,
    ffi.Pointer<cstring> b,
  ) {
    return _cstr_equal(
      a,
      b,
    );
  }

  late final _cstr_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_equal');
  late final _cstr_equal = _cstr_equalPtr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_compare(
    ffi.Pointer<cstring> a,
    ffi.Pointer<cstring> b,
  ) {
    return _cstr_compare(
      a,
      b,
    );
  }

  late final _cstr_comparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_compare');
  late final _cstr_compare = _cstr_comparePtr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_resize(
    ffi.Pointer<cstring> s,
    int sz,
  ) {
    return _cstr_resize(
      s,
      sz,
    );
  }

  late final _cstr_resizePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_resize');
  late final _cstr_resize =
      _cstr_resizePtr.asFunction<int Function(ffi.Pointer<cstring>, int)>();

  int cstr_erase(
    ffi.Pointer<cstring> s,
    int pos,
    int len,
  ) {
    return _cstr_erase(
      s,
      pos,
      len,
    );
  }

  late final _cstr_erasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Int, ssize_t)>>('cstr_erase');
  late final _cstr_erase =
      _cstr_erasePtr.asFunction<int Function(ffi.Pointer<cstring>, int, int)>();

  int cstr_append_buf(
    ffi.Pointer<cstring> s,
    ffi.Pointer<ffi.Void> buf,
    int sz,
  ) {
    return _cstr_append_buf(
      s,
      buf,
      sz,
    );
  }

  late final _cstr_append_bufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('cstr_append_buf');
  late final _cstr_append_buf = _cstr_append_bufPtr.asFunction<
      int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Void>, int)>();

  int cstr_append_cstr(
    ffi.Pointer<cstring> s,
    ffi.Pointer<cstring> append,
  ) {
    return _cstr_append_cstr(
      s,
      append,
    );
  }

  late final _cstr_append_cstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_append_cstr');
  late final _cstr_append_cstr = _cstr_append_cstrPtr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_append_c(
    ffi.Pointer<cstring> s,
    int ch,
  ) {
    return _cstr_append_c(
      s,
      ch,
    );
  }

  late final _cstr_append_cPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Char)>>(
      'cstr_append_c');
  late final _cstr_append_c =
      _cstr_append_cPtr.asFunction<int Function(ffi.Pointer<cstring>, int)>();

  int cstr_alloc_minsize(
    ffi.Pointer<cstring> s,
    int sz,
  ) {
    return _cstr_alloc_minsize(
      s,
      sz,
    );
  }

  late final _cstr_alloc_minsizePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_alloc_minsize');
  late final _cstr_alloc_minsize = _cstr_alloc_minsizePtr
      .asFunction<int Function(ffi.Pointer<cstring>, int)>();

  void dogecoin_mem_set_mapper(
    dogecoin_mem_mapper mapper,
  ) {
    return _dogecoin_mem_set_mapper(
      mapper,
    );
  }

  late final _dogecoin_mem_set_mapperPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dogecoin_mem_mapper)>>(
          'dogecoin_mem_set_mapper');
  late final _dogecoin_mem_set_mapper = _dogecoin_mem_set_mapperPtr
      .asFunction<void Function(dogecoin_mem_mapper)>();

  void dogecoin_mem_set_mapper_default() {
    return _dogecoin_mem_set_mapper_default();
  }

  late final _dogecoin_mem_set_mapper_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'dogecoin_mem_set_mapper_default');
  late final _dogecoin_mem_set_mapper_default =
      _dogecoin_mem_set_mapper_defaultPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Void> dogecoin_malloc(
    int size,
  ) {
    return _dogecoin_malloc(
      size,
    );
  }

  late final _dogecoin_mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'dogecoin_malloc');
  late final _dogecoin_malloc =
      _dogecoin_mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> dogecoin_calloc(
    int count,
    int size,
  ) {
    return _dogecoin_calloc(
      count,
      size,
    );
  }

  late final _dogecoin_callocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'dogecoin_calloc');
  late final _dogecoin_calloc = _dogecoin_callocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> dogecoin_realloc(
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _dogecoin_realloc(
      ptr,
      size,
    );
  }

  late final _dogecoin_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('dogecoin_realloc');
  late final _dogecoin_realloc = _dogecoin_reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void dogecoin_free(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _dogecoin_free(
      ptr,
    );
  }

  late final _dogecoin_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'dogecoin_free');
  late final _dogecoin_free =
      _dogecoin_freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> memcpy_safe(
    ffi.Pointer<ffi.Void> destination,
    ffi.Pointer<ffi.Void> source,
    int count,
  ) {
    return _memcpy_safe(
      destination,
      source,
      count,
    );
  }

  late final _memcpy_safePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.UnsignedInt)>>('memcpy_safe');
  late final _memcpy_safe = _memcpy_safePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void sha256_init(
    ffi.Pointer<sha256_context> arg0,
  ) {
    return _sha256_init(
      arg0,
    );
  }

  late final _sha256_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sha256_context>)>>(
      'sha256_init');
  late final _sha256_init =
      _sha256_initPtr.asFunction<void Function(ffi.Pointer<sha256_context>)>();

  void sha256_write(
    ffi.Pointer<sha256_context> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
    int size_t,
  ) {
    return _sha256_write(
      arg0,
      arg1,
      size_t,
    );
  }

  late final _sha256_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sha256_context>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('sha256_write');
  late final _sha256_write = _sha256_writePtr.asFunction<
      void Function(
          ffi.Pointer<sha256_context>, ffi.Pointer<ffi.Uint8>, int)>();

  void sha256_finalize(
    ffi.Pointer<sha256_context> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
  ) {
    return _sha256_finalize(
      arg0,
      arg1,
    );
  }

  late final _sha256_finalizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sha256_context>,
              ffi.Pointer<ffi.Uint8>)>>('sha256_finalize');
  late final _sha256_finalize = _sha256_finalizePtr.asFunction<
      void Function(ffi.Pointer<sha256_context>, ffi.Pointer<ffi.Uint8>)>();

  void sha256_raw(
    ffi.Pointer<ffi.Uint8> arg0,
    int size_t,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return _sha256_raw(
      arg0,
      size_t,
      arg2,
    );
  }

  late final _sha256_rawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<ffi.Uint8>)>>('sha256_raw');
  late final _sha256_raw = _sha256_rawPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  void sha512_init(
    ffi.Pointer<sha512_context> arg0,
  ) {
    return _sha512_init(
      arg0,
    );
  }

  late final _sha512_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sha512_context>)>>(
      'sha512_init');
  late final _sha512_init =
      _sha512_initPtr.asFunction<void Function(ffi.Pointer<sha512_context>)>();

  void sha512_write(
    ffi.Pointer<sha512_context> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
    int size_t,
  ) {
    return _sha512_write(
      arg0,
      arg1,
      size_t,
    );
  }

  late final _sha512_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sha512_context>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('sha512_write');
  late final _sha512_write = _sha512_writePtr.asFunction<
      void Function(
          ffi.Pointer<sha512_context>, ffi.Pointer<ffi.Uint8>, int)>();

  void sha512_finalize(
    ffi.Pointer<sha512_context> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
  ) {
    return _sha512_finalize(
      arg0,
      arg1,
    );
  }

  late final _sha512_finalizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sha512_context>,
              ffi.Pointer<ffi.Uint8>)>>('sha512_finalize');
  late final _sha512_finalize = _sha512_finalizePtr.asFunction<
      void Function(ffi.Pointer<sha512_context>, ffi.Pointer<ffi.Uint8>)>();

  void sha512_raw(
    ffi.Pointer<ffi.Uint8> arg0,
    int size_t,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return _sha512_raw(
      arg0,
      size_t,
      arg2,
    );
  }

  late final _sha512_rawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<ffi.Uint8>)>>('sha512_raw');
  late final _sha512_raw = _sha512_rawPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  void hmac_sha256(
    ffi.Pointer<ffi.Uint8> key,
    int keylen,
    ffi.Pointer<ffi.Uint8> msg,
    int msglen,
    ffi.Pointer<ffi.Uint8> hmac,
  ) {
    return _hmac_sha256(
      key,
      keylen,
      msg,
      msglen,
      hmac,
    );
  }

  late final _hmac_sha256Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint8>)>>('hmac_sha256');
  late final _hmac_sha256 = _hmac_sha256Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>)>();

  void hmac_sha512(
    ffi.Pointer<ffi.Uint8> key,
    int keylen,
    ffi.Pointer<ffi.Uint8> msg,
    int msglen,
    ffi.Pointer<ffi.Uint8> hmac,
  ) {
    return _hmac_sha512(
      key,
      keylen,
      msg,
      msglen,
      hmac,
    );
  }

  late final _hmac_sha512Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint8>)>>('hmac_sha512');
  late final _hmac_sha512 = _hmac_sha512Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<vector> vector_new(
    int res,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        free_f,
  ) {
    return _vector_new(
      res,
      free_f,
    );
  }

  late final _vector_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<vector> Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>)>>)>>('vector_new');
  late final _vector_new = _vector_newPtr.asFunction<
      ffi.Pointer<vector> Function(
          int,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  void vector_free(
    ffi.Pointer<vector> vec,
    int free_array,
  ) {
    return _vector_free(
      vec,
      free_array,
    );
  }

  late final _vector_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<vector>, dogecoin_bool)>>('vector_free');
  late final _vector_free =
      _vector_freePtr.asFunction<void Function(ffi.Pointer<vector>, int)>();

  int vector_add(
    ffi.Pointer<vector> vec,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _vector_add(
      vec,
      data,
    );
  }

  late final _vector_addPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>>('vector_add');
  late final _vector_add = _vector_addPtr
      .asFunction<int Function(ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>();

  int vector_remove(
    ffi.Pointer<vector> vec,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _vector_remove(
      vec,
      data,
    );
  }

  late final _vector_removePtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>>('vector_remove');
  late final _vector_remove = _vector_removePtr
      .asFunction<int Function(ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>();

  void vector_remove_idx(
    ffi.Pointer<vector> vec,
    int idx,
  ) {
    return _vector_remove_idx(
      vec,
      idx,
    );
  }

  late final _vector_remove_idxPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<vector>, ffi.Int)>>(
      'vector_remove_idx');
  late final _vector_remove_idx = _vector_remove_idxPtr
      .asFunction<void Function(ffi.Pointer<vector>, int)>();

  void vector_remove_range(
    ffi.Pointer<vector> vec,
    int idx,
    int len,
  ) {
    return _vector_remove_range(
      vec,
      idx,
      len,
    );
  }

  late final _vector_remove_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<vector>, ffi.Int, ffi.Int)>>('vector_remove_range');
  late final _vector_remove_range = _vector_remove_rangePtr
      .asFunction<void Function(ffi.Pointer<vector>, int, int)>();

  int vector_resize(
    ffi.Pointer<vector> vec,
    int newsz,
  ) {
    return _vector_resize(
      vec,
      newsz,
    );
  }

  late final _vector_resizePtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<vector>, ffi.Int)>>('vector_resize');
  late final _vector_resize =
      _vector_resizePtr.asFunction<int Function(ffi.Pointer<vector>, int)>();

  int vector_find(
    ffi.Pointer<vector> vec,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _vector_find(
      vec,
      data,
    );
  }

  late final _vector_findPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>>('vector_find');
  late final _vector_find = _vector_findPtr
      .asFunction<int Function(ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<dogecoin_chainparams> chain_from_b58_prefix2(
    ffi.Pointer<ffi.Char> address,
  ) {
    return _chain_from_b58_prefix2(
      address,
    );
  }

  late final _chain_from_b58_prefix2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<dogecoin_chainparams> Function(
              ffi.Pointer<ffi.Char>)>>('chain_from_b58_prefix');
  late final _chain_from_b58_prefix2 = _chain_from_b58_prefix2Ptr.asFunction<
      ffi.Pointer<dogecoin_chainparams> Function(ffi.Pointer<ffi.Char>)>();

  int chain_from_b58_prefix_bool2(
    ffi.Pointer<ffi.Char> address,
  ) {
    return _chain_from_b58_prefix_bool2(
      address,
    );
  }

  late final _chain_from_b58_prefix_bool2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'chain_from_b58_prefix_bool');
  late final _chain_from_b58_prefix_bool2 = _chain_from_b58_prefix_bool2Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void dogecoin_privkey_init(
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_init(
      privkey,
    );
  }

  late final _dogecoin_privkey_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_key>)>>(
          'dogecoin_privkey_init');
  late final _dogecoin_privkey_init = _dogecoin_privkey_initPtr
      .asFunction<void Function(ffi.Pointer<dogecoin_key>)>();

  int dogecoin_privkey_is_valid(
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_is_valid(
      privkey,
    );
  }

  late final _dogecoin_privkey_is_validPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_key>)>>('dogecoin_privkey_is_valid');
  late final _dogecoin_privkey_is_valid = _dogecoin_privkey_is_validPtr
      .asFunction<int Function(ffi.Pointer<dogecoin_key>)>();

  void dogecoin_privkey_cleanse(
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_cleanse(
      privkey,
    );
  }

  late final _dogecoin_privkey_cleansePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_key>)>>(
          'dogecoin_privkey_cleanse');
  late final _dogecoin_privkey_cleanse = _dogecoin_privkey_cleansePtr
      .asFunction<void Function(ffi.Pointer<dogecoin_key>)>();

  int dogecoin_privkey_gen(
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_gen(
      privkey,
    );
  }

  late final _dogecoin_privkey_genPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_key>)>>('dogecoin_privkey_gen');
  late final _dogecoin_privkey_gen = _dogecoin_privkey_genPtr
      .asFunction<int Function(ffi.Pointer<dogecoin_key>)>();

  int dogecoin_privkey_verify_pubkey(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_privkey_verify_pubkey(
      privkey,
      pubkey,
    );
  }

  late final _dogecoin_privkey_verify_pubkeyPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_key>,
              ffi.Pointer<dogecoin_pubkey>)>>('dogecoin_privkey_verify_pubkey');
  late final _dogecoin_privkey_verify_pubkey =
      _dogecoin_privkey_verify_pubkeyPtr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_key>, ffi.Pointer<dogecoin_pubkey>)>();

  void dogecoin_privkey_encode_wif(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<dogecoin_chainparams> chain,
    ffi.Pointer<ffi.Char> privkey_wif,
    ffi.Pointer<ffi.Int> strsize_inout,
  ) {
    return _dogecoin_privkey_encode_wif(
      privkey,
      chain,
      privkey_wif,
      strsize_inout,
    );
  }

  late final _dogecoin_privkey_encode_wifPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_privkey_encode_wif');
  late final _dogecoin_privkey_encode_wif =
      _dogecoin_privkey_encode_wifPtr.asFunction<
          void Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>();

  int dogecoin_privkey_decode_wif(
    ffi.Pointer<ffi.Char> privkey_wif,
    ffi.Pointer<dogecoin_chainparams> chain,
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_decode_wif(
      privkey_wif,
      chain,
      privkey,
    );
  }

  late final _dogecoin_privkey_decode_wifPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<dogecoin_key>)>>('dogecoin_privkey_decode_wif');
  late final _dogecoin_privkey_decode_wif =
      _dogecoin_privkey_decode_wifPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<dogecoin_key>)>();

  void dogecoin_pubkey_init(
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_pubkey_init(
      pubkey,
    );
  }

  late final _dogecoin_pubkey_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_pubkey>)>>(
      'dogecoin_pubkey_init');
  late final _dogecoin_pubkey_init = _dogecoin_pubkey_initPtr
      .asFunction<void Function(ffi.Pointer<dogecoin_pubkey>)>();

  int dogecoin_pubkey_get_length(
    int ch_header,
  ) {
    return _dogecoin_pubkey_get_length(
      ch_header,
    );
  }

  late final _dogecoin_pubkey_get_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedChar)>>(
          'dogecoin_pubkey_get_length');
  late final _dogecoin_pubkey_get_length =
      _dogecoin_pubkey_get_lengthPtr.asFunction<int Function(int)>();

  int dogecoin_pubkey_is_valid(
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_pubkey_is_valid(
      pubkey,
    );
  }

  late final _dogecoin_pubkey_is_validPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_pubkey>)>>('dogecoin_pubkey_is_valid');
  late final _dogecoin_pubkey_is_valid = _dogecoin_pubkey_is_validPtr
      .asFunction<int Function(ffi.Pointer<dogecoin_pubkey>)>();

  void dogecoin_pubkey_cleanse(
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_pubkey_cleanse(
      pubkey,
    );
  }

  late final _dogecoin_pubkey_cleansePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_pubkey>)>>(
      'dogecoin_pubkey_cleanse');
  late final _dogecoin_pubkey_cleanse = _dogecoin_pubkey_cleansePtr
      .asFunction<void Function(ffi.Pointer<dogecoin_pubkey>)>();

  void dogecoin_pubkey_from_key(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<dogecoin_pubkey> pubkey_inout,
  ) {
    return _dogecoin_pubkey_from_key(
      privkey,
      pubkey_inout,
    );
  }

  late final _dogecoin_pubkey_from_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_key>,
              ffi.Pointer<dogecoin_pubkey>)>>('dogecoin_pubkey_from_key');
  late final _dogecoin_pubkey_from_key =
      _dogecoin_pubkey_from_keyPtr.asFunction<
          void Function(
              ffi.Pointer<dogecoin_key>, ffi.Pointer<dogecoin_pubkey>)>();

  void dogecoin_pubkey_get_hash160(
    ffi.Pointer<dogecoin_pubkey> pubkey,
    ffi.Pointer<ffi.Uint8> hash160,
  ) {
    return _dogecoin_pubkey_get_hash160(
      pubkey,
      hash160,
    );
  }

  late final _dogecoin_pubkey_get_hash160Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_pubkey>,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_pubkey_get_hash160');
  late final _dogecoin_pubkey_get_hash160 =
      _dogecoin_pubkey_get_hash160Ptr.asFunction<
          void Function(
              ffi.Pointer<dogecoin_pubkey>, ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_pubkey_get_hex(
    ffi.Pointer<dogecoin_pubkey> pubkey,
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.Int> strsize,
  ) {
    return _dogecoin_pubkey_get_hex(
      pubkey,
      str,
      strsize,
    );
  }

  late final _dogecoin_pubkey_get_hexPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_pubkey>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_pubkey_get_hex');
  late final _dogecoin_pubkey_get_hex = _dogecoin_pubkey_get_hexPtr.asFunction<
      int Function(ffi.Pointer<dogecoin_pubkey>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>)>();

  int dogecoin_key_sign_hash(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<ffi.Uint8> hash,
    ffi.Pointer<ffi.UnsignedChar> sigout,
    ffi.Pointer<ffi.Int> outlen,
  ) {
    return _dogecoin_key_sign_hash(
      privkey,
      hash,
      sigout,
      outlen,
    );
  }

  late final _dogecoin_key_sign_hashPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_key_sign_hash');
  late final _dogecoin_key_sign_hash = _dogecoin_key_sign_hashPtr.asFunction<
      int Function(ffi.Pointer<dogecoin_key>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Int>)>();

  int dogecoin_key_sign_hash_compact(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<ffi.Uint8> hash,
    ffi.Pointer<ffi.UnsignedChar> sigout,
    ffi.Pointer<ffi.Int> outlen,
  ) {
    return _dogecoin_key_sign_hash_compact(
      privkey,
      hash,
      sigout,
      outlen,
    );
  }

  late final _dogecoin_key_sign_hash_compactPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_key_sign_hash_compact');
  late final _dogecoin_key_sign_hash_compact =
      _dogecoin_key_sign_hash_compactPtr.asFunction<
          int Function(ffi.Pointer<dogecoin_key>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Int>)>();

  int dogecoin_key_sign_hash_compact_recoverable(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<ffi.Uint8> hash,
    ffi.Pointer<ffi.UnsignedChar> sigout,
    ffi.Pointer<ffi.Int> outlen,
    ffi.Pointer<ffi.Int> recid,
  ) {
    return _dogecoin_key_sign_hash_compact_recoverable(
      privkey,
      hash,
      sigout,
      outlen,
      recid,
    );
  }

  late final _dogecoin_key_sign_hash_compact_recoverablePtr = _lookup<
          ffi.NativeFunction<
              dogecoin_bool Function(
                  ffi.Pointer<dogecoin_key>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.UnsignedChar>,
                  ffi.Pointer<ffi.Int>,
                  ffi.Pointer<ffi.Int>)>>(
      'dogecoin_key_sign_hash_compact_recoverable');
  late final _dogecoin_key_sign_hash_compact_recoverable =
      _dogecoin_key_sign_hash_compact_recoverablePtr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  int dogecoin_key_sign_recover_pubkey(
    ffi.Pointer<ffi.UnsignedChar> sig,
    ffi.Pointer<ffi.Uint8> hash,
    int recid,
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_key_sign_recover_pubkey(
      sig,
      hash,
      recid,
      pubkey,
    );
  }

  late final _dogecoin_key_sign_recover_pubkeyPtr = _lookup<
          ffi.NativeFunction<
              dogecoin_bool Function(
                  ffi.Pointer<ffi.UnsignedChar>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Int,
                  ffi.Pointer<dogecoin_pubkey>)>>(
      'dogecoin_key_sign_recover_pubkey');
  late final _dogecoin_key_sign_recover_pubkey =
      _dogecoin_key_sign_recover_pubkeyPtr.asFunction<
          int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Uint8>,
              int, ffi.Pointer<dogecoin_pubkey>)>();

  int dogecoin_pubkey_verify_sig(
    ffi.Pointer<dogecoin_pubkey> pubkey,
    ffi.Pointer<ffi.Uint8> hash,
    ffi.Pointer<ffi.UnsignedChar> sigder,
    int len,
  ) {
    return _dogecoin_pubkey_verify_sig(
      pubkey,
      hash,
      sigder,
      len,
    );
  }

  late final _dogecoin_pubkey_verify_sigPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_pubkey>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('dogecoin_pubkey_verify_sig');
  late final _dogecoin_pubkey_verify_sig =
      _dogecoin_pubkey_verify_sigPtr.asFunction<
          int Function(ffi.Pointer<dogecoin_pubkey>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>, int)>();

  int dogecoin_pubkey_getaddr_p2pkh(
    ffi.Pointer<dogecoin_pubkey> pubkey,
    ffi.Pointer<dogecoin_chainparams> chain,
    ffi.Pointer<ffi.Char> addrout,
  ) {
    return _dogecoin_pubkey_getaddr_p2pkh(
      pubkey,
      chain,
      addrout,
    );
  }

  late final _dogecoin_pubkey_getaddr_p2pkhPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_pubkey>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<ffi.Char>)>>('dogecoin_pubkey_getaddr_p2pkh');
  late final _dogecoin_pubkey_getaddr_p2pkh =
      _dogecoin_pubkey_getaddr_p2pkhPtr.asFunction<
          int Function(ffi.Pointer<dogecoin_pubkey>,
              ffi.Pointer<dogecoin_chainparams>, ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<ffi.Int> _MAX_SCRIPT_SIZE =
      _lookup<ffi.Int>('MAX_SCRIPT_SIZE');

  int get MAX_SCRIPT_SIZE => _MAX_SCRIPT_SIZE.value;

  set MAX_SCRIPT_SIZE(int value) => _MAX_SCRIPT_SIZE.value = value;

  int dogecoin_script_copy_without_op_codeseperator(
    ffi.Pointer<cstring> scriptin,
    ffi.Pointer<cstring> scriptout,
  ) {
    return _dogecoin_script_copy_without_op_codeseperator(
      scriptin,
      scriptout,
    );
  }

  late final _dogecoin_script_copy_without_op_codeseperatorPtr = _lookup<
          ffi.NativeFunction<
              dogecoin_bool Function(
                  ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>(
      'dogecoin_script_copy_without_op_codeseperator');
  late final _dogecoin_script_copy_without_op_codeseperator =
      _dogecoin_script_copy_without_op_codeseperatorPtr.asFunction<
          int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  ffi.Pointer<dogecoin_script_op> dogecoin_script_op_new() {
    return _dogecoin_script_op_new();
  }

  late final _dogecoin_script_op_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<dogecoin_script_op> Function()>>(
          'dogecoin_script_op_new');
  late final _dogecoin_script_op_new = _dogecoin_script_op_newPtr
      .asFunction<ffi.Pointer<dogecoin_script_op> Function()>();

  void dogecoin_script_op_free(
    ffi.Pointer<dogecoin_script_op> script_op,
  ) {
    return _dogecoin_script_op_free(
      script_op,
    );
  }

  late final _dogecoin_script_op_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<dogecoin_script_op>)>>('dogecoin_script_op_free');
  late final _dogecoin_script_op_free = _dogecoin_script_op_freePtr
      .asFunction<void Function(ffi.Pointer<dogecoin_script_op>)>();

  void dogecoin_script_op_free_cb(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _dogecoin_script_op_free_cb(
      data,
    );
  }

  late final _dogecoin_script_op_free_cbPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'dogecoin_script_op_free_cb');
  late final _dogecoin_script_op_free_cb = _dogecoin_script_op_free_cbPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int dogecoin_script_get_ops(
    ffi.Pointer<cstring> script_in,
    ffi.Pointer<vector> ops_out,
  ) {
    return _dogecoin_script_get_ops(
      script_in,
      ops_out,
    );
  }

  late final _dogecoin_script_get_opsPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<cstring>,
              ffi.Pointer<vector>)>>('dogecoin_script_get_ops');
  late final _dogecoin_script_get_ops = _dogecoin_script_get_opsPtr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<vector>)>();

  int dogecoin_script_classify_ops(
    ffi.Pointer<vector> ops,
  ) {
    return _dogecoin_script_classify_ops(
      ops,
    );
  }

  late final _dogecoin_script_classify_opsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<vector>)>>(
          'dogecoin_script_classify_ops');
  late final _dogecoin_script_classify_ops = _dogecoin_script_classify_opsPtr
      .asFunction<int Function(ffi.Pointer<vector>)>();

  int dogecoin_script_classify(
    ffi.Pointer<cstring> script,
    ffi.Pointer<vector> data_out,
  ) {
    return _dogecoin_script_classify(
      script,
      data_out,
    );
  }

  late final _dogecoin_script_classifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<cstring>,
              ffi.Pointer<vector>)>>('dogecoin_script_classify');
  late final _dogecoin_script_classify = _dogecoin_script_classifyPtr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<vector>)>();

  int dogecoin_encode_op_n(
    int n,
  ) {
    return _dogecoin_encode_op_n(
      n,
    );
  }

  late final _dogecoin_encode_op_nPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int)>>(
          'dogecoin_encode_op_n');
  late final _dogecoin_encode_op_n =
      _dogecoin_encode_op_nPtr.asFunction<int Function(int)>();

  void dogecoin_script_append_op(
    ffi.Pointer<cstring> script_in,
    int op,
  ) {
    return _dogecoin_script_append_op(
      script_in,
      op,
    );
  }

  late final _dogecoin_script_append_opPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cstring>, ffi.Int32)>>('dogecoin_script_append_op');
  late final _dogecoin_script_append_op = _dogecoin_script_append_opPtr
      .asFunction<void Function(ffi.Pointer<cstring>, int)>();

  void dogecoin_script_append_pushdata(
    ffi.Pointer<cstring> script_in,
    ffi.Pointer<ffi.UnsignedChar> data,
    int datalen,
  ) {
    return _dogecoin_script_append_pushdata(
      script_in,
      data,
      datalen,
    );
  }

  late final _dogecoin_script_append_pushdataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('dogecoin_script_append_pushdata');
  late final _dogecoin_script_append_pushdata =
      _dogecoin_script_append_pushdataPtr.asFunction<
          void Function(
              ffi.Pointer<cstring>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int dogecoin_script_build_multisig(
    ffi.Pointer<cstring> script_in,
    int required_signatures,
    ffi.Pointer<vector> pubkeys_chars,
  ) {
    return _dogecoin_script_build_multisig(
      script_in,
      required_signatures,
      pubkeys_chars,
    );
  }

  late final _dogecoin_script_build_multisigPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<cstring>, ffi.UnsignedInt,
              ffi.Pointer<vector>)>>('dogecoin_script_build_multisig');
  late final _dogecoin_script_build_multisig =
      _dogecoin_script_build_multisigPtr.asFunction<
          int Function(ffi.Pointer<cstring>, int, ffi.Pointer<vector>)>();

  int dogecoin_script_build_p2pkh(
    ffi.Pointer<cstring> script,
    ffi.Pointer<ffi.Uint8> hash160,
  ) {
    return _dogecoin_script_build_p2pkh(
      script,
      hash160,
    );
  }

  late final _dogecoin_script_build_p2pkhPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<cstring>,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_script_build_p2pkh');
  late final _dogecoin_script_build_p2pkh = _dogecoin_script_build_p2pkhPtr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_script_build_p2sh(
    ffi.Pointer<cstring> script_in,
    ffi.Pointer<ffi.Uint8> hash160,
  ) {
    return _dogecoin_script_build_p2sh(
      script_in,
      hash160,
    );
  }

  late final _dogecoin_script_build_p2shPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<cstring>,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_script_build_p2sh');
  late final _dogecoin_script_build_p2sh = _dogecoin_script_build_p2shPtr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_script_get_scripthash(
    ffi.Pointer<cstring> script_in,
    ffi.Pointer<ffi.Uint8> scripthash,
  ) {
    return _dogecoin_script_get_scripthash(
      script_in,
      scripthash,
    );
  }

  late final _dogecoin_script_get_scripthashPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<cstring>,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_script_get_scripthash');
  late final _dogecoin_script_get_scripthash =
      _dogecoin_script_get_scripthashPtr.asFunction<
          int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<ffi.Char> dogecoin_tx_out_type_to_str(
    int type,
  ) {
    return _dogecoin_tx_out_type_to_str(
      type,
    );
  }

  late final _dogecoin_tx_out_type_to_strPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'dogecoin_tx_out_type_to_str');
  late final _dogecoin_tx_out_type_to_str = _dogecoin_tx_out_type_to_strPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  /// !p2pkh utilities
  int dogecoin_script_hash_to_p2pkh(
    ffi.Pointer<dogecoin_tx_out> txout,
    ffi.Pointer<ffi.Char> p2pkh,
    int is_testnet,
  ) {
    return _dogecoin_script_hash_to_p2pkh(
      txout,
      p2pkh,
      is_testnet,
    );
  }

  late final _dogecoin_script_hash_to_p2pkhPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<dogecoin_tx_out>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('dogecoin_script_hash_to_p2pkh');
  late final _dogecoin_script_hash_to_p2pkh =
      _dogecoin_script_hash_to_p2pkhPtr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx_out>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> dogecoin_p2pkh_to_script_hash(
    ffi.Pointer<ffi.Char> p2pkh,
  ) {
    return _dogecoin_p2pkh_to_script_hash(
      p2pkh,
    );
  }

  late final _dogecoin_p2pkh_to_script_hashPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('dogecoin_p2pkh_to_script_hash');
  late final _dogecoin_p2pkh_to_script_hash = _dogecoin_p2pkh_to_script_hashPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> dogecoin_private_key_wif_to_script_hash(
    ffi.Pointer<ffi.Char> private_key_wif,
  ) {
    return _dogecoin_private_key_wif_to_script_hash(
      private_key_wif,
    );
  }

  late final _dogecoin_private_key_wif_to_script_hashPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>(
      'dogecoin_private_key_wif_to_script_hash');
  late final _dogecoin_private_key_wif_to_script_hash =
      _dogecoin_private_key_wif_to_script_hashPtr
          .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  /// !create a new tx input
  ffi.Pointer<dogecoin_tx_in> dogecoin_tx_in_new() {
    return _dogecoin_tx_in_new();
  }

  late final _dogecoin_tx_in_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<dogecoin_tx_in> Function()>>(
          'dogecoin_tx_in_new');
  late final _dogecoin_tx_in_new = _dogecoin_tx_in_newPtr
      .asFunction<ffi.Pointer<dogecoin_tx_in> Function()>();

  void dogecoin_tx_in_free(
    ffi.Pointer<dogecoin_tx_in> tx_in,
  ) {
    return _dogecoin_tx_in_free(
      tx_in,
    );
  }

  late final _dogecoin_tx_in_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_tx_in>)>>(
      'dogecoin_tx_in_free');
  late final _dogecoin_tx_in_free = _dogecoin_tx_in_freePtr
      .asFunction<void Function(ffi.Pointer<dogecoin_tx_in>)>();

  void dogecoin_tx_in_copy(
    ffi.Pointer<dogecoin_tx_in> dest,
    ffi.Pointer<dogecoin_tx_in> src,
  ) {
    return _dogecoin_tx_in_copy(
      dest,
      src,
    );
  }

  late final _dogecoin_tx_in_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_tx_in>,
              ffi.Pointer<dogecoin_tx_in>)>>('dogecoin_tx_in_copy');
  late final _dogecoin_tx_in_copy = _dogecoin_tx_in_copyPtr.asFunction<
      void Function(
          ffi.Pointer<dogecoin_tx_in>, ffi.Pointer<dogecoin_tx_in>)>();

  int dogecoin_tx_in_deserialize(
    ffi.Pointer<dogecoin_tx_in> tx_in,
    ffi.Pointer<const_buffer> buf,
  ) {
    return _dogecoin_tx_in_deserialize(
      tx_in,
      buf,
    );
  }

  late final _dogecoin_tx_in_deserializePtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_tx_in>,
              ffi.Pointer<const_buffer>)>>('dogecoin_tx_in_deserialize');
  late final _dogecoin_tx_in_deserialize =
      _dogecoin_tx_in_deserializePtr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx_in>, ffi.Pointer<const_buffer>)>();

  void dogecoin_tx_in_serialize(
    ffi.Pointer<cstring> s,
    ffi.Pointer<dogecoin_tx_in> tx_in,
  ) {
    return _dogecoin_tx_in_serialize(
      s,
      tx_in,
    );
  }

  late final _dogecoin_tx_in_serializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cstring>,
              ffi.Pointer<dogecoin_tx_in>)>>('dogecoin_tx_in_serialize');
  late final _dogecoin_tx_in_serialize =
      _dogecoin_tx_in_serializePtr.asFunction<
          void Function(ffi.Pointer<cstring>, ffi.Pointer<dogecoin_tx_in>)>();

  /// !create a new tx output
  ffi.Pointer<dogecoin_tx_out> dogecoin_tx_out_new() {
    return _dogecoin_tx_out_new();
  }

  late final _dogecoin_tx_out_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<dogecoin_tx_out> Function()>>(
          'dogecoin_tx_out_new');
  late final _dogecoin_tx_out_new = _dogecoin_tx_out_newPtr
      .asFunction<ffi.Pointer<dogecoin_tx_out> Function()>();

  void dogecoin_tx_out_free(
    ffi.Pointer<dogecoin_tx_out> tx_out,
  ) {
    return _dogecoin_tx_out_free(
      tx_out,
    );
  }

  late final _dogecoin_tx_out_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_tx_out>)>>(
      'dogecoin_tx_out_free');
  late final _dogecoin_tx_out_free = _dogecoin_tx_out_freePtr
      .asFunction<void Function(ffi.Pointer<dogecoin_tx_out>)>();

  void dogecoin_tx_out_copy(
    ffi.Pointer<dogecoin_tx_out> dest,
    ffi.Pointer<dogecoin_tx_out> src,
  ) {
    return _dogecoin_tx_out_copy(
      dest,
      src,
    );
  }

  late final _dogecoin_tx_out_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_tx_out>,
              ffi.Pointer<dogecoin_tx_out>)>>('dogecoin_tx_out_copy');
  late final _dogecoin_tx_out_copy = _dogecoin_tx_out_copyPtr.asFunction<
      void Function(
          ffi.Pointer<dogecoin_tx_out>, ffi.Pointer<dogecoin_tx_out>)>();

  int dogecoin_tx_out_deserialize(
    ffi.Pointer<dogecoin_tx_out> tx_out,
    ffi.Pointer<const_buffer> buf,
  ) {
    return _dogecoin_tx_out_deserialize(
      tx_out,
      buf,
    );
  }

  late final _dogecoin_tx_out_deserializePtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_tx_out>,
              ffi.Pointer<const_buffer>)>>('dogecoin_tx_out_deserialize');
  late final _dogecoin_tx_out_deserialize =
      _dogecoin_tx_out_deserializePtr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx_out>, ffi.Pointer<const_buffer>)>();

  void dogecoin_tx_out_serialize(
    ffi.Pointer<cstring> s,
    ffi.Pointer<dogecoin_tx_out> tx_out,
  ) {
    return _dogecoin_tx_out_serialize(
      s,
      tx_out,
    );
  }

  late final _dogecoin_tx_out_serializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cstring>,
              ffi.Pointer<dogecoin_tx_out>)>>('dogecoin_tx_out_serialize');
  late final _dogecoin_tx_out_serialize =
      _dogecoin_tx_out_serializePtr.asFunction<
          void Function(ffi.Pointer<cstring>, ffi.Pointer<dogecoin_tx_out>)>();

  /// !create a new tx input
  ffi.Pointer<dogecoin_tx> dogecoin_tx_new() {
    return _dogecoin_tx_new();
  }

  late final _dogecoin_tx_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<dogecoin_tx> Function()>>(
          'dogecoin_tx_new');
  late final _dogecoin_tx_new =
      _dogecoin_tx_newPtr.asFunction<ffi.Pointer<dogecoin_tx> Function()>();

  void dogecoin_tx_free(
    ffi.Pointer<dogecoin_tx> tx,
  ) {
    return _dogecoin_tx_free(
      tx,
    );
  }

  late final _dogecoin_tx_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_tx>)>>(
          'dogecoin_tx_free');
  late final _dogecoin_tx_free = _dogecoin_tx_freePtr
      .asFunction<void Function(ffi.Pointer<dogecoin_tx>)>();

  void dogecoin_tx_copy(
    ffi.Pointer<dogecoin_tx> dest,
    ffi.Pointer<dogecoin_tx> src,
  ) {
    return _dogecoin_tx_copy(
      dest,
      src,
    );
  }

  late final _dogecoin_tx_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<dogecoin_tx>)>>('dogecoin_tx_copy');
  late final _dogecoin_tx_copy = _dogecoin_tx_copyPtr.asFunction<
      void Function(ffi.Pointer<dogecoin_tx>, ffi.Pointer<dogecoin_tx>)>();

  /// !deserialize/parse a p2p serialized dogecoin transaction
  int dogecoin_tx_deserialize(
    ffi.Pointer<ffi.UnsignedChar> tx_serialized,
    int inlen,
    ffi.Pointer<dogecoin_tx> tx,
    ffi.Pointer<ffi.Int> consumed_length,
  ) {
    return _dogecoin_tx_deserialize(
      tx_serialized,
      inlen,
      tx,
      consumed_length,
    );
  }

  late final _dogecoin_tx_deserializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_tx_deserialize');
  late final _dogecoin_tx_deserialize = _dogecoin_tx_deserializePtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<dogecoin_tx>,
          ffi.Pointer<ffi.Int>)>();

  /// !serialize a dogecoin data structure into a p2p serialized buffer
  void dogecoin_tx_serialize(
    ffi.Pointer<cstring> s,
    ffi.Pointer<dogecoin_tx> tx,
  ) {
    return _dogecoin_tx_serialize(
      s,
      tx,
    );
  }

  late final _dogecoin_tx_serializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cstring>,
              ffi.Pointer<dogecoin_tx>)>>('dogecoin_tx_serialize');
  late final _dogecoin_tx_serialize = _dogecoin_tx_serializePtr.asFunction<
      void Function(ffi.Pointer<cstring>, ffi.Pointer<dogecoin_tx>)>();

  void dogecoin_tx_hash(
    ffi.Pointer<dogecoin_tx> tx,
    ffi.Pointer<ffi.Uint8> hashout,
  ) {
    return _dogecoin_tx_hash(
      tx,
      hashout,
    );
  }

  late final _dogecoin_tx_hashPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_tx_hash');
  late final _dogecoin_tx_hash = _dogecoin_tx_hashPtr.asFunction<
      void Function(ffi.Pointer<dogecoin_tx>, ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_tx_sighash(
    ffi.Pointer<dogecoin_tx> tx_to,
    ffi.Pointer<cstring> fromPubKey,
    int in_num,
    int hashtype,
    ffi.Pointer<ffi.Uint8> hash,
  ) {
    return _dogecoin_tx_sighash(
      tx_to,
      fromPubKey,
      in_num,
      hashtype,
      hash,
    );
  }

  late final _dogecoin_tx_sighashPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<cstring>,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_tx_sighash');
  late final _dogecoin_tx_sighash = _dogecoin_tx_sighashPtr.asFunction<
      int Function(ffi.Pointer<dogecoin_tx>, ffi.Pointer<cstring>, int, int,
          ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_tx_add_address_out(
    ffi.Pointer<dogecoin_tx> tx,
    ffi.Pointer<dogecoin_chainparams> chain,
    int amount,
    ffi.Pointer<ffi.Char> address,
  ) {
    return _dogecoin_tx_add_address_out(
      tx,
      chain,
      amount,
      address,
    );
  }

  late final _dogecoin_tx_add_address_outPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Int64,
              ffi.Pointer<ffi.Char>)>>('dogecoin_tx_add_address_out');
  late final _dogecoin_tx_add_address_out =
      _dogecoin_tx_add_address_outPtr.asFunction<
          int Function(ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<dogecoin_chainparams>, int, ffi.Pointer<ffi.Char>)>();

  int dogecoin_tx_add_p2sh_hash160_out(
    ffi.Pointer<dogecoin_tx> tx,
    int amount,
    ffi.Pointer<ffi.Uint8> hash160,
  ) {
    return _dogecoin_tx_add_p2sh_hash160_out(
      tx,
      amount,
      hash160,
    );
  }

  late final _dogecoin_tx_add_p2sh_hash160_outPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_tx>, ffi.Int64,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_tx_add_p2sh_hash160_out');
  late final _dogecoin_tx_add_p2sh_hash160_out =
      _dogecoin_tx_add_p2sh_hash160_outPtr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx>, int, ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_tx_add_p2pkh_hash160_out(
    ffi.Pointer<dogecoin_tx> tx,
    int amount,
    ffi.Pointer<ffi.Uint8> hash160,
  ) {
    return _dogecoin_tx_add_p2pkh_hash160_out(
      tx,
      amount,
      hash160,
    );
  }

  late final _dogecoin_tx_add_p2pkh_hash160_outPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_tx>, ffi.Int64,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_tx_add_p2pkh_hash160_out');
  late final _dogecoin_tx_add_p2pkh_hash160_out =
      _dogecoin_tx_add_p2pkh_hash160_outPtr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx>, int, ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_tx_add_p2pkh_out(
    ffi.Pointer<dogecoin_tx> tx,
    int amount,
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_tx_add_p2pkh_out(
      tx,
      amount,
      pubkey,
    );
  }

  late final _dogecoin_tx_add_p2pkh_outPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_tx>, ffi.Int64,
              ffi.Pointer<dogecoin_pubkey>)>>('dogecoin_tx_add_p2pkh_out');
  late final _dogecoin_tx_add_p2pkh_out =
      _dogecoin_tx_add_p2pkh_outPtr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx>, int, ffi.Pointer<dogecoin_pubkey>)>();

  int dogecoin_tx_add_data_out(
    ffi.Pointer<dogecoin_tx> tx,
    int amount,
    ffi.Pointer<ffi.Uint8> data,
    int datalen,
  ) {
    return _dogecoin_tx_add_data_out(
      tx,
      amount,
      data,
      datalen,
    );
  }

  late final _dogecoin_tx_add_data_outPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_tx>, ffi.Int64,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('dogecoin_tx_add_data_out');
  late final _dogecoin_tx_add_data_out =
      _dogecoin_tx_add_data_outPtr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx>, int, ffi.Pointer<ffi.Uint8>, int)>();

  int dogecoin_tx_add_puzzle_out(
    ffi.Pointer<dogecoin_tx> tx,
    int amount,
    ffi.Pointer<ffi.Uint8> puzzle,
    int puzzlelen,
  ) {
    return _dogecoin_tx_add_puzzle_out(
      tx,
      amount,
      puzzle,
      puzzlelen,
    );
  }

  late final _dogecoin_tx_add_puzzle_outPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_tx>, ffi.Int64,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('dogecoin_tx_add_puzzle_out');
  late final _dogecoin_tx_add_puzzle_out =
      _dogecoin_tx_add_puzzle_outPtr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx>, int, ffi.Pointer<ffi.Uint8>, int)>();

  int dogecoin_tx_outpoint_is_null(
    ffi.Pointer<dogecoin_tx_outpoint> tx,
  ) {
    return _dogecoin_tx_outpoint_is_null(
      tx,
    );
  }

  late final _dogecoin_tx_outpoint_is_nullPtr = _lookup<
          ffi.NativeFunction<
              dogecoin_bool Function(ffi.Pointer<dogecoin_tx_outpoint>)>>(
      'dogecoin_tx_outpoint_is_null');
  late final _dogecoin_tx_outpoint_is_null = _dogecoin_tx_outpoint_is_nullPtr
      .asFunction<int Function(ffi.Pointer<dogecoin_tx_outpoint>)>();

  int dogecoin_tx_is_coinbase(
    ffi.Pointer<dogecoin_tx> tx,
  ) {
    return _dogecoin_tx_is_coinbase(
      tx,
    );
  }

  late final _dogecoin_tx_is_coinbasePtr = _lookup<
          ffi.NativeFunction<dogecoin_bool Function(ffi.Pointer<dogecoin_tx>)>>(
      'dogecoin_tx_is_coinbase');
  late final _dogecoin_tx_is_coinbase = _dogecoin_tx_is_coinbasePtr
      .asFunction<int Function(ffi.Pointer<dogecoin_tx>)>();

  ffi.Pointer<ffi.Char> dogecoin_tx_sign_result_to_str(
    int result,
  ) {
    return _dogecoin_tx_sign_result_to_str(
      result,
    );
  }

  late final _dogecoin_tx_sign_result_to_strPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'dogecoin_tx_sign_result_to_str');
  late final _dogecoin_tx_sign_result_to_str =
      _dogecoin_tx_sign_result_to_strPtr
          .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int dogecoin_tx_sign_input(
    ffi.Pointer<dogecoin_tx> tx_in_out,
    ffi.Pointer<cstring> script,
    ffi.Pointer<dogecoin_key> privkey,
    int inputindex,
    int sighashtype,
    ffi.Pointer<ffi.Uint8> sigcompact_out,
    ffi.Pointer<ffi.Uint8> sigder_out,
    ffi.Pointer<ffi.Int> sigder_len,
  ) {
    return _dogecoin_tx_sign_input(
      tx_in_out,
      script,
      privkey,
      inputindex,
      sighashtype,
      sigcompact_out,
      sigder_out,
      sigder_len,
    );
  }

  late final _dogecoin_tx_sign_inputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<cstring>,
              ffi.Pointer<dogecoin_key>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_tx_sign_input');
  late final _dogecoin_tx_sign_input = _dogecoin_tx_sign_inputPtr.asFunction<
      int Function(
          ffi.Pointer<dogecoin_tx>,
          ffi.Pointer<cstring>,
          ffi.Pointer<dogecoin_key>,
          int,
          int,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<dogecoin_block_header> dogecoin_block_header_new() {
    return _dogecoin_block_header_new();
  }

  late final _dogecoin_block_header_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<dogecoin_block_header> Function()>>(
      'dogecoin_block_header_new');
  late final _dogecoin_block_header_new = _dogecoin_block_header_newPtr
      .asFunction<ffi.Pointer<dogecoin_block_header> Function()>();

  void dogecoin_block_header_free(
    ffi.Pointer<dogecoin_block_header> header,
  ) {
    return _dogecoin_block_header_free(
      header,
    );
  }

  late final _dogecoin_block_header_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<dogecoin_block_header>)>>(
      'dogecoin_block_header_free');
  late final _dogecoin_block_header_free = _dogecoin_block_header_freePtr
      .asFunction<void Function(ffi.Pointer<dogecoin_block_header>)>();

  int dogecoin_block_header_deserialize(
    ffi.Pointer<dogecoin_block_header> header,
    ffi.Pointer<const_buffer> buf,
  ) {
    return _dogecoin_block_header_deserialize(
      header,
      buf,
    );
  }

  late final _dogecoin_block_header_deserializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<dogecoin_block_header>,
              ffi.Pointer<const_buffer>)>>('dogecoin_block_header_deserialize');
  late final _dogecoin_block_header_deserialize =
      _dogecoin_block_header_deserializePtr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_block_header>, ffi.Pointer<const_buffer>)>();

  void dogecoin_block_header_serialize(
    ffi.Pointer<cstring> s,
    ffi.Pointer<dogecoin_block_header> header,
  ) {
    return _dogecoin_block_header_serialize(
      s,
      header,
    );
  }

  late final _dogecoin_block_header_serializePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<cstring>, ffi.Pointer<dogecoin_block_header>)>>(
      'dogecoin_block_header_serialize');
  late final _dogecoin_block_header_serialize =
      _dogecoin_block_header_serializePtr.asFunction<
          void Function(
              ffi.Pointer<cstring>, ffi.Pointer<dogecoin_block_header>)>();

  void dogecoin_block_header_copy(
    ffi.Pointer<dogecoin_block_header> dest,
    ffi.Pointer<dogecoin_block_header> src,
  ) {
    return _dogecoin_block_header_copy(
      dest,
      src,
    );
  }

  late final _dogecoin_block_header_copyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<dogecoin_block_header>,
                  ffi.Pointer<dogecoin_block_header>)>>(
      'dogecoin_block_header_copy');
  late final _dogecoin_block_header_copy =
      _dogecoin_block_header_copyPtr.asFunction<
          void Function(ffi.Pointer<dogecoin_block_header>,
              ffi.Pointer<dogecoin_block_header>)>();

  int dogecoin_block_header_hash(
    ffi.Pointer<dogecoin_block_header> header,
    ffi.Pointer<ffi.Uint8> hash,
  ) {
    return _dogecoin_block_header_hash(
      header,
      hash,
    );
  }

  late final _dogecoin_block_header_hashPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_block_header>,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_block_header_hash');
  late final _dogecoin_block_header_hash =
      _dogecoin_block_header_hashPtr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_block_header>, ffi.Pointer<ffi.Uint8>)>();

  int remove5(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove5(
      __filename,
    );
  }

  late final _remove5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove5 =
      _remove5Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename5(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename5(
      __old,
      __new,
    );
  }

  late final _rename5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename5 = _rename5Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat5(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat5(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameat5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat5 = _renameat5Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose5(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose5(
      __stream,
    );
  }

  late final _fclose5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose5 =
      _fclose5Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile5() {
    return _tmpfile5();
  }

  late final _tmpfile5Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile5 =
      _tmpfile5Ptr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam5(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam5(
      arg0,
    );
  }

  late final _tmpnam5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam5 = _tmpnam5Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r5(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r5(
      __s,
    );
  }

  late final _tmpnam_r5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r5 = _tmpnam_r5Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam5(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam5(
      __dir,
      __pfx,
    );
  }

  late final _tempnam5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam5 = _tempnam5Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush5(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush5(
      __stream,
    );
  }

  late final _fflush5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush5 =
      _fflush5Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked5(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked5(
      __stream,
    );
  }

  late final _fflush_unlocked5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked5 =
      _fflush_unlocked5Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen5(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen5(
      __filename,
      __modes,
    );
  }

  late final _fopen5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen5 = _fopen5Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen5(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen5(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopen5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen5 = _freopen5Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen5(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen5(
      __fd,
      __modes,
    );
  }

  late final _fdopen5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen5 = _fdopen5Ptr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen5(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen5(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopen5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen5 = _fmemopen5Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream5(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Int> __sizeloc,
  ) {
    return _open_memstream5(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstream5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('open_memstream');
  late final _open_memstream5 = _open_memstream5Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void setbuf5(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf5(
      __stream,
      __buf,
    );
  }

  late final _setbuf5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf5 = _setbuf5Ptr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf5(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf5(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbuf5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('setvbuf');
  late final _setvbuf5 = _setvbuf5Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer5(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer5(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbuffer5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer5 = _setbuffer5Ptr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf5(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf5(
      __stream,
    );
  }

  late final _setlinebuf5Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf5 =
      _setlinebuf5Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf5(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf5(
      __stream,
      __format,
    );
  }

  late final _fprintf5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf5 = _fprintf5Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf5(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf5(
      __format,
    );
  }

  late final _printf5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf5 =
      _printf5Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf5(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf5(
      __s,
      __format,
    );
  }

  late final _sprintf5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf5 = _sprintf5Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf5(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfprintf5(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintf5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfprintf');
  late final _vfprintf5 = _vfprintf5Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vprintf5(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vprintf5(
      __format,
      __arg,
    );
  }

  late final _vprintf5Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vprintf');
  late final _vprintf5 =
      _vprintf5Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsprintf5(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsprintf5(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintf5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsprintf');
  late final _vsprintf5 = _vsprintf5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int snprintf5(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf5(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintf5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf5 = _snprintf5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf5(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsnprintf5(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintf5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('vsnprintf');
  late final _vsnprintf5 = _vsnprintf5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int vdprintf5(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    int __arg,
  ) {
    return _vdprintf5(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintf5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('vdprintf');
  late final _vdprintf5 =
      _vdprintf5Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int dprintf5(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf5(
      __fd,
      __fmt,
    );
  }

  late final _dprintf5Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf5 =
      _dprintf5Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf10(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf10(
      __stream,
      __format,
    );
  }

  late final _fscanf10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf10 = _fscanf10Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf10(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf10(
      __format,
    );
  }

  late final _scanf10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf10 =
      _scanf10Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf10(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf10(
      __s,
      __format,
    );
  }

  late final _sscanf10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf10 = _sscanf10Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fscanf11(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf11(
      __stream,
      __format,
    );
  }

  late final _fscanf11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf11 = _fscanf11Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf11(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf11(
      __format,
    );
  }

  late final _scanf11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf11 =
      _scanf11Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf11(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf11(
      __s,
      __format,
    );
  }

  late final _sscanf11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf11 = _sscanf11Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf10(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf10(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf10 = _vfscanf10Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf10(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf10(
      __format,
      __arg,
    );
  }

  late final _vscanf10Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf10 =
      _vscanf10Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf10(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf10(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf10 = _vsscanf10Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int vfscanf11(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf11(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf11 = _vfscanf11Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf11(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf11(
      __format,
      __arg,
    );
  }

  late final _vscanf11Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf11 =
      _vscanf11Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf11(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf11(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf11 = _vsscanf11Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fgetc5(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc5(
      __stream,
    );
  }

  late final _fgetc5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc5 = _fgetc5Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc5(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc5(
      __stream,
    );
  }

  late final _getc5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc5 = _getc5Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar5() {
    return _getchar5();
  }

  late final _getchar5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar5 = _getchar5Ptr.asFunction<int Function()>();

  int getc_unlocked5(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked5(
      __stream,
    );
  }

  late final _getc_unlocked5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked5 =
      _getc_unlocked5Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked5() {
    return _getchar_unlocked5();
  }

  late final _getchar_unlocked5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked5 =
      _getchar_unlocked5Ptr.asFunction<int Function()>();

  int fgetc_unlocked5(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked5(
      __stream,
    );
  }

  late final _fgetc_unlocked5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked5 =
      _fgetc_unlocked5Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc5(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc5(
      __c,
      __stream,
    );
  }

  late final _fputc5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc5 =
      _fputc5Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc5(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc5(
      __c,
      __stream,
    );
  }

  late final _putc5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc5 =
      _putc5Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar5(
    int __c,
  ) {
    return _putchar5(
      __c,
    );
  }

  late final _putchar5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar5 = _putchar5Ptr.asFunction<int Function(int)>();

  int fputc_unlocked5(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked5(
      __c,
      __stream,
    );
  }

  late final _fputc_unlocked5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked5 =
      _fputc_unlocked5Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked5(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked5(
      __c,
      __stream,
    );
  }

  late final _putc_unlocked5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked5 =
      _putc_unlocked5Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked5(
    int __c,
  ) {
    return _putchar_unlocked5(
      __c,
    );
  }

  late final _putchar_unlocked5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked5 =
      _putchar_unlocked5Ptr.asFunction<int Function(int)>();

  int getw5(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw5(
      __stream,
    );
  }

  late final _getw5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw5 = _getw5Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw5(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw5(
      __w,
      __stream,
    );
  }

  late final _putw5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw5 =
      _putw5Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets5(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets5(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgets5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets5 = _fgets5Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim5(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim5(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelim5Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim5 = ___getdelim5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getdelim5(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim5(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelim5Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim5 = _getdelim5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getline5(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline5(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getline5Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<FILE>)>>('getline');
  late final _getline5 = _getline5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<FILE>)>();

  int fputs5(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs5(
      __s,
      __stream,
    );
  }

  late final _fputs5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs5 = _fputs5Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts5(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts5(
      __s,
    );
  }

  late final _puts5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts5 =
      _puts5Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc5(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc5(
      __c,
      __stream,
    );
  }

  late final _ungetc5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc5 =
      _ungetc5Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread5(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread5(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread5 = _fread5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite5(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite5(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwrite5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite5 = _fwrite5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked5(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked5(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlocked5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked5 = _fread_unlocked5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked5(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked5(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlocked5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked5 = _fwrite_unlocked5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek5(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek5(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseek5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek5 =
      _fseek5Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell5(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell5(
      __stream,
    );
  }

  late final _ftell5Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell5 = _ftell5Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind5(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind5(
      __stream,
    );
  }

  late final _rewind5Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind5 =
      _rewind5Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko5(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko5(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseeko5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko5 =
      _fseeko5Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello5(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello5(
      __stream,
    );
  }

  late final _ftello5Ptr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello5 =
      _ftello5Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos5(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos5(
      __stream,
      __pos,
    );
  }

  late final _fgetpos5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos5 = _fgetpos5Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos5(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos5(
      __stream,
      __pos,
    );
  }

  late final _fsetpos5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos5 = _fsetpos5Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr5(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr5(
      __stream,
    );
  }

  late final _clearerr5Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr5 =
      _clearerr5Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof5(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof5(
      __stream,
    );
  }

  late final _feof5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof5 = _feof5Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror5(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror5(
      __stream,
    );
  }

  late final _ferror5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror5 =
      _ferror5Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked5(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked5(
      __stream,
    );
  }

  late final _clearerr_unlocked5Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked5 =
      _clearerr_unlocked5Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked5(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked5(
      __stream,
    );
  }

  late final _feof_unlocked5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked5 =
      _feof_unlocked5Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked5(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked5(
      __stream,
    );
  }

  late final _ferror_unlocked5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked5 =
      _ferror_unlocked5Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror5(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror5(
      __s,
    );
  }

  late final _perror5Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror5 =
      _perror5Ptr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno5(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno5(
      __stream,
    );
  }

  late final _fileno5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno5 =
      _fileno5Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked5(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked5(
      __stream,
    );
  }

  late final _fileno_unlocked5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked5 =
      _fileno_unlocked5Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose5(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose5(
      __stream,
    );
  }

  late final _pclose5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose5 =
      _pclose5Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen5(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen5(
      __command,
      __modes,
    );
  }

  late final _popen5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen5 = _popen5Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid5(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid5(
      __s,
    );
  }

  late final _ctermid5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid5 = _ctermid5Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile5(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile5(
      __stream,
    );
  }

  late final _flockfile5Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile5 =
      _flockfile5Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile5(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile5(
      __stream,
    );
  }

  late final _ftrylockfile5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile5 =
      _ftrylockfile5Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile5(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile5(
      __stream,
    );
  }

  late final _funlockfile5Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile5 =
      _funlockfile5Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow5(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow5(
      arg0,
    );
  }

  late final ___uflow5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow5 =
      ___uflow5Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow5(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow5(
      arg0,
      arg1,
    );
  }

  late final ___overflow5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow5 =
      ___overflow5Ptr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __ctype_get_mb_cur_max5() {
    return ___ctype_get_mb_cur_max5();
  }

  late final ___ctype_get_mb_cur_max5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max5 =
      ___ctype_get_mb_cur_max5Ptr.asFunction<int Function()>();

  double atof5(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof5(
      __nptr,
    );
  }

  late final _atof5Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof5 =
      _atof5Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi5(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi5(
      __nptr,
    );
  }

  late final _atoi5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi5 =
      _atoi5Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol5(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol5(
      __nptr,
    );
  }

  late final _atol5Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol5 =
      _atol5Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll5(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll5(
      __nptr,
    );
  }

  late final _atoll5Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll5 =
      _atoll5Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod5(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod5(
      __nptr,
      __endptr,
    );
  }

  late final _strtod5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod5 = _strtod5Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof5(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof5(
      __nptr,
      __endptr,
    );
  }

  late final _strtof5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof5 = _strtof5Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol5(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol5(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol5 = _strtol5Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul5(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul5(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul5 = _strtoul5Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq5(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq5(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq5 = _strtoq5Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq5(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq5(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq5 = _strtouq5Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll5(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll5(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll5 = _strtoll5Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull5(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull5(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull5 = _strtoull5Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a5(
    int __n,
  ) {
    return _l64a5(
      __n,
    );
  }

  late final _l64a5Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a5 =
      _l64a5Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l5(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l5(
      __s,
    );
  }

  late final _a64l5Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l5 =
      _a64l5Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select5(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select5(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select5 = _select5Ptr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect5(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect5(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect5 = _pselect5Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random5() {
    return _random5();
  }

  late final _random5Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random5 = _random5Ptr.asFunction<int Function()>();

  void srandom5(
    int __seed,
  ) {
    return _srandom5(
      __seed,
    );
  }

  late final _srandom5Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom5 = _srandom5Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate5(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate5(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int)>>('initstate');
  late final _initstate5 = _initstate5Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate5(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate5(
      __statebuf,
    );
  }

  late final _setstate5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate5 = _setstate5Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r5(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r5(
      __buf,
      __result,
    );
  }

  late final _random_r5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r5 = _random_r5Ptr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r5(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r5(
      __seed,
      __buf,
    );
  }

  late final _srandom_r5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r5 =
      _srandom_r5Ptr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r5(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r5(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r5 = _initstate_r5Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r5(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r5(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r5 = _setstate_r5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand5() {
    return _rand5();
  }

  late final _rand5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand5 = _rand5Ptr.asFunction<int Function()>();

  void srand5(
    int __seed,
  ) {
    return _srand5(
      __seed,
    );
  }

  late final _srand5Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand5 = _srand5Ptr.asFunction<void Function(int)>();

  int rand_r5(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r5(
      __seed,
    );
  }

  late final _rand_r5Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r5 =
      _rand_r5Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand485() {
    return _drand485();
  }

  late final _drand485Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand485 = _drand485Ptr.asFunction<double Function()>();

  double erand485(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand485(
      __xsubi,
    );
  }

  late final _erand485Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand485 = _erand485Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand485() {
    return _lrand485();
  }

  late final _lrand485Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand485 = _lrand485Ptr.asFunction<int Function()>();

  int nrand485(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand485(
      __xsubi,
    );
  }

  late final _nrand485Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand485 =
      _nrand485Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand485() {
    return _mrand485();
  }

  late final _mrand485Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand485 = _mrand485Ptr.asFunction<int Function()>();

  int jrand485(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand485(
      __xsubi,
    );
  }

  late final _jrand485Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand485 =
      _jrand485Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand485(
    int __seedval,
  ) {
    return _srand485(
      __seedval,
    );
  }

  late final _srand485Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand485 = _srand485Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed485(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed485(
      __seed16v,
    );
  }

  late final _seed485Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed485 = _seed485Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong485(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong485(
      __param,
    );
  }

  late final _lcong485Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong485 =
      _lcong485Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r5(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r5(
      __buffer,
      __result,
    );
  }

  late final _drand48_r5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r5 = _drand48_r5Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r5(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r5(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r5 = _erand48_r5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r5(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r5(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r5 = _lrand48_r5Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r5(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r5(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r5 = _nrand48_r5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r5(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r5(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r5 = _mrand48_r5Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r5(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r5(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r5 = _jrand48_r5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r5(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r5(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r5 =
      _srand48_r5Ptr.asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r5(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r5(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r5 = _seed48_r5Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r5(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r5(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r5 = _lcong48_r5Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int arc4random5() {
    return _arc4random5();
  }

  late final _arc4random5Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random5 = _arc4random5Ptr.asFunction<int Function()>();

  void arc4random_buf5(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf5(
      __buf,
      __size,
    );
  }

  late final _arc4random_buf5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('arc4random_buf');
  late final _arc4random_buf5 = _arc4random_buf5Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform5(
    int __upper_bound,
  ) {
    return _arc4random_uniform5(
      __upper_bound,
    );
  }

  late final _arc4random_uniform5Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
          'arc4random_uniform');
  late final _arc4random_uniform5 =
      _arc4random_uniform5Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc5(
    int __size,
  ) {
    return _malloc5(
      __size,
    );
  }

  late final _malloc5Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'malloc');
  late final _malloc5 =
      _malloc5Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc5(
    int __nmemb,
    int __size,
  ) {
    return _calloc5(
      __nmemb,
      __size,
    );
  }

  late final _calloc5Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'calloc');
  late final _calloc5 =
      _calloc5Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc5(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc5(
      __ptr,
      __size,
    );
  }

  late final _realloc5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('realloc');
  late final _realloc5 = _realloc5Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free5(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free5(
      __ptr,
    );
  }

  late final _free5Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free5 =
      _free5Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray10(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray10(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray10 = _reallocarray10Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray11(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray11(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray11 = _reallocarray11Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca5(
    int __size,
  ) {
    return _alloca5(
      __size,
    );
  }

  late final _alloca5Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'alloca');
  late final _alloca5 =
      _alloca5Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc5(
    int __size,
  ) {
    return _valloc5(
      __size,
    );
  }

  late final _valloc5Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'valloc');
  late final _valloc5 =
      _valloc5Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign5(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign5(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int,
              ffi.Int)>>('posix_memalign');
  late final _posix_memalign5 = _posix_memalign5Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc5(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc5(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc5Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'aligned_alloc');
  late final _aligned_alloc5 =
      _aligned_alloc5Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort5() {
    return _abort5();
  }

  late final _abort5Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort5 = _abort5Ptr.asFunction<void Function()>();

  int atexit5(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit5(
      __func,
    );
  }

  late final _atexit5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit5 = _atexit5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit5(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit5(
      __func,
    );
  }

  late final _at_quick_exit5Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit5 = _at_quick_exit5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit5(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit5(
      __func,
      __arg,
    );
  }

  late final _on_exit5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit5 = _on_exit5Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit5(
    int __status,
  ) {
    return _exit5(
      __status,
    );
  }

  late final _exit5Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit5 = _exit5Ptr.asFunction<void Function(int)>();

  void quick_exit5(
    int __status,
  ) {
    return _quick_exit5(
      __status,
    );
  }

  late final _quick_exit5Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit5 = _quick_exit5Ptr.asFunction<void Function(int)>();

  void _Exit5(
    int __status,
  ) {
    return __Exit5(
      __status,
    );
  }

  late final __Exit5Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit5 = __Exit5Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv5(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv5(
      __name,
    );
  }

  late final _getenv5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv5 = _getenv5Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv5(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv5(
      __string,
    );
  }

  late final _putenv5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv5 =
      _putenv5Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv5(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv5(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv5 = _setenv5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv5(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv5(
      __name,
    );
  }

  late final _unsetenv5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv5 =
      _unsetenv5Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv5() {
    return _clearenv5();
  }

  late final _clearenv5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv5 = _clearenv5Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp5(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp5(
      __template,
    );
  }

  late final _mktemp5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp5 = _mktemp5Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp5(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp5(
      __template,
    );
  }

  late final _mkstemp5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp5 =
      _mkstemp5Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps5(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps5(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps5Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps5 =
      _mkstemps5Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp5(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp5(
      __template,
    );
  }

  late final _mkdtemp5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp5 = _mkdtemp5Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system5(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system5(
      __command,
    );
  }

  late final _system5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system5 =
      _system5Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath5(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath5(
      __name,
      __resolved,
    );
  }

  late final _realpath5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath5 = _realpath5Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch5(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch5(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              __compar_fn_t)>>('bsearch');
  late final _bsearch5 = _bsearch5Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort5(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort5(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              __compar_fn_t)>>('qsort');
  late final _qsort5 = _qsort5Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs5(
    int __x,
  ) {
    return _abs5(
      __x,
    );
  }

  late final _abs5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs5 = _abs5Ptr.asFunction<int Function(int)>();

  int labs5(
    int __x,
  ) {
    return _labs5(
      __x,
    );
  }

  late final _labs5Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs5 = _labs5Ptr.asFunction<int Function(int)>();

  int llabs5(
    int __x,
  ) {
    return _llabs5(
      __x,
    );
  }

  late final _llabs5Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs5 = _llabs5Ptr.asFunction<int Function(int)>();

  div_t div5(
    int __numer,
    int __denom,
  ) {
    return _div5(
      __numer,
      __denom,
    );
  }

  late final _div5Ptr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div5 = _div5Ptr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv5(
    int __numer,
    int __denom,
  ) {
    return _ldiv5(
      __numer,
      __denom,
    );
  }

  late final _ldiv5Ptr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv5 = _ldiv5Ptr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv5(
    int __numer,
    int __denom,
  ) {
    return _lldiv5(
      __numer,
      __denom,
    );
  }

  late final _lldiv5Ptr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv5 = _lldiv5Ptr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt5(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt5(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt5 = _ecvt5Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt5(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt5(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt5 = _fcvt5Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt5(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt5(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt5 = _gcvt5Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r5(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r5(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('ecvt_r');
  late final _ecvt_r5 = _ecvt_r5Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r5(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r5(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('fcvt_r');
  late final _fcvt_r5 = _fcvt_r5Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen5(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen5(
      __s,
      __n,
    );
  }

  late final _mblen5Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mblen');
  late final _mblen5 =
      _mblen5Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc5(
    ffi.Pointer<ffi.Int> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc5(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('mbtowc');
  late final _mbtowc5 = _mbtowc5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb5(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb5(
      __s,
      __wchar,
    );
  }

  late final _wctomb5Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'wctomb');
  late final _wctomb5 =
      _wctomb5Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs5(
    ffi.Pointer<ffi.Int> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs5(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mbstowcs');
  late final _mbstowcs5 = _mbstowcs5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs5(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Int> __pwcs,
    int __n,
  ) {
    return _wcstombs5(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('wcstombs');
  late final _wcstombs5 = _wcstombs5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  int rpmatch5(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch5(
      __response,
    );
  }

  late final _rpmatch5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch5 =
      _rpmatch5Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt5(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt5(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt5 = _getsubopt5Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg5(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg5(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg5 =
      _getloadavg5Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Void> memcpy5(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy5(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpy5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memcpy');
  late final _memcpy5 = _memcpy5Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove5(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove5(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmove5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memmove');
  late final _memmove5 = _memmove5Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy5(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy5(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpy5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memccpy');
  late final _memccpy5 = _memccpy5Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset5(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset5(
      __s,
      __c,
      __n,
    );
  }

  late final _memset5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memset');
  late final _memset5 = _memset5Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp5(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp5(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmp5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('memcmp');
  late final _memcmp5 = _memcmp5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq5(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq5(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeq5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__memcmpeq');
  late final ___memcmpeq5 = ___memcmpeq5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr5(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr5(
      __s,
      __c,
      __n,
    );
  }

  late final _memchr5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memchr');
  late final _memchr5 = _memchr5Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy5(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy5(
      __dest,
      __src,
    );
  }

  late final _strcpy5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy5 = _strcpy5Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy5(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy5(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpy5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncpy');
  late final _strncpy5 = _strncpy5Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat5(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat5(
      __dest,
      __src,
    );
  }

  late final _strcat5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat5 = _strcat5Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat5(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat5(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncat5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncat');
  late final _strncat5 = _strncat5Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp5(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp5(
      __s1,
      __s2,
    );
  }

  late final _strcmp5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp5 = _strcmp5Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp5(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp5(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmp5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncmp');
  late final _strncmp5 = _strncmp5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll5(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll5(
      __s1,
      __s2,
    );
  }

  late final _strcoll5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll5 = _strcoll5Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm5(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm5(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrm5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strxfrm');
  late final _strxfrm5 = _strxfrm5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l5(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l5(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_l5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l5 = _strcoll_l5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l5(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l5(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_l5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strxfrm_l');
  late final _strxfrm_l5 = _strxfrm_l5Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup5(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup5(
      __s,
    );
  }

  late final _strdup5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup5 = _strdup5Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup5(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup5(
      __string,
      __n,
    );
  }

  late final _strndup5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strndup');
  late final _strndup5 = _strndup5Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr5(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr5(
      __s,
      __c,
    );
  }

  late final _strchr5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr5 = _strchr5Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr5(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr5(
      __s,
      __c,
    );
  }

  late final _strrchr5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr5 = _strrchr5Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn5(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn5(
      __s,
      __reject,
    );
  }

  late final _strcspn5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn5 = _strcspn5Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn5(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn5(
      __s,
      __accept,
    );
  }

  late final _strspn5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn5 = _strspn5Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk5(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk5(
      __s,
      __accept,
    );
  }

  late final _strpbrk5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk5 = _strpbrk5Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr5(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr5(
      __haystack,
      __needle,
    );
  }

  late final _strstr5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr5 = _strstr5Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok5(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok5(
      __s,
      __delim,
    );
  }

  late final _strtok5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok5 = _strtok5Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r5(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r5(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_r5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r5 = ___strtok_r5Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r5(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r5(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_r5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r5 = _strtok_r5Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen5(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen5(
      __s,
    );
  }

  late final _strlen5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'strlen');
  late final _strlen5 =
      _strlen5Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen5(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen5(
      __string,
      __maxlen,
    );
  }

  late final _strnlen5Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'strnlen');
  late final _strnlen5 =
      _strnlen5Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror5(
    int __errnum,
  ) {
    return _strerror5(
      __errnum,
    );
  }

  late final _strerror5Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror5 =
      _strerror5Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r5(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r5(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_r5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('strerror_r');
  late final _strerror_r5 = _strerror_r5Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l5(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l5(
      __errnum,
      __l,
    );
  }

  late final _strerror_l5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l5 = _strerror_l5Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp5(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp5(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmp5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcmp');
  late final _bcmp5 = _bcmp5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy5(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy5(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopy5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcopy');
  late final _bcopy5 = _bcopy5Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero5(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero5(
      __s,
      __n,
    );
  }

  late final _bzero5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('bzero');
  late final _bzero5 =
      _bzero5Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index5(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index5(
      __s,
      __c,
    );
  }

  late final _index5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index5 = _index5Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex5(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex5(
      __s,
      __c,
    );
  }

  late final _rindex5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex5 = _rindex5Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs5(
    int __i,
  ) {
    return _ffs5(
      __i,
    );
  }

  late final _ffs5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs5 = _ffs5Ptr.asFunction<int Function(int)>();

  int ffsl5(
    int __l,
  ) {
    return _ffsl5(
      __l,
    );
  }

  late final _ffsl5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl5 = _ffsl5Ptr.asFunction<int Function(int)>();

  int ffsll5(
    int __ll,
  ) {
    return _ffsll5(
      __ll,
    );
  }

  late final _ffsll5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll5 = _ffsll5Ptr.asFunction<int Function(int)>();

  int strcasecmp5(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp5(
      __s1,
      __s2,
    );
  }

  late final _strcasecmp5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp5 = _strcasecmp5Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp5(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp5(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmp5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncasecmp');
  late final _strncasecmp5 = _strncasecmp5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l5(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l5(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_l5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l5 = _strcasecmp_l5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l5(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l5(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_l5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l5 = _strncasecmp_l5Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero5(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero5(
      __s,
      __n,
    );
  }

  late final _explicit_bzero5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('explicit_bzero');
  late final _explicit_bzero5 = _explicit_bzero5Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep5(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep5(
      __stringp,
      __delim,
    );
  }

  late final _strsep5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep5 = _strsep5Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal5(
    int __sig,
  ) {
    return _strsignal5(
      __sig,
    );
  }

  late final _strsignal5Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal5 =
      _strsignal5Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy5(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy5(
      __dest,
      __src,
    );
  }

  late final ___stpcpy5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy5 = ___stpcpy5Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy5(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy5(
      __dest,
      __src,
    );
  }

  late final _stpcpy5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy5 = _stpcpy5Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy5(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy5(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpy5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('__stpncpy');
  late final ___stpncpy5 = ___stpncpy5Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy5(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy5(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpy5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('stpncpy');
  late final _stpncpy5 = _stpncpy5Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int buffer_equal1(
    ffi.Pointer<ffi.Void> a,
    ffi.Pointer<ffi.Void> b,
  ) {
    return _buffer_equal1(
      a,
      b,
    );
  }

  late final _buffer_equal1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>('buffer_equal');
  late final _buffer_equal1 = _buffer_equal1Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  void buffer_free1(
    ffi.Pointer<ffi.Void> struct_buffer,
  ) {
    return _buffer_free1(
      struct_buffer,
    );
  }

  late final _buffer_free1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'buffer_free');
  late final _buffer_free1 =
      _buffer_free1Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<buffer> buffer_copy1(
    ffi.Pointer<ffi.Void> data,
    int data_len,
  ) {
    return _buffer_copy1(
      data,
      data_len,
    );
  }

  late final _buffer_copy1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<buffer> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('buffer_copy');
  late final _buffer_copy1 = _buffer_copy1Ptr
      .asFunction<ffi.Pointer<buffer> Function(ffi.Pointer<ffi.Void>, int)>();

  int remove6(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove6(
      __filename,
    );
  }

  late final _remove6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove6 =
      _remove6Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename6(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename6(
      __old,
      __new,
    );
  }

  late final _rename6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename6 = _rename6Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat6(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat6(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameat6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat6 = _renameat6Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose6(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose6(
      __stream,
    );
  }

  late final _fclose6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose6 =
      _fclose6Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile6() {
    return _tmpfile6();
  }

  late final _tmpfile6Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile6 =
      _tmpfile6Ptr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam6(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam6(
      arg0,
    );
  }

  late final _tmpnam6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam6 = _tmpnam6Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r6(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r6(
      __s,
    );
  }

  late final _tmpnam_r6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r6 = _tmpnam_r6Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam6(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam6(
      __dir,
      __pfx,
    );
  }

  late final _tempnam6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam6 = _tempnam6Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush6(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush6(
      __stream,
    );
  }

  late final _fflush6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush6 =
      _fflush6Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked6(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked6(
      __stream,
    );
  }

  late final _fflush_unlocked6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked6 =
      _fflush_unlocked6Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen6(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen6(
      __filename,
      __modes,
    );
  }

  late final _fopen6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen6 = _fopen6Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen6(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen6(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopen6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen6 = _freopen6Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen6(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen6(
      __fd,
      __modes,
    );
  }

  late final _fdopen6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen6 = _fdopen6Ptr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen6(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen6(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopen6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen6 = _fmemopen6Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream6(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Int> __sizeloc,
  ) {
    return _open_memstream6(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstream6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('open_memstream');
  late final _open_memstream6 = _open_memstream6Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void setbuf6(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf6(
      __stream,
      __buf,
    );
  }

  late final _setbuf6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf6 = _setbuf6Ptr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf6(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf6(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbuf6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('setvbuf');
  late final _setvbuf6 = _setvbuf6Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer6(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer6(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbuffer6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer6 = _setbuffer6Ptr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf6(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf6(
      __stream,
    );
  }

  late final _setlinebuf6Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf6 =
      _setlinebuf6Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf6(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf6(
      __stream,
      __format,
    );
  }

  late final _fprintf6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf6 = _fprintf6Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf6(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf6(
      __format,
    );
  }

  late final _printf6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf6 =
      _printf6Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf6(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf6(
      __s,
      __format,
    );
  }

  late final _sprintf6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf6 = _sprintf6Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf6(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfprintf6(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintf6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfprintf');
  late final _vfprintf6 = _vfprintf6Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vprintf6(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vprintf6(
      __format,
      __arg,
    );
  }

  late final _vprintf6Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vprintf');
  late final _vprintf6 =
      _vprintf6Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsprintf6(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsprintf6(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintf6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsprintf');
  late final _vsprintf6 = _vsprintf6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int snprintf6(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf6(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintf6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf6 = _snprintf6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf6(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsnprintf6(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintf6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('vsnprintf');
  late final _vsnprintf6 = _vsnprintf6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int vdprintf6(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    int __arg,
  ) {
    return _vdprintf6(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintf6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('vdprintf');
  late final _vdprintf6 =
      _vdprintf6Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int dprintf6(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf6(
      __fd,
      __fmt,
    );
  }

  late final _dprintf6Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf6 =
      _dprintf6Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf12(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf12(
      __stream,
      __format,
    );
  }

  late final _fscanf12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf12 = _fscanf12Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf12(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf12(
      __format,
    );
  }

  late final _scanf12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf12 =
      _scanf12Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf12(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf12(
      __s,
      __format,
    );
  }

  late final _sscanf12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf12 = _sscanf12Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fscanf13(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf13(
      __stream,
      __format,
    );
  }

  late final _fscanf13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf13 = _fscanf13Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf13(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf13(
      __format,
    );
  }

  late final _scanf13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf13 =
      _scanf13Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf13(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf13(
      __s,
      __format,
    );
  }

  late final _sscanf13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf13 = _sscanf13Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf12(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf12(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf12 = _vfscanf12Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf12(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf12(
      __format,
      __arg,
    );
  }

  late final _vscanf12Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf12 =
      _vscanf12Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf12(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf12(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf12 = _vsscanf12Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int vfscanf13(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf13(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf13 = _vfscanf13Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf13(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf13(
      __format,
      __arg,
    );
  }

  late final _vscanf13Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf13 =
      _vscanf13Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf13(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf13(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf13 = _vsscanf13Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fgetc6(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc6(
      __stream,
    );
  }

  late final _fgetc6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc6 = _fgetc6Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc6(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc6(
      __stream,
    );
  }

  late final _getc6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc6 = _getc6Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar6() {
    return _getchar6();
  }

  late final _getchar6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar6 = _getchar6Ptr.asFunction<int Function()>();

  int getc_unlocked6(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked6(
      __stream,
    );
  }

  late final _getc_unlocked6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked6 =
      _getc_unlocked6Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked6() {
    return _getchar_unlocked6();
  }

  late final _getchar_unlocked6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked6 =
      _getchar_unlocked6Ptr.asFunction<int Function()>();

  int fgetc_unlocked6(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked6(
      __stream,
    );
  }

  late final _fgetc_unlocked6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked6 =
      _fgetc_unlocked6Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc6(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc6(
      __c,
      __stream,
    );
  }

  late final _fputc6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc6 =
      _fputc6Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc6(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc6(
      __c,
      __stream,
    );
  }

  late final _putc6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc6 =
      _putc6Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar6(
    int __c,
  ) {
    return _putchar6(
      __c,
    );
  }

  late final _putchar6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar6 = _putchar6Ptr.asFunction<int Function(int)>();

  int fputc_unlocked6(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked6(
      __c,
      __stream,
    );
  }

  late final _fputc_unlocked6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked6 =
      _fputc_unlocked6Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked6(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked6(
      __c,
      __stream,
    );
  }

  late final _putc_unlocked6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked6 =
      _putc_unlocked6Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked6(
    int __c,
  ) {
    return _putchar_unlocked6(
      __c,
    );
  }

  late final _putchar_unlocked6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked6 =
      _putchar_unlocked6Ptr.asFunction<int Function(int)>();

  int getw6(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw6(
      __stream,
    );
  }

  late final _getw6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw6 = _getw6Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw6(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw6(
      __w,
      __stream,
    );
  }

  late final _putw6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw6 =
      _putw6Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets6(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets6(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgets6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets6 = _fgets6Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim6(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim6(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelim6Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim6 = ___getdelim6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getdelim6(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim6(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelim6Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim6 = _getdelim6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getline6(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline6(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getline6Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<FILE>)>>('getline');
  late final _getline6 = _getline6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<FILE>)>();

  int fputs6(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs6(
      __s,
      __stream,
    );
  }

  late final _fputs6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs6 = _fputs6Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts6(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts6(
      __s,
    );
  }

  late final _puts6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts6 =
      _puts6Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc6(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc6(
      __c,
      __stream,
    );
  }

  late final _ungetc6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc6 =
      _ungetc6Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread6(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread6(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread6 = _fread6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite6(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite6(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwrite6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite6 = _fwrite6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked6(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked6(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlocked6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked6 = _fread_unlocked6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked6(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked6(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlocked6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked6 = _fwrite_unlocked6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek6(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek6(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseek6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek6 =
      _fseek6Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell6(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell6(
      __stream,
    );
  }

  late final _ftell6Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell6 = _ftell6Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind6(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind6(
      __stream,
    );
  }

  late final _rewind6Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind6 =
      _rewind6Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko6(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko6(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseeko6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko6 =
      _fseeko6Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello6(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello6(
      __stream,
    );
  }

  late final _ftello6Ptr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello6 =
      _ftello6Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos6(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos6(
      __stream,
      __pos,
    );
  }

  late final _fgetpos6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos6 = _fgetpos6Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos6(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos6(
      __stream,
      __pos,
    );
  }

  late final _fsetpos6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos6 = _fsetpos6Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr6(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr6(
      __stream,
    );
  }

  late final _clearerr6Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr6 =
      _clearerr6Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof6(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof6(
      __stream,
    );
  }

  late final _feof6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof6 = _feof6Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror6(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror6(
      __stream,
    );
  }

  late final _ferror6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror6 =
      _ferror6Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked6(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked6(
      __stream,
    );
  }

  late final _clearerr_unlocked6Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked6 =
      _clearerr_unlocked6Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked6(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked6(
      __stream,
    );
  }

  late final _feof_unlocked6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked6 =
      _feof_unlocked6Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked6(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked6(
      __stream,
    );
  }

  late final _ferror_unlocked6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked6 =
      _ferror_unlocked6Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror6(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror6(
      __s,
    );
  }

  late final _perror6Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror6 =
      _perror6Ptr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno6(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno6(
      __stream,
    );
  }

  late final _fileno6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno6 =
      _fileno6Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked6(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked6(
      __stream,
    );
  }

  late final _fileno_unlocked6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked6 =
      _fileno_unlocked6Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose6(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose6(
      __stream,
    );
  }

  late final _pclose6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose6 =
      _pclose6Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen6(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen6(
      __command,
      __modes,
    );
  }

  late final _popen6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen6 = _popen6Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid6(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid6(
      __s,
    );
  }

  late final _ctermid6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid6 = _ctermid6Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile6(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile6(
      __stream,
    );
  }

  late final _flockfile6Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile6 =
      _flockfile6Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile6(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile6(
      __stream,
    );
  }

  late final _ftrylockfile6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile6 =
      _ftrylockfile6Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile6(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile6(
      __stream,
    );
  }

  late final _funlockfile6Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile6 =
      _funlockfile6Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow6(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow6(
      arg0,
    );
  }

  late final ___uflow6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow6 =
      ___uflow6Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow6(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow6(
      arg0,
      arg1,
    );
  }

  late final ___overflow6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow6 =
      ___overflow6Ptr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __ctype_get_mb_cur_max6() {
    return ___ctype_get_mb_cur_max6();
  }

  late final ___ctype_get_mb_cur_max6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max6 =
      ___ctype_get_mb_cur_max6Ptr.asFunction<int Function()>();

  double atof6(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof6(
      __nptr,
    );
  }

  late final _atof6Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof6 =
      _atof6Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi6(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi6(
      __nptr,
    );
  }

  late final _atoi6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi6 =
      _atoi6Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol6(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol6(
      __nptr,
    );
  }

  late final _atol6Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol6 =
      _atol6Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll6(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll6(
      __nptr,
    );
  }

  late final _atoll6Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll6 =
      _atoll6Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod6(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod6(
      __nptr,
      __endptr,
    );
  }

  late final _strtod6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod6 = _strtod6Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof6(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof6(
      __nptr,
      __endptr,
    );
  }

  late final _strtof6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof6 = _strtof6Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol6(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol6(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol6 = _strtol6Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul6(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul6(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul6 = _strtoul6Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq6(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq6(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq6 = _strtoq6Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq6(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq6(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq6 = _strtouq6Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll6(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll6(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll6 = _strtoll6Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull6(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull6(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull6 = _strtoull6Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a6(
    int __n,
  ) {
    return _l64a6(
      __n,
    );
  }

  late final _l64a6Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a6 =
      _l64a6Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l6(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l6(
      __s,
    );
  }

  late final _a64l6Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l6 =
      _a64l6Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select6(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select6(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select6 = _select6Ptr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect6(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect6(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect6 = _pselect6Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random6() {
    return _random6();
  }

  late final _random6Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random6 = _random6Ptr.asFunction<int Function()>();

  void srandom6(
    int __seed,
  ) {
    return _srandom6(
      __seed,
    );
  }

  late final _srandom6Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom6 = _srandom6Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate6(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate6(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int)>>('initstate');
  late final _initstate6 = _initstate6Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate6(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate6(
      __statebuf,
    );
  }

  late final _setstate6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate6 = _setstate6Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r6(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r6(
      __buf,
      __result,
    );
  }

  late final _random_r6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r6 = _random_r6Ptr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r6(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r6(
      __seed,
      __buf,
    );
  }

  late final _srandom_r6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r6 =
      _srandom_r6Ptr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r6(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r6(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r6 = _initstate_r6Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r6(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r6(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r6 = _setstate_r6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand6() {
    return _rand6();
  }

  late final _rand6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand6 = _rand6Ptr.asFunction<int Function()>();

  void srand6(
    int __seed,
  ) {
    return _srand6(
      __seed,
    );
  }

  late final _srand6Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand6 = _srand6Ptr.asFunction<void Function(int)>();

  int rand_r6(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r6(
      __seed,
    );
  }

  late final _rand_r6Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r6 =
      _rand_r6Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand486() {
    return _drand486();
  }

  late final _drand486Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand486 = _drand486Ptr.asFunction<double Function()>();

  double erand486(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand486(
      __xsubi,
    );
  }

  late final _erand486Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand486 = _erand486Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand486() {
    return _lrand486();
  }

  late final _lrand486Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand486 = _lrand486Ptr.asFunction<int Function()>();

  int nrand486(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand486(
      __xsubi,
    );
  }

  late final _nrand486Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand486 =
      _nrand486Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand486() {
    return _mrand486();
  }

  late final _mrand486Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand486 = _mrand486Ptr.asFunction<int Function()>();

  int jrand486(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand486(
      __xsubi,
    );
  }

  late final _jrand486Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand486 =
      _jrand486Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand486(
    int __seedval,
  ) {
    return _srand486(
      __seedval,
    );
  }

  late final _srand486Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand486 = _srand486Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed486(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed486(
      __seed16v,
    );
  }

  late final _seed486Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed486 = _seed486Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong486(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong486(
      __param,
    );
  }

  late final _lcong486Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong486 =
      _lcong486Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r6(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r6(
      __buffer,
      __result,
    );
  }

  late final _drand48_r6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r6 = _drand48_r6Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r6(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r6(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r6 = _erand48_r6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r6(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r6(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r6 = _lrand48_r6Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r6(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r6(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r6 = _nrand48_r6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r6(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r6(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r6 = _mrand48_r6Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r6(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r6(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r6 = _jrand48_r6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r6(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r6(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r6 =
      _srand48_r6Ptr.asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r6(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r6(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r6 = _seed48_r6Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r6(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r6(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r6 = _lcong48_r6Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int arc4random6() {
    return _arc4random6();
  }

  late final _arc4random6Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random6 = _arc4random6Ptr.asFunction<int Function()>();

  void arc4random_buf6(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf6(
      __buf,
      __size,
    );
  }

  late final _arc4random_buf6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('arc4random_buf');
  late final _arc4random_buf6 = _arc4random_buf6Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform6(
    int __upper_bound,
  ) {
    return _arc4random_uniform6(
      __upper_bound,
    );
  }

  late final _arc4random_uniform6Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
          'arc4random_uniform');
  late final _arc4random_uniform6 =
      _arc4random_uniform6Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc6(
    int __size,
  ) {
    return _malloc6(
      __size,
    );
  }

  late final _malloc6Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'malloc');
  late final _malloc6 =
      _malloc6Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc6(
    int __nmemb,
    int __size,
  ) {
    return _calloc6(
      __nmemb,
      __size,
    );
  }

  late final _calloc6Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'calloc');
  late final _calloc6 =
      _calloc6Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc6(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc6(
      __ptr,
      __size,
    );
  }

  late final _realloc6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('realloc');
  late final _realloc6 = _realloc6Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free6(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free6(
      __ptr,
    );
  }

  late final _free6Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free6 =
      _free6Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray12(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray12(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray12 = _reallocarray12Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray13(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray13(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray13 = _reallocarray13Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca6(
    int __size,
  ) {
    return _alloca6(
      __size,
    );
  }

  late final _alloca6Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'alloca');
  late final _alloca6 =
      _alloca6Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc6(
    int __size,
  ) {
    return _valloc6(
      __size,
    );
  }

  late final _valloc6Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'valloc');
  late final _valloc6 =
      _valloc6Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign6(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign6(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int,
              ffi.Int)>>('posix_memalign');
  late final _posix_memalign6 = _posix_memalign6Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc6(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc6(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc6Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'aligned_alloc');
  late final _aligned_alloc6 =
      _aligned_alloc6Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort6() {
    return _abort6();
  }

  late final _abort6Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort6 = _abort6Ptr.asFunction<void Function()>();

  int atexit6(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit6(
      __func,
    );
  }

  late final _atexit6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit6 = _atexit6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit6(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit6(
      __func,
    );
  }

  late final _at_quick_exit6Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit6 = _at_quick_exit6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit6(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit6(
      __func,
      __arg,
    );
  }

  late final _on_exit6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit6 = _on_exit6Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit6(
    int __status,
  ) {
    return _exit6(
      __status,
    );
  }

  late final _exit6Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit6 = _exit6Ptr.asFunction<void Function(int)>();

  void quick_exit6(
    int __status,
  ) {
    return _quick_exit6(
      __status,
    );
  }

  late final _quick_exit6Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit6 = _quick_exit6Ptr.asFunction<void Function(int)>();

  void _Exit6(
    int __status,
  ) {
    return __Exit6(
      __status,
    );
  }

  late final __Exit6Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit6 = __Exit6Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv6(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv6(
      __name,
    );
  }

  late final _getenv6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv6 = _getenv6Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv6(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv6(
      __string,
    );
  }

  late final _putenv6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv6 =
      _putenv6Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv6(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv6(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv6 = _setenv6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv6(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv6(
      __name,
    );
  }

  late final _unsetenv6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv6 =
      _unsetenv6Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv6() {
    return _clearenv6();
  }

  late final _clearenv6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv6 = _clearenv6Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp6(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp6(
      __template,
    );
  }

  late final _mktemp6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp6 = _mktemp6Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp6(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp6(
      __template,
    );
  }

  late final _mkstemp6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp6 =
      _mkstemp6Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps6(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps6(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps6Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps6 =
      _mkstemps6Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp6(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp6(
      __template,
    );
  }

  late final _mkdtemp6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp6 = _mkdtemp6Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system6(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system6(
      __command,
    );
  }

  late final _system6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system6 =
      _system6Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath6(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath6(
      __name,
      __resolved,
    );
  }

  late final _realpath6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath6 = _realpath6Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch6(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch6(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              __compar_fn_t)>>('bsearch');
  late final _bsearch6 = _bsearch6Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort6(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort6(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              __compar_fn_t)>>('qsort');
  late final _qsort6 = _qsort6Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs6(
    int __x,
  ) {
    return _abs6(
      __x,
    );
  }

  late final _abs6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs6 = _abs6Ptr.asFunction<int Function(int)>();

  int labs6(
    int __x,
  ) {
    return _labs6(
      __x,
    );
  }

  late final _labs6Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs6 = _labs6Ptr.asFunction<int Function(int)>();

  int llabs6(
    int __x,
  ) {
    return _llabs6(
      __x,
    );
  }

  late final _llabs6Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs6 = _llabs6Ptr.asFunction<int Function(int)>();

  div_t div6(
    int __numer,
    int __denom,
  ) {
    return _div6(
      __numer,
      __denom,
    );
  }

  late final _div6Ptr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div6 = _div6Ptr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv6(
    int __numer,
    int __denom,
  ) {
    return _ldiv6(
      __numer,
      __denom,
    );
  }

  late final _ldiv6Ptr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv6 = _ldiv6Ptr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv6(
    int __numer,
    int __denom,
  ) {
    return _lldiv6(
      __numer,
      __denom,
    );
  }

  late final _lldiv6Ptr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv6 = _lldiv6Ptr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt6(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt6(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt6 = _ecvt6Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt6(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt6(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt6 = _fcvt6Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt6(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt6(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt6 = _gcvt6Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r6(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r6(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('ecvt_r');
  late final _ecvt_r6 = _ecvt_r6Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r6(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r6(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('fcvt_r');
  late final _fcvt_r6 = _fcvt_r6Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen6(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen6(
      __s,
      __n,
    );
  }

  late final _mblen6Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mblen');
  late final _mblen6 =
      _mblen6Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc6(
    ffi.Pointer<ffi.Int> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc6(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('mbtowc');
  late final _mbtowc6 = _mbtowc6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb6(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb6(
      __s,
      __wchar,
    );
  }

  late final _wctomb6Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'wctomb');
  late final _wctomb6 =
      _wctomb6Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs6(
    ffi.Pointer<ffi.Int> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs6(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mbstowcs');
  late final _mbstowcs6 = _mbstowcs6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs6(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Int> __pwcs,
    int __n,
  ) {
    return _wcstombs6(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('wcstombs');
  late final _wcstombs6 = _wcstombs6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  int rpmatch6(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch6(
      __response,
    );
  }

  late final _rpmatch6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch6 =
      _rpmatch6Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt6(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt6(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt6 = _getsubopt6Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg6(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg6(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg6 =
      _getloadavg6Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Void> memcpy6(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy6(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpy6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memcpy');
  late final _memcpy6 = _memcpy6Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove6(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove6(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmove6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memmove');
  late final _memmove6 = _memmove6Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy6(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy6(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpy6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memccpy');
  late final _memccpy6 = _memccpy6Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset6(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset6(
      __s,
      __c,
      __n,
    );
  }

  late final _memset6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memset');
  late final _memset6 = _memset6Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp6(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp6(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmp6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('memcmp');
  late final _memcmp6 = _memcmp6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq6(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq6(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeq6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__memcmpeq');
  late final ___memcmpeq6 = ___memcmpeq6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr6(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr6(
      __s,
      __c,
      __n,
    );
  }

  late final _memchr6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memchr');
  late final _memchr6 = _memchr6Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy6(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy6(
      __dest,
      __src,
    );
  }

  late final _strcpy6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy6 = _strcpy6Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy6(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy6(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpy6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncpy');
  late final _strncpy6 = _strncpy6Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat6(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat6(
      __dest,
      __src,
    );
  }

  late final _strcat6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat6 = _strcat6Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat6(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat6(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncat6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncat');
  late final _strncat6 = _strncat6Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp6(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp6(
      __s1,
      __s2,
    );
  }

  late final _strcmp6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp6 = _strcmp6Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp6(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp6(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmp6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncmp');
  late final _strncmp6 = _strncmp6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll6(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll6(
      __s1,
      __s2,
    );
  }

  late final _strcoll6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll6 = _strcoll6Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm6(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm6(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrm6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strxfrm');
  late final _strxfrm6 = _strxfrm6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l6(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l6(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_l6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l6 = _strcoll_l6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l6(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l6(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_l6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strxfrm_l');
  late final _strxfrm_l6 = _strxfrm_l6Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup6(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup6(
      __s,
    );
  }

  late final _strdup6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup6 = _strdup6Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup6(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup6(
      __string,
      __n,
    );
  }

  late final _strndup6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strndup');
  late final _strndup6 = _strndup6Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr6(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr6(
      __s,
      __c,
    );
  }

  late final _strchr6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr6 = _strchr6Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr6(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr6(
      __s,
      __c,
    );
  }

  late final _strrchr6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr6 = _strrchr6Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn6(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn6(
      __s,
      __reject,
    );
  }

  late final _strcspn6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn6 = _strcspn6Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn6(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn6(
      __s,
      __accept,
    );
  }

  late final _strspn6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn6 = _strspn6Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk6(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk6(
      __s,
      __accept,
    );
  }

  late final _strpbrk6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk6 = _strpbrk6Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr6(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr6(
      __haystack,
      __needle,
    );
  }

  late final _strstr6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr6 = _strstr6Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok6(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok6(
      __s,
      __delim,
    );
  }

  late final _strtok6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok6 = _strtok6Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r6(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r6(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_r6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r6 = ___strtok_r6Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r6(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r6(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_r6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r6 = _strtok_r6Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen6(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen6(
      __s,
    );
  }

  late final _strlen6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'strlen');
  late final _strlen6 =
      _strlen6Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen6(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen6(
      __string,
      __maxlen,
    );
  }

  late final _strnlen6Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'strnlen');
  late final _strnlen6 =
      _strnlen6Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror6(
    int __errnum,
  ) {
    return _strerror6(
      __errnum,
    );
  }

  late final _strerror6Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror6 =
      _strerror6Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r6(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r6(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_r6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('strerror_r');
  late final _strerror_r6 = _strerror_r6Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l6(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l6(
      __errnum,
      __l,
    );
  }

  late final _strerror_l6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l6 = _strerror_l6Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp6(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp6(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmp6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcmp');
  late final _bcmp6 = _bcmp6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy6(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy6(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopy6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcopy');
  late final _bcopy6 = _bcopy6Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero6(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero6(
      __s,
      __n,
    );
  }

  late final _bzero6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('bzero');
  late final _bzero6 =
      _bzero6Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index6(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index6(
      __s,
      __c,
    );
  }

  late final _index6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index6 = _index6Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex6(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex6(
      __s,
      __c,
    );
  }

  late final _rindex6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex6 = _rindex6Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs6(
    int __i,
  ) {
    return _ffs6(
      __i,
    );
  }

  late final _ffs6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs6 = _ffs6Ptr.asFunction<int Function(int)>();

  int ffsl6(
    int __l,
  ) {
    return _ffsl6(
      __l,
    );
  }

  late final _ffsl6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl6 = _ffsl6Ptr.asFunction<int Function(int)>();

  int ffsll6(
    int __ll,
  ) {
    return _ffsll6(
      __ll,
    );
  }

  late final _ffsll6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll6 = _ffsll6Ptr.asFunction<int Function(int)>();

  int strcasecmp6(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp6(
      __s1,
      __s2,
    );
  }

  late final _strcasecmp6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp6 = _strcasecmp6Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp6(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp6(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmp6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncasecmp');
  late final _strncasecmp6 = _strncasecmp6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l6(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l6(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_l6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l6 = _strcasecmp_l6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l6(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l6(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_l6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l6 = _strncasecmp_l6Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero6(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero6(
      __s,
      __n,
    );
  }

  late final _explicit_bzero6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('explicit_bzero');
  late final _explicit_bzero6 = _explicit_bzero6Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep6(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep6(
      __stringp,
      __delim,
    );
  }

  late final _strsep6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep6 = _strsep6Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal6(
    int __sig,
  ) {
    return _strsignal6(
      __sig,
    );
  }

  late final _strsignal6Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal6 =
      _strsignal6Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy6(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy6(
      __dest,
      __src,
    );
  }

  late final ___stpcpy6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy6 = ___stpcpy6Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy6(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy6(
      __dest,
      __src,
    );
  }

  late final _stpcpy6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy6 = _stpcpy6Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy6(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy6(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpy6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('__stpncpy');
  late final ___stpncpy6 = ___stpncpy6Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy6(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy6(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpy6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('stpncpy');
  late final _stpncpy6 = _stpncpy6Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int remove7(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove7(
      __filename,
    );
  }

  late final _remove7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove7 =
      _remove7Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename7(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename7(
      __old,
      __new,
    );
  }

  late final _rename7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename7 = _rename7Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat7(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat7(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameat7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat7 = _renameat7Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose7(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose7(
      __stream,
    );
  }

  late final _fclose7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose7 =
      _fclose7Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile7() {
    return _tmpfile7();
  }

  late final _tmpfile7Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile7 =
      _tmpfile7Ptr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam7(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam7(
      arg0,
    );
  }

  late final _tmpnam7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam7 = _tmpnam7Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r7(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r7(
      __s,
    );
  }

  late final _tmpnam_r7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r7 = _tmpnam_r7Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam7(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam7(
      __dir,
      __pfx,
    );
  }

  late final _tempnam7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam7 = _tempnam7Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush7(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush7(
      __stream,
    );
  }

  late final _fflush7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush7 =
      _fflush7Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked7(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked7(
      __stream,
    );
  }

  late final _fflush_unlocked7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked7 =
      _fflush_unlocked7Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen7(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen7(
      __filename,
      __modes,
    );
  }

  late final _fopen7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen7 = _fopen7Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen7(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen7(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopen7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen7 = _freopen7Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen7(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen7(
      __fd,
      __modes,
    );
  }

  late final _fdopen7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen7 = _fdopen7Ptr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen7(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen7(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopen7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen7 = _fmemopen7Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream7(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Int> __sizeloc,
  ) {
    return _open_memstream7(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstream7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('open_memstream');
  late final _open_memstream7 = _open_memstream7Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void setbuf7(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf7(
      __stream,
      __buf,
    );
  }

  late final _setbuf7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf7 = _setbuf7Ptr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf7(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf7(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbuf7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('setvbuf');
  late final _setvbuf7 = _setvbuf7Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer7(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer7(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbuffer7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer7 = _setbuffer7Ptr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf7(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf7(
      __stream,
    );
  }

  late final _setlinebuf7Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf7 =
      _setlinebuf7Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf7(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf7(
      __stream,
      __format,
    );
  }

  late final _fprintf7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf7 = _fprintf7Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf7(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf7(
      __format,
    );
  }

  late final _printf7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf7 =
      _printf7Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf7(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf7(
      __s,
      __format,
    );
  }

  late final _sprintf7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf7 = _sprintf7Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf7(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfprintf7(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintf7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfprintf');
  late final _vfprintf7 = _vfprintf7Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vprintf7(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vprintf7(
      __format,
      __arg,
    );
  }

  late final _vprintf7Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vprintf');
  late final _vprintf7 =
      _vprintf7Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsprintf7(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsprintf7(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintf7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsprintf');
  late final _vsprintf7 = _vsprintf7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int snprintf7(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf7(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintf7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf7 = _snprintf7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf7(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsnprintf7(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintf7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('vsnprintf');
  late final _vsnprintf7 = _vsnprintf7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int vdprintf7(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    int __arg,
  ) {
    return _vdprintf7(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintf7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('vdprintf');
  late final _vdprintf7 =
      _vdprintf7Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int dprintf7(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf7(
      __fd,
      __fmt,
    );
  }

  late final _dprintf7Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf7 =
      _dprintf7Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf14(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf14(
      __stream,
      __format,
    );
  }

  late final _fscanf14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf14 = _fscanf14Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf14(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf14(
      __format,
    );
  }

  late final _scanf14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf14 =
      _scanf14Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf14(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf14(
      __s,
      __format,
    );
  }

  late final _sscanf14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf14 = _sscanf14Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fscanf15(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf15(
      __stream,
      __format,
    );
  }

  late final _fscanf15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf15 = _fscanf15Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf15(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf15(
      __format,
    );
  }

  late final _scanf15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf15 =
      _scanf15Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf15(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf15(
      __s,
      __format,
    );
  }

  late final _sscanf15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf15 = _sscanf15Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf14(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf14(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf14 = _vfscanf14Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf14(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf14(
      __format,
      __arg,
    );
  }

  late final _vscanf14Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf14 =
      _vscanf14Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf14(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf14(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf14 = _vsscanf14Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int vfscanf15(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf15(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf15 = _vfscanf15Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf15(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf15(
      __format,
      __arg,
    );
  }

  late final _vscanf15Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf15 =
      _vscanf15Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf15(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf15(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf15 = _vsscanf15Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fgetc7(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc7(
      __stream,
    );
  }

  late final _fgetc7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc7 = _fgetc7Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc7(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc7(
      __stream,
    );
  }

  late final _getc7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc7 = _getc7Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar7() {
    return _getchar7();
  }

  late final _getchar7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar7 = _getchar7Ptr.asFunction<int Function()>();

  int getc_unlocked7(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked7(
      __stream,
    );
  }

  late final _getc_unlocked7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked7 =
      _getc_unlocked7Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked7() {
    return _getchar_unlocked7();
  }

  late final _getchar_unlocked7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked7 =
      _getchar_unlocked7Ptr.asFunction<int Function()>();

  int fgetc_unlocked7(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked7(
      __stream,
    );
  }

  late final _fgetc_unlocked7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked7 =
      _fgetc_unlocked7Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc7(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc7(
      __c,
      __stream,
    );
  }

  late final _fputc7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc7 =
      _fputc7Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc7(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc7(
      __c,
      __stream,
    );
  }

  late final _putc7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc7 =
      _putc7Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar7(
    int __c,
  ) {
    return _putchar7(
      __c,
    );
  }

  late final _putchar7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar7 = _putchar7Ptr.asFunction<int Function(int)>();

  int fputc_unlocked7(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked7(
      __c,
      __stream,
    );
  }

  late final _fputc_unlocked7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked7 =
      _fputc_unlocked7Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked7(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked7(
      __c,
      __stream,
    );
  }

  late final _putc_unlocked7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked7 =
      _putc_unlocked7Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked7(
    int __c,
  ) {
    return _putchar_unlocked7(
      __c,
    );
  }

  late final _putchar_unlocked7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked7 =
      _putchar_unlocked7Ptr.asFunction<int Function(int)>();

  int getw7(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw7(
      __stream,
    );
  }

  late final _getw7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw7 = _getw7Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw7(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw7(
      __w,
      __stream,
    );
  }

  late final _putw7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw7 =
      _putw7Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets7(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets7(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgets7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets7 = _fgets7Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim7(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim7(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelim7Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim7 = ___getdelim7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getdelim7(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim7(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelim7Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim7 = _getdelim7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getline7(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline7(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getline7Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<FILE>)>>('getline');
  late final _getline7 = _getline7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<FILE>)>();

  int fputs7(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs7(
      __s,
      __stream,
    );
  }

  late final _fputs7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs7 = _fputs7Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts7(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts7(
      __s,
    );
  }

  late final _puts7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts7 =
      _puts7Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc7(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc7(
      __c,
      __stream,
    );
  }

  late final _ungetc7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc7 =
      _ungetc7Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread7(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread7(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread7 = _fread7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite7(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite7(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwrite7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite7 = _fwrite7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked7(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked7(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlocked7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked7 = _fread_unlocked7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked7(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked7(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlocked7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked7 = _fwrite_unlocked7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek7(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek7(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseek7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek7 =
      _fseek7Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell7(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell7(
      __stream,
    );
  }

  late final _ftell7Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell7 = _ftell7Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind7(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind7(
      __stream,
    );
  }

  late final _rewind7Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind7 =
      _rewind7Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko7(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko7(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseeko7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko7 =
      _fseeko7Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello7(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello7(
      __stream,
    );
  }

  late final _ftello7Ptr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello7 =
      _ftello7Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos7(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos7(
      __stream,
      __pos,
    );
  }

  late final _fgetpos7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos7 = _fgetpos7Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos7(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos7(
      __stream,
      __pos,
    );
  }

  late final _fsetpos7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos7 = _fsetpos7Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr7(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr7(
      __stream,
    );
  }

  late final _clearerr7Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr7 =
      _clearerr7Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof7(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof7(
      __stream,
    );
  }

  late final _feof7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof7 = _feof7Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror7(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror7(
      __stream,
    );
  }

  late final _ferror7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror7 =
      _ferror7Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked7(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked7(
      __stream,
    );
  }

  late final _clearerr_unlocked7Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked7 =
      _clearerr_unlocked7Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked7(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked7(
      __stream,
    );
  }

  late final _feof_unlocked7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked7 =
      _feof_unlocked7Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked7(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked7(
      __stream,
    );
  }

  late final _ferror_unlocked7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked7 =
      _ferror_unlocked7Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror7(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror7(
      __s,
    );
  }

  late final _perror7Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror7 =
      _perror7Ptr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno7(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno7(
      __stream,
    );
  }

  late final _fileno7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno7 =
      _fileno7Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked7(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked7(
      __stream,
    );
  }

  late final _fileno_unlocked7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked7 =
      _fileno_unlocked7Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose7(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose7(
      __stream,
    );
  }

  late final _pclose7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose7 =
      _pclose7Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen7(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen7(
      __command,
      __modes,
    );
  }

  late final _popen7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen7 = _popen7Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid7(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid7(
      __s,
    );
  }

  late final _ctermid7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid7 = _ctermid7Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile7(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile7(
      __stream,
    );
  }

  late final _flockfile7Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile7 =
      _flockfile7Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile7(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile7(
      __stream,
    );
  }

  late final _ftrylockfile7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile7 =
      _ftrylockfile7Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile7(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile7(
      __stream,
    );
  }

  late final _funlockfile7Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile7 =
      _funlockfile7Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow7(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow7(
      arg0,
    );
  }

  late final ___uflow7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow7 =
      ___uflow7Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow7(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow7(
      arg0,
      arg1,
    );
  }

  late final ___overflow7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow7 =
      ___overflow7Ptr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __ctype_get_mb_cur_max7() {
    return ___ctype_get_mb_cur_max7();
  }

  late final ___ctype_get_mb_cur_max7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max7 =
      ___ctype_get_mb_cur_max7Ptr.asFunction<int Function()>();

  double atof7(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof7(
      __nptr,
    );
  }

  late final _atof7Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof7 =
      _atof7Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi7(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi7(
      __nptr,
    );
  }

  late final _atoi7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi7 =
      _atoi7Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol7(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol7(
      __nptr,
    );
  }

  late final _atol7Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol7 =
      _atol7Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll7(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll7(
      __nptr,
    );
  }

  late final _atoll7Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll7 =
      _atoll7Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod7(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod7(
      __nptr,
      __endptr,
    );
  }

  late final _strtod7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod7 = _strtod7Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof7(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof7(
      __nptr,
      __endptr,
    );
  }

  late final _strtof7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof7 = _strtof7Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol7(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol7(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol7 = _strtol7Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul7(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul7(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul7 = _strtoul7Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq7(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq7(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq7 = _strtoq7Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq7(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq7(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq7 = _strtouq7Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll7(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll7(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll7 = _strtoll7Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull7(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull7(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull7 = _strtoull7Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a7(
    int __n,
  ) {
    return _l64a7(
      __n,
    );
  }

  late final _l64a7Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a7 =
      _l64a7Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l7(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l7(
      __s,
    );
  }

  late final _a64l7Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l7 =
      _a64l7Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select7(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select7(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select7 = _select7Ptr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect7(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect7(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect7 = _pselect7Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random7() {
    return _random7();
  }

  late final _random7Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random7 = _random7Ptr.asFunction<int Function()>();

  void srandom7(
    int __seed,
  ) {
    return _srandom7(
      __seed,
    );
  }

  late final _srandom7Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom7 = _srandom7Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate7(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate7(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int)>>('initstate');
  late final _initstate7 = _initstate7Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate7(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate7(
      __statebuf,
    );
  }

  late final _setstate7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate7 = _setstate7Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r7(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r7(
      __buf,
      __result,
    );
  }

  late final _random_r7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r7 = _random_r7Ptr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r7(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r7(
      __seed,
      __buf,
    );
  }

  late final _srandom_r7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r7 =
      _srandom_r7Ptr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r7(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r7(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r7 = _initstate_r7Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r7(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r7(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r7 = _setstate_r7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand7() {
    return _rand7();
  }

  late final _rand7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand7 = _rand7Ptr.asFunction<int Function()>();

  void srand7(
    int __seed,
  ) {
    return _srand7(
      __seed,
    );
  }

  late final _srand7Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand7 = _srand7Ptr.asFunction<void Function(int)>();

  int rand_r7(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r7(
      __seed,
    );
  }

  late final _rand_r7Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r7 =
      _rand_r7Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand487() {
    return _drand487();
  }

  late final _drand487Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand487 = _drand487Ptr.asFunction<double Function()>();

  double erand487(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand487(
      __xsubi,
    );
  }

  late final _erand487Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand487 = _erand487Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand487() {
    return _lrand487();
  }

  late final _lrand487Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand487 = _lrand487Ptr.asFunction<int Function()>();

  int nrand487(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand487(
      __xsubi,
    );
  }

  late final _nrand487Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand487 =
      _nrand487Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand487() {
    return _mrand487();
  }

  late final _mrand487Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand487 = _mrand487Ptr.asFunction<int Function()>();

  int jrand487(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand487(
      __xsubi,
    );
  }

  late final _jrand487Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand487 =
      _jrand487Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand487(
    int __seedval,
  ) {
    return _srand487(
      __seedval,
    );
  }

  late final _srand487Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand487 = _srand487Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed487(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed487(
      __seed16v,
    );
  }

  late final _seed487Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed487 = _seed487Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong487(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong487(
      __param,
    );
  }

  late final _lcong487Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong487 =
      _lcong487Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r7(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r7(
      __buffer,
      __result,
    );
  }

  late final _drand48_r7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r7 = _drand48_r7Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r7(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r7(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r7 = _erand48_r7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r7(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r7(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r7 = _lrand48_r7Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r7(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r7(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r7 = _nrand48_r7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r7(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r7(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r7 = _mrand48_r7Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r7(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r7(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r7 = _jrand48_r7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r7(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r7(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r7 =
      _srand48_r7Ptr.asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r7(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r7(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r7 = _seed48_r7Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r7(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r7(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r7 = _lcong48_r7Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int arc4random7() {
    return _arc4random7();
  }

  late final _arc4random7Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random7 = _arc4random7Ptr.asFunction<int Function()>();

  void arc4random_buf7(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf7(
      __buf,
      __size,
    );
  }

  late final _arc4random_buf7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('arc4random_buf');
  late final _arc4random_buf7 = _arc4random_buf7Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform7(
    int __upper_bound,
  ) {
    return _arc4random_uniform7(
      __upper_bound,
    );
  }

  late final _arc4random_uniform7Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
          'arc4random_uniform');
  late final _arc4random_uniform7 =
      _arc4random_uniform7Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc7(
    int __size,
  ) {
    return _malloc7(
      __size,
    );
  }

  late final _malloc7Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'malloc');
  late final _malloc7 =
      _malloc7Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc7(
    int __nmemb,
    int __size,
  ) {
    return _calloc7(
      __nmemb,
      __size,
    );
  }

  late final _calloc7Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'calloc');
  late final _calloc7 =
      _calloc7Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc7(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc7(
      __ptr,
      __size,
    );
  }

  late final _realloc7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('realloc');
  late final _realloc7 = _realloc7Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free7(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free7(
      __ptr,
    );
  }

  late final _free7Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free7 =
      _free7Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray14(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray14(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray14 = _reallocarray14Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray15(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray15(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray15 = _reallocarray15Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca7(
    int __size,
  ) {
    return _alloca7(
      __size,
    );
  }

  late final _alloca7Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'alloca');
  late final _alloca7 =
      _alloca7Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc7(
    int __size,
  ) {
    return _valloc7(
      __size,
    );
  }

  late final _valloc7Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'valloc');
  late final _valloc7 =
      _valloc7Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign7(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign7(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int,
              ffi.Int)>>('posix_memalign');
  late final _posix_memalign7 = _posix_memalign7Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc7(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc7(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc7Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'aligned_alloc');
  late final _aligned_alloc7 =
      _aligned_alloc7Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort7() {
    return _abort7();
  }

  late final _abort7Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort7 = _abort7Ptr.asFunction<void Function()>();

  int atexit7(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit7(
      __func,
    );
  }

  late final _atexit7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit7 = _atexit7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit7(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit7(
      __func,
    );
  }

  late final _at_quick_exit7Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit7 = _at_quick_exit7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit7(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit7(
      __func,
      __arg,
    );
  }

  late final _on_exit7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit7 = _on_exit7Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit7(
    int __status,
  ) {
    return _exit7(
      __status,
    );
  }

  late final _exit7Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit7 = _exit7Ptr.asFunction<void Function(int)>();

  void quick_exit7(
    int __status,
  ) {
    return _quick_exit7(
      __status,
    );
  }

  late final _quick_exit7Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit7 = _quick_exit7Ptr.asFunction<void Function(int)>();

  void _Exit7(
    int __status,
  ) {
    return __Exit7(
      __status,
    );
  }

  late final __Exit7Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit7 = __Exit7Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv7(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv7(
      __name,
    );
  }

  late final _getenv7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv7 = _getenv7Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv7(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv7(
      __string,
    );
  }

  late final _putenv7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv7 =
      _putenv7Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv7(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv7(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv7 = _setenv7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv7(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv7(
      __name,
    );
  }

  late final _unsetenv7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv7 =
      _unsetenv7Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv7() {
    return _clearenv7();
  }

  late final _clearenv7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv7 = _clearenv7Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp7(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp7(
      __template,
    );
  }

  late final _mktemp7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp7 = _mktemp7Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp7(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp7(
      __template,
    );
  }

  late final _mkstemp7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp7 =
      _mkstemp7Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps7(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps7(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps7Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps7 =
      _mkstemps7Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp7(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp7(
      __template,
    );
  }

  late final _mkdtemp7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp7 = _mkdtemp7Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system7(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system7(
      __command,
    );
  }

  late final _system7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system7 =
      _system7Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath7(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath7(
      __name,
      __resolved,
    );
  }

  late final _realpath7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath7 = _realpath7Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch7(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch7(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              __compar_fn_t)>>('bsearch');
  late final _bsearch7 = _bsearch7Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort7(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort7(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              __compar_fn_t)>>('qsort');
  late final _qsort7 = _qsort7Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs7(
    int __x,
  ) {
    return _abs7(
      __x,
    );
  }

  late final _abs7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs7 = _abs7Ptr.asFunction<int Function(int)>();

  int labs7(
    int __x,
  ) {
    return _labs7(
      __x,
    );
  }

  late final _labs7Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs7 = _labs7Ptr.asFunction<int Function(int)>();

  int llabs7(
    int __x,
  ) {
    return _llabs7(
      __x,
    );
  }

  late final _llabs7Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs7 = _llabs7Ptr.asFunction<int Function(int)>();

  div_t div7(
    int __numer,
    int __denom,
  ) {
    return _div7(
      __numer,
      __denom,
    );
  }

  late final _div7Ptr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div7 = _div7Ptr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv7(
    int __numer,
    int __denom,
  ) {
    return _ldiv7(
      __numer,
      __denom,
    );
  }

  late final _ldiv7Ptr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv7 = _ldiv7Ptr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv7(
    int __numer,
    int __denom,
  ) {
    return _lldiv7(
      __numer,
      __denom,
    );
  }

  late final _lldiv7Ptr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv7 = _lldiv7Ptr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt7(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt7(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt7 = _ecvt7Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt7(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt7(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt7 = _fcvt7Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt7(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt7(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt7 = _gcvt7Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r7(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r7(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('ecvt_r');
  late final _ecvt_r7 = _ecvt_r7Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r7(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r7(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('fcvt_r');
  late final _fcvt_r7 = _fcvt_r7Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen7(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen7(
      __s,
      __n,
    );
  }

  late final _mblen7Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mblen');
  late final _mblen7 =
      _mblen7Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc7(
    ffi.Pointer<ffi.Int> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc7(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('mbtowc');
  late final _mbtowc7 = _mbtowc7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb7(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb7(
      __s,
      __wchar,
    );
  }

  late final _wctomb7Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'wctomb');
  late final _wctomb7 =
      _wctomb7Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs7(
    ffi.Pointer<ffi.Int> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs7(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mbstowcs');
  late final _mbstowcs7 = _mbstowcs7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs7(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Int> __pwcs,
    int __n,
  ) {
    return _wcstombs7(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('wcstombs');
  late final _wcstombs7 = _wcstombs7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  int rpmatch7(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch7(
      __response,
    );
  }

  late final _rpmatch7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch7 =
      _rpmatch7Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt7(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt7(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt7 = _getsubopt7Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg7(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg7(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg7 =
      _getloadavg7Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Void> memcpy7(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy7(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpy7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memcpy');
  late final _memcpy7 = _memcpy7Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove7(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove7(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmove7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memmove');
  late final _memmove7 = _memmove7Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy7(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy7(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpy7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memccpy');
  late final _memccpy7 = _memccpy7Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset7(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset7(
      __s,
      __c,
      __n,
    );
  }

  late final _memset7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memset');
  late final _memset7 = _memset7Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp7(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp7(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmp7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('memcmp');
  late final _memcmp7 = _memcmp7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq7(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq7(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeq7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__memcmpeq');
  late final ___memcmpeq7 = ___memcmpeq7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr7(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr7(
      __s,
      __c,
      __n,
    );
  }

  late final _memchr7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memchr');
  late final _memchr7 = _memchr7Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy7(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy7(
      __dest,
      __src,
    );
  }

  late final _strcpy7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy7 = _strcpy7Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy7(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy7(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpy7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncpy');
  late final _strncpy7 = _strncpy7Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat7(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat7(
      __dest,
      __src,
    );
  }

  late final _strcat7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat7 = _strcat7Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat7(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat7(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncat7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncat');
  late final _strncat7 = _strncat7Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp7(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp7(
      __s1,
      __s2,
    );
  }

  late final _strcmp7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp7 = _strcmp7Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp7(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp7(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmp7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncmp');
  late final _strncmp7 = _strncmp7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll7(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll7(
      __s1,
      __s2,
    );
  }

  late final _strcoll7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll7 = _strcoll7Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm7(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm7(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrm7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strxfrm');
  late final _strxfrm7 = _strxfrm7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l7(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l7(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_l7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l7 = _strcoll_l7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l7(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l7(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_l7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strxfrm_l');
  late final _strxfrm_l7 = _strxfrm_l7Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup7(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup7(
      __s,
    );
  }

  late final _strdup7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup7 = _strdup7Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup7(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup7(
      __string,
      __n,
    );
  }

  late final _strndup7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strndup');
  late final _strndup7 = _strndup7Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr7(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr7(
      __s,
      __c,
    );
  }

  late final _strchr7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr7 = _strchr7Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr7(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr7(
      __s,
      __c,
    );
  }

  late final _strrchr7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr7 = _strrchr7Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn7(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn7(
      __s,
      __reject,
    );
  }

  late final _strcspn7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn7 = _strcspn7Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn7(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn7(
      __s,
      __accept,
    );
  }

  late final _strspn7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn7 = _strspn7Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk7(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk7(
      __s,
      __accept,
    );
  }

  late final _strpbrk7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk7 = _strpbrk7Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr7(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr7(
      __haystack,
      __needle,
    );
  }

  late final _strstr7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr7 = _strstr7Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok7(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok7(
      __s,
      __delim,
    );
  }

  late final _strtok7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok7 = _strtok7Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r7(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r7(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_r7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r7 = ___strtok_r7Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r7(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r7(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_r7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r7 = _strtok_r7Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen7(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen7(
      __s,
    );
  }

  late final _strlen7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'strlen');
  late final _strlen7 =
      _strlen7Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen7(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen7(
      __string,
      __maxlen,
    );
  }

  late final _strnlen7Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'strnlen');
  late final _strnlen7 =
      _strnlen7Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror7(
    int __errnum,
  ) {
    return _strerror7(
      __errnum,
    );
  }

  late final _strerror7Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror7 =
      _strerror7Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r7(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r7(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_r7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('strerror_r');
  late final _strerror_r7 = _strerror_r7Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l7(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l7(
      __errnum,
      __l,
    );
  }

  late final _strerror_l7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l7 = _strerror_l7Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp7(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp7(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmp7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcmp');
  late final _bcmp7 = _bcmp7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy7(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy7(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopy7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcopy');
  late final _bcopy7 = _bcopy7Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero7(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero7(
      __s,
      __n,
    );
  }

  late final _bzero7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('bzero');
  late final _bzero7 =
      _bzero7Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index7(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index7(
      __s,
      __c,
    );
  }

  late final _index7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index7 = _index7Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex7(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex7(
      __s,
      __c,
    );
  }

  late final _rindex7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex7 = _rindex7Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs7(
    int __i,
  ) {
    return _ffs7(
      __i,
    );
  }

  late final _ffs7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs7 = _ffs7Ptr.asFunction<int Function(int)>();

  int ffsl7(
    int __l,
  ) {
    return _ffsl7(
      __l,
    );
  }

  late final _ffsl7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl7 = _ffsl7Ptr.asFunction<int Function(int)>();

  int ffsll7(
    int __ll,
  ) {
    return _ffsll7(
      __ll,
    );
  }

  late final _ffsll7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll7 = _ffsll7Ptr.asFunction<int Function(int)>();

  int strcasecmp7(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp7(
      __s1,
      __s2,
    );
  }

  late final _strcasecmp7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp7 = _strcasecmp7Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp7(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp7(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmp7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncasecmp');
  late final _strncasecmp7 = _strncasecmp7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l7(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l7(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_l7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l7 = _strcasecmp_l7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l7(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l7(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_l7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l7 = _strncasecmp_l7Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero7(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero7(
      __s,
      __n,
    );
  }

  late final _explicit_bzero7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('explicit_bzero');
  late final _explicit_bzero7 = _explicit_bzero7Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep7(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep7(
      __stringp,
      __delim,
    );
  }

  late final _strsep7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep7 = _strsep7Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal7(
    int __sig,
  ) {
    return _strsignal7(
      __sig,
    );
  }

  late final _strsignal7Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal7 =
      _strsignal7Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy7(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy7(
      __dest,
      __src,
    );
  }

  late final ___stpcpy7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy7 = ___stpcpy7Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy7(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy7(
      __dest,
      __src,
    );
  }

  late final _stpcpy7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy7 = _stpcpy7Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy7(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy7(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpy7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('__stpncpy');
  late final ___stpncpy7 = ___stpncpy7Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy7(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy7(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpy7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('stpncpy');
  late final _stpncpy7 = _stpncpy7Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<dogecoin_chainparams> chain_from_b58_prefix3(
    ffi.Pointer<ffi.Char> address,
  ) {
    return _chain_from_b58_prefix3(
      address,
    );
  }

  late final _chain_from_b58_prefix3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<dogecoin_chainparams> Function(
              ffi.Pointer<ffi.Char>)>>('chain_from_b58_prefix');
  late final _chain_from_b58_prefix3 = _chain_from_b58_prefix3Ptr.asFunction<
      ffi.Pointer<dogecoin_chainparams> Function(ffi.Pointer<ffi.Char>)>();

  int chain_from_b58_prefix_bool3(
    ffi.Pointer<ffi.Char> address,
  ) {
    return _chain_from_b58_prefix_bool3(
      address,
    );
  }

  late final _chain_from_b58_prefix_bool3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'chain_from_b58_prefix_bool');
  late final _chain_from_b58_prefix_bool3 = _chain_from_b58_prefix_bool3Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int remove8(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove8(
      __filename,
    );
  }

  late final _remove8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove8 =
      _remove8Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename8(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename8(
      __old,
      __new,
    );
  }

  late final _rename8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename8 = _rename8Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat8(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat8(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameat8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat8 = _renameat8Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose8(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose8(
      __stream,
    );
  }

  late final _fclose8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose8 =
      _fclose8Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile8() {
    return _tmpfile8();
  }

  late final _tmpfile8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile8 =
      _tmpfile8Ptr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam8(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam8(
      arg0,
    );
  }

  late final _tmpnam8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam8 = _tmpnam8Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r8(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r8(
      __s,
    );
  }

  late final _tmpnam_r8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r8 = _tmpnam_r8Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam8(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam8(
      __dir,
      __pfx,
    );
  }

  late final _tempnam8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam8 = _tempnam8Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush8(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush8(
      __stream,
    );
  }

  late final _fflush8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush8 =
      _fflush8Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked8(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked8(
      __stream,
    );
  }

  late final _fflush_unlocked8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked8 =
      _fflush_unlocked8Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen8(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen8(
      __filename,
      __modes,
    );
  }

  late final _fopen8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen8 = _fopen8Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen8(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen8(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopen8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen8 = _freopen8Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen8(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen8(
      __fd,
      __modes,
    );
  }

  late final _fdopen8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen8 = _fdopen8Ptr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen8(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen8(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopen8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen8 = _fmemopen8Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream8(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Int> __sizeloc,
  ) {
    return _open_memstream8(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstream8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('open_memstream');
  late final _open_memstream8 = _open_memstream8Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void setbuf8(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf8(
      __stream,
      __buf,
    );
  }

  late final _setbuf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf8 = _setbuf8Ptr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf8(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf8(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbuf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('setvbuf');
  late final _setvbuf8 = _setvbuf8Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer8(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer8(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbuffer8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer8 = _setbuffer8Ptr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf8(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf8(
      __stream,
    );
  }

  late final _setlinebuf8Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf8 =
      _setlinebuf8Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf8(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf8(
      __stream,
      __format,
    );
  }

  late final _fprintf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf8 = _fprintf8Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf8(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf8(
      __format,
    );
  }

  late final _printf8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf8 =
      _printf8Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf8(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf8(
      __s,
      __format,
    );
  }

  late final _sprintf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf8 = _sprintf8Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf8(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfprintf8(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfprintf');
  late final _vfprintf8 = _vfprintf8Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vprintf8(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vprintf8(
      __format,
      __arg,
    );
  }

  late final _vprintf8Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vprintf');
  late final _vprintf8 =
      _vprintf8Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsprintf8(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsprintf8(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsprintf');
  late final _vsprintf8 = _vsprintf8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int snprintf8(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf8(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf8 = _snprintf8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf8(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsnprintf8(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('vsnprintf');
  late final _vsnprintf8 = _vsnprintf8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int vdprintf8(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    int __arg,
  ) {
    return _vdprintf8(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('vdprintf');
  late final _vdprintf8 =
      _vdprintf8Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int dprintf8(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf8(
      __fd,
      __fmt,
    );
  }

  late final _dprintf8Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf8 =
      _dprintf8Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf16(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf16(
      __stream,
      __format,
    );
  }

  late final _fscanf16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf16 = _fscanf16Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf16(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf16(
      __format,
    );
  }

  late final _scanf16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf16 =
      _scanf16Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf16(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf16(
      __s,
      __format,
    );
  }

  late final _sscanf16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf16 = _sscanf16Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fscanf17(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf17(
      __stream,
      __format,
    );
  }

  late final _fscanf17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf17 = _fscanf17Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf17(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf17(
      __format,
    );
  }

  late final _scanf17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf17 =
      _scanf17Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf17(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf17(
      __s,
      __format,
    );
  }

  late final _sscanf17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf17 = _sscanf17Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf16(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf16(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf16 = _vfscanf16Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf16(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf16(
      __format,
      __arg,
    );
  }

  late final _vscanf16Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf16 =
      _vscanf16Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf16(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf16(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf16 = _vsscanf16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int vfscanf17(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf17(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf17 = _vfscanf17Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf17(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf17(
      __format,
      __arg,
    );
  }

  late final _vscanf17Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf17 =
      _vscanf17Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf17(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf17(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf17 = _vsscanf17Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fgetc8(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc8(
      __stream,
    );
  }

  late final _fgetc8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc8 = _fgetc8Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc8(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc8(
      __stream,
    );
  }

  late final _getc8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc8 = _getc8Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar8() {
    return _getchar8();
  }

  late final _getchar8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar8 = _getchar8Ptr.asFunction<int Function()>();

  int getc_unlocked8(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked8(
      __stream,
    );
  }

  late final _getc_unlocked8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked8 =
      _getc_unlocked8Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked8() {
    return _getchar_unlocked8();
  }

  late final _getchar_unlocked8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked8 =
      _getchar_unlocked8Ptr.asFunction<int Function()>();

  int fgetc_unlocked8(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked8(
      __stream,
    );
  }

  late final _fgetc_unlocked8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked8 =
      _fgetc_unlocked8Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc8(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc8(
      __c,
      __stream,
    );
  }

  late final _fputc8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc8 =
      _fputc8Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc8(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc8(
      __c,
      __stream,
    );
  }

  late final _putc8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc8 =
      _putc8Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar8(
    int __c,
  ) {
    return _putchar8(
      __c,
    );
  }

  late final _putchar8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar8 = _putchar8Ptr.asFunction<int Function(int)>();

  int fputc_unlocked8(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked8(
      __c,
      __stream,
    );
  }

  late final _fputc_unlocked8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked8 =
      _fputc_unlocked8Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked8(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked8(
      __c,
      __stream,
    );
  }

  late final _putc_unlocked8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked8 =
      _putc_unlocked8Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked8(
    int __c,
  ) {
    return _putchar_unlocked8(
      __c,
    );
  }

  late final _putchar_unlocked8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked8 =
      _putchar_unlocked8Ptr.asFunction<int Function(int)>();

  int getw8(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw8(
      __stream,
    );
  }

  late final _getw8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw8 = _getw8Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw8(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw8(
      __w,
      __stream,
    );
  }

  late final _putw8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw8 =
      _putw8Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets8(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets8(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgets8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets8 = _fgets8Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim8(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim8(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelim8Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim8 = ___getdelim8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getdelim8(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim8(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelim8Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim8 = _getdelim8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getline8(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline8(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getline8Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<FILE>)>>('getline');
  late final _getline8 = _getline8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<FILE>)>();

  int fputs8(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs8(
      __s,
      __stream,
    );
  }

  late final _fputs8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs8 = _fputs8Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts8(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts8(
      __s,
    );
  }

  late final _puts8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts8 =
      _puts8Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc8(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc8(
      __c,
      __stream,
    );
  }

  late final _ungetc8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc8 =
      _ungetc8Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread8(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread8(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread8 = _fread8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite8(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite8(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwrite8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite8 = _fwrite8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked8(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked8(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlocked8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked8 = _fread_unlocked8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked8(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked8(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlocked8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked8 = _fwrite_unlocked8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek8(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek8(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseek8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek8 =
      _fseek8Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell8(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell8(
      __stream,
    );
  }

  late final _ftell8Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell8 = _ftell8Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind8(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind8(
      __stream,
    );
  }

  late final _rewind8Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind8 =
      _rewind8Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko8(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko8(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseeko8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko8 =
      _fseeko8Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello8(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello8(
      __stream,
    );
  }

  late final _ftello8Ptr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello8 =
      _ftello8Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos8(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos8(
      __stream,
      __pos,
    );
  }

  late final _fgetpos8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos8 = _fgetpos8Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos8(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos8(
      __stream,
      __pos,
    );
  }

  late final _fsetpos8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos8 = _fsetpos8Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr8(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr8(
      __stream,
    );
  }

  late final _clearerr8Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr8 =
      _clearerr8Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof8(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof8(
      __stream,
    );
  }

  late final _feof8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof8 = _feof8Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror8(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror8(
      __stream,
    );
  }

  late final _ferror8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror8 =
      _ferror8Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked8(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked8(
      __stream,
    );
  }

  late final _clearerr_unlocked8Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked8 =
      _clearerr_unlocked8Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked8(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked8(
      __stream,
    );
  }

  late final _feof_unlocked8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked8 =
      _feof_unlocked8Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked8(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked8(
      __stream,
    );
  }

  late final _ferror_unlocked8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked8 =
      _ferror_unlocked8Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror8(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror8(
      __s,
    );
  }

  late final _perror8Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror8 =
      _perror8Ptr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno8(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno8(
      __stream,
    );
  }

  late final _fileno8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno8 =
      _fileno8Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked8(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked8(
      __stream,
    );
  }

  late final _fileno_unlocked8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked8 =
      _fileno_unlocked8Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose8(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose8(
      __stream,
    );
  }

  late final _pclose8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose8 =
      _pclose8Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen8(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen8(
      __command,
      __modes,
    );
  }

  late final _popen8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen8 = _popen8Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid8(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid8(
      __s,
    );
  }

  late final _ctermid8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid8 = _ctermid8Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile8(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile8(
      __stream,
    );
  }

  late final _flockfile8Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile8 =
      _flockfile8Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile8(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile8(
      __stream,
    );
  }

  late final _ftrylockfile8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile8 =
      _ftrylockfile8Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile8(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile8(
      __stream,
    );
  }

  late final _funlockfile8Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile8 =
      _funlockfile8Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow8(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow8(
      arg0,
    );
  }

  late final ___uflow8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow8 =
      ___uflow8Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow8(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow8(
      arg0,
      arg1,
    );
  }

  late final ___overflow8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow8 =
      ___overflow8Ptr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __ctype_get_mb_cur_max8() {
    return ___ctype_get_mb_cur_max8();
  }

  late final ___ctype_get_mb_cur_max8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max8 =
      ___ctype_get_mb_cur_max8Ptr.asFunction<int Function()>();

  double atof8(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof8(
      __nptr,
    );
  }

  late final _atof8Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof8 =
      _atof8Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi8(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi8(
      __nptr,
    );
  }

  late final _atoi8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi8 =
      _atoi8Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol8(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol8(
      __nptr,
    );
  }

  late final _atol8Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol8 =
      _atol8Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll8(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll8(
      __nptr,
    );
  }

  late final _atoll8Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll8 =
      _atoll8Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod8(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod8(
      __nptr,
      __endptr,
    );
  }

  late final _strtod8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod8 = _strtod8Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof8(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof8(
      __nptr,
      __endptr,
    );
  }

  late final _strtof8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof8 = _strtof8Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol8(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol8(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol8 = _strtol8Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul8(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul8(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul8 = _strtoul8Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq8(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq8(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq8 = _strtoq8Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq8(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq8(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq8 = _strtouq8Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll8(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll8(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll8 = _strtoll8Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull8(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull8(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull8 = _strtoull8Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a8(
    int __n,
  ) {
    return _l64a8(
      __n,
    );
  }

  late final _l64a8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a8 =
      _l64a8Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l8(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l8(
      __s,
    );
  }

  late final _a64l8Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l8 =
      _a64l8Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select8(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select8(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select8 = _select8Ptr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect8(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect8(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect8 = _pselect8Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random8() {
    return _random8();
  }

  late final _random8Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random8 = _random8Ptr.asFunction<int Function()>();

  void srandom8(
    int __seed,
  ) {
    return _srandom8(
      __seed,
    );
  }

  late final _srandom8Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom8 = _srandom8Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate8(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate8(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int)>>('initstate');
  late final _initstate8 = _initstate8Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate8(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate8(
      __statebuf,
    );
  }

  late final _setstate8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate8 = _setstate8Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r8(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r8(
      __buf,
      __result,
    );
  }

  late final _random_r8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r8 = _random_r8Ptr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r8(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r8(
      __seed,
      __buf,
    );
  }

  late final _srandom_r8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r8 =
      _srandom_r8Ptr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r8(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r8(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r8 = _initstate_r8Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r8(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r8(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r8 = _setstate_r8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand8() {
    return _rand8();
  }

  late final _rand8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand8 = _rand8Ptr.asFunction<int Function()>();

  void srand8(
    int __seed,
  ) {
    return _srand8(
      __seed,
    );
  }

  late final _srand8Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand8 = _srand8Ptr.asFunction<void Function(int)>();

  int rand_r8(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r8(
      __seed,
    );
  }

  late final _rand_r8Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r8 =
      _rand_r8Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand488() {
    return _drand488();
  }

  late final _drand488Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand488 = _drand488Ptr.asFunction<double Function()>();

  double erand488(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand488(
      __xsubi,
    );
  }

  late final _erand488Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand488 = _erand488Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand488() {
    return _lrand488();
  }

  late final _lrand488Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand488 = _lrand488Ptr.asFunction<int Function()>();

  int nrand488(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand488(
      __xsubi,
    );
  }

  late final _nrand488Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand488 =
      _nrand488Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand488() {
    return _mrand488();
  }

  late final _mrand488Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand488 = _mrand488Ptr.asFunction<int Function()>();

  int jrand488(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand488(
      __xsubi,
    );
  }

  late final _jrand488Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand488 =
      _jrand488Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand488(
    int __seedval,
  ) {
    return _srand488(
      __seedval,
    );
  }

  late final _srand488Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand488 = _srand488Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed488(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed488(
      __seed16v,
    );
  }

  late final _seed488Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed488 = _seed488Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong488(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong488(
      __param,
    );
  }

  late final _lcong488Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong488 =
      _lcong488Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r8(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r8(
      __buffer,
      __result,
    );
  }

  late final _drand48_r8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r8 = _drand48_r8Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r8(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r8(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r8 = _erand48_r8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r8(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r8(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r8 = _lrand48_r8Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r8(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r8(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r8 = _nrand48_r8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r8(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r8(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r8 = _mrand48_r8Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r8(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r8(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r8 = _jrand48_r8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r8(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r8(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r8 =
      _srand48_r8Ptr.asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r8(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r8(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r8 = _seed48_r8Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r8(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r8(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r8 = _lcong48_r8Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int arc4random8() {
    return _arc4random8();
  }

  late final _arc4random8Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random8 = _arc4random8Ptr.asFunction<int Function()>();

  void arc4random_buf8(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf8(
      __buf,
      __size,
    );
  }

  late final _arc4random_buf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('arc4random_buf');
  late final _arc4random_buf8 = _arc4random_buf8Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform8(
    int __upper_bound,
  ) {
    return _arc4random_uniform8(
      __upper_bound,
    );
  }

  late final _arc4random_uniform8Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
          'arc4random_uniform');
  late final _arc4random_uniform8 =
      _arc4random_uniform8Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc8(
    int __size,
  ) {
    return _malloc8(
      __size,
    );
  }

  late final _malloc8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'malloc');
  late final _malloc8 =
      _malloc8Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc8(
    int __nmemb,
    int __size,
  ) {
    return _calloc8(
      __nmemb,
      __size,
    );
  }

  late final _calloc8Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'calloc');
  late final _calloc8 =
      _calloc8Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc8(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc8(
      __ptr,
      __size,
    );
  }

  late final _realloc8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('realloc');
  late final _realloc8 = _realloc8Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free8(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free8(
      __ptr,
    );
  }

  late final _free8Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free8 =
      _free8Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray16(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray16(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray16 = _reallocarray16Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray17(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray17(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray17 = _reallocarray17Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca8(
    int __size,
  ) {
    return _alloca8(
      __size,
    );
  }

  late final _alloca8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'alloca');
  late final _alloca8 =
      _alloca8Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc8(
    int __size,
  ) {
    return _valloc8(
      __size,
    );
  }

  late final _valloc8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'valloc');
  late final _valloc8 =
      _valloc8Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign8(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign8(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int,
              ffi.Int)>>('posix_memalign');
  late final _posix_memalign8 = _posix_memalign8Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc8(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc8(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc8Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'aligned_alloc');
  late final _aligned_alloc8 =
      _aligned_alloc8Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort8() {
    return _abort8();
  }

  late final _abort8Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort8 = _abort8Ptr.asFunction<void Function()>();

  int atexit8(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit8(
      __func,
    );
  }

  late final _atexit8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit8 = _atexit8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit8(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit8(
      __func,
    );
  }

  late final _at_quick_exit8Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit8 = _at_quick_exit8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit8(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit8(
      __func,
      __arg,
    );
  }

  late final _on_exit8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit8 = _on_exit8Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit8(
    int __status,
  ) {
    return _exit8(
      __status,
    );
  }

  late final _exit8Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit8 = _exit8Ptr.asFunction<void Function(int)>();

  void quick_exit8(
    int __status,
  ) {
    return _quick_exit8(
      __status,
    );
  }

  late final _quick_exit8Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit8 = _quick_exit8Ptr.asFunction<void Function(int)>();

  void _Exit8(
    int __status,
  ) {
    return __Exit8(
      __status,
    );
  }

  late final __Exit8Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit8 = __Exit8Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv8(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv8(
      __name,
    );
  }

  late final _getenv8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv8 = _getenv8Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv8(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv8(
      __string,
    );
  }

  late final _putenv8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv8 =
      _putenv8Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv8(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv8(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv8 = _setenv8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv8(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv8(
      __name,
    );
  }

  late final _unsetenv8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv8 =
      _unsetenv8Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv8() {
    return _clearenv8();
  }

  late final _clearenv8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv8 = _clearenv8Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp8(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp8(
      __template,
    );
  }

  late final _mktemp8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp8 = _mktemp8Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp8(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp8(
      __template,
    );
  }

  late final _mkstemp8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp8 =
      _mkstemp8Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps8(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps8(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps8Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps8 =
      _mkstemps8Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp8(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp8(
      __template,
    );
  }

  late final _mkdtemp8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp8 = _mkdtemp8Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system8(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system8(
      __command,
    );
  }

  late final _system8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system8 =
      _system8Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath8(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath8(
      __name,
      __resolved,
    );
  }

  late final _realpath8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath8 = _realpath8Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch8(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch8(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              __compar_fn_t)>>('bsearch');
  late final _bsearch8 = _bsearch8Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort8(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort8(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              __compar_fn_t)>>('qsort');
  late final _qsort8 = _qsort8Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs8(
    int __x,
  ) {
    return _abs8(
      __x,
    );
  }

  late final _abs8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs8 = _abs8Ptr.asFunction<int Function(int)>();

  int labs8(
    int __x,
  ) {
    return _labs8(
      __x,
    );
  }

  late final _labs8Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs8 = _labs8Ptr.asFunction<int Function(int)>();

  int llabs8(
    int __x,
  ) {
    return _llabs8(
      __x,
    );
  }

  late final _llabs8Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs8 = _llabs8Ptr.asFunction<int Function(int)>();

  div_t div8(
    int __numer,
    int __denom,
  ) {
    return _div8(
      __numer,
      __denom,
    );
  }

  late final _div8Ptr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div8 = _div8Ptr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv8(
    int __numer,
    int __denom,
  ) {
    return _ldiv8(
      __numer,
      __denom,
    );
  }

  late final _ldiv8Ptr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv8 = _ldiv8Ptr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv8(
    int __numer,
    int __denom,
  ) {
    return _lldiv8(
      __numer,
      __denom,
    );
  }

  late final _lldiv8Ptr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv8 = _lldiv8Ptr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt8(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt8(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt8 = _ecvt8Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt8(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt8(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt8 = _fcvt8Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt8(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt8(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt8 = _gcvt8Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r8(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r8(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('ecvt_r');
  late final _ecvt_r8 = _ecvt_r8Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r8(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r8(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('fcvt_r');
  late final _fcvt_r8 = _fcvt_r8Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen8(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen8(
      __s,
      __n,
    );
  }

  late final _mblen8Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mblen');
  late final _mblen8 =
      _mblen8Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc8(
    ffi.Pointer<ffi.Int> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc8(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('mbtowc');
  late final _mbtowc8 = _mbtowc8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb8(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb8(
      __s,
      __wchar,
    );
  }

  late final _wctomb8Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'wctomb');
  late final _wctomb8 =
      _wctomb8Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs8(
    ffi.Pointer<ffi.Int> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs8(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mbstowcs');
  late final _mbstowcs8 = _mbstowcs8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs8(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Int> __pwcs,
    int __n,
  ) {
    return _wcstombs8(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('wcstombs');
  late final _wcstombs8 = _wcstombs8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  int rpmatch8(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch8(
      __response,
    );
  }

  late final _rpmatch8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch8 =
      _rpmatch8Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt8(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt8(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt8 = _getsubopt8Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg8(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg8(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg8 =
      _getloadavg8Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Void> memcpy8(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy8(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpy8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memcpy');
  late final _memcpy8 = _memcpy8Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove8(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove8(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmove8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memmove');
  late final _memmove8 = _memmove8Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy8(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy8(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpy8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memccpy');
  late final _memccpy8 = _memccpy8Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset8(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset8(
      __s,
      __c,
      __n,
    );
  }

  late final _memset8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memset');
  late final _memset8 = _memset8Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp8(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp8(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmp8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('memcmp');
  late final _memcmp8 = _memcmp8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq8(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq8(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeq8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__memcmpeq');
  late final ___memcmpeq8 = ___memcmpeq8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr8(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr8(
      __s,
      __c,
      __n,
    );
  }

  late final _memchr8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memchr');
  late final _memchr8 = _memchr8Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy8(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy8(
      __dest,
      __src,
    );
  }

  late final _strcpy8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy8 = _strcpy8Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy8(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy8(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpy8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncpy');
  late final _strncpy8 = _strncpy8Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat8(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat8(
      __dest,
      __src,
    );
  }

  late final _strcat8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat8 = _strcat8Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat8(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat8(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncat8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncat');
  late final _strncat8 = _strncat8Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp8(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp8(
      __s1,
      __s2,
    );
  }

  late final _strcmp8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp8 = _strcmp8Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp8(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp8(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmp8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncmp');
  late final _strncmp8 = _strncmp8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll8(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll8(
      __s1,
      __s2,
    );
  }

  late final _strcoll8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll8 = _strcoll8Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm8(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm8(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrm8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strxfrm');
  late final _strxfrm8 = _strxfrm8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l8(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l8(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_l8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l8 = _strcoll_l8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l8(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l8(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_l8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strxfrm_l');
  late final _strxfrm_l8 = _strxfrm_l8Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup8(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup8(
      __s,
    );
  }

  late final _strdup8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup8 = _strdup8Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup8(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup8(
      __string,
      __n,
    );
  }

  late final _strndup8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strndup');
  late final _strndup8 = _strndup8Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr8(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr8(
      __s,
      __c,
    );
  }

  late final _strchr8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr8 = _strchr8Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr8(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr8(
      __s,
      __c,
    );
  }

  late final _strrchr8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr8 = _strrchr8Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn8(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn8(
      __s,
      __reject,
    );
  }

  late final _strcspn8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn8 = _strcspn8Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn8(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn8(
      __s,
      __accept,
    );
  }

  late final _strspn8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn8 = _strspn8Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk8(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk8(
      __s,
      __accept,
    );
  }

  late final _strpbrk8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk8 = _strpbrk8Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr8(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr8(
      __haystack,
      __needle,
    );
  }

  late final _strstr8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr8 = _strstr8Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok8(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok8(
      __s,
      __delim,
    );
  }

  late final _strtok8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok8 = _strtok8Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r8(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r8(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_r8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r8 = ___strtok_r8Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r8(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r8(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_r8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r8 = _strtok_r8Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen8(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen8(
      __s,
    );
  }

  late final _strlen8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'strlen');
  late final _strlen8 =
      _strlen8Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen8(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen8(
      __string,
      __maxlen,
    );
  }

  late final _strnlen8Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'strnlen');
  late final _strnlen8 =
      _strnlen8Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror8(
    int __errnum,
  ) {
    return _strerror8(
      __errnum,
    );
  }

  late final _strerror8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror8 =
      _strerror8Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r8(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r8(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_r8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('strerror_r');
  late final _strerror_r8 = _strerror_r8Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l8(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l8(
      __errnum,
      __l,
    );
  }

  late final _strerror_l8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l8 = _strerror_l8Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp8(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp8(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmp8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcmp');
  late final _bcmp8 = _bcmp8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy8(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy8(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopy8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcopy');
  late final _bcopy8 = _bcopy8Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero8(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero8(
      __s,
      __n,
    );
  }

  late final _bzero8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('bzero');
  late final _bzero8 =
      _bzero8Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index8(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index8(
      __s,
      __c,
    );
  }

  late final _index8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index8 = _index8Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex8(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex8(
      __s,
      __c,
    );
  }

  late final _rindex8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex8 = _rindex8Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs8(
    int __i,
  ) {
    return _ffs8(
      __i,
    );
  }

  late final _ffs8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs8 = _ffs8Ptr.asFunction<int Function(int)>();

  int ffsl8(
    int __l,
  ) {
    return _ffsl8(
      __l,
    );
  }

  late final _ffsl8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl8 = _ffsl8Ptr.asFunction<int Function(int)>();

  int ffsll8(
    int __ll,
  ) {
    return _ffsll8(
      __ll,
    );
  }

  late final _ffsll8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll8 = _ffsll8Ptr.asFunction<int Function(int)>();

  int strcasecmp8(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp8(
      __s1,
      __s2,
    );
  }

  late final _strcasecmp8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp8 = _strcasecmp8Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp8(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp8(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmp8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncasecmp');
  late final _strncasecmp8 = _strncasecmp8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l8(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l8(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_l8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l8 = _strcasecmp_l8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l8(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l8(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_l8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l8 = _strncasecmp_l8Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero8(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero8(
      __s,
      __n,
    );
  }

  late final _explicit_bzero8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('explicit_bzero');
  late final _explicit_bzero8 = _explicit_bzero8Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep8(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep8(
      __stringp,
      __delim,
    );
  }

  late final _strsep8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep8 = _strsep8Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal8(
    int __sig,
  ) {
    return _strsignal8(
      __sig,
    );
  }

  late final _strsignal8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal8 =
      _strsignal8Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy8(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy8(
      __dest,
      __src,
    );
  }

  late final ___stpcpy8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy8 = ___stpcpy8Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy8(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy8(
      __dest,
      __src,
    );
  }

  late final _stpcpy8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy8 = _stpcpy8Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy8(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy8(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpy8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('__stpncpy');
  late final ___stpncpy8 = ___stpncpy8Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy8(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy8(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpy8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('stpncpy');
  late final _stpncpy8 = _stpncpy8Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<cstring> cstr_new1(
    ffi.Pointer<ffi.Char> init_str,
  ) {
    return _cstr_new1(
      init_str,
    );
  }

  late final _cstr_new1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cstring> Function(ffi.Pointer<ffi.Char>)>>('cstr_new');
  late final _cstr_new1 = _cstr_new1Ptr
      .asFunction<ffi.Pointer<cstring> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<cstring> cstr_new_sz1(
    int sz,
  ) {
    return _cstr_new_sz1(
      sz,
    );
  }

  late final _cstr_new_sz1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<cstring> Function(ffi.Int)>>(
          'cstr_new_sz');
  late final _cstr_new_sz1 =
      _cstr_new_sz1Ptr.asFunction<ffi.Pointer<cstring> Function(int)>();

  ffi.Pointer<cstring> cstr_new_buf1(
    ffi.Pointer<ffi.Void> buf,
    int sz,
  ) {
    return _cstr_new_buf1(
      buf,
      sz,
    );
  }

  late final _cstr_new_buf1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cstring> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('cstr_new_buf');
  late final _cstr_new_buf1 = _cstr_new_buf1Ptr
      .asFunction<ffi.Pointer<cstring> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<cstring> cstr_new_cstr1(
    ffi.Pointer<cstring> copy_str,
  ) {
    return _cstr_new_cstr1(
      copy_str,
    );
  }

  late final _cstr_new_cstr1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cstring> Function(
              ffi.Pointer<cstring>)>>('cstr_new_cstr');
  late final _cstr_new_cstr1 = _cstr_new_cstr1Ptr
      .asFunction<ffi.Pointer<cstring> Function(ffi.Pointer<cstring>)>();

  void cstr_free1(
    ffi.Pointer<cstring> s,
    int free_buf,
  ) {
    return _cstr_free1(
      s,
      free_buf,
    );
  }

  late final _cstr_free1Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_free');
  late final _cstr_free1 =
      _cstr_free1Ptr.asFunction<void Function(ffi.Pointer<cstring>, int)>();

  int cstr_equal1(
    ffi.Pointer<cstring> a,
    ffi.Pointer<cstring> b,
  ) {
    return _cstr_equal1(
      a,
      b,
    );
  }

  late final _cstr_equal1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_equal');
  late final _cstr_equal1 = _cstr_equal1Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_compare1(
    ffi.Pointer<cstring> a,
    ffi.Pointer<cstring> b,
  ) {
    return _cstr_compare1(
      a,
      b,
    );
  }

  late final _cstr_compare1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_compare');
  late final _cstr_compare1 = _cstr_compare1Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_resize1(
    ffi.Pointer<cstring> s,
    int sz,
  ) {
    return _cstr_resize1(
      s,
      sz,
    );
  }

  late final _cstr_resize1Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_resize');
  late final _cstr_resize1 =
      _cstr_resize1Ptr.asFunction<int Function(ffi.Pointer<cstring>, int)>();

  int cstr_erase1(
    ffi.Pointer<cstring> s,
    int pos,
    int len,
  ) {
    return _cstr_erase1(
      s,
      pos,
      len,
    );
  }

  late final _cstr_erase1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Int, ssize_t)>>('cstr_erase');
  late final _cstr_erase1 = _cstr_erase1Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, int, int)>();

  int cstr_append_buf1(
    ffi.Pointer<cstring> s,
    ffi.Pointer<ffi.Void> buf,
    int sz,
  ) {
    return _cstr_append_buf1(
      s,
      buf,
      sz,
    );
  }

  late final _cstr_append_buf1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('cstr_append_buf');
  late final _cstr_append_buf1 = _cstr_append_buf1Ptr.asFunction<
      int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Void>, int)>();

  int cstr_append_cstr1(
    ffi.Pointer<cstring> s,
    ffi.Pointer<cstring> append,
  ) {
    return _cstr_append_cstr1(
      s,
      append,
    );
  }

  late final _cstr_append_cstr1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_append_cstr');
  late final _cstr_append_cstr1 = _cstr_append_cstr1Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_append_c1(
    ffi.Pointer<cstring> s,
    int ch,
  ) {
    return _cstr_append_c1(
      s,
      ch,
    );
  }

  late final _cstr_append_c1Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Char)>>(
      'cstr_append_c');
  late final _cstr_append_c1 =
      _cstr_append_c1Ptr.asFunction<int Function(ffi.Pointer<cstring>, int)>();

  int cstr_alloc_minsize1(
    ffi.Pointer<cstring> s,
    int sz,
  ) {
    return _cstr_alloc_minsize1(
      s,
      sz,
    );
  }

  late final _cstr_alloc_minsize1Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_alloc_minsize');
  late final _cstr_alloc_minsize1 = _cstr_alloc_minsize1Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, int)>();

  int remove9(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove9(
      __filename,
    );
  }

  late final _remove9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove9 =
      _remove9Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename9(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename9(
      __old,
      __new,
    );
  }

  late final _rename9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename9 = _rename9Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat9(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat9(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameat9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat9 = _renameat9Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose9(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose9(
      __stream,
    );
  }

  late final _fclose9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose9 =
      _fclose9Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile9() {
    return _tmpfile9();
  }

  late final _tmpfile9Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile9 =
      _tmpfile9Ptr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam9(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam9(
      arg0,
    );
  }

  late final _tmpnam9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam9 = _tmpnam9Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r9(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r9(
      __s,
    );
  }

  late final _tmpnam_r9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r9 = _tmpnam_r9Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam9(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam9(
      __dir,
      __pfx,
    );
  }

  late final _tempnam9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam9 = _tempnam9Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush9(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush9(
      __stream,
    );
  }

  late final _fflush9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush9 =
      _fflush9Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked9(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked9(
      __stream,
    );
  }

  late final _fflush_unlocked9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked9 =
      _fflush_unlocked9Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen9(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen9(
      __filename,
      __modes,
    );
  }

  late final _fopen9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen9 = _fopen9Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen9(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen9(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopen9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen9 = _freopen9Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen9(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen9(
      __fd,
      __modes,
    );
  }

  late final _fdopen9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen9 = _fdopen9Ptr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen9(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen9(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopen9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen9 = _fmemopen9Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream9(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Int> __sizeloc,
  ) {
    return _open_memstream9(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstream9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('open_memstream');
  late final _open_memstream9 = _open_memstream9Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void setbuf9(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf9(
      __stream,
      __buf,
    );
  }

  late final _setbuf9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf9 = _setbuf9Ptr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf9(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf9(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbuf9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('setvbuf');
  late final _setvbuf9 = _setvbuf9Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer9(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer9(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbuffer9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer9 = _setbuffer9Ptr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf9(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf9(
      __stream,
    );
  }

  late final _setlinebuf9Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf9 =
      _setlinebuf9Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf9(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf9(
      __stream,
      __format,
    );
  }

  late final _fprintf9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf9 = _fprintf9Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf9(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf9(
      __format,
    );
  }

  late final _printf9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf9 =
      _printf9Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf9(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf9(
      __s,
      __format,
    );
  }

  late final _sprintf9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf9 = _sprintf9Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf9(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfprintf9(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintf9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfprintf');
  late final _vfprintf9 = _vfprintf9Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vprintf9(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vprintf9(
      __format,
      __arg,
    );
  }

  late final _vprintf9Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vprintf');
  late final _vprintf9 =
      _vprintf9Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsprintf9(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsprintf9(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintf9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsprintf');
  late final _vsprintf9 = _vsprintf9Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int snprintf9(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf9(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintf9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf9 = _snprintf9Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf9(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsnprintf9(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintf9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('vsnprintf');
  late final _vsnprintf9 = _vsnprintf9Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int vdprintf9(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    int __arg,
  ) {
    return _vdprintf9(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintf9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('vdprintf');
  late final _vdprintf9 =
      _vdprintf9Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int dprintf9(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf9(
      __fd,
      __fmt,
    );
  }

  late final _dprintf9Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf9 =
      _dprintf9Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf18(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf18(
      __stream,
      __format,
    );
  }

  late final _fscanf18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf18 = _fscanf18Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf18(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf18(
      __format,
    );
  }

  late final _scanf18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf18 =
      _scanf18Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf18(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf18(
      __s,
      __format,
    );
  }

  late final _sscanf18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf18 = _sscanf18Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fscanf19(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf19(
      __stream,
      __format,
    );
  }

  late final _fscanf19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf19 = _fscanf19Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf19(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf19(
      __format,
    );
  }

  late final _scanf19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf19 =
      _scanf19Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf19(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf19(
      __s,
      __format,
    );
  }

  late final _sscanf19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf19 = _sscanf19Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf18(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf18(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf18 = _vfscanf18Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf18(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf18(
      __format,
      __arg,
    );
  }

  late final _vscanf18Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf18 =
      _vscanf18Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf18(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf18(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf18 = _vsscanf18Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int vfscanf19(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf19(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf19 = _vfscanf19Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf19(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf19(
      __format,
      __arg,
    );
  }

  late final _vscanf19Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf19 =
      _vscanf19Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf19(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf19(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf19 = _vsscanf19Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fgetc9(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc9(
      __stream,
    );
  }

  late final _fgetc9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc9 = _fgetc9Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc9(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc9(
      __stream,
    );
  }

  late final _getc9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc9 = _getc9Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar9() {
    return _getchar9();
  }

  late final _getchar9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar9 = _getchar9Ptr.asFunction<int Function()>();

  int getc_unlocked9(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked9(
      __stream,
    );
  }

  late final _getc_unlocked9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked9 =
      _getc_unlocked9Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked9() {
    return _getchar_unlocked9();
  }

  late final _getchar_unlocked9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked9 =
      _getchar_unlocked9Ptr.asFunction<int Function()>();

  int fgetc_unlocked9(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked9(
      __stream,
    );
  }

  late final _fgetc_unlocked9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked9 =
      _fgetc_unlocked9Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc9(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc9(
      __c,
      __stream,
    );
  }

  late final _fputc9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc9 =
      _fputc9Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc9(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc9(
      __c,
      __stream,
    );
  }

  late final _putc9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc9 =
      _putc9Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar9(
    int __c,
  ) {
    return _putchar9(
      __c,
    );
  }

  late final _putchar9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar9 = _putchar9Ptr.asFunction<int Function(int)>();

  int fputc_unlocked9(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked9(
      __c,
      __stream,
    );
  }

  late final _fputc_unlocked9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked9 =
      _fputc_unlocked9Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked9(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked9(
      __c,
      __stream,
    );
  }

  late final _putc_unlocked9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked9 =
      _putc_unlocked9Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked9(
    int __c,
  ) {
    return _putchar_unlocked9(
      __c,
    );
  }

  late final _putchar_unlocked9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked9 =
      _putchar_unlocked9Ptr.asFunction<int Function(int)>();

  int getw9(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw9(
      __stream,
    );
  }

  late final _getw9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw9 = _getw9Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw9(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw9(
      __w,
      __stream,
    );
  }

  late final _putw9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw9 =
      _putw9Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets9(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets9(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgets9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets9 = _fgets9Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim9(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim9(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelim9Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim9 = ___getdelim9Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getdelim9(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim9(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelim9Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim9 = _getdelim9Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getline9(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline9(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getline9Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<FILE>)>>('getline');
  late final _getline9 = _getline9Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<FILE>)>();

  int fputs9(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs9(
      __s,
      __stream,
    );
  }

  late final _fputs9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs9 = _fputs9Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts9(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts9(
      __s,
    );
  }

  late final _puts9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts9 =
      _puts9Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc9(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc9(
      __c,
      __stream,
    );
  }

  late final _ungetc9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc9 =
      _ungetc9Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread9(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread9(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread9 = _fread9Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite9(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite9(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwrite9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite9 = _fwrite9Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked9(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked9(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlocked9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked9 = _fread_unlocked9Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked9(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked9(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlocked9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked9 = _fwrite_unlocked9Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek9(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek9(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseek9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek9 =
      _fseek9Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell9(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell9(
      __stream,
    );
  }

  late final _ftell9Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell9 = _ftell9Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind9(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind9(
      __stream,
    );
  }

  late final _rewind9Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind9 =
      _rewind9Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko9(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko9(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseeko9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko9 =
      _fseeko9Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello9(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello9(
      __stream,
    );
  }

  late final _ftello9Ptr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello9 =
      _ftello9Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos9(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos9(
      __stream,
      __pos,
    );
  }

  late final _fgetpos9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos9 = _fgetpos9Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos9(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos9(
      __stream,
      __pos,
    );
  }

  late final _fsetpos9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos9 = _fsetpos9Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr9(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr9(
      __stream,
    );
  }

  late final _clearerr9Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr9 =
      _clearerr9Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof9(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof9(
      __stream,
    );
  }

  late final _feof9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof9 = _feof9Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror9(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror9(
      __stream,
    );
  }

  late final _ferror9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror9 =
      _ferror9Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked9(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked9(
      __stream,
    );
  }

  late final _clearerr_unlocked9Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked9 =
      _clearerr_unlocked9Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked9(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked9(
      __stream,
    );
  }

  late final _feof_unlocked9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked9 =
      _feof_unlocked9Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked9(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked9(
      __stream,
    );
  }

  late final _ferror_unlocked9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked9 =
      _ferror_unlocked9Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror9(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror9(
      __s,
    );
  }

  late final _perror9Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror9 =
      _perror9Ptr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno9(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno9(
      __stream,
    );
  }

  late final _fileno9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno9 =
      _fileno9Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked9(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked9(
      __stream,
    );
  }

  late final _fileno_unlocked9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked9 =
      _fileno_unlocked9Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose9(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose9(
      __stream,
    );
  }

  late final _pclose9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose9 =
      _pclose9Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen9(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen9(
      __command,
      __modes,
    );
  }

  late final _popen9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen9 = _popen9Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid9(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid9(
      __s,
    );
  }

  late final _ctermid9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid9 = _ctermid9Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile9(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile9(
      __stream,
    );
  }

  late final _flockfile9Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile9 =
      _flockfile9Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile9(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile9(
      __stream,
    );
  }

  late final _ftrylockfile9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile9 =
      _ftrylockfile9Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile9(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile9(
      __stream,
    );
  }

  late final _funlockfile9Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile9 =
      _funlockfile9Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow9(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow9(
      arg0,
    );
  }

  late final ___uflow9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow9 =
      ___uflow9Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow9(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow9(
      arg0,
      arg1,
    );
  }

  late final ___overflow9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow9 =
      ___overflow9Ptr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __ctype_get_mb_cur_max9() {
    return ___ctype_get_mb_cur_max9();
  }

  late final ___ctype_get_mb_cur_max9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max9 =
      ___ctype_get_mb_cur_max9Ptr.asFunction<int Function()>();

  double atof9(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof9(
      __nptr,
    );
  }

  late final _atof9Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof9 =
      _atof9Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi9(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi9(
      __nptr,
    );
  }

  late final _atoi9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi9 =
      _atoi9Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol9(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol9(
      __nptr,
    );
  }

  late final _atol9Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol9 =
      _atol9Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll9(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll9(
      __nptr,
    );
  }

  late final _atoll9Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll9 =
      _atoll9Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod9(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod9(
      __nptr,
      __endptr,
    );
  }

  late final _strtod9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod9 = _strtod9Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof9(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof9(
      __nptr,
      __endptr,
    );
  }

  late final _strtof9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof9 = _strtof9Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol9(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol9(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol9 = _strtol9Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul9(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul9(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul9 = _strtoul9Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq9(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq9(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq9 = _strtoq9Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq9(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq9(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq9 = _strtouq9Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll9(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll9(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll9 = _strtoll9Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull9(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull9(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull9 = _strtoull9Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a9(
    int __n,
  ) {
    return _l64a9(
      __n,
    );
  }

  late final _l64a9Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a9 =
      _l64a9Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l9(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l9(
      __s,
    );
  }

  late final _a64l9Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l9 =
      _a64l9Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select9(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select9(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select9 = _select9Ptr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect9(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect9(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect9 = _pselect9Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random9() {
    return _random9();
  }

  late final _random9Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random9 = _random9Ptr.asFunction<int Function()>();

  void srandom9(
    int __seed,
  ) {
    return _srandom9(
      __seed,
    );
  }

  late final _srandom9Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom9 = _srandom9Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate9(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate9(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int)>>('initstate');
  late final _initstate9 = _initstate9Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate9(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate9(
      __statebuf,
    );
  }

  late final _setstate9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate9 = _setstate9Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r9(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r9(
      __buf,
      __result,
    );
  }

  late final _random_r9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r9 = _random_r9Ptr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r9(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r9(
      __seed,
      __buf,
    );
  }

  late final _srandom_r9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r9 =
      _srandom_r9Ptr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r9(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r9(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r9 = _initstate_r9Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r9(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r9(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r9 = _setstate_r9Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand9() {
    return _rand9();
  }

  late final _rand9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand9 = _rand9Ptr.asFunction<int Function()>();

  void srand9(
    int __seed,
  ) {
    return _srand9(
      __seed,
    );
  }

  late final _srand9Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand9 = _srand9Ptr.asFunction<void Function(int)>();

  int rand_r9(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r9(
      __seed,
    );
  }

  late final _rand_r9Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r9 =
      _rand_r9Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand489() {
    return _drand489();
  }

  late final _drand489Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand489 = _drand489Ptr.asFunction<double Function()>();

  double erand489(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand489(
      __xsubi,
    );
  }

  late final _erand489Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand489 = _erand489Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand489() {
    return _lrand489();
  }

  late final _lrand489Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand489 = _lrand489Ptr.asFunction<int Function()>();

  int nrand489(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand489(
      __xsubi,
    );
  }

  late final _nrand489Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand489 =
      _nrand489Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand489() {
    return _mrand489();
  }

  late final _mrand489Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand489 = _mrand489Ptr.asFunction<int Function()>();

  int jrand489(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand489(
      __xsubi,
    );
  }

  late final _jrand489Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand489 =
      _jrand489Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand489(
    int __seedval,
  ) {
    return _srand489(
      __seedval,
    );
  }

  late final _srand489Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand489 = _srand489Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed489(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed489(
      __seed16v,
    );
  }

  late final _seed489Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed489 = _seed489Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong489(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong489(
      __param,
    );
  }

  late final _lcong489Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong489 =
      _lcong489Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r9(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r9(
      __buffer,
      __result,
    );
  }

  late final _drand48_r9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r9 = _drand48_r9Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r9(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r9(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r9 = _erand48_r9Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r9(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r9(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r9 = _lrand48_r9Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r9(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r9(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r9 = _nrand48_r9Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r9(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r9(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r9 = _mrand48_r9Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r9(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r9(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r9 = _jrand48_r9Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r9(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r9(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r9 =
      _srand48_r9Ptr.asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r9(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r9(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r9 = _seed48_r9Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r9(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r9(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r9 = _lcong48_r9Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int arc4random9() {
    return _arc4random9();
  }

  late final _arc4random9Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random9 = _arc4random9Ptr.asFunction<int Function()>();

  void arc4random_buf9(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf9(
      __buf,
      __size,
    );
  }

  late final _arc4random_buf9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('arc4random_buf');
  late final _arc4random_buf9 = _arc4random_buf9Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform9(
    int __upper_bound,
  ) {
    return _arc4random_uniform9(
      __upper_bound,
    );
  }

  late final _arc4random_uniform9Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
          'arc4random_uniform');
  late final _arc4random_uniform9 =
      _arc4random_uniform9Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc9(
    int __size,
  ) {
    return _malloc9(
      __size,
    );
  }

  late final _malloc9Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'malloc');
  late final _malloc9 =
      _malloc9Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc9(
    int __nmemb,
    int __size,
  ) {
    return _calloc9(
      __nmemb,
      __size,
    );
  }

  late final _calloc9Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'calloc');
  late final _calloc9 =
      _calloc9Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc9(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc9(
      __ptr,
      __size,
    );
  }

  late final _realloc9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('realloc');
  late final _realloc9 = _realloc9Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free9(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free9(
      __ptr,
    );
  }

  late final _free9Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free9 =
      _free9Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray18(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray18(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray18 = _reallocarray18Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray19(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray19(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray19 = _reallocarray19Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca9(
    int __size,
  ) {
    return _alloca9(
      __size,
    );
  }

  late final _alloca9Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'alloca');
  late final _alloca9 =
      _alloca9Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc9(
    int __size,
  ) {
    return _valloc9(
      __size,
    );
  }

  late final _valloc9Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'valloc');
  late final _valloc9 =
      _valloc9Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign9(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign9(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int,
              ffi.Int)>>('posix_memalign');
  late final _posix_memalign9 = _posix_memalign9Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc9(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc9(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc9Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'aligned_alloc');
  late final _aligned_alloc9 =
      _aligned_alloc9Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort9() {
    return _abort9();
  }

  late final _abort9Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort9 = _abort9Ptr.asFunction<void Function()>();

  int atexit9(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit9(
      __func,
    );
  }

  late final _atexit9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit9 = _atexit9Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit9(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit9(
      __func,
    );
  }

  late final _at_quick_exit9Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit9 = _at_quick_exit9Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit9(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit9(
      __func,
      __arg,
    );
  }

  late final _on_exit9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit9 = _on_exit9Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit9(
    int __status,
  ) {
    return _exit9(
      __status,
    );
  }

  late final _exit9Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit9 = _exit9Ptr.asFunction<void Function(int)>();

  void quick_exit9(
    int __status,
  ) {
    return _quick_exit9(
      __status,
    );
  }

  late final _quick_exit9Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit9 = _quick_exit9Ptr.asFunction<void Function(int)>();

  void _Exit9(
    int __status,
  ) {
    return __Exit9(
      __status,
    );
  }

  late final __Exit9Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit9 = __Exit9Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv9(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv9(
      __name,
    );
  }

  late final _getenv9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv9 = _getenv9Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv9(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv9(
      __string,
    );
  }

  late final _putenv9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv9 =
      _putenv9Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv9(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv9(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv9 = _setenv9Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv9(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv9(
      __name,
    );
  }

  late final _unsetenv9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv9 =
      _unsetenv9Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv9() {
    return _clearenv9();
  }

  late final _clearenv9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv9 = _clearenv9Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp9(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp9(
      __template,
    );
  }

  late final _mktemp9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp9 = _mktemp9Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp9(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp9(
      __template,
    );
  }

  late final _mkstemp9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp9 =
      _mkstemp9Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps9(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps9(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps9Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps9 =
      _mkstemps9Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp9(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp9(
      __template,
    );
  }

  late final _mkdtemp9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp9 = _mkdtemp9Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system9(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system9(
      __command,
    );
  }

  late final _system9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system9 =
      _system9Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath9(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath9(
      __name,
      __resolved,
    );
  }

  late final _realpath9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath9 = _realpath9Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch9(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch9(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              __compar_fn_t)>>('bsearch');
  late final _bsearch9 = _bsearch9Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort9(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort9(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              __compar_fn_t)>>('qsort');
  late final _qsort9 = _qsort9Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs9(
    int __x,
  ) {
    return _abs9(
      __x,
    );
  }

  late final _abs9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs9 = _abs9Ptr.asFunction<int Function(int)>();

  int labs9(
    int __x,
  ) {
    return _labs9(
      __x,
    );
  }

  late final _labs9Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs9 = _labs9Ptr.asFunction<int Function(int)>();

  int llabs9(
    int __x,
  ) {
    return _llabs9(
      __x,
    );
  }

  late final _llabs9Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs9 = _llabs9Ptr.asFunction<int Function(int)>();

  div_t div9(
    int __numer,
    int __denom,
  ) {
    return _div9(
      __numer,
      __denom,
    );
  }

  late final _div9Ptr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div9 = _div9Ptr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv9(
    int __numer,
    int __denom,
  ) {
    return _ldiv9(
      __numer,
      __denom,
    );
  }

  late final _ldiv9Ptr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv9 = _ldiv9Ptr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv9(
    int __numer,
    int __denom,
  ) {
    return _lldiv9(
      __numer,
      __denom,
    );
  }

  late final _lldiv9Ptr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv9 = _lldiv9Ptr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt9(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt9(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt9 = _ecvt9Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt9(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt9(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt9 = _fcvt9Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt9(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt9(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt9 = _gcvt9Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r9(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r9(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('ecvt_r');
  late final _ecvt_r9 = _ecvt_r9Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r9(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r9(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('fcvt_r');
  late final _fcvt_r9 = _fcvt_r9Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen9(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen9(
      __s,
      __n,
    );
  }

  late final _mblen9Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mblen');
  late final _mblen9 =
      _mblen9Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc9(
    ffi.Pointer<ffi.Int> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc9(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('mbtowc');
  late final _mbtowc9 = _mbtowc9Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb9(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb9(
      __s,
      __wchar,
    );
  }

  late final _wctomb9Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'wctomb');
  late final _wctomb9 =
      _wctomb9Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs9(
    ffi.Pointer<ffi.Int> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs9(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mbstowcs');
  late final _mbstowcs9 = _mbstowcs9Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs9(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Int> __pwcs,
    int __n,
  ) {
    return _wcstombs9(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('wcstombs');
  late final _wcstombs9 = _wcstombs9Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  int rpmatch9(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch9(
      __response,
    );
  }

  late final _rpmatch9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch9 =
      _rpmatch9Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt9(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt9(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt9 = _getsubopt9Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg9(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg9(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg9 =
      _getloadavg9Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Void> memcpy9(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy9(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpy9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memcpy');
  late final _memcpy9 = _memcpy9Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove9(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove9(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmove9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memmove');
  late final _memmove9 = _memmove9Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy9(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy9(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpy9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memccpy');
  late final _memccpy9 = _memccpy9Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset9(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset9(
      __s,
      __c,
      __n,
    );
  }

  late final _memset9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memset');
  late final _memset9 = _memset9Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp9(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp9(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmp9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('memcmp');
  late final _memcmp9 = _memcmp9Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq9(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq9(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeq9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__memcmpeq');
  late final ___memcmpeq9 = ___memcmpeq9Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr9(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr9(
      __s,
      __c,
      __n,
    );
  }

  late final _memchr9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memchr');
  late final _memchr9 = _memchr9Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy9(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy9(
      __dest,
      __src,
    );
  }

  late final _strcpy9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy9 = _strcpy9Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy9(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy9(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpy9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncpy');
  late final _strncpy9 = _strncpy9Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat9(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat9(
      __dest,
      __src,
    );
  }

  late final _strcat9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat9 = _strcat9Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat9(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat9(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncat9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncat');
  late final _strncat9 = _strncat9Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp9(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp9(
      __s1,
      __s2,
    );
  }

  late final _strcmp9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp9 = _strcmp9Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp9(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp9(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmp9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncmp');
  late final _strncmp9 = _strncmp9Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll9(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll9(
      __s1,
      __s2,
    );
  }

  late final _strcoll9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll9 = _strcoll9Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm9(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm9(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrm9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strxfrm');
  late final _strxfrm9 = _strxfrm9Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l9(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l9(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_l9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l9 = _strcoll_l9Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l9(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l9(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_l9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strxfrm_l');
  late final _strxfrm_l9 = _strxfrm_l9Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup9(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup9(
      __s,
    );
  }

  late final _strdup9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup9 = _strdup9Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup9(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup9(
      __string,
      __n,
    );
  }

  late final _strndup9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strndup');
  late final _strndup9 = _strndup9Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr9(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr9(
      __s,
      __c,
    );
  }

  late final _strchr9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr9 = _strchr9Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr9(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr9(
      __s,
      __c,
    );
  }

  late final _strrchr9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr9 = _strrchr9Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn9(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn9(
      __s,
      __reject,
    );
  }

  late final _strcspn9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn9 = _strcspn9Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn9(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn9(
      __s,
      __accept,
    );
  }

  late final _strspn9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn9 = _strspn9Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk9(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk9(
      __s,
      __accept,
    );
  }

  late final _strpbrk9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk9 = _strpbrk9Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr9(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr9(
      __haystack,
      __needle,
    );
  }

  late final _strstr9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr9 = _strstr9Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok9(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok9(
      __s,
      __delim,
    );
  }

  late final _strtok9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok9 = _strtok9Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r9(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r9(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_r9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r9 = ___strtok_r9Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r9(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r9(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_r9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r9 = _strtok_r9Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen9(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen9(
      __s,
    );
  }

  late final _strlen9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'strlen');
  late final _strlen9 =
      _strlen9Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen9(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen9(
      __string,
      __maxlen,
    );
  }

  late final _strnlen9Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'strnlen');
  late final _strnlen9 =
      _strnlen9Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror9(
    int __errnum,
  ) {
    return _strerror9(
      __errnum,
    );
  }

  late final _strerror9Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror9 =
      _strerror9Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r9(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r9(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_r9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('strerror_r');
  late final _strerror_r9 = _strerror_r9Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l9(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l9(
      __errnum,
      __l,
    );
  }

  late final _strerror_l9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l9 = _strerror_l9Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp9(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp9(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmp9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcmp');
  late final _bcmp9 = _bcmp9Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy9(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy9(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopy9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcopy');
  late final _bcopy9 = _bcopy9Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero9(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero9(
      __s,
      __n,
    );
  }

  late final _bzero9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('bzero');
  late final _bzero9 =
      _bzero9Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index9(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index9(
      __s,
      __c,
    );
  }

  late final _index9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index9 = _index9Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex9(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex9(
      __s,
      __c,
    );
  }

  late final _rindex9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex9 = _rindex9Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs9(
    int __i,
  ) {
    return _ffs9(
      __i,
    );
  }

  late final _ffs9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs9 = _ffs9Ptr.asFunction<int Function(int)>();

  int ffsl9(
    int __l,
  ) {
    return _ffsl9(
      __l,
    );
  }

  late final _ffsl9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl9 = _ffsl9Ptr.asFunction<int Function(int)>();

  int ffsll9(
    int __ll,
  ) {
    return _ffsll9(
      __ll,
    );
  }

  late final _ffsll9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll9 = _ffsll9Ptr.asFunction<int Function(int)>();

  int strcasecmp9(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp9(
      __s1,
      __s2,
    );
  }

  late final _strcasecmp9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp9 = _strcasecmp9Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp9(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp9(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmp9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncasecmp');
  late final _strncasecmp9 = _strncasecmp9Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l9(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l9(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_l9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l9 = _strcasecmp_l9Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l9(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l9(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_l9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l9 = _strncasecmp_l9Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero9(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero9(
      __s,
      __n,
    );
  }

  late final _explicit_bzero9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('explicit_bzero');
  late final _explicit_bzero9 = _explicit_bzero9Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep9(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep9(
      __stringp,
      __delim,
    );
  }

  late final _strsep9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep9 = _strsep9Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal9(
    int __sig,
  ) {
    return _strsignal9(
      __sig,
    );
  }

  late final _strsignal9Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal9 =
      _strsignal9Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy9(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy9(
      __dest,
      __src,
    );
  }

  late final ___stpcpy9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy9 = ___stpcpy9Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy9(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy9(
      __dest,
      __src,
    );
  }

  late final _stpcpy9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy9 = _stpcpy9Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy9(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy9(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpy9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('__stpncpy');
  late final ___stpncpy9 = ___stpncpy9Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy9(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy9(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpy9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('stpncpy');
  late final _stpncpy9 = _stpncpy9Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void AES128_init(
    ffi.Pointer<AES128_ctx> ctx,
    ffi.Pointer<ffi.UnsignedChar> key16,
  ) {
    return _AES128_init(
      ctx,
      key16,
    );
  }

  late final _AES128_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<AES128_ctx>,
              ffi.Pointer<ffi.UnsignedChar>)>>('AES128_init');
  late final _AES128_init = _AES128_initPtr.asFunction<
      void Function(ffi.Pointer<AES128_ctx>, ffi.Pointer<ffi.UnsignedChar>)>();

  void AES128_encrypt(
    ffi.Pointer<AES128_ctx> ctx,
    int blocks,
    ffi.Pointer<ffi.UnsignedChar> cipher16,
    ffi.Pointer<ffi.UnsignedChar> plain16,
  ) {
    return _AES128_encrypt(
      ctx,
      blocks,
      cipher16,
      plain16,
    );
  }

  late final _AES128_encryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<AES128_ctx>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>>('AES128_encrypt');
  late final _AES128_encrypt = _AES128_encryptPtr.asFunction<
      void Function(ffi.Pointer<AES128_ctx>, int, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>)>();

  void AES128_decrypt(
    ffi.Pointer<AES128_ctx> ctx,
    int blocks,
    ffi.Pointer<ffi.UnsignedChar> plain16,
    ffi.Pointer<ffi.UnsignedChar> cipher16,
  ) {
    return _AES128_decrypt(
      ctx,
      blocks,
      plain16,
      cipher16,
    );
  }

  late final _AES128_decryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<AES128_ctx>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>>('AES128_decrypt');
  late final _AES128_decrypt = _AES128_decryptPtr.asFunction<
      void Function(ffi.Pointer<AES128_ctx>, int, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>)>();

  void AES192_init(
    ffi.Pointer<AES192_ctx> ctx,
    ffi.Pointer<ffi.UnsignedChar> key24,
  ) {
    return _AES192_init(
      ctx,
      key24,
    );
  }

  late final _AES192_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<AES192_ctx>,
              ffi.Pointer<ffi.UnsignedChar>)>>('AES192_init');
  late final _AES192_init = _AES192_initPtr.asFunction<
      void Function(ffi.Pointer<AES192_ctx>, ffi.Pointer<ffi.UnsignedChar>)>();

  void AES192_encrypt(
    ffi.Pointer<AES192_ctx> ctx,
    int blocks,
    ffi.Pointer<ffi.UnsignedChar> cipher16,
    ffi.Pointer<ffi.UnsignedChar> plain16,
  ) {
    return _AES192_encrypt(
      ctx,
      blocks,
      cipher16,
      plain16,
    );
  }

  late final _AES192_encryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<AES192_ctx>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>>('AES192_encrypt');
  late final _AES192_encrypt = _AES192_encryptPtr.asFunction<
      void Function(ffi.Pointer<AES192_ctx>, int, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>)>();

  void AES192_decrypt(
    ffi.Pointer<AES192_ctx> ctx,
    int blocks,
    ffi.Pointer<ffi.UnsignedChar> plain16,
    ffi.Pointer<ffi.UnsignedChar> cipher16,
  ) {
    return _AES192_decrypt(
      ctx,
      blocks,
      plain16,
      cipher16,
    );
  }

  late final _AES192_decryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<AES192_ctx>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>>('AES192_decrypt');
  late final _AES192_decrypt = _AES192_decryptPtr.asFunction<
      void Function(ffi.Pointer<AES192_ctx>, int, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>)>();

  void AES256_init(
    ffi.Pointer<AES256_ctx> ctx,
    ffi.Pointer<ffi.UnsignedChar> key32,
  ) {
    return _AES256_init(
      ctx,
      key32,
    );
  }

  late final _AES256_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<AES256_ctx>,
              ffi.Pointer<ffi.UnsignedChar>)>>('AES256_init');
  late final _AES256_init = _AES256_initPtr.asFunction<
      void Function(ffi.Pointer<AES256_ctx>, ffi.Pointer<ffi.UnsignedChar>)>();

  void AES256_encrypt(
    ffi.Pointer<AES256_ctx> ctx,
    int blocks,
    ffi.Pointer<ffi.UnsignedChar> cipher16,
    ffi.Pointer<ffi.UnsignedChar> plain16,
  ) {
    return _AES256_encrypt(
      ctx,
      blocks,
      cipher16,
      plain16,
    );
  }

  late final _AES256_encryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<AES256_ctx>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>>('AES256_encrypt');
  late final _AES256_encrypt = _AES256_encryptPtr.asFunction<
      void Function(ffi.Pointer<AES256_ctx>, int, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>)>();

  void AES256_decrypt(
    ffi.Pointer<AES256_ctx> ctx,
    int blocks,
    ffi.Pointer<ffi.UnsignedChar> plain16,
    ffi.Pointer<ffi.UnsignedChar> cipher16,
  ) {
    return _AES256_decrypt(
      ctx,
      blocks,
      plain16,
      cipher16,
    );
  }

  late final _AES256_decryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<AES256_ctx>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>>('AES256_decrypt');
  late final _AES256_decrypt = _AES256_decryptPtr.asFunction<
      void Function(ffi.Pointer<AES256_ctx>, int, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>)>();

  int remove10(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove10(
      __filename,
    );
  }

  late final _remove10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove10 =
      _remove10Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename10(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename10(
      __old,
      __new,
    );
  }

  late final _rename10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename10 = _rename10Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat10(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat10(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameat10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat10 = _renameat10Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose10(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose10(
      __stream,
    );
  }

  late final _fclose10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose10 =
      _fclose10Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile10() {
    return _tmpfile10();
  }

  late final _tmpfile10Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile10 =
      _tmpfile10Ptr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam10(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam10(
      arg0,
    );
  }

  late final _tmpnam10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam10 = _tmpnam10Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r10(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r10(
      __s,
    );
  }

  late final _tmpnam_r10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r10 = _tmpnam_r10Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam10(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam10(
      __dir,
      __pfx,
    );
  }

  late final _tempnam10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam10 = _tempnam10Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush10(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush10(
      __stream,
    );
  }

  late final _fflush10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush10 =
      _fflush10Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked10(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked10(
      __stream,
    );
  }

  late final _fflush_unlocked10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked10 =
      _fflush_unlocked10Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen10(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen10(
      __filename,
      __modes,
    );
  }

  late final _fopen10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen10 = _fopen10Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen10(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen10(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopen10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen10 = _freopen10Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen10(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen10(
      __fd,
      __modes,
    );
  }

  late final _fdopen10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen10 = _fdopen10Ptr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen10(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen10(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopen10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen10 = _fmemopen10Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream10(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Int> __sizeloc,
  ) {
    return _open_memstream10(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstream10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('open_memstream');
  late final _open_memstream10 = _open_memstream10Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void setbuf10(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf10(
      __stream,
      __buf,
    );
  }

  late final _setbuf10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf10 = _setbuf10Ptr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf10(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf10(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbuf10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('setvbuf');
  late final _setvbuf10 = _setvbuf10Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer10(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer10(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbuffer10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer10 = _setbuffer10Ptr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf10(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf10(
      __stream,
    );
  }

  late final _setlinebuf10Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf10 =
      _setlinebuf10Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf10(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf10(
      __stream,
      __format,
    );
  }

  late final _fprintf10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf10 = _fprintf10Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf10(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf10(
      __format,
    );
  }

  late final _printf10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf10 =
      _printf10Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf10(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf10(
      __s,
      __format,
    );
  }

  late final _sprintf10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf10 = _sprintf10Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf10(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfprintf10(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintf10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfprintf');
  late final _vfprintf10 = _vfprintf10Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vprintf10(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vprintf10(
      __format,
      __arg,
    );
  }

  late final _vprintf10Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vprintf');
  late final _vprintf10 =
      _vprintf10Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsprintf10(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsprintf10(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintf10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsprintf');
  late final _vsprintf10 = _vsprintf10Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int snprintf10(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf10(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintf10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf10 = _snprintf10Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf10(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsnprintf10(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintf10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('vsnprintf');
  late final _vsnprintf10 = _vsnprintf10Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int vdprintf10(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    int __arg,
  ) {
    return _vdprintf10(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintf10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('vdprintf');
  late final _vdprintf10 = _vdprintf10Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int dprintf10(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf10(
      __fd,
      __fmt,
    );
  }

  late final _dprintf10Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf10 =
      _dprintf10Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf20(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf20(
      __stream,
      __format,
    );
  }

  late final _fscanf20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf20 = _fscanf20Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf20(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf20(
      __format,
    );
  }

  late final _scanf20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf20 =
      _scanf20Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf20(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf20(
      __s,
      __format,
    );
  }

  late final _sscanf20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf20 = _sscanf20Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fscanf21(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf21(
      __stream,
      __format,
    );
  }

  late final _fscanf21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf21 = _fscanf21Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf21(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf21(
      __format,
    );
  }

  late final _scanf21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf21 =
      _scanf21Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf21(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf21(
      __s,
      __format,
    );
  }

  late final _sscanf21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf21 = _sscanf21Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf20(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf20(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf20 = _vfscanf20Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf20(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf20(
      __format,
      __arg,
    );
  }

  late final _vscanf20Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf20 =
      _vscanf20Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf20(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf20(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf20 = _vsscanf20Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int vfscanf21(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf21(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf21 = _vfscanf21Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf21(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf21(
      __format,
      __arg,
    );
  }

  late final _vscanf21Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf21 =
      _vscanf21Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf21(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf21(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf21 = _vsscanf21Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fgetc10(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc10(
      __stream,
    );
  }

  late final _fgetc10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc10 =
      _fgetc10Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc10(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc10(
      __stream,
    );
  }

  late final _getc10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc10 = _getc10Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar10() {
    return _getchar10();
  }

  late final _getchar10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar10 = _getchar10Ptr.asFunction<int Function()>();

  int getc_unlocked10(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked10(
      __stream,
    );
  }

  late final _getc_unlocked10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked10 =
      _getc_unlocked10Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked10() {
    return _getchar_unlocked10();
  }

  late final _getchar_unlocked10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked10 =
      _getchar_unlocked10Ptr.asFunction<int Function()>();

  int fgetc_unlocked10(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked10(
      __stream,
    );
  }

  late final _fgetc_unlocked10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked10 =
      _fgetc_unlocked10Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc10(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc10(
      __c,
      __stream,
    );
  }

  late final _fputc10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc10 =
      _fputc10Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc10(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc10(
      __c,
      __stream,
    );
  }

  late final _putc10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc10 =
      _putc10Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar10(
    int __c,
  ) {
    return _putchar10(
      __c,
    );
  }

  late final _putchar10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar10 = _putchar10Ptr.asFunction<int Function(int)>();

  int fputc_unlocked10(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked10(
      __c,
      __stream,
    );
  }

  late final _fputc_unlocked10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked10 =
      _fputc_unlocked10Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked10(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked10(
      __c,
      __stream,
    );
  }

  late final _putc_unlocked10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked10 =
      _putc_unlocked10Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked10(
    int __c,
  ) {
    return _putchar_unlocked10(
      __c,
    );
  }

  late final _putchar_unlocked10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked10 =
      _putchar_unlocked10Ptr.asFunction<int Function(int)>();

  int getw10(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw10(
      __stream,
    );
  }

  late final _getw10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw10 = _getw10Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw10(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw10(
      __w,
      __stream,
    );
  }

  late final _putw10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw10 =
      _putw10Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets10(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets10(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgets10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets10 = _fgets10Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim10(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim10(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelim10Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim10 = ___getdelim10Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getdelim10(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim10(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelim10Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim10 = _getdelim10Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getline10(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline10(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getline10Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<FILE>)>>('getline');
  late final _getline10 = _getline10Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<FILE>)>();

  int fputs10(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs10(
      __s,
      __stream,
    );
  }

  late final _fputs10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs10 = _fputs10Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts10(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts10(
      __s,
    );
  }

  late final _puts10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts10 =
      _puts10Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc10(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc10(
      __c,
      __stream,
    );
  }

  late final _ungetc10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc10 =
      _ungetc10Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread10(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread10(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread10 = _fread10Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite10(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite10(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwrite10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite10 = _fwrite10Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked10(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked10(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlocked10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked10 = _fread_unlocked10Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked10(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked10(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlocked10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked10 = _fwrite_unlocked10Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek10(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek10(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseek10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek10 =
      _fseek10Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell10(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell10(
      __stream,
    );
  }

  late final _ftell10Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell10 =
      _ftell10Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind10(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind10(
      __stream,
    );
  }

  late final _rewind10Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind10 =
      _rewind10Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko10(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko10(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseeko10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko10 =
      _fseeko10Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello10(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello10(
      __stream,
    );
  }

  late final _ftello10Ptr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello10 =
      _ftello10Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos10(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos10(
      __stream,
      __pos,
    );
  }

  late final _fgetpos10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos10 = _fgetpos10Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos10(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos10(
      __stream,
      __pos,
    );
  }

  late final _fsetpos10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos10 = _fsetpos10Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr10(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr10(
      __stream,
    );
  }

  late final _clearerr10Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr10 =
      _clearerr10Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof10(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof10(
      __stream,
    );
  }

  late final _feof10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof10 = _feof10Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror10(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror10(
      __stream,
    );
  }

  late final _ferror10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror10 =
      _ferror10Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked10(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked10(
      __stream,
    );
  }

  late final _clearerr_unlocked10Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked10 =
      _clearerr_unlocked10Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked10(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked10(
      __stream,
    );
  }

  late final _feof_unlocked10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked10 =
      _feof_unlocked10Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked10(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked10(
      __stream,
    );
  }

  late final _ferror_unlocked10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked10 =
      _ferror_unlocked10Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror10(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror10(
      __s,
    );
  }

  late final _perror10Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror10 =
      _perror10Ptr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno10(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno10(
      __stream,
    );
  }

  late final _fileno10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno10 =
      _fileno10Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked10(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked10(
      __stream,
    );
  }

  late final _fileno_unlocked10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked10 =
      _fileno_unlocked10Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose10(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose10(
      __stream,
    );
  }

  late final _pclose10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose10 =
      _pclose10Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen10(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen10(
      __command,
      __modes,
    );
  }

  late final _popen10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen10 = _popen10Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid10(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid10(
      __s,
    );
  }

  late final _ctermid10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid10 = _ctermid10Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile10(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile10(
      __stream,
    );
  }

  late final _flockfile10Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile10 =
      _flockfile10Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile10(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile10(
      __stream,
    );
  }

  late final _ftrylockfile10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile10 =
      _ftrylockfile10Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile10(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile10(
      __stream,
    );
  }

  late final _funlockfile10Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile10 =
      _funlockfile10Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow10(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow10(
      arg0,
    );
  }

  late final ___uflow10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow10 =
      ___uflow10Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow10(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow10(
      arg0,
      arg1,
    );
  }

  late final ___overflow10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow10 =
      ___overflow10Ptr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __ctype_get_mb_cur_max10() {
    return ___ctype_get_mb_cur_max10();
  }

  late final ___ctype_get_mb_cur_max10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max10 =
      ___ctype_get_mb_cur_max10Ptr.asFunction<int Function()>();

  double atof10(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof10(
      __nptr,
    );
  }

  late final _atof10Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof10 =
      _atof10Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi10(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi10(
      __nptr,
    );
  }

  late final _atoi10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi10 =
      _atoi10Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol10(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol10(
      __nptr,
    );
  }

  late final _atol10Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol10 =
      _atol10Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll10(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll10(
      __nptr,
    );
  }

  late final _atoll10Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll10 =
      _atoll10Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod10(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod10(
      __nptr,
      __endptr,
    );
  }

  late final _strtod10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod10 = _strtod10Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof10(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof10(
      __nptr,
      __endptr,
    );
  }

  late final _strtof10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof10 = _strtof10Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol10(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol10(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol10 = _strtol10Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul10(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul10(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul10 = _strtoul10Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq10(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq10(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq10 = _strtoq10Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq10(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq10(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq10 = _strtouq10Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll10(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll10(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll10 = _strtoll10Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull10(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull10(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull10 = _strtoull10Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a10(
    int __n,
  ) {
    return _l64a10(
      __n,
    );
  }

  late final _l64a10Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a10 =
      _l64a10Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l10(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l10(
      __s,
    );
  }

  late final _a64l10Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l10 =
      _a64l10Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select10(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select10(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select10 = _select10Ptr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect10(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect10(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect10 = _pselect10Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random10() {
    return _random10();
  }

  late final _random10Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random10 = _random10Ptr.asFunction<int Function()>();

  void srandom10(
    int __seed,
  ) {
    return _srandom10(
      __seed,
    );
  }

  late final _srandom10Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom10 = _srandom10Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate10(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate10(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int)>>('initstate');
  late final _initstate10 = _initstate10Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate10(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate10(
      __statebuf,
    );
  }

  late final _setstate10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate10 = _setstate10Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r10(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r10(
      __buf,
      __result,
    );
  }

  late final _random_r10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r10 = _random_r10Ptr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r10(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r10(
      __seed,
      __buf,
    );
  }

  late final _srandom_r10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r10 =
      _srandom_r10Ptr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r10(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r10(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r10 = _initstate_r10Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r10(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r10(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r10 = _setstate_r10Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand10() {
    return _rand10();
  }

  late final _rand10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand10 = _rand10Ptr.asFunction<int Function()>();

  void srand10(
    int __seed,
  ) {
    return _srand10(
      __seed,
    );
  }

  late final _srand10Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand10 = _srand10Ptr.asFunction<void Function(int)>();

  int rand_r10(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r10(
      __seed,
    );
  }

  late final _rand_r10Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r10 =
      _rand_r10Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand4810() {
    return _drand4810();
  }

  late final _drand4810Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand4810 = _drand4810Ptr.asFunction<double Function()>();

  double erand4810(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand4810(
      __xsubi,
    );
  }

  late final _erand4810Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand4810 = _erand4810Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand4810() {
    return _lrand4810();
  }

  late final _lrand4810Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand4810 = _lrand4810Ptr.asFunction<int Function()>();

  int nrand4810(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand4810(
      __xsubi,
    );
  }

  late final _nrand4810Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand4810 =
      _nrand4810Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand4810() {
    return _mrand4810();
  }

  late final _mrand4810Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand4810 = _mrand4810Ptr.asFunction<int Function()>();

  int jrand4810(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand4810(
      __xsubi,
    );
  }

  late final _jrand4810Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand4810 =
      _jrand4810Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand4810(
    int __seedval,
  ) {
    return _srand4810(
      __seedval,
    );
  }

  late final _srand4810Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand4810 = _srand4810Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed4810(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed4810(
      __seed16v,
    );
  }

  late final _seed4810Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed4810 = _seed4810Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong4810(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong4810(
      __param,
    );
  }

  late final _lcong4810Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong4810 =
      _lcong4810Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r10(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r10(
      __buffer,
      __result,
    );
  }

  late final _drand48_r10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r10 = _drand48_r10Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r10(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r10(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r10 = _erand48_r10Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r10(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r10(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r10 = _lrand48_r10Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r10(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r10(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r10 = _nrand48_r10Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r10(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r10(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r10 = _mrand48_r10Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r10(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r10(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r10 = _jrand48_r10Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r10(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r10(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r10 = _srand48_r10Ptr
      .asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r10(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r10(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r10 = _seed48_r10Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r10(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r10(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r10 = _lcong48_r10Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int arc4random10() {
    return _arc4random10();
  }

  late final _arc4random10Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random10 = _arc4random10Ptr.asFunction<int Function()>();

  void arc4random_buf10(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf10(
      __buf,
      __size,
    );
  }

  late final _arc4random_buf10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('arc4random_buf');
  late final _arc4random_buf10 = _arc4random_buf10Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform10(
    int __upper_bound,
  ) {
    return _arc4random_uniform10(
      __upper_bound,
    );
  }

  late final _arc4random_uniform10Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
          'arc4random_uniform');
  late final _arc4random_uniform10 =
      _arc4random_uniform10Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc10(
    int __size,
  ) {
    return _malloc10(
      __size,
    );
  }

  late final _malloc10Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'malloc');
  late final _malloc10 =
      _malloc10Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc10(
    int __nmemb,
    int __size,
  ) {
    return _calloc10(
      __nmemb,
      __size,
    );
  }

  late final _calloc10Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'calloc');
  late final _calloc10 =
      _calloc10Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc10(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc10(
      __ptr,
      __size,
    );
  }

  late final _realloc10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('realloc');
  late final _realloc10 = _realloc10Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free10(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free10(
      __ptr,
    );
  }

  late final _free10Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free10 =
      _free10Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray20(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray20(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray20 = _reallocarray20Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray21(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray21(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray21 = _reallocarray21Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca10(
    int __size,
  ) {
    return _alloca10(
      __size,
    );
  }

  late final _alloca10Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'alloca');
  late final _alloca10 =
      _alloca10Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc10(
    int __size,
  ) {
    return _valloc10(
      __size,
    );
  }

  late final _valloc10Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'valloc');
  late final _valloc10 =
      _valloc10Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign10(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign10(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int,
              ffi.Int)>>('posix_memalign');
  late final _posix_memalign10 = _posix_memalign10Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc10(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc10(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc10Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'aligned_alloc');
  late final _aligned_alloc10 = _aligned_alloc10Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort10() {
    return _abort10();
  }

  late final _abort10Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort10 = _abort10Ptr.asFunction<void Function()>();

  int atexit10(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit10(
      __func,
    );
  }

  late final _atexit10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit10 = _atexit10Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit10(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit10(
      __func,
    );
  }

  late final _at_quick_exit10Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit10 = _at_quick_exit10Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit10(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit10(
      __func,
      __arg,
    );
  }

  late final _on_exit10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit10 = _on_exit10Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit10(
    int __status,
  ) {
    return _exit10(
      __status,
    );
  }

  late final _exit10Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit10 = _exit10Ptr.asFunction<void Function(int)>();

  void quick_exit10(
    int __status,
  ) {
    return _quick_exit10(
      __status,
    );
  }

  late final _quick_exit10Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit10 = _quick_exit10Ptr.asFunction<void Function(int)>();

  void _Exit10(
    int __status,
  ) {
    return __Exit10(
      __status,
    );
  }

  late final __Exit10Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit10 = __Exit10Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv10(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv10(
      __name,
    );
  }

  late final _getenv10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv10 = _getenv10Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv10(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv10(
      __string,
    );
  }

  late final _putenv10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv10 =
      _putenv10Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv10(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv10(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv10 = _setenv10Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv10(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv10(
      __name,
    );
  }

  late final _unsetenv10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv10 =
      _unsetenv10Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv10() {
    return _clearenv10();
  }

  late final _clearenv10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv10 = _clearenv10Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp10(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp10(
      __template,
    );
  }

  late final _mktemp10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp10 = _mktemp10Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp10(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp10(
      __template,
    );
  }

  late final _mkstemp10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp10 =
      _mkstemp10Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps10(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps10(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps10Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps10 =
      _mkstemps10Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp10(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp10(
      __template,
    );
  }

  late final _mkdtemp10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp10 = _mkdtemp10Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system10(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system10(
      __command,
    );
  }

  late final _system10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system10 =
      _system10Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath10(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath10(
      __name,
      __resolved,
    );
  }

  late final _realpath10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath10 = _realpath10Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch10(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch10(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              __compar_fn_t)>>('bsearch');
  late final _bsearch10 = _bsearch10Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort10(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort10(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              __compar_fn_t)>>('qsort');
  late final _qsort10 = _qsort10Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs10(
    int __x,
  ) {
    return _abs10(
      __x,
    );
  }

  late final _abs10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs10 = _abs10Ptr.asFunction<int Function(int)>();

  int labs10(
    int __x,
  ) {
    return _labs10(
      __x,
    );
  }

  late final _labs10Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs10 = _labs10Ptr.asFunction<int Function(int)>();

  int llabs10(
    int __x,
  ) {
    return _llabs10(
      __x,
    );
  }

  late final _llabs10Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs10 = _llabs10Ptr.asFunction<int Function(int)>();

  div_t div10(
    int __numer,
    int __denom,
  ) {
    return _div10(
      __numer,
      __denom,
    );
  }

  late final _div10Ptr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div10 = _div10Ptr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv10(
    int __numer,
    int __denom,
  ) {
    return _ldiv10(
      __numer,
      __denom,
    );
  }

  late final _ldiv10Ptr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv10 = _ldiv10Ptr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv10(
    int __numer,
    int __denom,
  ) {
    return _lldiv10(
      __numer,
      __denom,
    );
  }

  late final _lldiv10Ptr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv10 = _lldiv10Ptr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt10(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt10(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt10 = _ecvt10Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt10(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt10(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt10 = _fcvt10Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt10(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt10(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt10 = _gcvt10Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r10(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r10(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('ecvt_r');
  late final _ecvt_r10 = _ecvt_r10Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r10(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r10(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('fcvt_r');
  late final _fcvt_r10 = _fcvt_r10Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen10(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen10(
      __s,
      __n,
    );
  }

  late final _mblen10Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mblen');
  late final _mblen10 =
      _mblen10Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc10(
    ffi.Pointer<ffi.Int> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc10(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('mbtowc');
  late final _mbtowc10 = _mbtowc10Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb10(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb10(
      __s,
      __wchar,
    );
  }

  late final _wctomb10Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'wctomb');
  late final _wctomb10 =
      _wctomb10Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs10(
    ffi.Pointer<ffi.Int> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs10(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mbstowcs');
  late final _mbstowcs10 = _mbstowcs10Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs10(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Int> __pwcs,
    int __n,
  ) {
    return _wcstombs10(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('wcstombs');
  late final _wcstombs10 = _wcstombs10Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  int rpmatch10(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch10(
      __response,
    );
  }

  late final _rpmatch10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch10 =
      _rpmatch10Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt10(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt10(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt10 = _getsubopt10Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg10(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg10(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg10 =
      _getloadavg10Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Void> memcpy10(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy10(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpy10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memcpy');
  late final _memcpy10 = _memcpy10Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove10(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove10(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmove10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memmove');
  late final _memmove10 = _memmove10Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy10(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy10(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpy10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memccpy');
  late final _memccpy10 = _memccpy10Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset10(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset10(
      __s,
      __c,
      __n,
    );
  }

  late final _memset10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memset');
  late final _memset10 = _memset10Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp10(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp10(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmp10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('memcmp');
  late final _memcmp10 = _memcmp10Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq10(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq10(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeq10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__memcmpeq');
  late final ___memcmpeq10 = ___memcmpeq10Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr10(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr10(
      __s,
      __c,
      __n,
    );
  }

  late final _memchr10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memchr');
  late final _memchr10 = _memchr10Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy10(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy10(
      __dest,
      __src,
    );
  }

  late final _strcpy10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy10 = _strcpy10Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy10(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy10(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpy10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncpy');
  late final _strncpy10 = _strncpy10Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat10(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat10(
      __dest,
      __src,
    );
  }

  late final _strcat10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat10 = _strcat10Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat10(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat10(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncat10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncat');
  late final _strncat10 = _strncat10Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp10(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp10(
      __s1,
      __s2,
    );
  }

  late final _strcmp10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp10 = _strcmp10Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp10(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp10(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmp10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncmp');
  late final _strncmp10 = _strncmp10Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll10(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll10(
      __s1,
      __s2,
    );
  }

  late final _strcoll10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll10 = _strcoll10Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm10(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm10(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrm10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strxfrm');
  late final _strxfrm10 = _strxfrm10Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l10(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l10(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_l10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l10 = _strcoll_l10Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l10(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l10(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_l10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strxfrm_l');
  late final _strxfrm_l10 = _strxfrm_l10Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup10(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup10(
      __s,
    );
  }

  late final _strdup10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup10 = _strdup10Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup10(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup10(
      __string,
      __n,
    );
  }

  late final _strndup10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strndup');
  late final _strndup10 = _strndup10Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr10(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr10(
      __s,
      __c,
    );
  }

  late final _strchr10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr10 = _strchr10Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr10(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr10(
      __s,
      __c,
    );
  }

  late final _strrchr10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr10 = _strrchr10Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn10(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn10(
      __s,
      __reject,
    );
  }

  late final _strcspn10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn10 = _strcspn10Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn10(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn10(
      __s,
      __accept,
    );
  }

  late final _strspn10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn10 = _strspn10Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk10(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk10(
      __s,
      __accept,
    );
  }

  late final _strpbrk10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk10 = _strpbrk10Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr10(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr10(
      __haystack,
      __needle,
    );
  }

  late final _strstr10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr10 = _strstr10Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok10(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok10(
      __s,
      __delim,
    );
  }

  late final _strtok10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok10 = _strtok10Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r10(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r10(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_r10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r10 = ___strtok_r10Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r10(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r10(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_r10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r10 = _strtok_r10Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen10(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen10(
      __s,
    );
  }

  late final _strlen10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'strlen');
  late final _strlen10 =
      _strlen10Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen10(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen10(
      __string,
      __maxlen,
    );
  }

  late final _strnlen10Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'strnlen');
  late final _strnlen10 =
      _strnlen10Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror10(
    int __errnum,
  ) {
    return _strerror10(
      __errnum,
    );
  }

  late final _strerror10Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror10 =
      _strerror10Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r10(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r10(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_r10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('strerror_r');
  late final _strerror_r10 = _strerror_r10Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l10(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l10(
      __errnum,
      __l,
    );
  }

  late final _strerror_l10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l10 = _strerror_l10Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp10(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp10(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmp10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcmp');
  late final _bcmp10 = _bcmp10Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy10(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy10(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopy10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcopy');
  late final _bcopy10 = _bcopy10Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero10(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero10(
      __s,
      __n,
    );
  }

  late final _bzero10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('bzero');
  late final _bzero10 =
      _bzero10Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index10(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index10(
      __s,
      __c,
    );
  }

  late final _index10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index10 = _index10Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex10(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex10(
      __s,
      __c,
    );
  }

  late final _rindex10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex10 = _rindex10Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs10(
    int __i,
  ) {
    return _ffs10(
      __i,
    );
  }

  late final _ffs10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs10 = _ffs10Ptr.asFunction<int Function(int)>();

  int ffsl10(
    int __l,
  ) {
    return _ffsl10(
      __l,
    );
  }

  late final _ffsl10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl10 = _ffsl10Ptr.asFunction<int Function(int)>();

  int ffsll10(
    int __ll,
  ) {
    return _ffsll10(
      __ll,
    );
  }

  late final _ffsll10Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll10 = _ffsll10Ptr.asFunction<int Function(int)>();

  int strcasecmp10(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp10(
      __s1,
      __s2,
    );
  }

  late final _strcasecmp10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp10 = _strcasecmp10Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp10(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp10(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmp10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncasecmp');
  late final _strncasecmp10 = _strncasecmp10Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l10(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l10(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_l10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l10 = _strcasecmp_l10Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l10(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l10(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_l10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l10 = _strncasecmp_l10Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero10(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero10(
      __s,
      __n,
    );
  }

  late final _explicit_bzero10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('explicit_bzero');
  late final _explicit_bzero10 = _explicit_bzero10Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep10(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep10(
      __stringp,
      __delim,
    );
  }

  late final _strsep10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep10 = _strsep10Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal10(
    int __sig,
  ) {
    return _strsignal10(
      __sig,
    );
  }

  late final _strsignal10Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal10 =
      _strsignal10Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy10(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy10(
      __dest,
      __src,
    );
  }

  late final ___stpcpy10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy10 = ___stpcpy10Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy10(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy10(
      __dest,
      __src,
    );
  }

  late final _stpcpy10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy10 = _stpcpy10Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy10(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy10(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpy10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('__stpncpy');
  late final ___stpncpy10 = ___stpncpy10Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy10(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy10(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpy10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('stpncpy');
  late final _stpncpy10 = _stpncpy10Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int remove11(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove11(
      __filename,
    );
  }

  late final _remove11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove11 =
      _remove11Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename11(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename11(
      __old,
      __new,
    );
  }

  late final _rename11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename11 = _rename11Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat11(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat11(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameat11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat11 = _renameat11Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose11(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose11(
      __stream,
    );
  }

  late final _fclose11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose11 =
      _fclose11Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile11() {
    return _tmpfile11();
  }

  late final _tmpfile11Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile11 =
      _tmpfile11Ptr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam11(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam11(
      arg0,
    );
  }

  late final _tmpnam11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam11 = _tmpnam11Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r11(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r11(
      __s,
    );
  }

  late final _tmpnam_r11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r11 = _tmpnam_r11Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam11(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam11(
      __dir,
      __pfx,
    );
  }

  late final _tempnam11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam11 = _tempnam11Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush11(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush11(
      __stream,
    );
  }

  late final _fflush11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush11 =
      _fflush11Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked11(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked11(
      __stream,
    );
  }

  late final _fflush_unlocked11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked11 =
      _fflush_unlocked11Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen11(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen11(
      __filename,
      __modes,
    );
  }

  late final _fopen11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen11 = _fopen11Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen11(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen11(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopen11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen11 = _freopen11Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen11(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen11(
      __fd,
      __modes,
    );
  }

  late final _fdopen11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen11 = _fdopen11Ptr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen11(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen11(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopen11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen11 = _fmemopen11Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream11(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Int> __sizeloc,
  ) {
    return _open_memstream11(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstream11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('open_memstream');
  late final _open_memstream11 = _open_memstream11Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void setbuf11(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf11(
      __stream,
      __buf,
    );
  }

  late final _setbuf11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf11 = _setbuf11Ptr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf11(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf11(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbuf11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('setvbuf');
  late final _setvbuf11 = _setvbuf11Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer11(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer11(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbuffer11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer11 = _setbuffer11Ptr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf11(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf11(
      __stream,
    );
  }

  late final _setlinebuf11Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf11 =
      _setlinebuf11Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf11(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf11(
      __stream,
      __format,
    );
  }

  late final _fprintf11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf11 = _fprintf11Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf11(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf11(
      __format,
    );
  }

  late final _printf11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf11 =
      _printf11Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf11(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf11(
      __s,
      __format,
    );
  }

  late final _sprintf11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf11 = _sprintf11Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf11(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfprintf11(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintf11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfprintf');
  late final _vfprintf11 = _vfprintf11Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vprintf11(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vprintf11(
      __format,
      __arg,
    );
  }

  late final _vprintf11Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vprintf');
  late final _vprintf11 =
      _vprintf11Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsprintf11(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsprintf11(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintf11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsprintf');
  late final _vsprintf11 = _vsprintf11Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int snprintf11(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf11(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintf11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf11 = _snprintf11Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf11(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsnprintf11(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintf11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('vsnprintf');
  late final _vsnprintf11 = _vsnprintf11Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int vdprintf11(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    int __arg,
  ) {
    return _vdprintf11(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintf11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('vdprintf');
  late final _vdprintf11 = _vdprintf11Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int dprintf11(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf11(
      __fd,
      __fmt,
    );
  }

  late final _dprintf11Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf11 =
      _dprintf11Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf22(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf22(
      __stream,
      __format,
    );
  }

  late final _fscanf22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf22 = _fscanf22Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf22(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf22(
      __format,
    );
  }

  late final _scanf22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf22 =
      _scanf22Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf22(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf22(
      __s,
      __format,
    );
  }

  late final _sscanf22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf22 = _sscanf22Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fscanf23(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf23(
      __stream,
      __format,
    );
  }

  late final _fscanf23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf23 = _fscanf23Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf23(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf23(
      __format,
    );
  }

  late final _scanf23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf23 =
      _scanf23Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf23(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf23(
      __s,
      __format,
    );
  }

  late final _sscanf23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf23 = _sscanf23Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf22(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf22(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf22 = _vfscanf22Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf22(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf22(
      __format,
      __arg,
    );
  }

  late final _vscanf22Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf22 =
      _vscanf22Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf22(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf22(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf22 = _vsscanf22Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int vfscanf23(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf23(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf23 = _vfscanf23Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf23(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf23(
      __format,
      __arg,
    );
  }

  late final _vscanf23Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf23 =
      _vscanf23Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf23(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf23(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf23 = _vsscanf23Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fgetc11(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc11(
      __stream,
    );
  }

  late final _fgetc11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc11 =
      _fgetc11Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc11(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc11(
      __stream,
    );
  }

  late final _getc11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc11 = _getc11Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar11() {
    return _getchar11();
  }

  late final _getchar11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar11 = _getchar11Ptr.asFunction<int Function()>();

  int getc_unlocked11(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked11(
      __stream,
    );
  }

  late final _getc_unlocked11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked11 =
      _getc_unlocked11Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked11() {
    return _getchar_unlocked11();
  }

  late final _getchar_unlocked11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked11 =
      _getchar_unlocked11Ptr.asFunction<int Function()>();

  int fgetc_unlocked11(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked11(
      __stream,
    );
  }

  late final _fgetc_unlocked11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked11 =
      _fgetc_unlocked11Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc11(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc11(
      __c,
      __stream,
    );
  }

  late final _fputc11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc11 =
      _fputc11Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc11(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc11(
      __c,
      __stream,
    );
  }

  late final _putc11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc11 =
      _putc11Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar11(
    int __c,
  ) {
    return _putchar11(
      __c,
    );
  }

  late final _putchar11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar11 = _putchar11Ptr.asFunction<int Function(int)>();

  int fputc_unlocked11(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked11(
      __c,
      __stream,
    );
  }

  late final _fputc_unlocked11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked11 =
      _fputc_unlocked11Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked11(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked11(
      __c,
      __stream,
    );
  }

  late final _putc_unlocked11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked11 =
      _putc_unlocked11Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked11(
    int __c,
  ) {
    return _putchar_unlocked11(
      __c,
    );
  }

  late final _putchar_unlocked11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked11 =
      _putchar_unlocked11Ptr.asFunction<int Function(int)>();

  int getw11(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw11(
      __stream,
    );
  }

  late final _getw11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw11 = _getw11Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw11(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw11(
      __w,
      __stream,
    );
  }

  late final _putw11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw11 =
      _putw11Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets11(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets11(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgets11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets11 = _fgets11Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim11(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim11(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelim11Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim11 = ___getdelim11Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getdelim11(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim11(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelim11Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim11 = _getdelim11Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getline11(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline11(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getline11Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<FILE>)>>('getline');
  late final _getline11 = _getline11Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<FILE>)>();

  int fputs11(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs11(
      __s,
      __stream,
    );
  }

  late final _fputs11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs11 = _fputs11Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts11(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts11(
      __s,
    );
  }

  late final _puts11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts11 =
      _puts11Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc11(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc11(
      __c,
      __stream,
    );
  }

  late final _ungetc11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc11 =
      _ungetc11Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread11(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread11(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread11 = _fread11Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite11(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite11(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwrite11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite11 = _fwrite11Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked11(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked11(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlocked11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked11 = _fread_unlocked11Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked11(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked11(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlocked11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked11 = _fwrite_unlocked11Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek11(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek11(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseek11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek11 =
      _fseek11Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell11(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell11(
      __stream,
    );
  }

  late final _ftell11Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell11 =
      _ftell11Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind11(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind11(
      __stream,
    );
  }

  late final _rewind11Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind11 =
      _rewind11Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko11(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko11(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseeko11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko11 =
      _fseeko11Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello11(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello11(
      __stream,
    );
  }

  late final _ftello11Ptr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello11 =
      _ftello11Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos11(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos11(
      __stream,
      __pos,
    );
  }

  late final _fgetpos11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos11 = _fgetpos11Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos11(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos11(
      __stream,
      __pos,
    );
  }

  late final _fsetpos11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos11 = _fsetpos11Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr11(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr11(
      __stream,
    );
  }

  late final _clearerr11Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr11 =
      _clearerr11Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof11(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof11(
      __stream,
    );
  }

  late final _feof11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof11 = _feof11Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror11(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror11(
      __stream,
    );
  }

  late final _ferror11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror11 =
      _ferror11Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked11(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked11(
      __stream,
    );
  }

  late final _clearerr_unlocked11Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked11 =
      _clearerr_unlocked11Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked11(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked11(
      __stream,
    );
  }

  late final _feof_unlocked11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked11 =
      _feof_unlocked11Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked11(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked11(
      __stream,
    );
  }

  late final _ferror_unlocked11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked11 =
      _ferror_unlocked11Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror11(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror11(
      __s,
    );
  }

  late final _perror11Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror11 =
      _perror11Ptr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno11(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno11(
      __stream,
    );
  }

  late final _fileno11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno11 =
      _fileno11Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked11(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked11(
      __stream,
    );
  }

  late final _fileno_unlocked11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked11 =
      _fileno_unlocked11Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose11(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose11(
      __stream,
    );
  }

  late final _pclose11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose11 =
      _pclose11Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen11(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen11(
      __command,
      __modes,
    );
  }

  late final _popen11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen11 = _popen11Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid11(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid11(
      __s,
    );
  }

  late final _ctermid11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid11 = _ctermid11Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile11(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile11(
      __stream,
    );
  }

  late final _flockfile11Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile11 =
      _flockfile11Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile11(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile11(
      __stream,
    );
  }

  late final _ftrylockfile11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile11 =
      _ftrylockfile11Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile11(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile11(
      __stream,
    );
  }

  late final _funlockfile11Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile11 =
      _funlockfile11Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow11(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow11(
      arg0,
    );
  }

  late final ___uflow11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow11 =
      ___uflow11Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow11(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow11(
      arg0,
      arg1,
    );
  }

  late final ___overflow11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow11 =
      ___overflow11Ptr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __ctype_get_mb_cur_max11() {
    return ___ctype_get_mb_cur_max11();
  }

  late final ___ctype_get_mb_cur_max11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max11 =
      ___ctype_get_mb_cur_max11Ptr.asFunction<int Function()>();

  double atof11(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof11(
      __nptr,
    );
  }

  late final _atof11Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof11 =
      _atof11Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi11(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi11(
      __nptr,
    );
  }

  late final _atoi11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi11 =
      _atoi11Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol11(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol11(
      __nptr,
    );
  }

  late final _atol11Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol11 =
      _atol11Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll11(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll11(
      __nptr,
    );
  }

  late final _atoll11Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll11 =
      _atoll11Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod11(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod11(
      __nptr,
      __endptr,
    );
  }

  late final _strtod11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod11 = _strtod11Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof11(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof11(
      __nptr,
      __endptr,
    );
  }

  late final _strtof11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof11 = _strtof11Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol11(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol11(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol11 = _strtol11Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul11(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul11(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul11 = _strtoul11Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq11(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq11(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq11 = _strtoq11Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq11(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq11(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq11 = _strtouq11Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll11(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll11(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll11 = _strtoll11Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull11(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull11(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull11 = _strtoull11Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a11(
    int __n,
  ) {
    return _l64a11(
      __n,
    );
  }

  late final _l64a11Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a11 =
      _l64a11Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l11(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l11(
      __s,
    );
  }

  late final _a64l11Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l11 =
      _a64l11Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select11(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select11(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select11 = _select11Ptr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect11(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect11(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect11 = _pselect11Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random11() {
    return _random11();
  }

  late final _random11Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random11 = _random11Ptr.asFunction<int Function()>();

  void srandom11(
    int __seed,
  ) {
    return _srandom11(
      __seed,
    );
  }

  late final _srandom11Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom11 = _srandom11Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate11(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate11(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int)>>('initstate');
  late final _initstate11 = _initstate11Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate11(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate11(
      __statebuf,
    );
  }

  late final _setstate11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate11 = _setstate11Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r11(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r11(
      __buf,
      __result,
    );
  }

  late final _random_r11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r11 = _random_r11Ptr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r11(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r11(
      __seed,
      __buf,
    );
  }

  late final _srandom_r11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r11 =
      _srandom_r11Ptr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r11(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r11(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r11 = _initstate_r11Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r11(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r11(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r11 = _setstate_r11Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand11() {
    return _rand11();
  }

  late final _rand11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand11 = _rand11Ptr.asFunction<int Function()>();

  void srand11(
    int __seed,
  ) {
    return _srand11(
      __seed,
    );
  }

  late final _srand11Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand11 = _srand11Ptr.asFunction<void Function(int)>();

  int rand_r11(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r11(
      __seed,
    );
  }

  late final _rand_r11Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r11 =
      _rand_r11Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand4811() {
    return _drand4811();
  }

  late final _drand4811Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand4811 = _drand4811Ptr.asFunction<double Function()>();

  double erand4811(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand4811(
      __xsubi,
    );
  }

  late final _erand4811Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand4811 = _erand4811Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand4811() {
    return _lrand4811();
  }

  late final _lrand4811Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand4811 = _lrand4811Ptr.asFunction<int Function()>();

  int nrand4811(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand4811(
      __xsubi,
    );
  }

  late final _nrand4811Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand4811 =
      _nrand4811Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand4811() {
    return _mrand4811();
  }

  late final _mrand4811Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand4811 = _mrand4811Ptr.asFunction<int Function()>();

  int jrand4811(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand4811(
      __xsubi,
    );
  }

  late final _jrand4811Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand4811 =
      _jrand4811Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand4811(
    int __seedval,
  ) {
    return _srand4811(
      __seedval,
    );
  }

  late final _srand4811Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand4811 = _srand4811Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed4811(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed4811(
      __seed16v,
    );
  }

  late final _seed4811Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed4811 = _seed4811Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong4811(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong4811(
      __param,
    );
  }

  late final _lcong4811Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong4811 =
      _lcong4811Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r11(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r11(
      __buffer,
      __result,
    );
  }

  late final _drand48_r11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r11 = _drand48_r11Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r11(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r11(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r11 = _erand48_r11Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r11(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r11(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r11 = _lrand48_r11Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r11(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r11(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r11 = _nrand48_r11Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r11(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r11(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r11 = _mrand48_r11Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r11(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r11(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r11 = _jrand48_r11Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r11(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r11(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r11 = _srand48_r11Ptr
      .asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r11(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r11(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r11 = _seed48_r11Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r11(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r11(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r11 = _lcong48_r11Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int arc4random11() {
    return _arc4random11();
  }

  late final _arc4random11Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random11 = _arc4random11Ptr.asFunction<int Function()>();

  void arc4random_buf11(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf11(
      __buf,
      __size,
    );
  }

  late final _arc4random_buf11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('arc4random_buf');
  late final _arc4random_buf11 = _arc4random_buf11Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform11(
    int __upper_bound,
  ) {
    return _arc4random_uniform11(
      __upper_bound,
    );
  }

  late final _arc4random_uniform11Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
          'arc4random_uniform');
  late final _arc4random_uniform11 =
      _arc4random_uniform11Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc11(
    int __size,
  ) {
    return _malloc11(
      __size,
    );
  }

  late final _malloc11Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'malloc');
  late final _malloc11 =
      _malloc11Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc11(
    int __nmemb,
    int __size,
  ) {
    return _calloc11(
      __nmemb,
      __size,
    );
  }

  late final _calloc11Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'calloc');
  late final _calloc11 =
      _calloc11Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc11(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc11(
      __ptr,
      __size,
    );
  }

  late final _realloc11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('realloc');
  late final _realloc11 = _realloc11Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free11(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free11(
      __ptr,
    );
  }

  late final _free11Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free11 =
      _free11Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray22(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray22(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray22 = _reallocarray22Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray23(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray23(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray23 = _reallocarray23Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca11(
    int __size,
  ) {
    return _alloca11(
      __size,
    );
  }

  late final _alloca11Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'alloca');
  late final _alloca11 =
      _alloca11Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc11(
    int __size,
  ) {
    return _valloc11(
      __size,
    );
  }

  late final _valloc11Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'valloc');
  late final _valloc11 =
      _valloc11Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign11(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign11(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int,
              ffi.Int)>>('posix_memalign');
  late final _posix_memalign11 = _posix_memalign11Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc11(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc11(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc11Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'aligned_alloc');
  late final _aligned_alloc11 = _aligned_alloc11Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort11() {
    return _abort11();
  }

  late final _abort11Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort11 = _abort11Ptr.asFunction<void Function()>();

  int atexit11(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit11(
      __func,
    );
  }

  late final _atexit11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit11 = _atexit11Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit11(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit11(
      __func,
    );
  }

  late final _at_quick_exit11Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit11 = _at_quick_exit11Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit11(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit11(
      __func,
      __arg,
    );
  }

  late final _on_exit11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit11 = _on_exit11Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit11(
    int __status,
  ) {
    return _exit11(
      __status,
    );
  }

  late final _exit11Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit11 = _exit11Ptr.asFunction<void Function(int)>();

  void quick_exit11(
    int __status,
  ) {
    return _quick_exit11(
      __status,
    );
  }

  late final _quick_exit11Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit11 = _quick_exit11Ptr.asFunction<void Function(int)>();

  void _Exit11(
    int __status,
  ) {
    return __Exit11(
      __status,
    );
  }

  late final __Exit11Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit11 = __Exit11Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv11(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv11(
      __name,
    );
  }

  late final _getenv11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv11 = _getenv11Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv11(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv11(
      __string,
    );
  }

  late final _putenv11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv11 =
      _putenv11Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv11(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv11(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv11 = _setenv11Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv11(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv11(
      __name,
    );
  }

  late final _unsetenv11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv11 =
      _unsetenv11Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv11() {
    return _clearenv11();
  }

  late final _clearenv11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv11 = _clearenv11Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp11(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp11(
      __template,
    );
  }

  late final _mktemp11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp11 = _mktemp11Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp11(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp11(
      __template,
    );
  }

  late final _mkstemp11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp11 =
      _mkstemp11Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps11(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps11(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps11Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps11 =
      _mkstemps11Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp11(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp11(
      __template,
    );
  }

  late final _mkdtemp11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp11 = _mkdtemp11Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system11(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system11(
      __command,
    );
  }

  late final _system11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system11 =
      _system11Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath11(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath11(
      __name,
      __resolved,
    );
  }

  late final _realpath11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath11 = _realpath11Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch11(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch11(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              __compar_fn_t)>>('bsearch');
  late final _bsearch11 = _bsearch11Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort11(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort11(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              __compar_fn_t)>>('qsort');
  late final _qsort11 = _qsort11Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs11(
    int __x,
  ) {
    return _abs11(
      __x,
    );
  }

  late final _abs11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs11 = _abs11Ptr.asFunction<int Function(int)>();

  int labs11(
    int __x,
  ) {
    return _labs11(
      __x,
    );
  }

  late final _labs11Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs11 = _labs11Ptr.asFunction<int Function(int)>();

  int llabs11(
    int __x,
  ) {
    return _llabs11(
      __x,
    );
  }

  late final _llabs11Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs11 = _llabs11Ptr.asFunction<int Function(int)>();

  div_t div11(
    int __numer,
    int __denom,
  ) {
    return _div11(
      __numer,
      __denom,
    );
  }

  late final _div11Ptr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div11 = _div11Ptr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv11(
    int __numer,
    int __denom,
  ) {
    return _ldiv11(
      __numer,
      __denom,
    );
  }

  late final _ldiv11Ptr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv11 = _ldiv11Ptr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv11(
    int __numer,
    int __denom,
  ) {
    return _lldiv11(
      __numer,
      __denom,
    );
  }

  late final _lldiv11Ptr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv11 = _lldiv11Ptr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt11(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt11(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt11 = _ecvt11Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt11(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt11(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt11 = _fcvt11Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt11(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt11(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt11 = _gcvt11Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r11(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r11(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('ecvt_r');
  late final _ecvt_r11 = _ecvt_r11Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r11(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r11(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('fcvt_r');
  late final _fcvt_r11 = _fcvt_r11Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen11(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen11(
      __s,
      __n,
    );
  }

  late final _mblen11Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mblen');
  late final _mblen11 =
      _mblen11Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc11(
    ffi.Pointer<ffi.Int> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc11(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('mbtowc');
  late final _mbtowc11 = _mbtowc11Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb11(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb11(
      __s,
      __wchar,
    );
  }

  late final _wctomb11Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'wctomb');
  late final _wctomb11 =
      _wctomb11Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs11(
    ffi.Pointer<ffi.Int> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs11(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mbstowcs');
  late final _mbstowcs11 = _mbstowcs11Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs11(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Int> __pwcs,
    int __n,
  ) {
    return _wcstombs11(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('wcstombs');
  late final _wcstombs11 = _wcstombs11Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  int rpmatch11(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch11(
      __response,
    );
  }

  late final _rpmatch11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch11 =
      _rpmatch11Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt11(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt11(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt11 = _getsubopt11Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg11(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg11(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg11 =
      _getloadavg11Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Void> memcpy11(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy11(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpy11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memcpy');
  late final _memcpy11 = _memcpy11Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove11(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove11(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmove11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memmove');
  late final _memmove11 = _memmove11Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy11(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy11(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpy11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memccpy');
  late final _memccpy11 = _memccpy11Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset11(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset11(
      __s,
      __c,
      __n,
    );
  }

  late final _memset11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memset');
  late final _memset11 = _memset11Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp11(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp11(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmp11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('memcmp');
  late final _memcmp11 = _memcmp11Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq11(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq11(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeq11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__memcmpeq');
  late final ___memcmpeq11 = ___memcmpeq11Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr11(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr11(
      __s,
      __c,
      __n,
    );
  }

  late final _memchr11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memchr');
  late final _memchr11 = _memchr11Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy11(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy11(
      __dest,
      __src,
    );
  }

  late final _strcpy11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy11 = _strcpy11Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy11(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy11(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpy11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncpy');
  late final _strncpy11 = _strncpy11Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat11(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat11(
      __dest,
      __src,
    );
  }

  late final _strcat11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat11 = _strcat11Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat11(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat11(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncat11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncat');
  late final _strncat11 = _strncat11Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp11(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp11(
      __s1,
      __s2,
    );
  }

  late final _strcmp11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp11 = _strcmp11Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp11(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp11(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmp11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncmp');
  late final _strncmp11 = _strncmp11Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll11(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll11(
      __s1,
      __s2,
    );
  }

  late final _strcoll11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll11 = _strcoll11Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm11(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm11(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrm11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strxfrm');
  late final _strxfrm11 = _strxfrm11Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l11(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l11(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_l11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l11 = _strcoll_l11Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l11(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l11(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_l11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strxfrm_l');
  late final _strxfrm_l11 = _strxfrm_l11Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup11(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup11(
      __s,
    );
  }

  late final _strdup11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup11 = _strdup11Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup11(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup11(
      __string,
      __n,
    );
  }

  late final _strndup11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strndup');
  late final _strndup11 = _strndup11Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr11(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr11(
      __s,
      __c,
    );
  }

  late final _strchr11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr11 = _strchr11Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr11(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr11(
      __s,
      __c,
    );
  }

  late final _strrchr11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr11 = _strrchr11Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn11(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn11(
      __s,
      __reject,
    );
  }

  late final _strcspn11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn11 = _strcspn11Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn11(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn11(
      __s,
      __accept,
    );
  }

  late final _strspn11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn11 = _strspn11Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk11(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk11(
      __s,
      __accept,
    );
  }

  late final _strpbrk11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk11 = _strpbrk11Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr11(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr11(
      __haystack,
      __needle,
    );
  }

  late final _strstr11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr11 = _strstr11Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok11(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok11(
      __s,
      __delim,
    );
  }

  late final _strtok11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok11 = _strtok11Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r11(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r11(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_r11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r11 = ___strtok_r11Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r11(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r11(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_r11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r11 = _strtok_r11Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen11(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen11(
      __s,
    );
  }

  late final _strlen11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'strlen');
  late final _strlen11 =
      _strlen11Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen11(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen11(
      __string,
      __maxlen,
    );
  }

  late final _strnlen11Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'strnlen');
  late final _strnlen11 =
      _strnlen11Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror11(
    int __errnum,
  ) {
    return _strerror11(
      __errnum,
    );
  }

  late final _strerror11Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror11 =
      _strerror11Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r11(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r11(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_r11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('strerror_r');
  late final _strerror_r11 = _strerror_r11Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l11(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l11(
      __errnum,
      __l,
    );
  }

  late final _strerror_l11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l11 = _strerror_l11Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp11(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp11(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmp11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcmp');
  late final _bcmp11 = _bcmp11Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy11(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy11(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopy11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcopy');
  late final _bcopy11 = _bcopy11Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero11(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero11(
      __s,
      __n,
    );
  }

  late final _bzero11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('bzero');
  late final _bzero11 =
      _bzero11Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index11(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index11(
      __s,
      __c,
    );
  }

  late final _index11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index11 = _index11Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex11(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex11(
      __s,
      __c,
    );
  }

  late final _rindex11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex11 = _rindex11Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs11(
    int __i,
  ) {
    return _ffs11(
      __i,
    );
  }

  late final _ffs11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs11 = _ffs11Ptr.asFunction<int Function(int)>();

  int ffsl11(
    int __l,
  ) {
    return _ffsl11(
      __l,
    );
  }

  late final _ffsl11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl11 = _ffsl11Ptr.asFunction<int Function(int)>();

  int ffsll11(
    int __ll,
  ) {
    return _ffsll11(
      __ll,
    );
  }

  late final _ffsll11Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll11 = _ffsll11Ptr.asFunction<int Function(int)>();

  int strcasecmp11(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp11(
      __s1,
      __s2,
    );
  }

  late final _strcasecmp11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp11 = _strcasecmp11Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp11(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp11(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmp11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncasecmp');
  late final _strncasecmp11 = _strncasecmp11Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l11(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l11(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_l11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l11 = _strcasecmp_l11Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l11(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l11(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_l11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l11 = _strncasecmp_l11Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero11(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero11(
      __s,
      __n,
    );
  }

  late final _explicit_bzero11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('explicit_bzero');
  late final _explicit_bzero11 = _explicit_bzero11Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep11(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep11(
      __stringp,
      __delim,
    );
  }

  late final _strsep11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep11 = _strsep11Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal11(
    int __sig,
  ) {
    return _strsignal11(
      __sig,
    );
  }

  late final _strsignal11Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal11 =
      _strsignal11Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy11(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy11(
      __dest,
      __src,
    );
  }

  late final ___stpcpy11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy11 = ___stpcpy11Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy11(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy11(
      __dest,
      __src,
    );
  }

  late final _stpcpy11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy11 = _stpcpy11Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy11(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy11(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpy11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('__stpncpy');
  late final ___stpncpy11 = ___stpncpy11Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy11(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy11(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpy11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('stpncpy');
  late final _stpncpy11 = _stpncpy11Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  /// !init static ecc context
  void dogecoin_ecc_start() {
    return _dogecoin_ecc_start();
  }

  late final _dogecoin_ecc_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('dogecoin_ecc_start');
  late final _dogecoin_ecc_start =
      _dogecoin_ecc_startPtr.asFunction<void Function()>();

  /// !destroys the static ecc context
  void dogecoin_ecc_stop() {
    return _dogecoin_ecc_stop();
  }

  late final _dogecoin_ecc_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('dogecoin_ecc_stop');
  late final _dogecoin_ecc_stop =
      _dogecoin_ecc_stopPtr.asFunction<void Function()>();

  /// !get public key from given private key
  void dogecoin_ecc_get_pubkey(
    ffi.Pointer<ffi.Uint8> private_key,
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Int> public_key_len,
    int compressed,
  ) {
    return _dogecoin_ecc_get_pubkey(
      private_key,
      public_key,
      public_key_len,
      compressed,
    );
  }

  late final _dogecoin_ecc_get_pubkeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Int>, dogecoin_bool)>>('dogecoin_ecc_get_pubkey');
  late final _dogecoin_ecc_get_pubkey = _dogecoin_ecc_get_pubkeyPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Int>, int)>();

  /// !ec mul tweak on given private key
  int dogecoin_ecc_private_key_tweak_add(
    ffi.Pointer<ffi.Uint8> private_key,
    ffi.Pointer<ffi.Uint8> tweak,
  ) {
    return _dogecoin_ecc_private_key_tweak_add(
      private_key,
      tweak,
    );
  }

  late final _dogecoin_ecc_private_key_tweak_addPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_ecc_private_key_tweak_add');
  late final _dogecoin_ecc_private_key_tweak_add =
      _dogecoin_ecc_private_key_tweak_addPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  /// !ec mul tweak on given public key
  int dogecoin_ecc_public_key_tweak_add(
    ffi.Pointer<ffi.Uint8> public_key_inout,
    ffi.Pointer<ffi.Uint8> tweak,
  ) {
    return _dogecoin_ecc_public_key_tweak_add(
      public_key_inout,
      tweak,
    );
  }

  late final _dogecoin_ecc_public_key_tweak_addPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_ecc_public_key_tweak_add');
  late final _dogecoin_ecc_public_key_tweak_add =
      _dogecoin_ecc_public_key_tweak_addPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  /// !verifies a given 32byte key
  int dogecoin_ecc_verify_privatekey(
    ffi.Pointer<ffi.Uint8> private_key,
  ) {
    return _dogecoin_ecc_verify_privatekey(
      private_key,
    );
  }

  late final _dogecoin_ecc_verify_privatekeyPtr = _lookup<
          ffi.NativeFunction<dogecoin_bool Function(ffi.Pointer<ffi.Uint8>)>>(
      'dogecoin_ecc_verify_privatekey');
  late final _dogecoin_ecc_verify_privatekey =
      _dogecoin_ecc_verify_privatekeyPtr
          .asFunction<int Function(ffi.Pointer<ffi.Uint8>)>();

  /// !verifies a given public key (compressed[33] or uncompressed[65] bytes)
  int dogecoin_ecc_verify_pubkey(
    ffi.Pointer<ffi.Uint8> public_key,
    int compressed,
  ) {
    return _dogecoin_ecc_verify_pubkey(
      public_key,
      compressed,
    );
  }

  late final _dogecoin_ecc_verify_pubkeyPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<ffi.Uint8>,
              dogecoin_bool)>>('dogecoin_ecc_verify_pubkey');
  late final _dogecoin_ecc_verify_pubkey = _dogecoin_ecc_verify_pubkeyPtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint8>, int)>();

  /// !create a DER signature (72-74 bytes) with private key
  int dogecoin_ecc_sign(
    ffi.Pointer<ffi.Uint8> private_key,
    ffi.Pointer<ffi.Uint8> hash,
    ffi.Pointer<ffi.UnsignedChar> sigder,
    ffi.Pointer<ffi.Int> outlen,
  ) {
    return _dogecoin_ecc_sign(
      private_key,
      hash,
      sigder,
      outlen,
    );
  }

  late final _dogecoin_ecc_signPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_ecc_sign');
  late final _dogecoin_ecc_sign = _dogecoin_ecc_signPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Int>)>();

  /// !create a compact (64bytes) signature with private key
  int dogecoin_ecc_sign_compact(
    ffi.Pointer<ffi.Uint8> private_key,
    ffi.Pointer<ffi.Uint8> hash,
    ffi.Pointer<ffi.UnsignedChar> sigcomp,
    ffi.Pointer<ffi.Int> outlen,
  ) {
    return _dogecoin_ecc_sign_compact(
      private_key,
      hash,
      sigcomp,
      outlen,
    );
  }

  late final _dogecoin_ecc_sign_compactPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_ecc_sign_compact');
  late final _dogecoin_ecc_sign_compact =
      _dogecoin_ecc_sign_compactPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Int>)>();

  /// !create a compact recoverable (65bytes) signature with private key
  int dogecoin_ecc_sign_compact_recoverable(
    ffi.Pointer<ffi.Uint8> private_key,
    ffi.Pointer<ffi.Uint8> hash,
    ffi.Pointer<ffi.UnsignedChar> sigcomprec,
    ffi.Pointer<ffi.Int> outlen,
    ffi.Pointer<ffi.Int> recid,
  ) {
    return _dogecoin_ecc_sign_compact_recoverable(
      private_key,
      hash,
      sigcomprec,
      outlen,
      recid,
    );
  }

  late final _dogecoin_ecc_sign_compact_recoverablePtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_ecc_sign_compact_recoverable');
  late final _dogecoin_ecc_sign_compact_recoverable =
      _dogecoin_ecc_sign_compact_recoverablePtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  /// !recover a pubkey from a signature and recid
  int dogecoin_ecc_recover_pubkey(
    ffi.Pointer<ffi.UnsignedChar> sigrec,
    ffi.Pointer<ffi.Uint8> hash,
    int recid,
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Int> outlen,
  ) {
    return _dogecoin_ecc_recover_pubkey(
      sigrec,
      hash,
      recid,
      public_key,
      outlen,
    );
  }

  late final _dogecoin_ecc_recover_pubkeyPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_ecc_recover_pubkey');
  late final _dogecoin_ecc_recover_pubkey =
      _dogecoin_ecc_recover_pubkeyPtr.asFunction<
          int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Uint8>,
              int, ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Int>)>();

  /// !converts (and normalized) a compact signature to DER
  int dogecoin_ecc_compact_to_der_normalized(
    ffi.Pointer<ffi.UnsignedChar> sigcomp_in,
    ffi.Pointer<ffi.UnsignedChar> sigder_out,
    ffi.Pointer<ffi.Int> sigder_len_out,
  ) {
    return _dogecoin_ecc_compact_to_der_normalized(
      sigcomp_in,
      sigder_out,
      sigder_len_out,
    );
  }

  late final _dogecoin_ecc_compact_to_der_normalizedPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_ecc_compact_to_der_normalized');
  late final _dogecoin_ecc_compact_to_der_normalized =
      _dogecoin_ecc_compact_to_der_normalizedPtr.asFunction<
          int Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Int>)>();

  /// !convert DER signature to compact
  int dogecoin_ecc_der_to_compact(
    ffi.Pointer<ffi.UnsignedChar> sigder_in,
    int sigder_len,
    ffi.Pointer<ffi.UnsignedChar> sigcomp_out,
  ) {
    return _dogecoin_ecc_der_to_compact(
      sigder_in,
      sigder_len,
      sigcomp_out,
    );
  }

  late final _dogecoin_ecc_der_to_compactPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>)>>('dogecoin_ecc_der_to_compact');
  late final _dogecoin_ecc_der_to_compact =
      _dogecoin_ecc_der_to_compactPtr.asFunction<
          int Function(ffi.Pointer<ffi.UnsignedChar>, int,
              ffi.Pointer<ffi.UnsignedChar>)>();

  /// !verify DER signature with public key
  int dogecoin_ecc_verify_sig(
    ffi.Pointer<ffi.Uint8> public_key,
    int compressed,
    ffi.Pointer<ffi.Uint8> hash,
    ffi.Pointer<ffi.UnsignedChar> sigder,
    int siglen,
  ) {
    return _dogecoin_ecc_verify_sig(
      public_key,
      compressed,
      hash,
      sigder,
      siglen,
    );
  }

  late final _dogecoin_ecc_verify_sigPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<ffi.Uint8>,
              dogecoin_bool,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('dogecoin_ecc_verify_sig');
  late final _dogecoin_ecc_verify_sig = _dogecoin_ecc_verify_sigPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  int remove12(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove12(
      __filename,
    );
  }

  late final _remove12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove12 =
      _remove12Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename12(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename12(
      __old,
      __new,
    );
  }

  late final _rename12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename12 = _rename12Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat12(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat12(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameat12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat12 = _renameat12Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose12(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose12(
      __stream,
    );
  }

  late final _fclose12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose12 =
      _fclose12Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile12() {
    return _tmpfile12();
  }

  late final _tmpfile12Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile12 =
      _tmpfile12Ptr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam12(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam12(
      arg0,
    );
  }

  late final _tmpnam12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam12 = _tmpnam12Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r12(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r12(
      __s,
    );
  }

  late final _tmpnam_r12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r12 = _tmpnam_r12Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam12(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam12(
      __dir,
      __pfx,
    );
  }

  late final _tempnam12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam12 = _tempnam12Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush12(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush12(
      __stream,
    );
  }

  late final _fflush12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush12 =
      _fflush12Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked12(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked12(
      __stream,
    );
  }

  late final _fflush_unlocked12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked12 =
      _fflush_unlocked12Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen12(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen12(
      __filename,
      __modes,
    );
  }

  late final _fopen12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen12 = _fopen12Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen12(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen12(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopen12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen12 = _freopen12Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen12(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen12(
      __fd,
      __modes,
    );
  }

  late final _fdopen12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen12 = _fdopen12Ptr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen12(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen12(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopen12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen12 = _fmemopen12Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream12(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Int> __sizeloc,
  ) {
    return _open_memstream12(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstream12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('open_memstream');
  late final _open_memstream12 = _open_memstream12Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void setbuf12(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf12(
      __stream,
      __buf,
    );
  }

  late final _setbuf12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf12 = _setbuf12Ptr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf12(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf12(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbuf12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('setvbuf');
  late final _setvbuf12 = _setvbuf12Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer12(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer12(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbuffer12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer12 = _setbuffer12Ptr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf12(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf12(
      __stream,
    );
  }

  late final _setlinebuf12Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf12 =
      _setlinebuf12Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf12(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf12(
      __stream,
      __format,
    );
  }

  late final _fprintf12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf12 = _fprintf12Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf12(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf12(
      __format,
    );
  }

  late final _printf12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf12 =
      _printf12Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf12(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf12(
      __s,
      __format,
    );
  }

  late final _sprintf12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf12 = _sprintf12Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf12(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfprintf12(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintf12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfprintf');
  late final _vfprintf12 = _vfprintf12Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vprintf12(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vprintf12(
      __format,
      __arg,
    );
  }

  late final _vprintf12Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vprintf');
  late final _vprintf12 =
      _vprintf12Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsprintf12(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsprintf12(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintf12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsprintf');
  late final _vsprintf12 = _vsprintf12Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int snprintf12(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf12(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintf12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf12 = _snprintf12Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf12(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsnprintf12(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintf12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('vsnprintf');
  late final _vsnprintf12 = _vsnprintf12Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int vdprintf12(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    int __arg,
  ) {
    return _vdprintf12(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintf12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('vdprintf');
  late final _vdprintf12 = _vdprintf12Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int dprintf12(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf12(
      __fd,
      __fmt,
    );
  }

  late final _dprintf12Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf12 =
      _dprintf12Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf24(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf24(
      __stream,
      __format,
    );
  }

  late final _fscanf24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf24 = _fscanf24Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf24(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf24(
      __format,
    );
  }

  late final _scanf24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf24 =
      _scanf24Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf24(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf24(
      __s,
      __format,
    );
  }

  late final _sscanf24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf24 = _sscanf24Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fscanf25(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf25(
      __stream,
      __format,
    );
  }

  late final _fscanf25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf25 = _fscanf25Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf25(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf25(
      __format,
    );
  }

  late final _scanf25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf25 =
      _scanf25Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf25(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf25(
      __s,
      __format,
    );
  }

  late final _sscanf25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf25 = _sscanf25Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf24(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf24(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf24 = _vfscanf24Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf24(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf24(
      __format,
      __arg,
    );
  }

  late final _vscanf24Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf24 =
      _vscanf24Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf24(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf24(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf24 = _vsscanf24Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int vfscanf25(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf25(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf25 = _vfscanf25Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf25(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf25(
      __format,
      __arg,
    );
  }

  late final _vscanf25Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf25 =
      _vscanf25Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf25(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf25(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf25 = _vsscanf25Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fgetc12(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc12(
      __stream,
    );
  }

  late final _fgetc12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc12 =
      _fgetc12Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc12(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc12(
      __stream,
    );
  }

  late final _getc12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc12 = _getc12Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar12() {
    return _getchar12();
  }

  late final _getchar12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar12 = _getchar12Ptr.asFunction<int Function()>();

  int getc_unlocked12(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked12(
      __stream,
    );
  }

  late final _getc_unlocked12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked12 =
      _getc_unlocked12Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked12() {
    return _getchar_unlocked12();
  }

  late final _getchar_unlocked12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked12 =
      _getchar_unlocked12Ptr.asFunction<int Function()>();

  int fgetc_unlocked12(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked12(
      __stream,
    );
  }

  late final _fgetc_unlocked12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked12 =
      _fgetc_unlocked12Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc12(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc12(
      __c,
      __stream,
    );
  }

  late final _fputc12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc12 =
      _fputc12Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc12(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc12(
      __c,
      __stream,
    );
  }

  late final _putc12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc12 =
      _putc12Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar12(
    int __c,
  ) {
    return _putchar12(
      __c,
    );
  }

  late final _putchar12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar12 = _putchar12Ptr.asFunction<int Function(int)>();

  int fputc_unlocked12(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked12(
      __c,
      __stream,
    );
  }

  late final _fputc_unlocked12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked12 =
      _fputc_unlocked12Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked12(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked12(
      __c,
      __stream,
    );
  }

  late final _putc_unlocked12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked12 =
      _putc_unlocked12Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked12(
    int __c,
  ) {
    return _putchar_unlocked12(
      __c,
    );
  }

  late final _putchar_unlocked12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked12 =
      _putchar_unlocked12Ptr.asFunction<int Function(int)>();

  int getw12(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw12(
      __stream,
    );
  }

  late final _getw12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw12 = _getw12Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw12(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw12(
      __w,
      __stream,
    );
  }

  late final _putw12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw12 =
      _putw12Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets12(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets12(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgets12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets12 = _fgets12Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim12(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim12(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelim12Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim12 = ___getdelim12Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getdelim12(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim12(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelim12Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim12 = _getdelim12Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getline12(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline12(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getline12Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<FILE>)>>('getline');
  late final _getline12 = _getline12Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<FILE>)>();

  int fputs12(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs12(
      __s,
      __stream,
    );
  }

  late final _fputs12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs12 = _fputs12Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts12(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts12(
      __s,
    );
  }

  late final _puts12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts12 =
      _puts12Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc12(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc12(
      __c,
      __stream,
    );
  }

  late final _ungetc12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc12 =
      _ungetc12Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread12(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread12(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread12 = _fread12Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite12(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite12(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwrite12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite12 = _fwrite12Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked12(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked12(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlocked12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked12 = _fread_unlocked12Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked12(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked12(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlocked12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked12 = _fwrite_unlocked12Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek12(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek12(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseek12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek12 =
      _fseek12Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell12(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell12(
      __stream,
    );
  }

  late final _ftell12Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell12 =
      _ftell12Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind12(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind12(
      __stream,
    );
  }

  late final _rewind12Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind12 =
      _rewind12Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko12(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko12(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseeko12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko12 =
      _fseeko12Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello12(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello12(
      __stream,
    );
  }

  late final _ftello12Ptr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello12 =
      _ftello12Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos12(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos12(
      __stream,
      __pos,
    );
  }

  late final _fgetpos12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos12 = _fgetpos12Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos12(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos12(
      __stream,
      __pos,
    );
  }

  late final _fsetpos12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos12 = _fsetpos12Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr12(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr12(
      __stream,
    );
  }

  late final _clearerr12Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr12 =
      _clearerr12Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof12(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof12(
      __stream,
    );
  }

  late final _feof12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof12 = _feof12Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror12(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror12(
      __stream,
    );
  }

  late final _ferror12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror12 =
      _ferror12Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked12(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked12(
      __stream,
    );
  }

  late final _clearerr_unlocked12Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked12 =
      _clearerr_unlocked12Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked12(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked12(
      __stream,
    );
  }

  late final _feof_unlocked12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked12 =
      _feof_unlocked12Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked12(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked12(
      __stream,
    );
  }

  late final _ferror_unlocked12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked12 =
      _ferror_unlocked12Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror12(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror12(
      __s,
    );
  }

  late final _perror12Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror12 =
      _perror12Ptr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno12(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno12(
      __stream,
    );
  }

  late final _fileno12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno12 =
      _fileno12Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked12(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked12(
      __stream,
    );
  }

  late final _fileno_unlocked12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked12 =
      _fileno_unlocked12Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose12(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose12(
      __stream,
    );
  }

  late final _pclose12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose12 =
      _pclose12Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen12(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen12(
      __command,
      __modes,
    );
  }

  late final _popen12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen12 = _popen12Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid12(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid12(
      __s,
    );
  }

  late final _ctermid12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid12 = _ctermid12Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile12(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile12(
      __stream,
    );
  }

  late final _flockfile12Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile12 =
      _flockfile12Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile12(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile12(
      __stream,
    );
  }

  late final _ftrylockfile12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile12 =
      _ftrylockfile12Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile12(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile12(
      __stream,
    );
  }

  late final _funlockfile12Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile12 =
      _funlockfile12Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow12(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow12(
      arg0,
    );
  }

  late final ___uflow12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow12 =
      ___uflow12Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow12(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow12(
      arg0,
      arg1,
    );
  }

  late final ___overflow12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow12 =
      ___overflow12Ptr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __ctype_get_mb_cur_max12() {
    return ___ctype_get_mb_cur_max12();
  }

  late final ___ctype_get_mb_cur_max12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max12 =
      ___ctype_get_mb_cur_max12Ptr.asFunction<int Function()>();

  double atof12(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof12(
      __nptr,
    );
  }

  late final _atof12Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof12 =
      _atof12Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi12(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi12(
      __nptr,
    );
  }

  late final _atoi12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi12 =
      _atoi12Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol12(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol12(
      __nptr,
    );
  }

  late final _atol12Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol12 =
      _atol12Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll12(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll12(
      __nptr,
    );
  }

  late final _atoll12Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll12 =
      _atoll12Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod12(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod12(
      __nptr,
      __endptr,
    );
  }

  late final _strtod12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod12 = _strtod12Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof12(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof12(
      __nptr,
      __endptr,
    );
  }

  late final _strtof12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof12 = _strtof12Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol12(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol12(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol12 = _strtol12Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul12(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul12(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul12 = _strtoul12Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq12(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq12(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq12 = _strtoq12Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq12(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq12(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq12 = _strtouq12Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll12(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll12(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll12 = _strtoll12Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull12(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull12(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull12 = _strtoull12Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a12(
    int __n,
  ) {
    return _l64a12(
      __n,
    );
  }

  late final _l64a12Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a12 =
      _l64a12Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l12(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l12(
      __s,
    );
  }

  late final _a64l12Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l12 =
      _a64l12Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select12(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select12(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select12 = _select12Ptr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect12(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect12(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect12 = _pselect12Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random12() {
    return _random12();
  }

  late final _random12Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random12 = _random12Ptr.asFunction<int Function()>();

  void srandom12(
    int __seed,
  ) {
    return _srandom12(
      __seed,
    );
  }

  late final _srandom12Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom12 = _srandom12Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate12(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate12(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int)>>('initstate');
  late final _initstate12 = _initstate12Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate12(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate12(
      __statebuf,
    );
  }

  late final _setstate12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate12 = _setstate12Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r12(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r12(
      __buf,
      __result,
    );
  }

  late final _random_r12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r12 = _random_r12Ptr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r12(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r12(
      __seed,
      __buf,
    );
  }

  late final _srandom_r12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r12 =
      _srandom_r12Ptr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r12(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r12(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r12 = _initstate_r12Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r12(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r12(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r12 = _setstate_r12Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand12() {
    return _rand12();
  }

  late final _rand12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand12 = _rand12Ptr.asFunction<int Function()>();

  void srand12(
    int __seed,
  ) {
    return _srand12(
      __seed,
    );
  }

  late final _srand12Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand12 = _srand12Ptr.asFunction<void Function(int)>();

  int rand_r12(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r12(
      __seed,
    );
  }

  late final _rand_r12Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r12 =
      _rand_r12Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand4812() {
    return _drand4812();
  }

  late final _drand4812Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand4812 = _drand4812Ptr.asFunction<double Function()>();

  double erand4812(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand4812(
      __xsubi,
    );
  }

  late final _erand4812Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand4812 = _erand4812Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand4812() {
    return _lrand4812();
  }

  late final _lrand4812Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand4812 = _lrand4812Ptr.asFunction<int Function()>();

  int nrand4812(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand4812(
      __xsubi,
    );
  }

  late final _nrand4812Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand4812 =
      _nrand4812Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand4812() {
    return _mrand4812();
  }

  late final _mrand4812Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand4812 = _mrand4812Ptr.asFunction<int Function()>();

  int jrand4812(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand4812(
      __xsubi,
    );
  }

  late final _jrand4812Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand4812 =
      _jrand4812Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand4812(
    int __seedval,
  ) {
    return _srand4812(
      __seedval,
    );
  }

  late final _srand4812Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand4812 = _srand4812Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed4812(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed4812(
      __seed16v,
    );
  }

  late final _seed4812Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed4812 = _seed4812Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong4812(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong4812(
      __param,
    );
  }

  late final _lcong4812Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong4812 =
      _lcong4812Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r12(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r12(
      __buffer,
      __result,
    );
  }

  late final _drand48_r12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r12 = _drand48_r12Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r12(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r12(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r12 = _erand48_r12Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r12(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r12(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r12 = _lrand48_r12Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r12(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r12(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r12 = _nrand48_r12Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r12(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r12(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r12 = _mrand48_r12Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r12(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r12(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r12 = _jrand48_r12Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r12(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r12(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r12 = _srand48_r12Ptr
      .asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r12(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r12(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r12 = _seed48_r12Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r12(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r12(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r12 = _lcong48_r12Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int arc4random12() {
    return _arc4random12();
  }

  late final _arc4random12Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random12 = _arc4random12Ptr.asFunction<int Function()>();

  void arc4random_buf12(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf12(
      __buf,
      __size,
    );
  }

  late final _arc4random_buf12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('arc4random_buf');
  late final _arc4random_buf12 = _arc4random_buf12Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform12(
    int __upper_bound,
  ) {
    return _arc4random_uniform12(
      __upper_bound,
    );
  }

  late final _arc4random_uniform12Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
          'arc4random_uniform');
  late final _arc4random_uniform12 =
      _arc4random_uniform12Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc12(
    int __size,
  ) {
    return _malloc12(
      __size,
    );
  }

  late final _malloc12Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'malloc');
  late final _malloc12 =
      _malloc12Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc12(
    int __nmemb,
    int __size,
  ) {
    return _calloc12(
      __nmemb,
      __size,
    );
  }

  late final _calloc12Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'calloc');
  late final _calloc12 =
      _calloc12Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc12(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc12(
      __ptr,
      __size,
    );
  }

  late final _realloc12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('realloc');
  late final _realloc12 = _realloc12Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free12(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free12(
      __ptr,
    );
  }

  late final _free12Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free12 =
      _free12Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray24(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray24(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray24 = _reallocarray24Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray25(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray25(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray25 = _reallocarray25Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca12(
    int __size,
  ) {
    return _alloca12(
      __size,
    );
  }

  late final _alloca12Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'alloca');
  late final _alloca12 =
      _alloca12Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc12(
    int __size,
  ) {
    return _valloc12(
      __size,
    );
  }

  late final _valloc12Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'valloc');
  late final _valloc12 =
      _valloc12Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign12(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign12(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int,
              ffi.Int)>>('posix_memalign');
  late final _posix_memalign12 = _posix_memalign12Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc12(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc12(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc12Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'aligned_alloc');
  late final _aligned_alloc12 = _aligned_alloc12Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort12() {
    return _abort12();
  }

  late final _abort12Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort12 = _abort12Ptr.asFunction<void Function()>();

  int atexit12(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit12(
      __func,
    );
  }

  late final _atexit12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit12 = _atexit12Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit12(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit12(
      __func,
    );
  }

  late final _at_quick_exit12Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit12 = _at_quick_exit12Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit12(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit12(
      __func,
      __arg,
    );
  }

  late final _on_exit12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit12 = _on_exit12Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit12(
    int __status,
  ) {
    return _exit12(
      __status,
    );
  }

  late final _exit12Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit12 = _exit12Ptr.asFunction<void Function(int)>();

  void quick_exit12(
    int __status,
  ) {
    return _quick_exit12(
      __status,
    );
  }

  late final _quick_exit12Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit12 = _quick_exit12Ptr.asFunction<void Function(int)>();

  void _Exit12(
    int __status,
  ) {
    return __Exit12(
      __status,
    );
  }

  late final __Exit12Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit12 = __Exit12Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv12(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv12(
      __name,
    );
  }

  late final _getenv12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv12 = _getenv12Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv12(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv12(
      __string,
    );
  }

  late final _putenv12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv12 =
      _putenv12Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv12(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv12(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv12 = _setenv12Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv12(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv12(
      __name,
    );
  }

  late final _unsetenv12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv12 =
      _unsetenv12Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv12() {
    return _clearenv12();
  }

  late final _clearenv12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv12 = _clearenv12Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp12(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp12(
      __template,
    );
  }

  late final _mktemp12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp12 = _mktemp12Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp12(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp12(
      __template,
    );
  }

  late final _mkstemp12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp12 =
      _mkstemp12Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps12(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps12(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps12Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps12 =
      _mkstemps12Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp12(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp12(
      __template,
    );
  }

  late final _mkdtemp12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp12 = _mkdtemp12Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system12(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system12(
      __command,
    );
  }

  late final _system12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system12 =
      _system12Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath12(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath12(
      __name,
      __resolved,
    );
  }

  late final _realpath12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath12 = _realpath12Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch12(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch12(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              __compar_fn_t)>>('bsearch');
  late final _bsearch12 = _bsearch12Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort12(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort12(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              __compar_fn_t)>>('qsort');
  late final _qsort12 = _qsort12Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs12(
    int __x,
  ) {
    return _abs12(
      __x,
    );
  }

  late final _abs12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs12 = _abs12Ptr.asFunction<int Function(int)>();

  int labs12(
    int __x,
  ) {
    return _labs12(
      __x,
    );
  }

  late final _labs12Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs12 = _labs12Ptr.asFunction<int Function(int)>();

  int llabs12(
    int __x,
  ) {
    return _llabs12(
      __x,
    );
  }

  late final _llabs12Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs12 = _llabs12Ptr.asFunction<int Function(int)>();

  div_t div12(
    int __numer,
    int __denom,
  ) {
    return _div12(
      __numer,
      __denom,
    );
  }

  late final _div12Ptr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div12 = _div12Ptr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv12(
    int __numer,
    int __denom,
  ) {
    return _ldiv12(
      __numer,
      __denom,
    );
  }

  late final _ldiv12Ptr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv12 = _ldiv12Ptr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv12(
    int __numer,
    int __denom,
  ) {
    return _lldiv12(
      __numer,
      __denom,
    );
  }

  late final _lldiv12Ptr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv12 = _lldiv12Ptr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt12(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt12(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt12 = _ecvt12Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt12(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt12(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt12 = _fcvt12Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt12(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt12(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt12 = _gcvt12Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r12(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r12(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('ecvt_r');
  late final _ecvt_r12 = _ecvt_r12Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r12(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r12(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('fcvt_r');
  late final _fcvt_r12 = _fcvt_r12Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen12(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen12(
      __s,
      __n,
    );
  }

  late final _mblen12Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mblen');
  late final _mblen12 =
      _mblen12Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc12(
    ffi.Pointer<ffi.Int> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc12(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('mbtowc');
  late final _mbtowc12 = _mbtowc12Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb12(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb12(
      __s,
      __wchar,
    );
  }

  late final _wctomb12Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'wctomb');
  late final _wctomb12 =
      _wctomb12Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs12(
    ffi.Pointer<ffi.Int> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs12(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mbstowcs');
  late final _mbstowcs12 = _mbstowcs12Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs12(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Int> __pwcs,
    int __n,
  ) {
    return _wcstombs12(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('wcstombs');
  late final _wcstombs12 = _wcstombs12Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  int rpmatch12(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch12(
      __response,
    );
  }

  late final _rpmatch12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch12 =
      _rpmatch12Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt12(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt12(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt12 = _getsubopt12Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg12(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg12(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg12 =
      _getloadavg12Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Void> memcpy12(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy12(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpy12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memcpy');
  late final _memcpy12 = _memcpy12Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove12(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove12(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmove12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memmove');
  late final _memmove12 = _memmove12Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy12(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy12(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpy12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memccpy');
  late final _memccpy12 = _memccpy12Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset12(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset12(
      __s,
      __c,
      __n,
    );
  }

  late final _memset12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memset');
  late final _memset12 = _memset12Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp12(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp12(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmp12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('memcmp');
  late final _memcmp12 = _memcmp12Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq12(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq12(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeq12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__memcmpeq');
  late final ___memcmpeq12 = ___memcmpeq12Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr12(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr12(
      __s,
      __c,
      __n,
    );
  }

  late final _memchr12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memchr');
  late final _memchr12 = _memchr12Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy12(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy12(
      __dest,
      __src,
    );
  }

  late final _strcpy12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy12 = _strcpy12Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy12(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy12(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpy12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncpy');
  late final _strncpy12 = _strncpy12Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat12(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat12(
      __dest,
      __src,
    );
  }

  late final _strcat12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat12 = _strcat12Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat12(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat12(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncat12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncat');
  late final _strncat12 = _strncat12Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp12(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp12(
      __s1,
      __s2,
    );
  }

  late final _strcmp12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp12 = _strcmp12Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp12(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp12(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmp12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncmp');
  late final _strncmp12 = _strncmp12Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll12(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll12(
      __s1,
      __s2,
    );
  }

  late final _strcoll12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll12 = _strcoll12Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm12(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm12(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrm12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strxfrm');
  late final _strxfrm12 = _strxfrm12Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l12(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l12(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_l12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l12 = _strcoll_l12Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l12(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l12(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_l12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strxfrm_l');
  late final _strxfrm_l12 = _strxfrm_l12Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup12(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup12(
      __s,
    );
  }

  late final _strdup12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup12 = _strdup12Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup12(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup12(
      __string,
      __n,
    );
  }

  late final _strndup12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strndup');
  late final _strndup12 = _strndup12Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr12(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr12(
      __s,
      __c,
    );
  }

  late final _strchr12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr12 = _strchr12Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr12(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr12(
      __s,
      __c,
    );
  }

  late final _strrchr12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr12 = _strrchr12Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn12(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn12(
      __s,
      __reject,
    );
  }

  late final _strcspn12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn12 = _strcspn12Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn12(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn12(
      __s,
      __accept,
    );
  }

  late final _strspn12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn12 = _strspn12Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk12(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk12(
      __s,
      __accept,
    );
  }

  late final _strpbrk12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk12 = _strpbrk12Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr12(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr12(
      __haystack,
      __needle,
    );
  }

  late final _strstr12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr12 = _strstr12Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok12(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok12(
      __s,
      __delim,
    );
  }

  late final _strtok12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok12 = _strtok12Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r12(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r12(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_r12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r12 = ___strtok_r12Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r12(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r12(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_r12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r12 = _strtok_r12Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen12(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen12(
      __s,
    );
  }

  late final _strlen12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'strlen');
  late final _strlen12 =
      _strlen12Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen12(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen12(
      __string,
      __maxlen,
    );
  }

  late final _strnlen12Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'strnlen');
  late final _strnlen12 =
      _strnlen12Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror12(
    int __errnum,
  ) {
    return _strerror12(
      __errnum,
    );
  }

  late final _strerror12Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror12 =
      _strerror12Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r12(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r12(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_r12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('strerror_r');
  late final _strerror_r12 = _strerror_r12Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l12(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l12(
      __errnum,
      __l,
    );
  }

  late final _strerror_l12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l12 = _strerror_l12Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp12(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp12(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmp12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcmp');
  late final _bcmp12 = _bcmp12Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy12(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy12(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopy12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcopy');
  late final _bcopy12 = _bcopy12Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero12(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero12(
      __s,
      __n,
    );
  }

  late final _bzero12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('bzero');
  late final _bzero12 =
      _bzero12Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index12(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index12(
      __s,
      __c,
    );
  }

  late final _index12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index12 = _index12Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex12(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex12(
      __s,
      __c,
    );
  }

  late final _rindex12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex12 = _rindex12Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs12(
    int __i,
  ) {
    return _ffs12(
      __i,
    );
  }

  late final _ffs12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs12 = _ffs12Ptr.asFunction<int Function(int)>();

  int ffsl12(
    int __l,
  ) {
    return _ffsl12(
      __l,
    );
  }

  late final _ffsl12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl12 = _ffsl12Ptr.asFunction<int Function(int)>();

  int ffsll12(
    int __ll,
  ) {
    return _ffsll12(
      __ll,
    );
  }

  late final _ffsll12Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll12 = _ffsll12Ptr.asFunction<int Function(int)>();

  int strcasecmp12(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp12(
      __s1,
      __s2,
    );
  }

  late final _strcasecmp12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp12 = _strcasecmp12Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp12(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp12(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmp12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncasecmp');
  late final _strncasecmp12 = _strncasecmp12Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l12(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l12(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_l12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l12 = _strcasecmp_l12Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l12(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l12(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_l12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l12 = _strncasecmp_l12Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero12(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero12(
      __s,
      __n,
    );
  }

  late final _explicit_bzero12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('explicit_bzero');
  late final _explicit_bzero12 = _explicit_bzero12Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep12(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep12(
      __stringp,
      __delim,
    );
  }

  late final _strsep12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep12 = _strsep12Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal12(
    int __sig,
  ) {
    return _strsignal12(
      __sig,
    );
  }

  late final _strsignal12Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal12 =
      _strsignal12Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy12(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy12(
      __dest,
      __src,
    );
  }

  late final ___stpcpy12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy12 = ___stpcpy12Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy12(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy12(
      __dest,
      __src,
    );
  }

  late final _stpcpy12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy12 = _stpcpy12Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy12(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy12(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpy12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('__stpncpy');
  late final ___stpncpy12 = ___stpncpy12Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy12(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy12(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpy12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('stpncpy');
  late final _stpncpy12 = _stpncpy12Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<cstring> cstr_new2(
    ffi.Pointer<ffi.Char> init_str,
  ) {
    return _cstr_new2(
      init_str,
    );
  }

  late final _cstr_new2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cstring> Function(ffi.Pointer<ffi.Char>)>>('cstr_new');
  late final _cstr_new2 = _cstr_new2Ptr
      .asFunction<ffi.Pointer<cstring> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<cstring> cstr_new_sz2(
    int sz,
  ) {
    return _cstr_new_sz2(
      sz,
    );
  }

  late final _cstr_new_sz2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<cstring> Function(ffi.Int)>>(
          'cstr_new_sz');
  late final _cstr_new_sz2 =
      _cstr_new_sz2Ptr.asFunction<ffi.Pointer<cstring> Function(int)>();

  ffi.Pointer<cstring> cstr_new_buf2(
    ffi.Pointer<ffi.Void> buf,
    int sz,
  ) {
    return _cstr_new_buf2(
      buf,
      sz,
    );
  }

  late final _cstr_new_buf2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cstring> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('cstr_new_buf');
  late final _cstr_new_buf2 = _cstr_new_buf2Ptr
      .asFunction<ffi.Pointer<cstring> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<cstring> cstr_new_cstr2(
    ffi.Pointer<cstring> copy_str,
  ) {
    return _cstr_new_cstr2(
      copy_str,
    );
  }

  late final _cstr_new_cstr2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cstring> Function(
              ffi.Pointer<cstring>)>>('cstr_new_cstr');
  late final _cstr_new_cstr2 = _cstr_new_cstr2Ptr
      .asFunction<ffi.Pointer<cstring> Function(ffi.Pointer<cstring>)>();

  void cstr_free2(
    ffi.Pointer<cstring> s,
    int free_buf,
  ) {
    return _cstr_free2(
      s,
      free_buf,
    );
  }

  late final _cstr_free2Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_free');
  late final _cstr_free2 =
      _cstr_free2Ptr.asFunction<void Function(ffi.Pointer<cstring>, int)>();

  int cstr_equal2(
    ffi.Pointer<cstring> a,
    ffi.Pointer<cstring> b,
  ) {
    return _cstr_equal2(
      a,
      b,
    );
  }

  late final _cstr_equal2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_equal');
  late final _cstr_equal2 = _cstr_equal2Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_compare2(
    ffi.Pointer<cstring> a,
    ffi.Pointer<cstring> b,
  ) {
    return _cstr_compare2(
      a,
      b,
    );
  }

  late final _cstr_compare2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_compare');
  late final _cstr_compare2 = _cstr_compare2Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_resize2(
    ffi.Pointer<cstring> s,
    int sz,
  ) {
    return _cstr_resize2(
      s,
      sz,
    );
  }

  late final _cstr_resize2Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_resize');
  late final _cstr_resize2 =
      _cstr_resize2Ptr.asFunction<int Function(ffi.Pointer<cstring>, int)>();

  int cstr_erase2(
    ffi.Pointer<cstring> s,
    int pos,
    int len,
  ) {
    return _cstr_erase2(
      s,
      pos,
      len,
    );
  }

  late final _cstr_erase2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Int, ssize_t)>>('cstr_erase');
  late final _cstr_erase2 = _cstr_erase2Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, int, int)>();

  int cstr_append_buf2(
    ffi.Pointer<cstring> s,
    ffi.Pointer<ffi.Void> buf,
    int sz,
  ) {
    return _cstr_append_buf2(
      s,
      buf,
      sz,
    );
  }

  late final _cstr_append_buf2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('cstr_append_buf');
  late final _cstr_append_buf2 = _cstr_append_buf2Ptr.asFunction<
      int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Void>, int)>();

  int cstr_append_cstr2(
    ffi.Pointer<cstring> s,
    ffi.Pointer<cstring> append,
  ) {
    return _cstr_append_cstr2(
      s,
      append,
    );
  }

  late final _cstr_append_cstr2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_append_cstr');
  late final _cstr_append_cstr2 = _cstr_append_cstr2Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_append_c2(
    ffi.Pointer<cstring> s,
    int ch,
  ) {
    return _cstr_append_c2(
      s,
      ch,
    );
  }

  late final _cstr_append_c2Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Char)>>(
      'cstr_append_c');
  late final _cstr_append_c2 =
      _cstr_append_c2Ptr.asFunction<int Function(ffi.Pointer<cstring>, int)>();

  int cstr_alloc_minsize2(
    ffi.Pointer<cstring> s,
    int sz,
  ) {
    return _cstr_alloc_minsize2(
      s,
      sz,
    );
  }

  late final _cstr_alloc_minsize2Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_alloc_minsize');
  late final _cstr_alloc_minsize2 = _cstr_alloc_minsize2Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, int)>();

  void dogecoin_mem_set_mapper1(
    dogecoin_mem_mapper mapper,
  ) {
    return _dogecoin_mem_set_mapper1(
      mapper,
    );
  }

  late final _dogecoin_mem_set_mapper1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dogecoin_mem_mapper)>>(
          'dogecoin_mem_set_mapper');
  late final _dogecoin_mem_set_mapper1 = _dogecoin_mem_set_mapper1Ptr
      .asFunction<void Function(dogecoin_mem_mapper)>();

  void dogecoin_mem_set_mapper_default1() {
    return _dogecoin_mem_set_mapper_default1();
  }

  late final _dogecoin_mem_set_mapper_default1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'dogecoin_mem_set_mapper_default');
  late final _dogecoin_mem_set_mapper_default1 =
      _dogecoin_mem_set_mapper_default1Ptr.asFunction<void Function()>();

  ffi.Pointer<ffi.Void> dogecoin_malloc1(
    int size,
  ) {
    return _dogecoin_malloc1(
      size,
    );
  }

  late final _dogecoin_malloc1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'dogecoin_malloc');
  late final _dogecoin_malloc1 =
      _dogecoin_malloc1Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> dogecoin_calloc1(
    int count,
    int size,
  ) {
    return _dogecoin_calloc1(
      count,
      size,
    );
  }

  late final _dogecoin_calloc1Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'dogecoin_calloc');
  late final _dogecoin_calloc1 = _dogecoin_calloc1Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> dogecoin_realloc1(
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _dogecoin_realloc1(
      ptr,
      size,
    );
  }

  late final _dogecoin_realloc1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('dogecoin_realloc');
  late final _dogecoin_realloc1 = _dogecoin_realloc1Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void dogecoin_free1(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _dogecoin_free1(
      ptr,
    );
  }

  late final _dogecoin_free1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'dogecoin_free');
  late final _dogecoin_free1 =
      _dogecoin_free1Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> memcpy_safe1(
    ffi.Pointer<ffi.Void> destination,
    ffi.Pointer<ffi.Void> source,
    int count,
  ) {
    return _memcpy_safe1(
      destination,
      source,
      count,
    );
  }

  late final _memcpy_safe1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.UnsignedInt)>>('memcpy_safe');
  late final _memcpy_safe1 = _memcpy_safe1Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void sha256_init1(
    ffi.Pointer<sha256_context> arg0,
  ) {
    return _sha256_init1(
      arg0,
    );
  }

  late final _sha256_init1Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sha256_context>)>>(
      'sha256_init');
  late final _sha256_init1 =
      _sha256_init1Ptr.asFunction<void Function(ffi.Pointer<sha256_context>)>();

  void sha256_write1(
    ffi.Pointer<sha256_context> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
    int size_t,
  ) {
    return _sha256_write1(
      arg0,
      arg1,
      size_t,
    );
  }

  late final _sha256_write1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sha256_context>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('sha256_write');
  late final _sha256_write1 = _sha256_write1Ptr.asFunction<
      void Function(
          ffi.Pointer<sha256_context>, ffi.Pointer<ffi.Uint8>, int)>();

  void sha256_finalize1(
    ffi.Pointer<sha256_context> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
  ) {
    return _sha256_finalize1(
      arg0,
      arg1,
    );
  }

  late final _sha256_finalize1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sha256_context>,
              ffi.Pointer<ffi.Uint8>)>>('sha256_finalize');
  late final _sha256_finalize1 = _sha256_finalize1Ptr.asFunction<
      void Function(ffi.Pointer<sha256_context>, ffi.Pointer<ffi.Uint8>)>();

  void sha256_raw1(
    ffi.Pointer<ffi.Uint8> arg0,
    int size_t,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return _sha256_raw1(
      arg0,
      size_t,
      arg2,
    );
  }

  late final _sha256_raw1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<ffi.Uint8>)>>('sha256_raw');
  late final _sha256_raw1 = _sha256_raw1Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  void sha512_init1(
    ffi.Pointer<sha512_context> arg0,
  ) {
    return _sha512_init1(
      arg0,
    );
  }

  late final _sha512_init1Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sha512_context>)>>(
      'sha512_init');
  late final _sha512_init1 =
      _sha512_init1Ptr.asFunction<void Function(ffi.Pointer<sha512_context>)>();

  void sha512_write1(
    ffi.Pointer<sha512_context> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
    int size_t,
  ) {
    return _sha512_write1(
      arg0,
      arg1,
      size_t,
    );
  }

  late final _sha512_write1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sha512_context>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('sha512_write');
  late final _sha512_write1 = _sha512_write1Ptr.asFunction<
      void Function(
          ffi.Pointer<sha512_context>, ffi.Pointer<ffi.Uint8>, int)>();

  void sha512_finalize1(
    ffi.Pointer<sha512_context> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
  ) {
    return _sha512_finalize1(
      arg0,
      arg1,
    );
  }

  late final _sha512_finalize1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sha512_context>,
              ffi.Pointer<ffi.Uint8>)>>('sha512_finalize');
  late final _sha512_finalize1 = _sha512_finalize1Ptr.asFunction<
      void Function(ffi.Pointer<sha512_context>, ffi.Pointer<ffi.Uint8>)>();

  void sha512_raw1(
    ffi.Pointer<ffi.Uint8> arg0,
    int size_t,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return _sha512_raw1(
      arg0,
      size_t,
      arg2,
    );
  }

  late final _sha512_raw1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<ffi.Uint8>)>>('sha512_raw');
  late final _sha512_raw1 = _sha512_raw1Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  void hmac_sha2561(
    ffi.Pointer<ffi.Uint8> key,
    int keylen,
    ffi.Pointer<ffi.Uint8> msg,
    int msglen,
    ffi.Pointer<ffi.Uint8> hmac,
  ) {
    return _hmac_sha2561(
      key,
      keylen,
      msg,
      msglen,
      hmac,
    );
  }

  late final _hmac_sha2561Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint8>)>>('hmac_sha256');
  late final _hmac_sha2561 = _hmac_sha2561Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>)>();

  void hmac_sha5121(
    ffi.Pointer<ffi.Uint8> key,
    int keylen,
    ffi.Pointer<ffi.Uint8> msg,
    int msglen,
    ffi.Pointer<ffi.Uint8> hmac,
  ) {
    return _hmac_sha5121(
      key,
      keylen,
      msg,
      msglen,
      hmac,
    );
  }

  late final _hmac_sha5121Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint8>)>>('hmac_sha512');
  late final _hmac_sha5121 = _hmac_sha5121Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<vector> vector_new1(
    int res,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        free_f,
  ) {
    return _vector_new1(
      res,
      free_f,
    );
  }

  late final _vector_new1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<vector> Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>)>>)>>('vector_new');
  late final _vector_new1 = _vector_new1Ptr.asFunction<
      ffi.Pointer<vector> Function(
          int,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  void vector_free1(
    ffi.Pointer<vector> vec,
    int free_array,
  ) {
    return _vector_free1(
      vec,
      free_array,
    );
  }

  late final _vector_free1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<vector>, dogecoin_bool)>>('vector_free');
  late final _vector_free1 =
      _vector_free1Ptr.asFunction<void Function(ffi.Pointer<vector>, int)>();

  int vector_add1(
    ffi.Pointer<vector> vec,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _vector_add1(
      vec,
      data,
    );
  }

  late final _vector_add1Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>>('vector_add');
  late final _vector_add1 = _vector_add1Ptr
      .asFunction<int Function(ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>();

  int vector_remove1(
    ffi.Pointer<vector> vec,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _vector_remove1(
      vec,
      data,
    );
  }

  late final _vector_remove1Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>>('vector_remove');
  late final _vector_remove1 = _vector_remove1Ptr
      .asFunction<int Function(ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>();

  void vector_remove_idx1(
    ffi.Pointer<vector> vec,
    int idx,
  ) {
    return _vector_remove_idx1(
      vec,
      idx,
    );
  }

  late final _vector_remove_idx1Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<vector>, ffi.Int)>>(
      'vector_remove_idx');
  late final _vector_remove_idx1 = _vector_remove_idx1Ptr
      .asFunction<void Function(ffi.Pointer<vector>, int)>();

  void vector_remove_range1(
    ffi.Pointer<vector> vec,
    int idx,
    int len,
  ) {
    return _vector_remove_range1(
      vec,
      idx,
      len,
    );
  }

  late final _vector_remove_range1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<vector>, ffi.Int, ffi.Int)>>('vector_remove_range');
  late final _vector_remove_range1 = _vector_remove_range1Ptr
      .asFunction<void Function(ffi.Pointer<vector>, int, int)>();

  int vector_resize1(
    ffi.Pointer<vector> vec,
    int newsz,
  ) {
    return _vector_resize1(
      vec,
      newsz,
    );
  }

  late final _vector_resize1Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<vector>, ffi.Int)>>('vector_resize');
  late final _vector_resize1 =
      _vector_resize1Ptr.asFunction<int Function(ffi.Pointer<vector>, int)>();

  int vector_find1(
    ffi.Pointer<vector> vec,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _vector_find1(
      vec,
      data,
    );
  }

  late final _vector_find1Ptr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>>('vector_find');
  late final _vector_find1 = _vector_find1Ptr
      .asFunction<int Function(ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>();

  int remove13(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove13(
      __filename,
    );
  }

  late final _remove13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove13 =
      _remove13Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename13(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename13(
      __old,
      __new,
    );
  }

  late final _rename13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename13 = _rename13Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat13(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat13(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameat13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat13 = _renameat13Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose13(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose13(
      __stream,
    );
  }

  late final _fclose13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose13 =
      _fclose13Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile13() {
    return _tmpfile13();
  }

  late final _tmpfile13Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile13 =
      _tmpfile13Ptr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam13(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam13(
      arg0,
    );
  }

  late final _tmpnam13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam13 = _tmpnam13Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r13(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r13(
      __s,
    );
  }

  late final _tmpnam_r13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r13 = _tmpnam_r13Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam13(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam13(
      __dir,
      __pfx,
    );
  }

  late final _tempnam13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam13 = _tempnam13Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush13(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush13(
      __stream,
    );
  }

  late final _fflush13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush13 =
      _fflush13Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked13(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked13(
      __stream,
    );
  }

  late final _fflush_unlocked13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked13 =
      _fflush_unlocked13Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen13(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen13(
      __filename,
      __modes,
    );
  }

  late final _fopen13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen13 = _fopen13Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen13(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen13(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopen13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen13 = _freopen13Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen13(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen13(
      __fd,
      __modes,
    );
  }

  late final _fdopen13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen13 = _fdopen13Ptr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen13(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen13(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopen13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen13 = _fmemopen13Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream13(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Int> __sizeloc,
  ) {
    return _open_memstream13(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstream13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('open_memstream');
  late final _open_memstream13 = _open_memstream13Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void setbuf13(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf13(
      __stream,
      __buf,
    );
  }

  late final _setbuf13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf13 = _setbuf13Ptr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf13(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf13(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbuf13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('setvbuf');
  late final _setvbuf13 = _setvbuf13Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer13(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer13(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbuffer13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer13 = _setbuffer13Ptr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf13(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf13(
      __stream,
    );
  }

  late final _setlinebuf13Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf13 =
      _setlinebuf13Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf13(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf13(
      __stream,
      __format,
    );
  }

  late final _fprintf13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf13 = _fprintf13Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf13(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf13(
      __format,
    );
  }

  late final _printf13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf13 =
      _printf13Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf13(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf13(
      __s,
      __format,
    );
  }

  late final _sprintf13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf13 = _sprintf13Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf13(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfprintf13(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintf13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfprintf');
  late final _vfprintf13 = _vfprintf13Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vprintf13(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vprintf13(
      __format,
      __arg,
    );
  }

  late final _vprintf13Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vprintf');
  late final _vprintf13 =
      _vprintf13Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsprintf13(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsprintf13(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintf13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsprintf');
  late final _vsprintf13 = _vsprintf13Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int snprintf13(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf13(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintf13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf13 = _snprintf13Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf13(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsnprintf13(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintf13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('vsnprintf');
  late final _vsnprintf13 = _vsnprintf13Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int vdprintf13(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    int __arg,
  ) {
    return _vdprintf13(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintf13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('vdprintf');
  late final _vdprintf13 = _vdprintf13Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int dprintf13(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf13(
      __fd,
      __fmt,
    );
  }

  late final _dprintf13Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf13 =
      _dprintf13Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf26(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf26(
      __stream,
      __format,
    );
  }

  late final _fscanf26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf26 = _fscanf26Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf26(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf26(
      __format,
    );
  }

  late final _scanf26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf26 =
      _scanf26Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf26(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf26(
      __s,
      __format,
    );
  }

  late final _sscanf26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf26 = _sscanf26Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fscanf27(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf27(
      __stream,
      __format,
    );
  }

  late final _fscanf27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf27 = _fscanf27Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf27(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf27(
      __format,
    );
  }

  late final _scanf27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf27 =
      _scanf27Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf27(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf27(
      __s,
      __format,
    );
  }

  late final _sscanf27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf27 = _sscanf27Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf26(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf26(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf26 = _vfscanf26Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf26(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf26(
      __format,
      __arg,
    );
  }

  late final _vscanf26Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf26 =
      _vscanf26Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf26(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf26(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf26 = _vsscanf26Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int vfscanf27(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf27(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf27 = _vfscanf27Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf27(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf27(
      __format,
      __arg,
    );
  }

  late final _vscanf27Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf27 =
      _vscanf27Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf27(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf27(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf27 = _vsscanf27Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fgetc13(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc13(
      __stream,
    );
  }

  late final _fgetc13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc13 =
      _fgetc13Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc13(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc13(
      __stream,
    );
  }

  late final _getc13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc13 = _getc13Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar13() {
    return _getchar13();
  }

  late final _getchar13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar13 = _getchar13Ptr.asFunction<int Function()>();

  int getc_unlocked13(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked13(
      __stream,
    );
  }

  late final _getc_unlocked13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked13 =
      _getc_unlocked13Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked13() {
    return _getchar_unlocked13();
  }

  late final _getchar_unlocked13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked13 =
      _getchar_unlocked13Ptr.asFunction<int Function()>();

  int fgetc_unlocked13(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked13(
      __stream,
    );
  }

  late final _fgetc_unlocked13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked13 =
      _fgetc_unlocked13Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc13(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc13(
      __c,
      __stream,
    );
  }

  late final _fputc13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc13 =
      _fputc13Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc13(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc13(
      __c,
      __stream,
    );
  }

  late final _putc13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc13 =
      _putc13Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar13(
    int __c,
  ) {
    return _putchar13(
      __c,
    );
  }

  late final _putchar13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar13 = _putchar13Ptr.asFunction<int Function(int)>();

  int fputc_unlocked13(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked13(
      __c,
      __stream,
    );
  }

  late final _fputc_unlocked13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked13 =
      _fputc_unlocked13Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked13(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked13(
      __c,
      __stream,
    );
  }

  late final _putc_unlocked13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked13 =
      _putc_unlocked13Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked13(
    int __c,
  ) {
    return _putchar_unlocked13(
      __c,
    );
  }

  late final _putchar_unlocked13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked13 =
      _putchar_unlocked13Ptr.asFunction<int Function(int)>();

  int getw13(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw13(
      __stream,
    );
  }

  late final _getw13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw13 = _getw13Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw13(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw13(
      __w,
      __stream,
    );
  }

  late final _putw13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw13 =
      _putw13Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets13(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets13(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgets13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets13 = _fgets13Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim13(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim13(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelim13Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim13 = ___getdelim13Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getdelim13(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim13(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelim13Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim13 = _getdelim13Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getline13(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline13(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getline13Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<FILE>)>>('getline');
  late final _getline13 = _getline13Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<FILE>)>();

  int fputs13(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs13(
      __s,
      __stream,
    );
  }

  late final _fputs13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs13 = _fputs13Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts13(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts13(
      __s,
    );
  }

  late final _puts13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts13 =
      _puts13Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc13(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc13(
      __c,
      __stream,
    );
  }

  late final _ungetc13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc13 =
      _ungetc13Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread13(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread13(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread13 = _fread13Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite13(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite13(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwrite13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite13 = _fwrite13Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked13(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked13(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlocked13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked13 = _fread_unlocked13Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked13(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked13(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlocked13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked13 = _fwrite_unlocked13Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek13(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek13(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseek13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek13 =
      _fseek13Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell13(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell13(
      __stream,
    );
  }

  late final _ftell13Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell13 =
      _ftell13Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind13(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind13(
      __stream,
    );
  }

  late final _rewind13Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind13 =
      _rewind13Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko13(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko13(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseeko13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko13 =
      _fseeko13Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello13(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello13(
      __stream,
    );
  }

  late final _ftello13Ptr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello13 =
      _ftello13Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos13(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos13(
      __stream,
      __pos,
    );
  }

  late final _fgetpos13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos13 = _fgetpos13Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos13(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos13(
      __stream,
      __pos,
    );
  }

  late final _fsetpos13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos13 = _fsetpos13Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr13(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr13(
      __stream,
    );
  }

  late final _clearerr13Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr13 =
      _clearerr13Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof13(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof13(
      __stream,
    );
  }

  late final _feof13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof13 = _feof13Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror13(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror13(
      __stream,
    );
  }

  late final _ferror13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror13 =
      _ferror13Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked13(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked13(
      __stream,
    );
  }

  late final _clearerr_unlocked13Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked13 =
      _clearerr_unlocked13Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked13(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked13(
      __stream,
    );
  }

  late final _feof_unlocked13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked13 =
      _feof_unlocked13Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked13(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked13(
      __stream,
    );
  }

  late final _ferror_unlocked13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked13 =
      _ferror_unlocked13Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror13(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror13(
      __s,
    );
  }

  late final _perror13Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror13 =
      _perror13Ptr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno13(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno13(
      __stream,
    );
  }

  late final _fileno13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno13 =
      _fileno13Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked13(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked13(
      __stream,
    );
  }

  late final _fileno_unlocked13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked13 =
      _fileno_unlocked13Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose13(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose13(
      __stream,
    );
  }

  late final _pclose13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose13 =
      _pclose13Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen13(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen13(
      __command,
      __modes,
    );
  }

  late final _popen13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen13 = _popen13Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid13(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid13(
      __s,
    );
  }

  late final _ctermid13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid13 = _ctermid13Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile13(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile13(
      __stream,
    );
  }

  late final _flockfile13Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile13 =
      _flockfile13Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile13(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile13(
      __stream,
    );
  }

  late final _ftrylockfile13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile13 =
      _ftrylockfile13Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile13(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile13(
      __stream,
    );
  }

  late final _funlockfile13Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile13 =
      _funlockfile13Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow13(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow13(
      arg0,
    );
  }

  late final ___uflow13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow13 =
      ___uflow13Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow13(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow13(
      arg0,
      arg1,
    );
  }

  late final ___overflow13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow13 =
      ___overflow13Ptr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __ctype_get_mb_cur_max13() {
    return ___ctype_get_mb_cur_max13();
  }

  late final ___ctype_get_mb_cur_max13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max13 =
      ___ctype_get_mb_cur_max13Ptr.asFunction<int Function()>();

  double atof13(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof13(
      __nptr,
    );
  }

  late final _atof13Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof13 =
      _atof13Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi13(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi13(
      __nptr,
    );
  }

  late final _atoi13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi13 =
      _atoi13Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol13(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol13(
      __nptr,
    );
  }

  late final _atol13Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol13 =
      _atol13Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll13(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll13(
      __nptr,
    );
  }

  late final _atoll13Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll13 =
      _atoll13Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod13(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod13(
      __nptr,
      __endptr,
    );
  }

  late final _strtod13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod13 = _strtod13Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof13(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof13(
      __nptr,
      __endptr,
    );
  }

  late final _strtof13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof13 = _strtof13Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol13(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol13(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol13 = _strtol13Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul13(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul13(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul13 = _strtoul13Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq13(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq13(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq13 = _strtoq13Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq13(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq13(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq13 = _strtouq13Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll13(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll13(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll13 = _strtoll13Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull13(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull13(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull13 = _strtoull13Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a13(
    int __n,
  ) {
    return _l64a13(
      __n,
    );
  }

  late final _l64a13Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a13 =
      _l64a13Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l13(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l13(
      __s,
    );
  }

  late final _a64l13Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l13 =
      _a64l13Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select13(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select13(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select13 = _select13Ptr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect13(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect13(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect13 = _pselect13Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random13() {
    return _random13();
  }

  late final _random13Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random13 = _random13Ptr.asFunction<int Function()>();

  void srandom13(
    int __seed,
  ) {
    return _srandom13(
      __seed,
    );
  }

  late final _srandom13Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom13 = _srandom13Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate13(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate13(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int)>>('initstate');
  late final _initstate13 = _initstate13Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate13(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate13(
      __statebuf,
    );
  }

  late final _setstate13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate13 = _setstate13Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r13(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r13(
      __buf,
      __result,
    );
  }

  late final _random_r13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r13 = _random_r13Ptr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r13(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r13(
      __seed,
      __buf,
    );
  }

  late final _srandom_r13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r13 =
      _srandom_r13Ptr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r13(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r13(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r13 = _initstate_r13Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r13(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r13(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r13 = _setstate_r13Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand13() {
    return _rand13();
  }

  late final _rand13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand13 = _rand13Ptr.asFunction<int Function()>();

  void srand13(
    int __seed,
  ) {
    return _srand13(
      __seed,
    );
  }

  late final _srand13Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand13 = _srand13Ptr.asFunction<void Function(int)>();

  int rand_r13(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r13(
      __seed,
    );
  }

  late final _rand_r13Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r13 =
      _rand_r13Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand4813() {
    return _drand4813();
  }

  late final _drand4813Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand4813 = _drand4813Ptr.asFunction<double Function()>();

  double erand4813(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand4813(
      __xsubi,
    );
  }

  late final _erand4813Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand4813 = _erand4813Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand4813() {
    return _lrand4813();
  }

  late final _lrand4813Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand4813 = _lrand4813Ptr.asFunction<int Function()>();

  int nrand4813(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand4813(
      __xsubi,
    );
  }

  late final _nrand4813Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand4813 =
      _nrand4813Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand4813() {
    return _mrand4813();
  }

  late final _mrand4813Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand4813 = _mrand4813Ptr.asFunction<int Function()>();

  int jrand4813(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand4813(
      __xsubi,
    );
  }

  late final _jrand4813Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand4813 =
      _jrand4813Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand4813(
    int __seedval,
  ) {
    return _srand4813(
      __seedval,
    );
  }

  late final _srand4813Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand4813 = _srand4813Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed4813(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed4813(
      __seed16v,
    );
  }

  late final _seed4813Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed4813 = _seed4813Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong4813(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong4813(
      __param,
    );
  }

  late final _lcong4813Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong4813 =
      _lcong4813Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r13(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r13(
      __buffer,
      __result,
    );
  }

  late final _drand48_r13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r13 = _drand48_r13Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r13(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r13(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r13 = _erand48_r13Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r13(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r13(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r13 = _lrand48_r13Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r13(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r13(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r13 = _nrand48_r13Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r13(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r13(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r13 = _mrand48_r13Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r13(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r13(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r13 = _jrand48_r13Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r13(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r13(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r13 = _srand48_r13Ptr
      .asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r13(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r13(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r13 = _seed48_r13Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r13(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r13(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r13 = _lcong48_r13Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int arc4random13() {
    return _arc4random13();
  }

  late final _arc4random13Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random13 = _arc4random13Ptr.asFunction<int Function()>();

  void arc4random_buf13(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf13(
      __buf,
      __size,
    );
  }

  late final _arc4random_buf13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('arc4random_buf');
  late final _arc4random_buf13 = _arc4random_buf13Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform13(
    int __upper_bound,
  ) {
    return _arc4random_uniform13(
      __upper_bound,
    );
  }

  late final _arc4random_uniform13Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
          'arc4random_uniform');
  late final _arc4random_uniform13 =
      _arc4random_uniform13Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc13(
    int __size,
  ) {
    return _malloc13(
      __size,
    );
  }

  late final _malloc13Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'malloc');
  late final _malloc13 =
      _malloc13Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc13(
    int __nmemb,
    int __size,
  ) {
    return _calloc13(
      __nmemb,
      __size,
    );
  }

  late final _calloc13Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'calloc');
  late final _calloc13 =
      _calloc13Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc13(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc13(
      __ptr,
      __size,
    );
  }

  late final _realloc13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('realloc');
  late final _realloc13 = _realloc13Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free13(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free13(
      __ptr,
    );
  }

  late final _free13Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free13 =
      _free13Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray26(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray26(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray26 = _reallocarray26Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray27(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray27(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray27 = _reallocarray27Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca13(
    int __size,
  ) {
    return _alloca13(
      __size,
    );
  }

  late final _alloca13Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'alloca');
  late final _alloca13 =
      _alloca13Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc13(
    int __size,
  ) {
    return _valloc13(
      __size,
    );
  }

  late final _valloc13Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'valloc');
  late final _valloc13 =
      _valloc13Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign13(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign13(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int,
              ffi.Int)>>('posix_memalign');
  late final _posix_memalign13 = _posix_memalign13Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc13(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc13(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc13Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'aligned_alloc');
  late final _aligned_alloc13 = _aligned_alloc13Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort13() {
    return _abort13();
  }

  late final _abort13Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort13 = _abort13Ptr.asFunction<void Function()>();

  int atexit13(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit13(
      __func,
    );
  }

  late final _atexit13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit13 = _atexit13Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit13(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit13(
      __func,
    );
  }

  late final _at_quick_exit13Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit13 = _at_quick_exit13Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit13(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit13(
      __func,
      __arg,
    );
  }

  late final _on_exit13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit13 = _on_exit13Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit13(
    int __status,
  ) {
    return _exit13(
      __status,
    );
  }

  late final _exit13Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit13 = _exit13Ptr.asFunction<void Function(int)>();

  void quick_exit13(
    int __status,
  ) {
    return _quick_exit13(
      __status,
    );
  }

  late final _quick_exit13Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit13 = _quick_exit13Ptr.asFunction<void Function(int)>();

  void _Exit13(
    int __status,
  ) {
    return __Exit13(
      __status,
    );
  }

  late final __Exit13Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit13 = __Exit13Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv13(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv13(
      __name,
    );
  }

  late final _getenv13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv13 = _getenv13Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv13(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv13(
      __string,
    );
  }

  late final _putenv13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv13 =
      _putenv13Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv13(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv13(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv13 = _setenv13Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv13(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv13(
      __name,
    );
  }

  late final _unsetenv13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv13 =
      _unsetenv13Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv13() {
    return _clearenv13();
  }

  late final _clearenv13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv13 = _clearenv13Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp13(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp13(
      __template,
    );
  }

  late final _mktemp13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp13 = _mktemp13Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp13(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp13(
      __template,
    );
  }

  late final _mkstemp13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp13 =
      _mkstemp13Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps13(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps13(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps13Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps13 =
      _mkstemps13Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp13(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp13(
      __template,
    );
  }

  late final _mkdtemp13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp13 = _mkdtemp13Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system13(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system13(
      __command,
    );
  }

  late final _system13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system13 =
      _system13Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath13(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath13(
      __name,
      __resolved,
    );
  }

  late final _realpath13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath13 = _realpath13Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch13(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch13(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              __compar_fn_t)>>('bsearch');
  late final _bsearch13 = _bsearch13Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort13(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort13(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              __compar_fn_t)>>('qsort');
  late final _qsort13 = _qsort13Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs13(
    int __x,
  ) {
    return _abs13(
      __x,
    );
  }

  late final _abs13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs13 = _abs13Ptr.asFunction<int Function(int)>();

  int labs13(
    int __x,
  ) {
    return _labs13(
      __x,
    );
  }

  late final _labs13Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs13 = _labs13Ptr.asFunction<int Function(int)>();

  int llabs13(
    int __x,
  ) {
    return _llabs13(
      __x,
    );
  }

  late final _llabs13Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs13 = _llabs13Ptr.asFunction<int Function(int)>();

  div_t div13(
    int __numer,
    int __denom,
  ) {
    return _div13(
      __numer,
      __denom,
    );
  }

  late final _div13Ptr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div13 = _div13Ptr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv13(
    int __numer,
    int __denom,
  ) {
    return _ldiv13(
      __numer,
      __denom,
    );
  }

  late final _ldiv13Ptr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv13 = _ldiv13Ptr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv13(
    int __numer,
    int __denom,
  ) {
    return _lldiv13(
      __numer,
      __denom,
    );
  }

  late final _lldiv13Ptr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv13 = _lldiv13Ptr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt13(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt13(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt13 = _ecvt13Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt13(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt13(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt13 = _fcvt13Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt13(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt13(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt13 = _gcvt13Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r13(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r13(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('ecvt_r');
  late final _ecvt_r13 = _ecvt_r13Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r13(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r13(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('fcvt_r');
  late final _fcvt_r13 = _fcvt_r13Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen13(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen13(
      __s,
      __n,
    );
  }

  late final _mblen13Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mblen');
  late final _mblen13 =
      _mblen13Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc13(
    ffi.Pointer<ffi.Int> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc13(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('mbtowc');
  late final _mbtowc13 = _mbtowc13Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb13(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb13(
      __s,
      __wchar,
    );
  }

  late final _wctomb13Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'wctomb');
  late final _wctomb13 =
      _wctomb13Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs13(
    ffi.Pointer<ffi.Int> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs13(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mbstowcs');
  late final _mbstowcs13 = _mbstowcs13Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs13(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Int> __pwcs,
    int __n,
  ) {
    return _wcstombs13(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('wcstombs');
  late final _wcstombs13 = _wcstombs13Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  int rpmatch13(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch13(
      __response,
    );
  }

  late final _rpmatch13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch13 =
      _rpmatch13Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt13(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt13(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt13 = _getsubopt13Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg13(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg13(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg13 =
      _getloadavg13Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Void> memcpy13(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy13(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpy13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memcpy');
  late final _memcpy13 = _memcpy13Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove13(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove13(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmove13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memmove');
  late final _memmove13 = _memmove13Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy13(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy13(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpy13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memccpy');
  late final _memccpy13 = _memccpy13Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset13(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset13(
      __s,
      __c,
      __n,
    );
  }

  late final _memset13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memset');
  late final _memset13 = _memset13Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp13(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp13(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmp13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('memcmp');
  late final _memcmp13 = _memcmp13Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq13(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq13(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeq13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__memcmpeq');
  late final ___memcmpeq13 = ___memcmpeq13Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr13(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr13(
      __s,
      __c,
      __n,
    );
  }

  late final _memchr13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memchr');
  late final _memchr13 = _memchr13Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy13(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy13(
      __dest,
      __src,
    );
  }

  late final _strcpy13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy13 = _strcpy13Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy13(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy13(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpy13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncpy');
  late final _strncpy13 = _strncpy13Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat13(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat13(
      __dest,
      __src,
    );
  }

  late final _strcat13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat13 = _strcat13Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat13(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat13(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncat13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncat');
  late final _strncat13 = _strncat13Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp13(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp13(
      __s1,
      __s2,
    );
  }

  late final _strcmp13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp13 = _strcmp13Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp13(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp13(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmp13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncmp');
  late final _strncmp13 = _strncmp13Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll13(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll13(
      __s1,
      __s2,
    );
  }

  late final _strcoll13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll13 = _strcoll13Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm13(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm13(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrm13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strxfrm');
  late final _strxfrm13 = _strxfrm13Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l13(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l13(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_l13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l13 = _strcoll_l13Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l13(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l13(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_l13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strxfrm_l');
  late final _strxfrm_l13 = _strxfrm_l13Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup13(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup13(
      __s,
    );
  }

  late final _strdup13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup13 = _strdup13Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup13(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup13(
      __string,
      __n,
    );
  }

  late final _strndup13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strndup');
  late final _strndup13 = _strndup13Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr13(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr13(
      __s,
      __c,
    );
  }

  late final _strchr13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr13 = _strchr13Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr13(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr13(
      __s,
      __c,
    );
  }

  late final _strrchr13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr13 = _strrchr13Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn13(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn13(
      __s,
      __reject,
    );
  }

  late final _strcspn13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn13 = _strcspn13Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn13(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn13(
      __s,
      __accept,
    );
  }

  late final _strspn13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn13 = _strspn13Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk13(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk13(
      __s,
      __accept,
    );
  }

  late final _strpbrk13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk13 = _strpbrk13Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr13(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr13(
      __haystack,
      __needle,
    );
  }

  late final _strstr13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr13 = _strstr13Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok13(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok13(
      __s,
      __delim,
    );
  }

  late final _strtok13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok13 = _strtok13Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r13(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r13(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_r13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r13 = ___strtok_r13Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r13(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r13(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_r13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r13 = _strtok_r13Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen13(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen13(
      __s,
    );
  }

  late final _strlen13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'strlen');
  late final _strlen13 =
      _strlen13Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen13(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen13(
      __string,
      __maxlen,
    );
  }

  late final _strnlen13Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'strnlen');
  late final _strnlen13 =
      _strnlen13Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror13(
    int __errnum,
  ) {
    return _strerror13(
      __errnum,
    );
  }

  late final _strerror13Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror13 =
      _strerror13Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r13(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r13(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_r13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('strerror_r');
  late final _strerror_r13 = _strerror_r13Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l13(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l13(
      __errnum,
      __l,
    );
  }

  late final _strerror_l13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l13 = _strerror_l13Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp13(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp13(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmp13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcmp');
  late final _bcmp13 = _bcmp13Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy13(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy13(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopy13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcopy');
  late final _bcopy13 = _bcopy13Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero13(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero13(
      __s,
      __n,
    );
  }

  late final _bzero13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('bzero');
  late final _bzero13 =
      _bzero13Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index13(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index13(
      __s,
      __c,
    );
  }

  late final _index13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index13 = _index13Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex13(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex13(
      __s,
      __c,
    );
  }

  late final _rindex13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex13 = _rindex13Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs13(
    int __i,
  ) {
    return _ffs13(
      __i,
    );
  }

  late final _ffs13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs13 = _ffs13Ptr.asFunction<int Function(int)>();

  int ffsl13(
    int __l,
  ) {
    return _ffsl13(
      __l,
    );
  }

  late final _ffsl13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl13 = _ffsl13Ptr.asFunction<int Function(int)>();

  int ffsll13(
    int __ll,
  ) {
    return _ffsll13(
      __ll,
    );
  }

  late final _ffsll13Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll13 = _ffsll13Ptr.asFunction<int Function(int)>();

  int strcasecmp13(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp13(
      __s1,
      __s2,
    );
  }

  late final _strcasecmp13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp13 = _strcasecmp13Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp13(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp13(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmp13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncasecmp');
  late final _strncasecmp13 = _strncasecmp13Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l13(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l13(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_l13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l13 = _strcasecmp_l13Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l13(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l13(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_l13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l13 = _strncasecmp_l13Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero13(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero13(
      __s,
      __n,
    );
  }

  late final _explicit_bzero13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('explicit_bzero');
  late final _explicit_bzero13 = _explicit_bzero13Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep13(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep13(
      __stringp,
      __delim,
    );
  }

  late final _strsep13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep13 = _strsep13Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal13(
    int __sig,
  ) {
    return _strsignal13(
      __sig,
    );
  }

  late final _strsignal13Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal13 =
      _strsignal13Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy13(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy13(
      __dest,
      __src,
    );
  }

  late final ___stpcpy13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy13 = ___stpcpy13Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy13(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy13(
      __dest,
      __src,
    );
  }

  late final _stpcpy13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy13 = _stpcpy13Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy13(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy13(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpy13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('__stpncpy');
  late final ___stpncpy13 = ___stpncpy13Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy13(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy13(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpy13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('stpncpy');
  late final _stpncpy13 = _stpncpy13Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<dogecoin_chainparams> chain_from_b58_prefix4(
    ffi.Pointer<ffi.Char> address,
  ) {
    return _chain_from_b58_prefix4(
      address,
    );
  }

  late final _chain_from_b58_prefix4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<dogecoin_chainparams> Function(
              ffi.Pointer<ffi.Char>)>>('chain_from_b58_prefix');
  late final _chain_from_b58_prefix4 = _chain_from_b58_prefix4Ptr.asFunction<
      ffi.Pointer<dogecoin_chainparams> Function(ffi.Pointer<ffi.Char>)>();

  int chain_from_b58_prefix_bool4(
    ffi.Pointer<ffi.Char> address,
  ) {
    return _chain_from_b58_prefix_bool4(
      address,
    );
  }

  late final _chain_from_b58_prefix_bool4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'chain_from_b58_prefix_bool');
  late final _chain_from_b58_prefix_bool4 = _chain_from_b58_prefix_bool4Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void dogecoin_privkey_init1(
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_init1(
      privkey,
    );
  }

  late final _dogecoin_privkey_init1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_key>)>>(
          'dogecoin_privkey_init');
  late final _dogecoin_privkey_init1 = _dogecoin_privkey_init1Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_key>)>();

  int dogecoin_privkey_is_valid1(
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_is_valid1(
      privkey,
    );
  }

  late final _dogecoin_privkey_is_valid1Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_key>)>>('dogecoin_privkey_is_valid');
  late final _dogecoin_privkey_is_valid1 = _dogecoin_privkey_is_valid1Ptr
      .asFunction<int Function(ffi.Pointer<dogecoin_key>)>();

  void dogecoin_privkey_cleanse1(
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_cleanse1(
      privkey,
    );
  }

  late final _dogecoin_privkey_cleanse1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_key>)>>(
          'dogecoin_privkey_cleanse');
  late final _dogecoin_privkey_cleanse1 = _dogecoin_privkey_cleanse1Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_key>)>();

  int dogecoin_privkey_gen1(
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_gen1(
      privkey,
    );
  }

  late final _dogecoin_privkey_gen1Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_key>)>>('dogecoin_privkey_gen');
  late final _dogecoin_privkey_gen1 = _dogecoin_privkey_gen1Ptr
      .asFunction<int Function(ffi.Pointer<dogecoin_key>)>();

  int dogecoin_privkey_verify_pubkey1(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_privkey_verify_pubkey1(
      privkey,
      pubkey,
    );
  }

  late final _dogecoin_privkey_verify_pubkey1Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_key>,
              ffi.Pointer<dogecoin_pubkey>)>>('dogecoin_privkey_verify_pubkey');
  late final _dogecoin_privkey_verify_pubkey1 =
      _dogecoin_privkey_verify_pubkey1Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_key>, ffi.Pointer<dogecoin_pubkey>)>();

  void dogecoin_privkey_encode_wif1(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<dogecoin_chainparams> chain,
    ffi.Pointer<ffi.Char> privkey_wif,
    ffi.Pointer<ffi.Int> strsize_inout,
  ) {
    return _dogecoin_privkey_encode_wif1(
      privkey,
      chain,
      privkey_wif,
      strsize_inout,
    );
  }

  late final _dogecoin_privkey_encode_wif1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_privkey_encode_wif');
  late final _dogecoin_privkey_encode_wif1 =
      _dogecoin_privkey_encode_wif1Ptr.asFunction<
          void Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>();

  int dogecoin_privkey_decode_wif1(
    ffi.Pointer<ffi.Char> privkey_wif,
    ffi.Pointer<dogecoin_chainparams> chain,
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_decode_wif1(
      privkey_wif,
      chain,
      privkey,
    );
  }

  late final _dogecoin_privkey_decode_wif1Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<dogecoin_key>)>>('dogecoin_privkey_decode_wif');
  late final _dogecoin_privkey_decode_wif1 =
      _dogecoin_privkey_decode_wif1Ptr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<dogecoin_key>)>();

  void dogecoin_pubkey_init1(
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_pubkey_init1(
      pubkey,
    );
  }

  late final _dogecoin_pubkey_init1Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_pubkey>)>>(
      'dogecoin_pubkey_init');
  late final _dogecoin_pubkey_init1 = _dogecoin_pubkey_init1Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_pubkey>)>();

  int dogecoin_pubkey_get_length1(
    int ch_header,
  ) {
    return _dogecoin_pubkey_get_length1(
      ch_header,
    );
  }

  late final _dogecoin_pubkey_get_length1Ptr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedChar)>>(
          'dogecoin_pubkey_get_length');
  late final _dogecoin_pubkey_get_length1 =
      _dogecoin_pubkey_get_length1Ptr.asFunction<int Function(int)>();

  int dogecoin_pubkey_is_valid1(
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_pubkey_is_valid1(
      pubkey,
    );
  }

  late final _dogecoin_pubkey_is_valid1Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_pubkey>)>>('dogecoin_pubkey_is_valid');
  late final _dogecoin_pubkey_is_valid1 = _dogecoin_pubkey_is_valid1Ptr
      .asFunction<int Function(ffi.Pointer<dogecoin_pubkey>)>();

  void dogecoin_pubkey_cleanse1(
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_pubkey_cleanse1(
      pubkey,
    );
  }

  late final _dogecoin_pubkey_cleanse1Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_pubkey>)>>(
      'dogecoin_pubkey_cleanse');
  late final _dogecoin_pubkey_cleanse1 = _dogecoin_pubkey_cleanse1Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_pubkey>)>();

  void dogecoin_pubkey_from_key1(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<dogecoin_pubkey> pubkey_inout,
  ) {
    return _dogecoin_pubkey_from_key1(
      privkey,
      pubkey_inout,
    );
  }

  late final _dogecoin_pubkey_from_key1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_key>,
              ffi.Pointer<dogecoin_pubkey>)>>('dogecoin_pubkey_from_key');
  late final _dogecoin_pubkey_from_key1 =
      _dogecoin_pubkey_from_key1Ptr.asFunction<
          void Function(
              ffi.Pointer<dogecoin_key>, ffi.Pointer<dogecoin_pubkey>)>();

  void dogecoin_pubkey_get_hash1601(
    ffi.Pointer<dogecoin_pubkey> pubkey,
    ffi.Pointer<ffi.Uint8> hash160,
  ) {
    return _dogecoin_pubkey_get_hash1601(
      pubkey,
      hash160,
    );
  }

  late final _dogecoin_pubkey_get_hash1601Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_pubkey>,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_pubkey_get_hash160');
  late final _dogecoin_pubkey_get_hash1601 =
      _dogecoin_pubkey_get_hash1601Ptr.asFunction<
          void Function(
              ffi.Pointer<dogecoin_pubkey>, ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_pubkey_get_hex1(
    ffi.Pointer<dogecoin_pubkey> pubkey,
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.Int> strsize,
  ) {
    return _dogecoin_pubkey_get_hex1(
      pubkey,
      str,
      strsize,
    );
  }

  late final _dogecoin_pubkey_get_hex1Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_pubkey>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_pubkey_get_hex');
  late final _dogecoin_pubkey_get_hex1 =
      _dogecoin_pubkey_get_hex1Ptr.asFunction<
          int Function(ffi.Pointer<dogecoin_pubkey>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>();

  int dogecoin_key_sign_hash1(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<ffi.Uint8> hash,
    ffi.Pointer<ffi.UnsignedChar> sigout,
    ffi.Pointer<ffi.Int> outlen,
  ) {
    return _dogecoin_key_sign_hash1(
      privkey,
      hash,
      sigout,
      outlen,
    );
  }

  late final _dogecoin_key_sign_hash1Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_key_sign_hash');
  late final _dogecoin_key_sign_hash1 = _dogecoin_key_sign_hash1Ptr.asFunction<
      int Function(ffi.Pointer<dogecoin_key>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Int>)>();

  int dogecoin_key_sign_hash_compact1(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<ffi.Uint8> hash,
    ffi.Pointer<ffi.UnsignedChar> sigout,
    ffi.Pointer<ffi.Int> outlen,
  ) {
    return _dogecoin_key_sign_hash_compact1(
      privkey,
      hash,
      sigout,
      outlen,
    );
  }

  late final _dogecoin_key_sign_hash_compact1Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_key_sign_hash_compact');
  late final _dogecoin_key_sign_hash_compact1 =
      _dogecoin_key_sign_hash_compact1Ptr.asFunction<
          int Function(ffi.Pointer<dogecoin_key>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Int>)>();

  int dogecoin_key_sign_hash_compact_recoverable1(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<ffi.Uint8> hash,
    ffi.Pointer<ffi.UnsignedChar> sigout,
    ffi.Pointer<ffi.Int> outlen,
    ffi.Pointer<ffi.Int> recid,
  ) {
    return _dogecoin_key_sign_hash_compact_recoverable1(
      privkey,
      hash,
      sigout,
      outlen,
      recid,
    );
  }

  late final _dogecoin_key_sign_hash_compact_recoverable1Ptr = _lookup<
          ffi.NativeFunction<
              dogecoin_bool Function(
                  ffi.Pointer<dogecoin_key>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.UnsignedChar>,
                  ffi.Pointer<ffi.Int>,
                  ffi.Pointer<ffi.Int>)>>(
      'dogecoin_key_sign_hash_compact_recoverable');
  late final _dogecoin_key_sign_hash_compact_recoverable1 =
      _dogecoin_key_sign_hash_compact_recoverable1Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  int dogecoin_key_sign_recover_pubkey1(
    ffi.Pointer<ffi.UnsignedChar> sig,
    ffi.Pointer<ffi.Uint8> hash,
    int recid,
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_key_sign_recover_pubkey1(
      sig,
      hash,
      recid,
      pubkey,
    );
  }

  late final _dogecoin_key_sign_recover_pubkey1Ptr = _lookup<
          ffi.NativeFunction<
              dogecoin_bool Function(
                  ffi.Pointer<ffi.UnsignedChar>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Int,
                  ffi.Pointer<dogecoin_pubkey>)>>(
      'dogecoin_key_sign_recover_pubkey');
  late final _dogecoin_key_sign_recover_pubkey1 =
      _dogecoin_key_sign_recover_pubkey1Ptr.asFunction<
          int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Uint8>,
              int, ffi.Pointer<dogecoin_pubkey>)>();

  int dogecoin_pubkey_verify_sig1(
    ffi.Pointer<dogecoin_pubkey> pubkey,
    ffi.Pointer<ffi.Uint8> hash,
    ffi.Pointer<ffi.UnsignedChar> sigder,
    int len,
  ) {
    return _dogecoin_pubkey_verify_sig1(
      pubkey,
      hash,
      sigder,
      len,
    );
  }

  late final _dogecoin_pubkey_verify_sig1Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_pubkey>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('dogecoin_pubkey_verify_sig');
  late final _dogecoin_pubkey_verify_sig1 =
      _dogecoin_pubkey_verify_sig1Ptr.asFunction<
          int Function(ffi.Pointer<dogecoin_pubkey>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>, int)>();

  int dogecoin_pubkey_getaddr_p2pkh1(
    ffi.Pointer<dogecoin_pubkey> pubkey,
    ffi.Pointer<dogecoin_chainparams> chain,
    ffi.Pointer<ffi.Char> addrout,
  ) {
    return _dogecoin_pubkey_getaddr_p2pkh1(
      pubkey,
      chain,
      addrout,
    );
  }

  late final _dogecoin_pubkey_getaddr_p2pkh1Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_pubkey>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<ffi.Char>)>>('dogecoin_pubkey_getaddr_p2pkh');
  late final _dogecoin_pubkey_getaddr_p2pkh1 =
      _dogecoin_pubkey_getaddr_p2pkh1Ptr.asFunction<
          int Function(ffi.Pointer<dogecoin_pubkey>,
              ffi.Pointer<dogecoin_chainparams>, ffi.Pointer<ffi.Char>)>();

  int remove14(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove14(
      __filename,
    );
  }

  late final _remove14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove14 =
      _remove14Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename14(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename14(
      __old,
      __new,
    );
  }

  late final _rename14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename14 = _rename14Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat14(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat14(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameat14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat14 = _renameat14Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose14(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose14(
      __stream,
    );
  }

  late final _fclose14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose14 =
      _fclose14Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile14() {
    return _tmpfile14();
  }

  late final _tmpfile14Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile14 =
      _tmpfile14Ptr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam14(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam14(
      arg0,
    );
  }

  late final _tmpnam14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam14 = _tmpnam14Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r14(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r14(
      __s,
    );
  }

  late final _tmpnam_r14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r14 = _tmpnam_r14Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam14(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam14(
      __dir,
      __pfx,
    );
  }

  late final _tempnam14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam14 = _tempnam14Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush14(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush14(
      __stream,
    );
  }

  late final _fflush14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush14 =
      _fflush14Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked14(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked14(
      __stream,
    );
  }

  late final _fflush_unlocked14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked14 =
      _fflush_unlocked14Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen14(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen14(
      __filename,
      __modes,
    );
  }

  late final _fopen14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen14 = _fopen14Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen14(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen14(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopen14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen14 = _freopen14Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen14(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen14(
      __fd,
      __modes,
    );
  }

  late final _fdopen14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen14 = _fdopen14Ptr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen14(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen14(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopen14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen14 = _fmemopen14Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream14(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Int> __sizeloc,
  ) {
    return _open_memstream14(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstream14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('open_memstream');
  late final _open_memstream14 = _open_memstream14Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void setbuf14(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf14(
      __stream,
      __buf,
    );
  }

  late final _setbuf14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf14 = _setbuf14Ptr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf14(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf14(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbuf14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('setvbuf');
  late final _setvbuf14 = _setvbuf14Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer14(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer14(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbuffer14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer14 = _setbuffer14Ptr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf14(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf14(
      __stream,
    );
  }

  late final _setlinebuf14Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf14 =
      _setlinebuf14Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf14(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf14(
      __stream,
      __format,
    );
  }

  late final _fprintf14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf14 = _fprintf14Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf14(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf14(
      __format,
    );
  }

  late final _printf14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf14 =
      _printf14Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf14(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf14(
      __s,
      __format,
    );
  }

  late final _sprintf14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf14 = _sprintf14Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf14(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfprintf14(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintf14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfprintf');
  late final _vfprintf14 = _vfprintf14Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vprintf14(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vprintf14(
      __format,
      __arg,
    );
  }

  late final _vprintf14Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vprintf');
  late final _vprintf14 =
      _vprintf14Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsprintf14(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsprintf14(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintf14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsprintf');
  late final _vsprintf14 = _vsprintf14Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int snprintf14(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf14(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintf14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf14 = _snprintf14Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf14(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsnprintf14(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintf14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('vsnprintf');
  late final _vsnprintf14 = _vsnprintf14Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int vdprintf14(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    int __arg,
  ) {
    return _vdprintf14(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintf14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('vdprintf');
  late final _vdprintf14 = _vdprintf14Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int dprintf14(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf14(
      __fd,
      __fmt,
    );
  }

  late final _dprintf14Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf14 =
      _dprintf14Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf28(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf28(
      __stream,
      __format,
    );
  }

  late final _fscanf28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf28 = _fscanf28Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf28(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf28(
      __format,
    );
  }

  late final _scanf28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf28 =
      _scanf28Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf28(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf28(
      __s,
      __format,
    );
  }

  late final _sscanf28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf28 = _sscanf28Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fscanf29(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf29(
      __stream,
      __format,
    );
  }

  late final _fscanf29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf29 = _fscanf29Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf29(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf29(
      __format,
    );
  }

  late final _scanf29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf29 =
      _scanf29Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf29(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf29(
      __s,
      __format,
    );
  }

  late final _sscanf29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf29 = _sscanf29Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf28(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf28(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf28 = _vfscanf28Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf28(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf28(
      __format,
      __arg,
    );
  }

  late final _vscanf28Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf28 =
      _vscanf28Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf28(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf28(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf28 = _vsscanf28Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int vfscanf29(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf29(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf29 = _vfscanf29Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf29(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf29(
      __format,
      __arg,
    );
  }

  late final _vscanf29Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf29 =
      _vscanf29Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf29(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf29(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf29 = _vsscanf29Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fgetc14(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc14(
      __stream,
    );
  }

  late final _fgetc14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc14 =
      _fgetc14Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc14(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc14(
      __stream,
    );
  }

  late final _getc14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc14 = _getc14Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar14() {
    return _getchar14();
  }

  late final _getchar14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar14 = _getchar14Ptr.asFunction<int Function()>();

  int getc_unlocked14(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked14(
      __stream,
    );
  }

  late final _getc_unlocked14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked14 =
      _getc_unlocked14Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked14() {
    return _getchar_unlocked14();
  }

  late final _getchar_unlocked14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked14 =
      _getchar_unlocked14Ptr.asFunction<int Function()>();

  int fgetc_unlocked14(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked14(
      __stream,
    );
  }

  late final _fgetc_unlocked14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked14 =
      _fgetc_unlocked14Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc14(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc14(
      __c,
      __stream,
    );
  }

  late final _fputc14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc14 =
      _fputc14Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc14(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc14(
      __c,
      __stream,
    );
  }

  late final _putc14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc14 =
      _putc14Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar14(
    int __c,
  ) {
    return _putchar14(
      __c,
    );
  }

  late final _putchar14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar14 = _putchar14Ptr.asFunction<int Function(int)>();

  int fputc_unlocked14(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked14(
      __c,
      __stream,
    );
  }

  late final _fputc_unlocked14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked14 =
      _fputc_unlocked14Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked14(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked14(
      __c,
      __stream,
    );
  }

  late final _putc_unlocked14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked14 =
      _putc_unlocked14Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked14(
    int __c,
  ) {
    return _putchar_unlocked14(
      __c,
    );
  }

  late final _putchar_unlocked14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked14 =
      _putchar_unlocked14Ptr.asFunction<int Function(int)>();

  int getw14(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw14(
      __stream,
    );
  }

  late final _getw14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw14 = _getw14Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw14(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw14(
      __w,
      __stream,
    );
  }

  late final _putw14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw14 =
      _putw14Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets14(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets14(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgets14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets14 = _fgets14Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim14(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim14(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelim14Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim14 = ___getdelim14Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getdelim14(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim14(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelim14Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim14 = _getdelim14Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getline14(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline14(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getline14Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<FILE>)>>('getline');
  late final _getline14 = _getline14Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<FILE>)>();

  int fputs14(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs14(
      __s,
      __stream,
    );
  }

  late final _fputs14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs14 = _fputs14Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts14(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts14(
      __s,
    );
  }

  late final _puts14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts14 =
      _puts14Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc14(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc14(
      __c,
      __stream,
    );
  }

  late final _ungetc14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc14 =
      _ungetc14Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread14(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread14(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread14 = _fread14Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite14(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite14(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwrite14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite14 = _fwrite14Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked14(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked14(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlocked14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked14 = _fread_unlocked14Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked14(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked14(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlocked14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked14 = _fwrite_unlocked14Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek14(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek14(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseek14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek14 =
      _fseek14Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell14(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell14(
      __stream,
    );
  }

  late final _ftell14Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell14 =
      _ftell14Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind14(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind14(
      __stream,
    );
  }

  late final _rewind14Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind14 =
      _rewind14Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko14(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko14(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseeko14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko14 =
      _fseeko14Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello14(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello14(
      __stream,
    );
  }

  late final _ftello14Ptr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello14 =
      _ftello14Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos14(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos14(
      __stream,
      __pos,
    );
  }

  late final _fgetpos14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos14 = _fgetpos14Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos14(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos14(
      __stream,
      __pos,
    );
  }

  late final _fsetpos14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos14 = _fsetpos14Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr14(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr14(
      __stream,
    );
  }

  late final _clearerr14Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr14 =
      _clearerr14Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof14(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof14(
      __stream,
    );
  }

  late final _feof14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof14 = _feof14Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror14(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror14(
      __stream,
    );
  }

  late final _ferror14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror14 =
      _ferror14Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked14(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked14(
      __stream,
    );
  }

  late final _clearerr_unlocked14Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked14 =
      _clearerr_unlocked14Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked14(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked14(
      __stream,
    );
  }

  late final _feof_unlocked14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked14 =
      _feof_unlocked14Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked14(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked14(
      __stream,
    );
  }

  late final _ferror_unlocked14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked14 =
      _ferror_unlocked14Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror14(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror14(
      __s,
    );
  }

  late final _perror14Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror14 =
      _perror14Ptr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno14(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno14(
      __stream,
    );
  }

  late final _fileno14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno14 =
      _fileno14Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked14(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked14(
      __stream,
    );
  }

  late final _fileno_unlocked14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked14 =
      _fileno_unlocked14Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose14(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose14(
      __stream,
    );
  }

  late final _pclose14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose14 =
      _pclose14Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen14(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen14(
      __command,
      __modes,
    );
  }

  late final _popen14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen14 = _popen14Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid14(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid14(
      __s,
    );
  }

  late final _ctermid14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid14 = _ctermid14Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile14(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile14(
      __stream,
    );
  }

  late final _flockfile14Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile14 =
      _flockfile14Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile14(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile14(
      __stream,
    );
  }

  late final _ftrylockfile14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile14 =
      _ftrylockfile14Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile14(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile14(
      __stream,
    );
  }

  late final _funlockfile14Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile14 =
      _funlockfile14Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow14(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow14(
      arg0,
    );
  }

  late final ___uflow14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow14 =
      ___uflow14Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow14(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow14(
      arg0,
      arg1,
    );
  }

  late final ___overflow14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow14 =
      ___overflow14Ptr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __ctype_get_mb_cur_max14() {
    return ___ctype_get_mb_cur_max14();
  }

  late final ___ctype_get_mb_cur_max14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max14 =
      ___ctype_get_mb_cur_max14Ptr.asFunction<int Function()>();

  double atof14(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof14(
      __nptr,
    );
  }

  late final _atof14Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof14 =
      _atof14Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi14(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi14(
      __nptr,
    );
  }

  late final _atoi14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi14 =
      _atoi14Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol14(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol14(
      __nptr,
    );
  }

  late final _atol14Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol14 =
      _atol14Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll14(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll14(
      __nptr,
    );
  }

  late final _atoll14Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll14 =
      _atoll14Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod14(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod14(
      __nptr,
      __endptr,
    );
  }

  late final _strtod14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod14 = _strtod14Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof14(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof14(
      __nptr,
      __endptr,
    );
  }

  late final _strtof14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof14 = _strtof14Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol14(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol14(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol14 = _strtol14Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul14(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul14(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul14 = _strtoul14Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq14(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq14(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq14 = _strtoq14Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq14(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq14(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq14 = _strtouq14Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll14(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll14(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll14 = _strtoll14Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull14(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull14(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull14 = _strtoull14Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a14(
    int __n,
  ) {
    return _l64a14(
      __n,
    );
  }

  late final _l64a14Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a14 =
      _l64a14Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l14(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l14(
      __s,
    );
  }

  late final _a64l14Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l14 =
      _a64l14Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select14(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select14(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select14 = _select14Ptr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect14(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect14(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect14 = _pselect14Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random14() {
    return _random14();
  }

  late final _random14Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random14 = _random14Ptr.asFunction<int Function()>();

  void srandom14(
    int __seed,
  ) {
    return _srandom14(
      __seed,
    );
  }

  late final _srandom14Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom14 = _srandom14Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate14(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate14(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int)>>('initstate');
  late final _initstate14 = _initstate14Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate14(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate14(
      __statebuf,
    );
  }

  late final _setstate14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate14 = _setstate14Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r14(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r14(
      __buf,
      __result,
    );
  }

  late final _random_r14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r14 = _random_r14Ptr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r14(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r14(
      __seed,
      __buf,
    );
  }

  late final _srandom_r14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r14 =
      _srandom_r14Ptr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r14(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r14(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r14 = _initstate_r14Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r14(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r14(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r14 = _setstate_r14Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand14() {
    return _rand14();
  }

  late final _rand14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand14 = _rand14Ptr.asFunction<int Function()>();

  void srand14(
    int __seed,
  ) {
    return _srand14(
      __seed,
    );
  }

  late final _srand14Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand14 = _srand14Ptr.asFunction<void Function(int)>();

  int rand_r14(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r14(
      __seed,
    );
  }

  late final _rand_r14Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r14 =
      _rand_r14Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand4814() {
    return _drand4814();
  }

  late final _drand4814Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand4814 = _drand4814Ptr.asFunction<double Function()>();

  double erand4814(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand4814(
      __xsubi,
    );
  }

  late final _erand4814Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand4814 = _erand4814Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand4814() {
    return _lrand4814();
  }

  late final _lrand4814Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand4814 = _lrand4814Ptr.asFunction<int Function()>();

  int nrand4814(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand4814(
      __xsubi,
    );
  }

  late final _nrand4814Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand4814 =
      _nrand4814Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand4814() {
    return _mrand4814();
  }

  late final _mrand4814Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand4814 = _mrand4814Ptr.asFunction<int Function()>();

  int jrand4814(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand4814(
      __xsubi,
    );
  }

  late final _jrand4814Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand4814 =
      _jrand4814Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand4814(
    int __seedval,
  ) {
    return _srand4814(
      __seedval,
    );
  }

  late final _srand4814Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand4814 = _srand4814Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed4814(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed4814(
      __seed16v,
    );
  }

  late final _seed4814Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed4814 = _seed4814Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong4814(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong4814(
      __param,
    );
  }

  late final _lcong4814Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong4814 =
      _lcong4814Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r14(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r14(
      __buffer,
      __result,
    );
  }

  late final _drand48_r14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r14 = _drand48_r14Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r14(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r14(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r14 = _erand48_r14Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r14(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r14(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r14 = _lrand48_r14Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r14(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r14(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r14 = _nrand48_r14Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r14(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r14(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r14 = _mrand48_r14Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r14(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r14(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r14 = _jrand48_r14Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r14(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r14(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r14 = _srand48_r14Ptr
      .asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r14(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r14(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r14 = _seed48_r14Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r14(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r14(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r14 = _lcong48_r14Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int arc4random14() {
    return _arc4random14();
  }

  late final _arc4random14Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random14 = _arc4random14Ptr.asFunction<int Function()>();

  void arc4random_buf14(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf14(
      __buf,
      __size,
    );
  }

  late final _arc4random_buf14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('arc4random_buf');
  late final _arc4random_buf14 = _arc4random_buf14Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform14(
    int __upper_bound,
  ) {
    return _arc4random_uniform14(
      __upper_bound,
    );
  }

  late final _arc4random_uniform14Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
          'arc4random_uniform');
  late final _arc4random_uniform14 =
      _arc4random_uniform14Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc14(
    int __size,
  ) {
    return _malloc14(
      __size,
    );
  }

  late final _malloc14Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'malloc');
  late final _malloc14 =
      _malloc14Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc14(
    int __nmemb,
    int __size,
  ) {
    return _calloc14(
      __nmemb,
      __size,
    );
  }

  late final _calloc14Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'calloc');
  late final _calloc14 =
      _calloc14Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc14(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc14(
      __ptr,
      __size,
    );
  }

  late final _realloc14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('realloc');
  late final _realloc14 = _realloc14Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free14(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free14(
      __ptr,
    );
  }

  late final _free14Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free14 =
      _free14Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray28(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray28(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray28 = _reallocarray28Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray29(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray29(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray29 = _reallocarray29Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca14(
    int __size,
  ) {
    return _alloca14(
      __size,
    );
  }

  late final _alloca14Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'alloca');
  late final _alloca14 =
      _alloca14Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc14(
    int __size,
  ) {
    return _valloc14(
      __size,
    );
  }

  late final _valloc14Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'valloc');
  late final _valloc14 =
      _valloc14Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign14(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign14(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int,
              ffi.Int)>>('posix_memalign');
  late final _posix_memalign14 = _posix_memalign14Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc14(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc14(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc14Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'aligned_alloc');
  late final _aligned_alloc14 = _aligned_alloc14Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort14() {
    return _abort14();
  }

  late final _abort14Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort14 = _abort14Ptr.asFunction<void Function()>();

  int atexit14(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit14(
      __func,
    );
  }

  late final _atexit14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit14 = _atexit14Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit14(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit14(
      __func,
    );
  }

  late final _at_quick_exit14Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit14 = _at_quick_exit14Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit14(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit14(
      __func,
      __arg,
    );
  }

  late final _on_exit14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit14 = _on_exit14Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit14(
    int __status,
  ) {
    return _exit14(
      __status,
    );
  }

  late final _exit14Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit14 = _exit14Ptr.asFunction<void Function(int)>();

  void quick_exit14(
    int __status,
  ) {
    return _quick_exit14(
      __status,
    );
  }

  late final _quick_exit14Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit14 = _quick_exit14Ptr.asFunction<void Function(int)>();

  void _Exit14(
    int __status,
  ) {
    return __Exit14(
      __status,
    );
  }

  late final __Exit14Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit14 = __Exit14Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv14(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv14(
      __name,
    );
  }

  late final _getenv14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv14 = _getenv14Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv14(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv14(
      __string,
    );
  }

  late final _putenv14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv14 =
      _putenv14Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv14(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv14(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv14 = _setenv14Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv14(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv14(
      __name,
    );
  }

  late final _unsetenv14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv14 =
      _unsetenv14Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv14() {
    return _clearenv14();
  }

  late final _clearenv14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv14 = _clearenv14Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp14(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp14(
      __template,
    );
  }

  late final _mktemp14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp14 = _mktemp14Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp14(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp14(
      __template,
    );
  }

  late final _mkstemp14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp14 =
      _mkstemp14Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps14(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps14(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps14Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps14 =
      _mkstemps14Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp14(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp14(
      __template,
    );
  }

  late final _mkdtemp14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp14 = _mkdtemp14Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system14(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system14(
      __command,
    );
  }

  late final _system14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system14 =
      _system14Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath14(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath14(
      __name,
      __resolved,
    );
  }

  late final _realpath14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath14 = _realpath14Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch14(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch14(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              __compar_fn_t)>>('bsearch');
  late final _bsearch14 = _bsearch14Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort14(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort14(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              __compar_fn_t)>>('qsort');
  late final _qsort14 = _qsort14Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs14(
    int __x,
  ) {
    return _abs14(
      __x,
    );
  }

  late final _abs14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs14 = _abs14Ptr.asFunction<int Function(int)>();

  int labs14(
    int __x,
  ) {
    return _labs14(
      __x,
    );
  }

  late final _labs14Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs14 = _labs14Ptr.asFunction<int Function(int)>();

  int llabs14(
    int __x,
  ) {
    return _llabs14(
      __x,
    );
  }

  late final _llabs14Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs14 = _llabs14Ptr.asFunction<int Function(int)>();

  div_t div14(
    int __numer,
    int __denom,
  ) {
    return _div14(
      __numer,
      __denom,
    );
  }

  late final _div14Ptr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div14 = _div14Ptr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv14(
    int __numer,
    int __denom,
  ) {
    return _ldiv14(
      __numer,
      __denom,
    );
  }

  late final _ldiv14Ptr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv14 = _ldiv14Ptr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv14(
    int __numer,
    int __denom,
  ) {
    return _lldiv14(
      __numer,
      __denom,
    );
  }

  late final _lldiv14Ptr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv14 = _lldiv14Ptr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt14(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt14(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt14 = _ecvt14Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt14(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt14(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt14 = _fcvt14Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt14(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt14(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt14 = _gcvt14Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r14(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r14(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('ecvt_r');
  late final _ecvt_r14 = _ecvt_r14Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r14(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r14(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('fcvt_r');
  late final _fcvt_r14 = _fcvt_r14Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen14(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen14(
      __s,
      __n,
    );
  }

  late final _mblen14Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mblen');
  late final _mblen14 =
      _mblen14Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc14(
    ffi.Pointer<ffi.Int> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc14(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('mbtowc');
  late final _mbtowc14 = _mbtowc14Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb14(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb14(
      __s,
      __wchar,
    );
  }

  late final _wctomb14Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'wctomb');
  late final _wctomb14 =
      _wctomb14Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs14(
    ffi.Pointer<ffi.Int> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs14(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mbstowcs');
  late final _mbstowcs14 = _mbstowcs14Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs14(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Int> __pwcs,
    int __n,
  ) {
    return _wcstombs14(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('wcstombs');
  late final _wcstombs14 = _wcstombs14Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  int rpmatch14(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch14(
      __response,
    );
  }

  late final _rpmatch14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch14 =
      _rpmatch14Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt14(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt14(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt14 = _getsubopt14Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg14(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg14(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg14 =
      _getloadavg14Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Void> memcpy14(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy14(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpy14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memcpy');
  late final _memcpy14 = _memcpy14Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove14(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove14(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmove14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memmove');
  late final _memmove14 = _memmove14Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy14(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy14(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpy14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memccpy');
  late final _memccpy14 = _memccpy14Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset14(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset14(
      __s,
      __c,
      __n,
    );
  }

  late final _memset14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memset');
  late final _memset14 = _memset14Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp14(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp14(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmp14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('memcmp');
  late final _memcmp14 = _memcmp14Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq14(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq14(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeq14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__memcmpeq');
  late final ___memcmpeq14 = ___memcmpeq14Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr14(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr14(
      __s,
      __c,
      __n,
    );
  }

  late final _memchr14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memchr');
  late final _memchr14 = _memchr14Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy14(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy14(
      __dest,
      __src,
    );
  }

  late final _strcpy14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy14 = _strcpy14Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy14(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy14(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpy14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncpy');
  late final _strncpy14 = _strncpy14Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat14(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat14(
      __dest,
      __src,
    );
  }

  late final _strcat14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat14 = _strcat14Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat14(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat14(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncat14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncat');
  late final _strncat14 = _strncat14Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp14(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp14(
      __s1,
      __s2,
    );
  }

  late final _strcmp14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp14 = _strcmp14Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp14(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp14(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmp14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncmp');
  late final _strncmp14 = _strncmp14Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll14(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll14(
      __s1,
      __s2,
    );
  }

  late final _strcoll14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll14 = _strcoll14Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm14(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm14(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrm14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strxfrm');
  late final _strxfrm14 = _strxfrm14Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l14(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l14(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_l14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l14 = _strcoll_l14Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l14(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l14(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_l14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strxfrm_l');
  late final _strxfrm_l14 = _strxfrm_l14Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup14(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup14(
      __s,
    );
  }

  late final _strdup14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup14 = _strdup14Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup14(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup14(
      __string,
      __n,
    );
  }

  late final _strndup14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strndup');
  late final _strndup14 = _strndup14Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr14(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr14(
      __s,
      __c,
    );
  }

  late final _strchr14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr14 = _strchr14Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr14(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr14(
      __s,
      __c,
    );
  }

  late final _strrchr14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr14 = _strrchr14Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn14(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn14(
      __s,
      __reject,
    );
  }

  late final _strcspn14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn14 = _strcspn14Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn14(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn14(
      __s,
      __accept,
    );
  }

  late final _strspn14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn14 = _strspn14Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk14(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk14(
      __s,
      __accept,
    );
  }

  late final _strpbrk14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk14 = _strpbrk14Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr14(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr14(
      __haystack,
      __needle,
    );
  }

  late final _strstr14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr14 = _strstr14Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok14(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok14(
      __s,
      __delim,
    );
  }

  late final _strtok14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok14 = _strtok14Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r14(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r14(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_r14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r14 = ___strtok_r14Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r14(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r14(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_r14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r14 = _strtok_r14Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen14(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen14(
      __s,
    );
  }

  late final _strlen14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'strlen');
  late final _strlen14 =
      _strlen14Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen14(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen14(
      __string,
      __maxlen,
    );
  }

  late final _strnlen14Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'strnlen');
  late final _strnlen14 =
      _strnlen14Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror14(
    int __errnum,
  ) {
    return _strerror14(
      __errnum,
    );
  }

  late final _strerror14Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror14 =
      _strerror14Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r14(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r14(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_r14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('strerror_r');
  late final _strerror_r14 = _strerror_r14Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l14(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l14(
      __errnum,
      __l,
    );
  }

  late final _strerror_l14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l14 = _strerror_l14Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp14(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp14(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmp14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcmp');
  late final _bcmp14 = _bcmp14Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy14(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy14(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopy14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcopy');
  late final _bcopy14 = _bcopy14Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero14(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero14(
      __s,
      __n,
    );
  }

  late final _bzero14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('bzero');
  late final _bzero14 =
      _bzero14Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index14(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index14(
      __s,
      __c,
    );
  }

  late final _index14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index14 = _index14Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex14(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex14(
      __s,
      __c,
    );
  }

  late final _rindex14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex14 = _rindex14Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs14(
    int __i,
  ) {
    return _ffs14(
      __i,
    );
  }

  late final _ffs14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs14 = _ffs14Ptr.asFunction<int Function(int)>();

  int ffsl14(
    int __l,
  ) {
    return _ffsl14(
      __l,
    );
  }

  late final _ffsl14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl14 = _ffsl14Ptr.asFunction<int Function(int)>();

  int ffsll14(
    int __ll,
  ) {
    return _ffsll14(
      __ll,
    );
  }

  late final _ffsll14Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll14 = _ffsll14Ptr.asFunction<int Function(int)>();

  int strcasecmp14(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp14(
      __s1,
      __s2,
    );
  }

  late final _strcasecmp14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp14 = _strcasecmp14Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp14(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp14(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmp14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncasecmp');
  late final _strncasecmp14 = _strncasecmp14Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l14(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l14(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_l14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l14 = _strcasecmp_l14Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l14(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l14(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_l14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l14 = _strncasecmp_l14Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero14(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero14(
      __s,
      __n,
    );
  }

  late final _explicit_bzero14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('explicit_bzero');
  late final _explicit_bzero14 = _explicit_bzero14Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep14(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep14(
      __stringp,
      __delim,
    );
  }

  late final _strsep14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep14 = _strsep14Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal14(
    int __sig,
  ) {
    return _strsignal14(
      __sig,
    );
  }

  late final _strsignal14Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal14 =
      _strsignal14Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy14(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy14(
      __dest,
      __src,
    );
  }

  late final ___stpcpy14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy14 = ___stpcpy14Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy14(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy14(
      __dest,
      __src,
    );
  }

  late final _stpcpy14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy14 = _stpcpy14Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy14(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy14(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpy14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('__stpncpy');
  late final ___stpncpy14 = ___stpncpy14Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy14(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy14(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpy14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('stpncpy');
  late final _stpncpy14 = _stpncpy14Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int koinu_to_coins_str(
    int koinu,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _koinu_to_coins_str(
      koinu,
      str,
    );
  }

  late final _koinu_to_coins_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Uint64, ffi.Pointer<ffi.Char>)>>('koinu_to_coins_str');
  late final _koinu_to_coins_str = _koinu_to_coins_strPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int coins_to_koinu_str(
    ffi.Pointer<ffi.Char> coins,
  ) {
    return _coins_to_koinu_str(
      coins,
    );
  }

  late final _coins_to_koinu_strPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Char>)>>(
          'coins_to_koinu_str');
  late final _coins_to_koinu_str =
      _coins_to_koinu_strPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int remove15(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove15(
      __filename,
    );
  }

  late final _remove15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove15 =
      _remove15Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename15(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename15(
      __old,
      __new,
    );
  }

  late final _rename15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename15 = _rename15Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat15(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat15(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameat15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat15 = _renameat15Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose15(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose15(
      __stream,
    );
  }

  late final _fclose15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose15 =
      _fclose15Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile15() {
    return _tmpfile15();
  }

  late final _tmpfile15Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile15 =
      _tmpfile15Ptr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam15(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam15(
      arg0,
    );
  }

  late final _tmpnam15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam15 = _tmpnam15Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r15(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r15(
      __s,
    );
  }

  late final _tmpnam_r15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r15 = _tmpnam_r15Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam15(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam15(
      __dir,
      __pfx,
    );
  }

  late final _tempnam15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam15 = _tempnam15Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush15(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush15(
      __stream,
    );
  }

  late final _fflush15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush15 =
      _fflush15Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked15(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked15(
      __stream,
    );
  }

  late final _fflush_unlocked15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked15 =
      _fflush_unlocked15Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen15(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen15(
      __filename,
      __modes,
    );
  }

  late final _fopen15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen15 = _fopen15Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen15(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen15(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopen15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen15 = _freopen15Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen15(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen15(
      __fd,
      __modes,
    );
  }

  late final _fdopen15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen15 = _fdopen15Ptr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen15(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen15(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopen15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen15 = _fmemopen15Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream15(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Int> __sizeloc,
  ) {
    return _open_memstream15(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstream15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('open_memstream');
  late final _open_memstream15 = _open_memstream15Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void setbuf15(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf15(
      __stream,
      __buf,
    );
  }

  late final _setbuf15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf15 = _setbuf15Ptr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf15(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf15(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbuf15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('setvbuf');
  late final _setvbuf15 = _setvbuf15Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer15(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer15(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbuffer15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer15 = _setbuffer15Ptr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf15(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf15(
      __stream,
    );
  }

  late final _setlinebuf15Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf15 =
      _setlinebuf15Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf15(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf15(
      __stream,
      __format,
    );
  }

  late final _fprintf15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf15 = _fprintf15Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf15(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf15(
      __format,
    );
  }

  late final _printf15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf15 =
      _printf15Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf15(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf15(
      __s,
      __format,
    );
  }

  late final _sprintf15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf15 = _sprintf15Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf15(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfprintf15(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintf15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfprintf');
  late final _vfprintf15 = _vfprintf15Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vprintf15(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vprintf15(
      __format,
      __arg,
    );
  }

  late final _vprintf15Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vprintf');
  late final _vprintf15 =
      _vprintf15Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsprintf15(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsprintf15(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintf15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsprintf');
  late final _vsprintf15 = _vsprintf15Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int snprintf15(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf15(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintf15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf15 = _snprintf15Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf15(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsnprintf15(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintf15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('vsnprintf');
  late final _vsnprintf15 = _vsnprintf15Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int vdprintf15(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    int __arg,
  ) {
    return _vdprintf15(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintf15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('vdprintf');
  late final _vdprintf15 = _vdprintf15Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int dprintf15(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf15(
      __fd,
      __fmt,
    );
  }

  late final _dprintf15Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf15 =
      _dprintf15Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf30(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf30(
      __stream,
      __format,
    );
  }

  late final _fscanf30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf30 = _fscanf30Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf30(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf30(
      __format,
    );
  }

  late final _scanf30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf30 =
      _scanf30Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf30(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf30(
      __s,
      __format,
    );
  }

  late final _sscanf30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf30 = _sscanf30Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fscanf31(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf31(
      __stream,
      __format,
    );
  }

  late final _fscanf31Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf31 = _fscanf31Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf31(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf31(
      __format,
    );
  }

  late final _scanf31Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf31 =
      _scanf31Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf31(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf31(
      __s,
      __format,
    );
  }

  late final _sscanf31Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf31 = _sscanf31Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf30(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf30(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf30 = _vfscanf30Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf30(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf30(
      __format,
      __arg,
    );
  }

  late final _vscanf30Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf30 =
      _vscanf30Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf30(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf30(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf30 = _vsscanf30Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int vfscanf31(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf31(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf31Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf31 = _vfscanf31Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf31(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf31(
      __format,
      __arg,
    );
  }

  late final _vscanf31Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf31 =
      _vscanf31Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf31(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf31(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf31Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf31 = _vsscanf31Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fgetc15(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc15(
      __stream,
    );
  }

  late final _fgetc15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc15 =
      _fgetc15Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc15(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc15(
      __stream,
    );
  }

  late final _getc15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc15 = _getc15Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar15() {
    return _getchar15();
  }

  late final _getchar15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar15 = _getchar15Ptr.asFunction<int Function()>();

  int getc_unlocked15(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked15(
      __stream,
    );
  }

  late final _getc_unlocked15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked15 =
      _getc_unlocked15Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked15() {
    return _getchar_unlocked15();
  }

  late final _getchar_unlocked15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked15 =
      _getchar_unlocked15Ptr.asFunction<int Function()>();

  int fgetc_unlocked15(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked15(
      __stream,
    );
  }

  late final _fgetc_unlocked15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked15 =
      _fgetc_unlocked15Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc15(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc15(
      __c,
      __stream,
    );
  }

  late final _fputc15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc15 =
      _fputc15Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc15(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc15(
      __c,
      __stream,
    );
  }

  late final _putc15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc15 =
      _putc15Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar15(
    int __c,
  ) {
    return _putchar15(
      __c,
    );
  }

  late final _putchar15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar15 = _putchar15Ptr.asFunction<int Function(int)>();

  int fputc_unlocked15(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked15(
      __c,
      __stream,
    );
  }

  late final _fputc_unlocked15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked15 =
      _fputc_unlocked15Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked15(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked15(
      __c,
      __stream,
    );
  }

  late final _putc_unlocked15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked15 =
      _putc_unlocked15Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked15(
    int __c,
  ) {
    return _putchar_unlocked15(
      __c,
    );
  }

  late final _putchar_unlocked15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked15 =
      _putchar_unlocked15Ptr.asFunction<int Function(int)>();

  int getw15(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw15(
      __stream,
    );
  }

  late final _getw15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw15 = _getw15Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw15(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw15(
      __w,
      __stream,
    );
  }

  late final _putw15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw15 =
      _putw15Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets15(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets15(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgets15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets15 = _fgets15Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim15(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim15(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelim15Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim15 = ___getdelim15Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getdelim15(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim15(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelim15Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim15 = _getdelim15Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getline15(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline15(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getline15Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<FILE>)>>('getline');
  late final _getline15 = _getline15Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<FILE>)>();

  int fputs15(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs15(
      __s,
      __stream,
    );
  }

  late final _fputs15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs15 = _fputs15Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts15(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts15(
      __s,
    );
  }

  late final _puts15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts15 =
      _puts15Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc15(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc15(
      __c,
      __stream,
    );
  }

  late final _ungetc15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc15 =
      _ungetc15Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread15(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread15(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread15 = _fread15Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite15(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite15(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwrite15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite15 = _fwrite15Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked15(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked15(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlocked15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked15 = _fread_unlocked15Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked15(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked15(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlocked15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked15 = _fwrite_unlocked15Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek15(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek15(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseek15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek15 =
      _fseek15Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell15(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell15(
      __stream,
    );
  }

  late final _ftell15Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell15 =
      _ftell15Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind15(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind15(
      __stream,
    );
  }

  late final _rewind15Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind15 =
      _rewind15Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko15(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko15(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseeko15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko15 =
      _fseeko15Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello15(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello15(
      __stream,
    );
  }

  late final _ftello15Ptr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello15 =
      _ftello15Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos15(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos15(
      __stream,
      __pos,
    );
  }

  late final _fgetpos15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos15 = _fgetpos15Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos15(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos15(
      __stream,
      __pos,
    );
  }

  late final _fsetpos15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos15 = _fsetpos15Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr15(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr15(
      __stream,
    );
  }

  late final _clearerr15Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr15 =
      _clearerr15Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof15(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof15(
      __stream,
    );
  }

  late final _feof15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof15 = _feof15Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror15(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror15(
      __stream,
    );
  }

  late final _ferror15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror15 =
      _ferror15Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked15(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked15(
      __stream,
    );
  }

  late final _clearerr_unlocked15Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked15 =
      _clearerr_unlocked15Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked15(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked15(
      __stream,
    );
  }

  late final _feof_unlocked15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked15 =
      _feof_unlocked15Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked15(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked15(
      __stream,
    );
  }

  late final _ferror_unlocked15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked15 =
      _ferror_unlocked15Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror15(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror15(
      __s,
    );
  }

  late final _perror15Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror15 =
      _perror15Ptr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno15(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno15(
      __stream,
    );
  }

  late final _fileno15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno15 =
      _fileno15Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked15(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked15(
      __stream,
    );
  }

  late final _fileno_unlocked15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked15 =
      _fileno_unlocked15Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose15(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose15(
      __stream,
    );
  }

  late final _pclose15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose15 =
      _pclose15Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen15(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen15(
      __command,
      __modes,
    );
  }

  late final _popen15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen15 = _popen15Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid15(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid15(
      __s,
    );
  }

  late final _ctermid15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid15 = _ctermid15Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile15(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile15(
      __stream,
    );
  }

  late final _flockfile15Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile15 =
      _flockfile15Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile15(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile15(
      __stream,
    );
  }

  late final _ftrylockfile15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile15 =
      _ftrylockfile15Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile15(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile15(
      __stream,
    );
  }

  late final _funlockfile15Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile15 =
      _funlockfile15Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow15(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow15(
      arg0,
    );
  }

  late final ___uflow15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow15 =
      ___uflow15Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow15(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow15(
      arg0,
      arg1,
    );
  }

  late final ___overflow15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow15 =
      ___overflow15Ptr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __ctype_get_mb_cur_max15() {
    return ___ctype_get_mb_cur_max15();
  }

  late final ___ctype_get_mb_cur_max15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max15 =
      ___ctype_get_mb_cur_max15Ptr.asFunction<int Function()>();

  double atof15(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof15(
      __nptr,
    );
  }

  late final _atof15Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof15 =
      _atof15Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi15(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi15(
      __nptr,
    );
  }

  late final _atoi15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi15 =
      _atoi15Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol15(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol15(
      __nptr,
    );
  }

  late final _atol15Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol15 =
      _atol15Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll15(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll15(
      __nptr,
    );
  }

  late final _atoll15Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll15 =
      _atoll15Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod15(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod15(
      __nptr,
      __endptr,
    );
  }

  late final _strtod15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod15 = _strtod15Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof15(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof15(
      __nptr,
      __endptr,
    );
  }

  late final _strtof15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof15 = _strtof15Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol15(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol15(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol15 = _strtol15Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul15(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul15(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul15 = _strtoul15Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq15(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq15(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq15 = _strtoq15Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq15(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq15(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq15 = _strtouq15Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll15(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll15(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll15 = _strtoll15Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull15(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull15(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull15 = _strtoull15Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a15(
    int __n,
  ) {
    return _l64a15(
      __n,
    );
  }

  late final _l64a15Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a15 =
      _l64a15Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l15(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l15(
      __s,
    );
  }

  late final _a64l15Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l15 =
      _a64l15Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select15(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select15(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select15 = _select15Ptr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect15(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect15(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect15 = _pselect15Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random15() {
    return _random15();
  }

  late final _random15Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random15 = _random15Ptr.asFunction<int Function()>();

  void srandom15(
    int __seed,
  ) {
    return _srandom15(
      __seed,
    );
  }

  late final _srandom15Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom15 = _srandom15Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate15(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate15(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int)>>('initstate');
  late final _initstate15 = _initstate15Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate15(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate15(
      __statebuf,
    );
  }

  late final _setstate15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate15 = _setstate15Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r15(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r15(
      __buf,
      __result,
    );
  }

  late final _random_r15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r15 = _random_r15Ptr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r15(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r15(
      __seed,
      __buf,
    );
  }

  late final _srandom_r15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r15 =
      _srandom_r15Ptr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r15(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r15(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r15 = _initstate_r15Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r15(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r15(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r15 = _setstate_r15Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand15() {
    return _rand15();
  }

  late final _rand15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand15 = _rand15Ptr.asFunction<int Function()>();

  void srand15(
    int __seed,
  ) {
    return _srand15(
      __seed,
    );
  }

  late final _srand15Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand15 = _srand15Ptr.asFunction<void Function(int)>();

  int rand_r15(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r15(
      __seed,
    );
  }

  late final _rand_r15Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r15 =
      _rand_r15Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand4815() {
    return _drand4815();
  }

  late final _drand4815Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand4815 = _drand4815Ptr.asFunction<double Function()>();

  double erand4815(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand4815(
      __xsubi,
    );
  }

  late final _erand4815Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand4815 = _erand4815Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand4815() {
    return _lrand4815();
  }

  late final _lrand4815Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand4815 = _lrand4815Ptr.asFunction<int Function()>();

  int nrand4815(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand4815(
      __xsubi,
    );
  }

  late final _nrand4815Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand4815 =
      _nrand4815Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand4815() {
    return _mrand4815();
  }

  late final _mrand4815Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand4815 = _mrand4815Ptr.asFunction<int Function()>();

  int jrand4815(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand4815(
      __xsubi,
    );
  }

  late final _jrand4815Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand4815 =
      _jrand4815Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand4815(
    int __seedval,
  ) {
    return _srand4815(
      __seedval,
    );
  }

  late final _srand4815Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand4815 = _srand4815Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed4815(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed4815(
      __seed16v,
    );
  }

  late final _seed4815Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed4815 = _seed4815Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong4815(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong4815(
      __param,
    );
  }

  late final _lcong4815Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong4815 =
      _lcong4815Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r15(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r15(
      __buffer,
      __result,
    );
  }

  late final _drand48_r15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r15 = _drand48_r15Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r15(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r15(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r15 = _erand48_r15Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r15(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r15(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r15 = _lrand48_r15Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r15(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r15(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r15 = _nrand48_r15Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r15(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r15(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r15 = _mrand48_r15Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r15(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r15(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r15 = _jrand48_r15Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r15(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r15(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r15 = _srand48_r15Ptr
      .asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r15(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r15(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r15 = _seed48_r15Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r15(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r15(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r15 = _lcong48_r15Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int arc4random15() {
    return _arc4random15();
  }

  late final _arc4random15Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random15 = _arc4random15Ptr.asFunction<int Function()>();

  void arc4random_buf15(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf15(
      __buf,
      __size,
    );
  }

  late final _arc4random_buf15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('arc4random_buf');
  late final _arc4random_buf15 = _arc4random_buf15Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform15(
    int __upper_bound,
  ) {
    return _arc4random_uniform15(
      __upper_bound,
    );
  }

  late final _arc4random_uniform15Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
          'arc4random_uniform');
  late final _arc4random_uniform15 =
      _arc4random_uniform15Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc15(
    int __size,
  ) {
    return _malloc15(
      __size,
    );
  }

  late final _malloc15Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'malloc');
  late final _malloc15 =
      _malloc15Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc15(
    int __nmemb,
    int __size,
  ) {
    return _calloc15(
      __nmemb,
      __size,
    );
  }

  late final _calloc15Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'calloc');
  late final _calloc15 =
      _calloc15Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc15(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc15(
      __ptr,
      __size,
    );
  }

  late final _realloc15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('realloc');
  late final _realloc15 = _realloc15Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free15(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free15(
      __ptr,
    );
  }

  late final _free15Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free15 =
      _free15Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray30(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray30(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray30 = _reallocarray30Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray31(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray31(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray31Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray31 = _reallocarray31Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca15(
    int __size,
  ) {
    return _alloca15(
      __size,
    );
  }

  late final _alloca15Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'alloca');
  late final _alloca15 =
      _alloca15Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc15(
    int __size,
  ) {
    return _valloc15(
      __size,
    );
  }

  late final _valloc15Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'valloc');
  late final _valloc15 =
      _valloc15Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign15(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign15(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int,
              ffi.Int)>>('posix_memalign');
  late final _posix_memalign15 = _posix_memalign15Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc15(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc15(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc15Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'aligned_alloc');
  late final _aligned_alloc15 = _aligned_alloc15Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort15() {
    return _abort15();
  }

  late final _abort15Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort15 = _abort15Ptr.asFunction<void Function()>();

  int atexit15(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit15(
      __func,
    );
  }

  late final _atexit15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit15 = _atexit15Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit15(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit15(
      __func,
    );
  }

  late final _at_quick_exit15Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit15 = _at_quick_exit15Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit15(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit15(
      __func,
      __arg,
    );
  }

  late final _on_exit15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit15 = _on_exit15Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit15(
    int __status,
  ) {
    return _exit15(
      __status,
    );
  }

  late final _exit15Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit15 = _exit15Ptr.asFunction<void Function(int)>();

  void quick_exit15(
    int __status,
  ) {
    return _quick_exit15(
      __status,
    );
  }

  late final _quick_exit15Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit15 = _quick_exit15Ptr.asFunction<void Function(int)>();

  void _Exit15(
    int __status,
  ) {
    return __Exit15(
      __status,
    );
  }

  late final __Exit15Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit15 = __Exit15Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv15(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv15(
      __name,
    );
  }

  late final _getenv15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv15 = _getenv15Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv15(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv15(
      __string,
    );
  }

  late final _putenv15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv15 =
      _putenv15Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv15(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv15(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv15 = _setenv15Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv15(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv15(
      __name,
    );
  }

  late final _unsetenv15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv15 =
      _unsetenv15Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv15() {
    return _clearenv15();
  }

  late final _clearenv15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv15 = _clearenv15Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp15(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp15(
      __template,
    );
  }

  late final _mktemp15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp15 = _mktemp15Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp15(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp15(
      __template,
    );
  }

  late final _mkstemp15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp15 =
      _mkstemp15Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps15(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps15(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps15Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps15 =
      _mkstemps15Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp15(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp15(
      __template,
    );
  }

  late final _mkdtemp15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp15 = _mkdtemp15Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system15(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system15(
      __command,
    );
  }

  late final _system15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system15 =
      _system15Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath15(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath15(
      __name,
      __resolved,
    );
  }

  late final _realpath15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath15 = _realpath15Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch15(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch15(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              __compar_fn_t)>>('bsearch');
  late final _bsearch15 = _bsearch15Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort15(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort15(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              __compar_fn_t)>>('qsort');
  late final _qsort15 = _qsort15Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs15(
    int __x,
  ) {
    return _abs15(
      __x,
    );
  }

  late final _abs15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs15 = _abs15Ptr.asFunction<int Function(int)>();

  int labs15(
    int __x,
  ) {
    return _labs15(
      __x,
    );
  }

  late final _labs15Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs15 = _labs15Ptr.asFunction<int Function(int)>();

  int llabs15(
    int __x,
  ) {
    return _llabs15(
      __x,
    );
  }

  late final _llabs15Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs15 = _llabs15Ptr.asFunction<int Function(int)>();

  div_t div15(
    int __numer,
    int __denom,
  ) {
    return _div15(
      __numer,
      __denom,
    );
  }

  late final _div15Ptr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div15 = _div15Ptr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv15(
    int __numer,
    int __denom,
  ) {
    return _ldiv15(
      __numer,
      __denom,
    );
  }

  late final _ldiv15Ptr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv15 = _ldiv15Ptr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv15(
    int __numer,
    int __denom,
  ) {
    return _lldiv15(
      __numer,
      __denom,
    );
  }

  late final _lldiv15Ptr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv15 = _lldiv15Ptr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt15(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt15(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt15 = _ecvt15Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt15(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt15(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt15 = _fcvt15Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt15(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt15(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt15 = _gcvt15Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r15(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r15(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('ecvt_r');
  late final _ecvt_r15 = _ecvt_r15Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r15(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r15(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('fcvt_r');
  late final _fcvt_r15 = _fcvt_r15Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen15(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen15(
      __s,
      __n,
    );
  }

  late final _mblen15Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mblen');
  late final _mblen15 =
      _mblen15Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc15(
    ffi.Pointer<ffi.Int> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc15(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('mbtowc');
  late final _mbtowc15 = _mbtowc15Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb15(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb15(
      __s,
      __wchar,
    );
  }

  late final _wctomb15Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'wctomb');
  late final _wctomb15 =
      _wctomb15Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs15(
    ffi.Pointer<ffi.Int> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs15(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mbstowcs');
  late final _mbstowcs15 = _mbstowcs15Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs15(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Int> __pwcs,
    int __n,
  ) {
    return _wcstombs15(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('wcstombs');
  late final _wcstombs15 = _wcstombs15Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  int rpmatch15(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch15(
      __response,
    );
  }

  late final _rpmatch15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch15 =
      _rpmatch15Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt15(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt15(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt15 = _getsubopt15Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg15(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg15(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg15 =
      _getloadavg15Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Void> memcpy15(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy15(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpy15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memcpy');
  late final _memcpy15 = _memcpy15Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove15(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove15(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmove15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memmove');
  late final _memmove15 = _memmove15Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy15(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy15(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpy15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memccpy');
  late final _memccpy15 = _memccpy15Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset15(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset15(
      __s,
      __c,
      __n,
    );
  }

  late final _memset15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memset');
  late final _memset15 = _memset15Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp15(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp15(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmp15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('memcmp');
  late final _memcmp15 = _memcmp15Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq15(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq15(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeq15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__memcmpeq');
  late final ___memcmpeq15 = ___memcmpeq15Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr15(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr15(
      __s,
      __c,
      __n,
    );
  }

  late final _memchr15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memchr');
  late final _memchr15 = _memchr15Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy15(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy15(
      __dest,
      __src,
    );
  }

  late final _strcpy15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy15 = _strcpy15Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy15(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy15(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpy15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncpy');
  late final _strncpy15 = _strncpy15Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat15(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat15(
      __dest,
      __src,
    );
  }

  late final _strcat15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat15 = _strcat15Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat15(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat15(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncat15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncat');
  late final _strncat15 = _strncat15Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp15(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp15(
      __s1,
      __s2,
    );
  }

  late final _strcmp15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp15 = _strcmp15Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp15(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp15(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmp15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncmp');
  late final _strncmp15 = _strncmp15Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll15(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll15(
      __s1,
      __s2,
    );
  }

  late final _strcoll15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll15 = _strcoll15Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm15(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm15(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrm15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strxfrm');
  late final _strxfrm15 = _strxfrm15Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l15(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l15(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_l15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l15 = _strcoll_l15Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l15(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l15(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_l15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strxfrm_l');
  late final _strxfrm_l15 = _strxfrm_l15Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup15(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup15(
      __s,
    );
  }

  late final _strdup15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup15 = _strdup15Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup15(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup15(
      __string,
      __n,
    );
  }

  late final _strndup15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strndup');
  late final _strndup15 = _strndup15Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr15(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr15(
      __s,
      __c,
    );
  }

  late final _strchr15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr15 = _strchr15Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr15(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr15(
      __s,
      __c,
    );
  }

  late final _strrchr15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr15 = _strrchr15Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn15(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn15(
      __s,
      __reject,
    );
  }

  late final _strcspn15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn15 = _strcspn15Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn15(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn15(
      __s,
      __accept,
    );
  }

  late final _strspn15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn15 = _strspn15Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk15(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk15(
      __s,
      __accept,
    );
  }

  late final _strpbrk15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk15 = _strpbrk15Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr15(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr15(
      __haystack,
      __needle,
    );
  }

  late final _strstr15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr15 = _strstr15Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok15(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok15(
      __s,
      __delim,
    );
  }

  late final _strtok15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok15 = _strtok15Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r15(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r15(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_r15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r15 = ___strtok_r15Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r15(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r15(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_r15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r15 = _strtok_r15Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen15(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen15(
      __s,
    );
  }

  late final _strlen15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'strlen');
  late final _strlen15 =
      _strlen15Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen15(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen15(
      __string,
      __maxlen,
    );
  }

  late final _strnlen15Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'strnlen');
  late final _strnlen15 =
      _strnlen15Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror15(
    int __errnum,
  ) {
    return _strerror15(
      __errnum,
    );
  }

  late final _strerror15Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror15 =
      _strerror15Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r15(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r15(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_r15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('strerror_r');
  late final _strerror_r15 = _strerror_r15Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l15(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l15(
      __errnum,
      __l,
    );
  }

  late final _strerror_l15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l15 = _strerror_l15Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp15(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp15(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmp15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcmp');
  late final _bcmp15 = _bcmp15Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy15(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy15(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopy15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcopy');
  late final _bcopy15 = _bcopy15Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero15(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero15(
      __s,
      __n,
    );
  }

  late final _bzero15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('bzero');
  late final _bzero15 =
      _bzero15Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index15(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index15(
      __s,
      __c,
    );
  }

  late final _index15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index15 = _index15Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex15(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex15(
      __s,
      __c,
    );
  }

  late final _rindex15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex15 = _rindex15Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs15(
    int __i,
  ) {
    return _ffs15(
      __i,
    );
  }

  late final _ffs15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs15 = _ffs15Ptr.asFunction<int Function(int)>();

  int ffsl15(
    int __l,
  ) {
    return _ffsl15(
      __l,
    );
  }

  late final _ffsl15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl15 = _ffsl15Ptr.asFunction<int Function(int)>();

  int ffsll15(
    int __ll,
  ) {
    return _ffsll15(
      __ll,
    );
  }

  late final _ffsll15Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll15 = _ffsll15Ptr.asFunction<int Function(int)>();

  int strcasecmp15(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp15(
      __s1,
      __s2,
    );
  }

  late final _strcasecmp15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp15 = _strcasecmp15Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp15(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp15(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmp15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncasecmp');
  late final _strncasecmp15 = _strncasecmp15Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l15(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l15(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_l15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l15 = _strcasecmp_l15Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l15(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l15(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_l15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l15 = _strncasecmp_l15Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero15(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero15(
      __s,
      __n,
    );
  }

  late final _explicit_bzero15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('explicit_bzero');
  late final _explicit_bzero15 = _explicit_bzero15Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep15(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep15(
      __stringp,
      __delim,
    );
  }

  late final _strsep15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep15 = _strsep15Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal15(
    int __sig,
  ) {
    return _strsignal15(
      __sig,
    );
  }

  late final _strsignal15Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal15 =
      _strsignal15Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy15(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy15(
      __dest,
      __src,
    );
  }

  late final ___stpcpy15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy15 = ___stpcpy15Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy15(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy15(
      __dest,
      __src,
    );
  }

  late final _stpcpy15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy15 = _stpcpy15Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy15(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy15(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpy15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('__stpncpy');
  late final ___stpncpy15 = ___stpncpy15Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy15(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy15(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpy15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('stpncpy');
  late final _stpncpy15 = _stpncpy15Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  /// !init static ecc context
  void dogecoin_ecc_start1() {
    return _dogecoin_ecc_start1();
  }

  late final _dogecoin_ecc_start1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('dogecoin_ecc_start');
  late final _dogecoin_ecc_start1 =
      _dogecoin_ecc_start1Ptr.asFunction<void Function()>();

  /// !destroys the static ecc context
  void dogecoin_ecc_stop1() {
    return _dogecoin_ecc_stop1();
  }

  late final _dogecoin_ecc_stop1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('dogecoin_ecc_stop');
  late final _dogecoin_ecc_stop1 =
      _dogecoin_ecc_stop1Ptr.asFunction<void Function()>();

  int generatePrivPubKeypair1(
    ffi.Pointer<ffi.Char> wif_privkey,
    ffi.Pointer<ffi.Char> p2pkh_pubkey,
    int is_testnet,
  ) {
    return _generatePrivPubKeypair1(
      wif_privkey,
      p2pkh_pubkey,
      is_testnet,
    );
  }

  late final _generatePrivPubKeypair1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('generatePrivPubKeypair');
  late final _generatePrivPubKeypair1 = _generatePrivPubKeypair1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int generateHDMasterPubKeypair1(
    ffi.Pointer<ffi.Char> wif_privkey_master,
    ffi.Pointer<ffi.Char> p2pkh_pubkey_master,
    int is_testnet,
  ) {
    return _generateHDMasterPubKeypair1(
      wif_privkey_master,
      p2pkh_pubkey_master,
      is_testnet,
    );
  }

  late final _generateHDMasterPubKeypair1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('generateHDMasterPubKeypair');
  late final _generateHDMasterPubKeypair1 =
      _generateHDMasterPubKeypair1Ptr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int generateDerivedHDPubkey1(
    ffi.Pointer<ffi.Char> wif_privkey_master,
    ffi.Pointer<ffi.Char> p2pkh_pubkey,
  ) {
    return _generateDerivedHDPubkey1(
      wif_privkey_master,
      p2pkh_pubkey,
    );
  }

  late final _generateDerivedHDPubkey1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('generateDerivedHDPubkey');
  late final _generateDerivedHDPubkey1 = _generateDerivedHDPubkey1Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int verifyPrivPubKeypair1(
    ffi.Pointer<ffi.Char> wif_privkey,
    ffi.Pointer<ffi.Char> p2pkh_pubkey,
    int is_testnet,
  ) {
    return _verifyPrivPubKeypair1(
      wif_privkey,
      p2pkh_pubkey,
      is_testnet,
    );
  }

  late final _verifyPrivPubKeypair1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('verifyPrivPubKeypair');
  late final _verifyPrivPubKeypair1 = _verifyPrivPubKeypair1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int verifyHDMasterPubKeypair1(
    ffi.Pointer<ffi.Char> wif_privkey_master,
    ffi.Pointer<ffi.Char> p2pkh_pubkey_master,
    int is_testnet,
  ) {
    return _verifyHDMasterPubKeypair1(
      wif_privkey_master,
      p2pkh_pubkey_master,
      is_testnet,
    );
  }

  late final _verifyHDMasterPubKeypair1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('verifyHDMasterPubKeypair');
  late final _verifyHDMasterPubKeypair1 =
      _verifyHDMasterPubKeypair1Ptr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int verifyP2pkhAddress1(
    ffi.Pointer<ffi.Char> p2pkh_pubkey,
    int len,
  ) {
    return _verifyP2pkhAddress1(
      p2pkh_pubkey,
      len,
    );
  }

  late final _verifyP2pkhAddress1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Uint8)>>('verifyP2pkhAddress');
  late final _verifyP2pkhAddress1 = _verifyP2pkhAddress1Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int start_transaction() {
    return _start_transaction();
  }

  late final _start_transactionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('start_transaction');
  late final _start_transaction =
      _start_transactionPtr.asFunction<int Function()>();

  int add_utxo(
    int txindex,
    ffi.Pointer<ffi.Char> hex_utxo_txid,
    int vout,
  ) {
    return _add_utxo(
      txindex,
      hex_utxo_txid,
      vout,
    );
  }

  late final _add_utxoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('add_utxo');
  late final _add_utxo =
      _add_utxoPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int add_output(
    int txindex,
    ffi.Pointer<ffi.Char> destinationaddress,
    ffi.Pointer<ffi.Char> amount,
  ) {
    return _add_output(
      txindex,
      destinationaddress,
      amount,
    );
  }

  late final _add_outputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('add_output');
  late final _add_output = _add_outputPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> finalize_transaction(
    int txindex,
    ffi.Pointer<ffi.Char> destinationaddress,
    ffi.Pointer<ffi.Char> subtractedfee,
    ffi.Pointer<ffi.Char> out_dogeamount_for_verification,
    ffi.Pointer<ffi.Char> changeaddress,
  ) {
    return _finalize_transaction(
      txindex,
      destinationaddress,
      subtractedfee,
      out_dogeamount_for_verification,
      changeaddress,
    );
  }

  late final _finalize_transactionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('finalize_transaction');
  late final _finalize_transaction = _finalize_transactionPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int sign_transaction(
    int txindex,
    ffi.Pointer<ffi.Char> script_pubkey,
    ffi.Pointer<ffi.Char> privkey,
  ) {
    return _sign_transaction(
      txindex,
      script_pubkey,
      privkey,
    );
  }

  late final _sign_transactionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('sign_transaction');
  late final _sign_transaction = _sign_transactionPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void remove_all() {
    return _remove_all();
  }

  late final _remove_allPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('remove_all');
  late final _remove_all = _remove_allPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Char> get_raw_transaction(
    int txindex,
  ) {
    return _get_raw_transaction(
      txindex,
    );
  }

  late final _get_raw_transactionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'get_raw_transaction');
  late final _get_raw_transaction =
      _get_raw_transactionPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void clear_transaction(
    int txindex,
  ) {
    return _clear_transaction(
      txindex,
    );
  }

  late final _clear_transactionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'clear_transaction');
  late final _clear_transaction =
      _clear_transactionPtr.asFunction<void Function(int)>();

  int sign_raw_transaction(
    int inputindex,
    ffi.Pointer<ffi.Char> incomingrawtx,
    ffi.Pointer<ffi.Char> scripthex,
    int sighashtype,
    ffi.Pointer<ffi.Char> privkey,
  ) {
    return _sign_raw_transaction(
      inputindex,
      incomingrawtx,
      scripthex,
      sighashtype,
      privkey,
    );
  }

  late final _sign_raw_transactionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>)>>('sign_raw_transaction');
  late final _sign_raw_transaction = _sign_raw_transactionPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>)>();

  int store_raw_transaction(
    ffi.Pointer<ffi.Char> incomingrawtx,
  ) {
    return _store_raw_transaction(
      incomingrawtx,
    );
  }

  late final _store_raw_transactionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'store_raw_transaction');
  late final _store_raw_transaction = _store_raw_transactionPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int remove16(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove16(
      __filename,
    );
  }

  late final _remove16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove16 =
      _remove16Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename16(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename16(
      __old,
      __new,
    );
  }

  late final _rename16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename16 = _rename16Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat16(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat16(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameat16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat16 = _renameat16Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose16(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose16(
      __stream,
    );
  }

  late final _fclose16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose16 =
      _fclose16Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile16() {
    return _tmpfile16();
  }

  late final _tmpfile16Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile16 =
      _tmpfile16Ptr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam16(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam16(
      arg0,
    );
  }

  late final _tmpnam16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam16 = _tmpnam16Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r16(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r16(
      __s,
    );
  }

  late final _tmpnam_r16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r16 = _tmpnam_r16Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam16(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam16(
      __dir,
      __pfx,
    );
  }

  late final _tempnam16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam16 = _tempnam16Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush16(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush16(
      __stream,
    );
  }

  late final _fflush16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush16 =
      _fflush16Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked16(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked16(
      __stream,
    );
  }

  late final _fflush_unlocked16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked16 =
      _fflush_unlocked16Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen16(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen16(
      __filename,
      __modes,
    );
  }

  late final _fopen16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen16 = _fopen16Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen16(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen16(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopen16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen16 = _freopen16Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen16(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen16(
      __fd,
      __modes,
    );
  }

  late final _fdopen16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen16 = _fdopen16Ptr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen16(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen16(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopen16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen16 = _fmemopen16Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream16(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Int> __sizeloc,
  ) {
    return _open_memstream16(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstream16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('open_memstream');
  late final _open_memstream16 = _open_memstream16Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void setbuf16(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf16(
      __stream,
      __buf,
    );
  }

  late final _setbuf16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf16 = _setbuf16Ptr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf16(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf16(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbuf16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('setvbuf');
  late final _setvbuf16 = _setvbuf16Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer16(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer16(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbuffer16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer16 = _setbuffer16Ptr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf16(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf16(
      __stream,
    );
  }

  late final _setlinebuf16Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf16 =
      _setlinebuf16Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf16(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf16(
      __stream,
      __format,
    );
  }

  late final _fprintf16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf16 = _fprintf16Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf16(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf16(
      __format,
    );
  }

  late final _printf16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf16 =
      _printf16Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf16(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf16(
      __s,
      __format,
    );
  }

  late final _sprintf16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf16 = _sprintf16Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf16(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfprintf16(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintf16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfprintf');
  late final _vfprintf16 = _vfprintf16Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vprintf16(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vprintf16(
      __format,
      __arg,
    );
  }

  late final _vprintf16Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vprintf');
  late final _vprintf16 =
      _vprintf16Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsprintf16(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsprintf16(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintf16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsprintf');
  late final _vsprintf16 = _vsprintf16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int snprintf16(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf16(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintf16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf16 = _snprintf16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf16(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsnprintf16(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintf16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('vsnprintf');
  late final _vsnprintf16 = _vsnprintf16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int vdprintf16(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    int __arg,
  ) {
    return _vdprintf16(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintf16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('vdprintf');
  late final _vdprintf16 = _vdprintf16Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int dprintf16(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf16(
      __fd,
      __fmt,
    );
  }

  late final _dprintf16Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf16 =
      _dprintf16Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf32(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf32(
      __stream,
      __format,
    );
  }

  late final _fscanf32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf32 = _fscanf32Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf32(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf32(
      __format,
    );
  }

  late final _scanf32Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf32 =
      _scanf32Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf32(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf32(
      __s,
      __format,
    );
  }

  late final _sscanf32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf32 = _sscanf32Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fscanf33(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf33(
      __stream,
      __format,
    );
  }

  late final _fscanf33Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf33 = _fscanf33Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf33(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf33(
      __format,
    );
  }

  late final _scanf33Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf33 =
      _scanf33Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf33(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf33(
      __s,
      __format,
    );
  }

  late final _sscanf33Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf33 = _sscanf33Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf32(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf32(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf32 = _vfscanf32Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf32(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf32(
      __format,
      __arg,
    );
  }

  late final _vscanf32Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf32 =
      _vscanf32Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf32(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf32(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf32 = _vsscanf32Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int vfscanf33(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf33(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf33Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf33 = _vfscanf33Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf33(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf33(
      __format,
      __arg,
    );
  }

  late final _vscanf33Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf33 =
      _vscanf33Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf33(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf33(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf33Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf33 = _vsscanf33Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fgetc16(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc16(
      __stream,
    );
  }

  late final _fgetc16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc16 =
      _fgetc16Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc16(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc16(
      __stream,
    );
  }

  late final _getc16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc16 = _getc16Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar16() {
    return _getchar16();
  }

  late final _getchar16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar16 = _getchar16Ptr.asFunction<int Function()>();

  int getc_unlocked16(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked16(
      __stream,
    );
  }

  late final _getc_unlocked16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked16 =
      _getc_unlocked16Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked16() {
    return _getchar_unlocked16();
  }

  late final _getchar_unlocked16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked16 =
      _getchar_unlocked16Ptr.asFunction<int Function()>();

  int fgetc_unlocked16(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked16(
      __stream,
    );
  }

  late final _fgetc_unlocked16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked16 =
      _fgetc_unlocked16Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc16(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc16(
      __c,
      __stream,
    );
  }

  late final _fputc16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc16 =
      _fputc16Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc16(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc16(
      __c,
      __stream,
    );
  }

  late final _putc16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc16 =
      _putc16Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar16(
    int __c,
  ) {
    return _putchar16(
      __c,
    );
  }

  late final _putchar16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar16 = _putchar16Ptr.asFunction<int Function(int)>();

  int fputc_unlocked16(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked16(
      __c,
      __stream,
    );
  }

  late final _fputc_unlocked16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked16 =
      _fputc_unlocked16Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked16(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked16(
      __c,
      __stream,
    );
  }

  late final _putc_unlocked16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked16 =
      _putc_unlocked16Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked16(
    int __c,
  ) {
    return _putchar_unlocked16(
      __c,
    );
  }

  late final _putchar_unlocked16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked16 =
      _putchar_unlocked16Ptr.asFunction<int Function(int)>();

  int getw16(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw16(
      __stream,
    );
  }

  late final _getw16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw16 = _getw16Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw16(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw16(
      __w,
      __stream,
    );
  }

  late final _putw16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw16 =
      _putw16Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets16(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets16(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgets16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets16 = _fgets16Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim16(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim16(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelim16Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim16 = ___getdelim16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getdelim16(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim16(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelim16Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim16 = _getdelim16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getline16(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline16(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getline16Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<FILE>)>>('getline');
  late final _getline16 = _getline16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<FILE>)>();

  int fputs16(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs16(
      __s,
      __stream,
    );
  }

  late final _fputs16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs16 = _fputs16Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts16(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts16(
      __s,
    );
  }

  late final _puts16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts16 =
      _puts16Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc16(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc16(
      __c,
      __stream,
    );
  }

  late final _ungetc16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc16 =
      _ungetc16Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread16(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread16(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread16 = _fread16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite16(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite16(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwrite16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite16 = _fwrite16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked16(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked16(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlocked16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked16 = _fread_unlocked16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked16(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked16(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlocked16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked16 = _fwrite_unlocked16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek16(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek16(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseek16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek16 =
      _fseek16Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell16(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell16(
      __stream,
    );
  }

  late final _ftell16Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell16 =
      _ftell16Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind16(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind16(
      __stream,
    );
  }

  late final _rewind16Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind16 =
      _rewind16Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko16(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko16(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseeko16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko16 =
      _fseeko16Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello16(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello16(
      __stream,
    );
  }

  late final _ftello16Ptr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello16 =
      _ftello16Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos16(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos16(
      __stream,
      __pos,
    );
  }

  late final _fgetpos16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos16 = _fgetpos16Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos16(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos16(
      __stream,
      __pos,
    );
  }

  late final _fsetpos16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos16 = _fsetpos16Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr16(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr16(
      __stream,
    );
  }

  late final _clearerr16Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr16 =
      _clearerr16Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof16(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof16(
      __stream,
    );
  }

  late final _feof16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof16 = _feof16Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror16(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror16(
      __stream,
    );
  }

  late final _ferror16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror16 =
      _ferror16Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked16(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked16(
      __stream,
    );
  }

  late final _clearerr_unlocked16Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked16 =
      _clearerr_unlocked16Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked16(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked16(
      __stream,
    );
  }

  late final _feof_unlocked16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked16 =
      _feof_unlocked16Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked16(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked16(
      __stream,
    );
  }

  late final _ferror_unlocked16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked16 =
      _ferror_unlocked16Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror16(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror16(
      __s,
    );
  }

  late final _perror16Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror16 =
      _perror16Ptr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno16(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno16(
      __stream,
    );
  }

  late final _fileno16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno16 =
      _fileno16Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked16(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked16(
      __stream,
    );
  }

  late final _fileno_unlocked16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked16 =
      _fileno_unlocked16Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose16(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose16(
      __stream,
    );
  }

  late final _pclose16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose16 =
      _pclose16Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen16(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen16(
      __command,
      __modes,
    );
  }

  late final _popen16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen16 = _popen16Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid16(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid16(
      __s,
    );
  }

  late final _ctermid16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid16 = _ctermid16Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile16(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile16(
      __stream,
    );
  }

  late final _flockfile16Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile16 =
      _flockfile16Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile16(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile16(
      __stream,
    );
  }

  late final _ftrylockfile16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile16 =
      _ftrylockfile16Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile16(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile16(
      __stream,
    );
  }

  late final _funlockfile16Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile16 =
      _funlockfile16Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow16(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow16(
      arg0,
    );
  }

  late final ___uflow16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow16 =
      ___uflow16Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow16(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow16(
      arg0,
      arg1,
    );
  }

  late final ___overflow16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow16 =
      ___overflow16Ptr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __ctype_get_mb_cur_max16() {
    return ___ctype_get_mb_cur_max16();
  }

  late final ___ctype_get_mb_cur_max16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max16 =
      ___ctype_get_mb_cur_max16Ptr.asFunction<int Function()>();

  double atof16(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof16(
      __nptr,
    );
  }

  late final _atof16Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof16 =
      _atof16Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi16(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi16(
      __nptr,
    );
  }

  late final _atoi16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi16 =
      _atoi16Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol16(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol16(
      __nptr,
    );
  }

  late final _atol16Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol16 =
      _atol16Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll16(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll16(
      __nptr,
    );
  }

  late final _atoll16Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll16 =
      _atoll16Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod16(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod16(
      __nptr,
      __endptr,
    );
  }

  late final _strtod16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod16 = _strtod16Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof16(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof16(
      __nptr,
      __endptr,
    );
  }

  late final _strtof16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof16 = _strtof16Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol16(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol16(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol16 = _strtol16Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul16(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul16(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul16 = _strtoul16Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq16(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq16(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq16 = _strtoq16Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq16(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq16(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq16 = _strtouq16Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll16(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll16(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll16 = _strtoll16Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull16(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull16(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull16 = _strtoull16Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a16(
    int __n,
  ) {
    return _l64a16(
      __n,
    );
  }

  late final _l64a16Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a16 =
      _l64a16Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l16(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l16(
      __s,
    );
  }

  late final _a64l16Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l16 =
      _a64l16Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select16(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select16(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select16 = _select16Ptr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect16(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect16(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect16 = _pselect16Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random16() {
    return _random16();
  }

  late final _random16Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random16 = _random16Ptr.asFunction<int Function()>();

  void srandom16(
    int __seed,
  ) {
    return _srandom16(
      __seed,
    );
  }

  late final _srandom16Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom16 = _srandom16Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate16(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate16(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int)>>('initstate');
  late final _initstate16 = _initstate16Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate16(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate16(
      __statebuf,
    );
  }

  late final _setstate16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate16 = _setstate16Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r16(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r16(
      __buf,
      __result,
    );
  }

  late final _random_r16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r16 = _random_r16Ptr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r16(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r16(
      __seed,
      __buf,
    );
  }

  late final _srandom_r16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r16 =
      _srandom_r16Ptr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r16(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r16(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r16 = _initstate_r16Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r16(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r16(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r16 = _setstate_r16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand16() {
    return _rand16();
  }

  late final _rand16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand16 = _rand16Ptr.asFunction<int Function()>();

  void srand16(
    int __seed,
  ) {
    return _srand16(
      __seed,
    );
  }

  late final _srand16Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand16 = _srand16Ptr.asFunction<void Function(int)>();

  int rand_r16(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r16(
      __seed,
    );
  }

  late final _rand_r16Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r16 =
      _rand_r16Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand4816() {
    return _drand4816();
  }

  late final _drand4816Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand4816 = _drand4816Ptr.asFunction<double Function()>();

  double erand4816(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand4816(
      __xsubi,
    );
  }

  late final _erand4816Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand4816 = _erand4816Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand4816() {
    return _lrand4816();
  }

  late final _lrand4816Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand4816 = _lrand4816Ptr.asFunction<int Function()>();

  int nrand4816(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand4816(
      __xsubi,
    );
  }

  late final _nrand4816Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand4816 =
      _nrand4816Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand4816() {
    return _mrand4816();
  }

  late final _mrand4816Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand4816 = _mrand4816Ptr.asFunction<int Function()>();

  int jrand4816(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand4816(
      __xsubi,
    );
  }

  late final _jrand4816Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand4816 =
      _jrand4816Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand4816(
    int __seedval,
  ) {
    return _srand4816(
      __seedval,
    );
  }

  late final _srand4816Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand4816 = _srand4816Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed4816(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed4816(
      __seed16v,
    );
  }

  late final _seed4816Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed4816 = _seed4816Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong4816(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong4816(
      __param,
    );
  }

  late final _lcong4816Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong4816 =
      _lcong4816Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r16(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r16(
      __buffer,
      __result,
    );
  }

  late final _drand48_r16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r16 = _drand48_r16Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r16(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r16(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r16 = _erand48_r16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r16(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r16(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r16 = _lrand48_r16Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r16(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r16(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r16 = _nrand48_r16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r16(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r16(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r16 = _mrand48_r16Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r16(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r16(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r16 = _jrand48_r16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r16(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r16(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r16 = _srand48_r16Ptr
      .asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r16(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r16(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r16 = _seed48_r16Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r16(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r16(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r16 = _lcong48_r16Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int arc4random16() {
    return _arc4random16();
  }

  late final _arc4random16Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random16 = _arc4random16Ptr.asFunction<int Function()>();

  void arc4random_buf16(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf16(
      __buf,
      __size,
    );
  }

  late final _arc4random_buf16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('arc4random_buf');
  late final _arc4random_buf16 = _arc4random_buf16Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform16(
    int __upper_bound,
  ) {
    return _arc4random_uniform16(
      __upper_bound,
    );
  }

  late final _arc4random_uniform16Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
          'arc4random_uniform');
  late final _arc4random_uniform16 =
      _arc4random_uniform16Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc16(
    int __size,
  ) {
    return _malloc16(
      __size,
    );
  }

  late final _malloc16Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'malloc');
  late final _malloc16 =
      _malloc16Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc16(
    int __nmemb,
    int __size,
  ) {
    return _calloc16(
      __nmemb,
      __size,
    );
  }

  late final _calloc16Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'calloc');
  late final _calloc16 =
      _calloc16Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc16(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc16(
      __ptr,
      __size,
    );
  }

  late final _realloc16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('realloc');
  late final _realloc16 = _realloc16Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free16(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free16(
      __ptr,
    );
  }

  late final _free16Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free16 =
      _free16Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray32(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray32(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray32 = _reallocarray32Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray33(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray33(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray33Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray33 = _reallocarray33Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca16(
    int __size,
  ) {
    return _alloca16(
      __size,
    );
  }

  late final _alloca16Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'alloca');
  late final _alloca16 =
      _alloca16Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc16(
    int __size,
  ) {
    return _valloc16(
      __size,
    );
  }

  late final _valloc16Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'valloc');
  late final _valloc16 =
      _valloc16Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign16(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign16(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int,
              ffi.Int)>>('posix_memalign');
  late final _posix_memalign16 = _posix_memalign16Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc16(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc16(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc16Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'aligned_alloc');
  late final _aligned_alloc16 = _aligned_alloc16Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort16() {
    return _abort16();
  }

  late final _abort16Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort16 = _abort16Ptr.asFunction<void Function()>();

  int atexit16(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit16(
      __func,
    );
  }

  late final _atexit16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit16 = _atexit16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit16(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit16(
      __func,
    );
  }

  late final _at_quick_exit16Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit16 = _at_quick_exit16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit16(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit16(
      __func,
      __arg,
    );
  }

  late final _on_exit16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit16 = _on_exit16Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit16(
    int __status,
  ) {
    return _exit16(
      __status,
    );
  }

  late final _exit16Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit16 = _exit16Ptr.asFunction<void Function(int)>();

  void quick_exit16(
    int __status,
  ) {
    return _quick_exit16(
      __status,
    );
  }

  late final _quick_exit16Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit16 = _quick_exit16Ptr.asFunction<void Function(int)>();

  void _Exit16(
    int __status,
  ) {
    return __Exit16(
      __status,
    );
  }

  late final __Exit16Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit16 = __Exit16Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv16(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv16(
      __name,
    );
  }

  late final _getenv16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv16 = _getenv16Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv16(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv16(
      __string,
    );
  }

  late final _putenv16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv16 =
      _putenv16Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv16(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv16(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv16 = _setenv16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv16(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv16(
      __name,
    );
  }

  late final _unsetenv16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv16 =
      _unsetenv16Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv16() {
    return _clearenv16();
  }

  late final _clearenv16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv16 = _clearenv16Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp16(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp16(
      __template,
    );
  }

  late final _mktemp16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp16 = _mktemp16Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp16(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp16(
      __template,
    );
  }

  late final _mkstemp16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp16 =
      _mkstemp16Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps16(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps16(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps16Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps16 =
      _mkstemps16Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp16(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp16(
      __template,
    );
  }

  late final _mkdtemp16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp16 = _mkdtemp16Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system16(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system16(
      __command,
    );
  }

  late final _system16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system16 =
      _system16Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath16(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath16(
      __name,
      __resolved,
    );
  }

  late final _realpath16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath16 = _realpath16Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch16(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch16(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              __compar_fn_t)>>('bsearch');
  late final _bsearch16 = _bsearch16Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort16(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort16(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              __compar_fn_t)>>('qsort');
  late final _qsort16 = _qsort16Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs16(
    int __x,
  ) {
    return _abs16(
      __x,
    );
  }

  late final _abs16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs16 = _abs16Ptr.asFunction<int Function(int)>();

  int labs16(
    int __x,
  ) {
    return _labs16(
      __x,
    );
  }

  late final _labs16Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs16 = _labs16Ptr.asFunction<int Function(int)>();

  int llabs16(
    int __x,
  ) {
    return _llabs16(
      __x,
    );
  }

  late final _llabs16Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs16 = _llabs16Ptr.asFunction<int Function(int)>();

  div_t div16(
    int __numer,
    int __denom,
  ) {
    return _div16(
      __numer,
      __denom,
    );
  }

  late final _div16Ptr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div16 = _div16Ptr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv16(
    int __numer,
    int __denom,
  ) {
    return _ldiv16(
      __numer,
      __denom,
    );
  }

  late final _ldiv16Ptr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv16 = _ldiv16Ptr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv16(
    int __numer,
    int __denom,
  ) {
    return _lldiv16(
      __numer,
      __denom,
    );
  }

  late final _lldiv16Ptr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv16 = _lldiv16Ptr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt16(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt16(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt16 = _ecvt16Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt16(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt16(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt16 = _fcvt16Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt16(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt16(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt16 = _gcvt16Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r16(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r16(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('ecvt_r');
  late final _ecvt_r16 = _ecvt_r16Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r16(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r16(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('fcvt_r');
  late final _fcvt_r16 = _fcvt_r16Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen16(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen16(
      __s,
      __n,
    );
  }

  late final _mblen16Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mblen');
  late final _mblen16 =
      _mblen16Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc16(
    ffi.Pointer<ffi.Int> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc16(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('mbtowc');
  late final _mbtowc16 = _mbtowc16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb16(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb16(
      __s,
      __wchar,
    );
  }

  late final _wctomb16Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'wctomb');
  late final _wctomb16 =
      _wctomb16Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs16(
    ffi.Pointer<ffi.Int> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs16(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mbstowcs');
  late final _mbstowcs16 = _mbstowcs16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs16(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Int> __pwcs,
    int __n,
  ) {
    return _wcstombs16(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('wcstombs');
  late final _wcstombs16 = _wcstombs16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  int rpmatch16(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch16(
      __response,
    );
  }

  late final _rpmatch16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch16 =
      _rpmatch16Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt16(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt16(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt16 = _getsubopt16Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg16(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg16(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg16 =
      _getloadavg16Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Void> memcpy16(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy16(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpy16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memcpy');
  late final _memcpy16 = _memcpy16Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove16(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove16(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmove16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memmove');
  late final _memmove16 = _memmove16Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy16(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy16(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpy16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memccpy');
  late final _memccpy16 = _memccpy16Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset16(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset16(
      __s,
      __c,
      __n,
    );
  }

  late final _memset16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memset');
  late final _memset16 = _memset16Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp16(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp16(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmp16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('memcmp');
  late final _memcmp16 = _memcmp16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq16(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq16(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeq16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__memcmpeq');
  late final ___memcmpeq16 = ___memcmpeq16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr16(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr16(
      __s,
      __c,
      __n,
    );
  }

  late final _memchr16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memchr');
  late final _memchr16 = _memchr16Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy16(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy16(
      __dest,
      __src,
    );
  }

  late final _strcpy16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy16 = _strcpy16Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy16(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy16(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpy16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncpy');
  late final _strncpy16 = _strncpy16Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat16(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat16(
      __dest,
      __src,
    );
  }

  late final _strcat16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat16 = _strcat16Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat16(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat16(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncat16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncat');
  late final _strncat16 = _strncat16Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp16(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp16(
      __s1,
      __s2,
    );
  }

  late final _strcmp16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp16 = _strcmp16Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp16(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp16(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmp16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncmp');
  late final _strncmp16 = _strncmp16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll16(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll16(
      __s1,
      __s2,
    );
  }

  late final _strcoll16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll16 = _strcoll16Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm16(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm16(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrm16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strxfrm');
  late final _strxfrm16 = _strxfrm16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l16(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l16(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_l16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l16 = _strcoll_l16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l16(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l16(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_l16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strxfrm_l');
  late final _strxfrm_l16 = _strxfrm_l16Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup16(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup16(
      __s,
    );
  }

  late final _strdup16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup16 = _strdup16Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup16(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup16(
      __string,
      __n,
    );
  }

  late final _strndup16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strndup');
  late final _strndup16 = _strndup16Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr16(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr16(
      __s,
      __c,
    );
  }

  late final _strchr16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr16 = _strchr16Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr16(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr16(
      __s,
      __c,
    );
  }

  late final _strrchr16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr16 = _strrchr16Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn16(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn16(
      __s,
      __reject,
    );
  }

  late final _strcspn16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn16 = _strcspn16Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn16(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn16(
      __s,
      __accept,
    );
  }

  late final _strspn16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn16 = _strspn16Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk16(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk16(
      __s,
      __accept,
    );
  }

  late final _strpbrk16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk16 = _strpbrk16Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr16(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr16(
      __haystack,
      __needle,
    );
  }

  late final _strstr16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr16 = _strstr16Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok16(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok16(
      __s,
      __delim,
    );
  }

  late final _strtok16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok16 = _strtok16Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r16(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r16(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_r16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r16 = ___strtok_r16Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r16(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r16(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_r16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r16 = _strtok_r16Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen16(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen16(
      __s,
    );
  }

  late final _strlen16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'strlen');
  late final _strlen16 =
      _strlen16Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen16(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen16(
      __string,
      __maxlen,
    );
  }

  late final _strnlen16Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'strnlen');
  late final _strnlen16 =
      _strnlen16Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror16(
    int __errnum,
  ) {
    return _strerror16(
      __errnum,
    );
  }

  late final _strerror16Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror16 =
      _strerror16Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r16(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r16(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_r16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('strerror_r');
  late final _strerror_r16 = _strerror_r16Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l16(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l16(
      __errnum,
      __l,
    );
  }

  late final _strerror_l16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l16 = _strerror_l16Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp16(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp16(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmp16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcmp');
  late final _bcmp16 = _bcmp16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy16(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy16(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopy16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcopy');
  late final _bcopy16 = _bcopy16Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero16(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero16(
      __s,
      __n,
    );
  }

  late final _bzero16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('bzero');
  late final _bzero16 =
      _bzero16Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index16(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index16(
      __s,
      __c,
    );
  }

  late final _index16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index16 = _index16Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex16(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex16(
      __s,
      __c,
    );
  }

  late final _rindex16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex16 = _rindex16Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs16(
    int __i,
  ) {
    return _ffs16(
      __i,
    );
  }

  late final _ffs16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs16 = _ffs16Ptr.asFunction<int Function(int)>();

  int ffsl16(
    int __l,
  ) {
    return _ffsl16(
      __l,
    );
  }

  late final _ffsl16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl16 = _ffsl16Ptr.asFunction<int Function(int)>();

  int ffsll16(
    int __ll,
  ) {
    return _ffsll16(
      __ll,
    );
  }

  late final _ffsll16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll16 = _ffsll16Ptr.asFunction<int Function(int)>();

  int strcasecmp16(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp16(
      __s1,
      __s2,
    );
  }

  late final _strcasecmp16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp16 = _strcasecmp16Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp16(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp16(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmp16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncasecmp');
  late final _strncasecmp16 = _strncasecmp16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l16(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l16(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_l16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l16 = _strcasecmp_l16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l16(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l16(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_l16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l16 = _strncasecmp_l16Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero16(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero16(
      __s,
      __n,
    );
  }

  late final _explicit_bzero16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('explicit_bzero');
  late final _explicit_bzero16 = _explicit_bzero16Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep16(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep16(
      __stringp,
      __delim,
    );
  }

  late final _strsep16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep16 = _strsep16Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal16(
    int __sig,
  ) {
    return _strsignal16(
      __sig,
    );
  }

  late final _strsignal16Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal16 =
      _strsignal16Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy16(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy16(
      __dest,
      __src,
    );
  }

  late final ___stpcpy16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy16 = ___stpcpy16Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy16(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy16(
      __dest,
      __src,
    );
  }

  late final _stpcpy16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy16 = _stpcpy16Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy16(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy16(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpy16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('__stpncpy');
  late final ___stpncpy16 = ___stpncpy16Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy16(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy16(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpy16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('stpncpy');
  late final _stpncpy16 = _stpncpy16Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void dogecoin_mem_set_mapper2(
    dogecoin_mem_mapper mapper,
  ) {
    return _dogecoin_mem_set_mapper2(
      mapper,
    );
  }

  late final _dogecoin_mem_set_mapper2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dogecoin_mem_mapper)>>(
          'dogecoin_mem_set_mapper');
  late final _dogecoin_mem_set_mapper2 = _dogecoin_mem_set_mapper2Ptr
      .asFunction<void Function(dogecoin_mem_mapper)>();

  void dogecoin_mem_set_mapper_default2() {
    return _dogecoin_mem_set_mapper_default2();
  }

  late final _dogecoin_mem_set_mapper_default2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'dogecoin_mem_set_mapper_default');
  late final _dogecoin_mem_set_mapper_default2 =
      _dogecoin_mem_set_mapper_default2Ptr.asFunction<void Function()>();

  ffi.Pointer<ffi.Void> dogecoin_malloc2(
    int size,
  ) {
    return _dogecoin_malloc2(
      size,
    );
  }

  late final _dogecoin_malloc2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'dogecoin_malloc');
  late final _dogecoin_malloc2 =
      _dogecoin_malloc2Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> dogecoin_calloc2(
    int count,
    int size,
  ) {
    return _dogecoin_calloc2(
      count,
      size,
    );
  }

  late final _dogecoin_calloc2Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'dogecoin_calloc');
  late final _dogecoin_calloc2 = _dogecoin_calloc2Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> dogecoin_realloc2(
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _dogecoin_realloc2(
      ptr,
      size,
    );
  }

  late final _dogecoin_realloc2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('dogecoin_realloc');
  late final _dogecoin_realloc2 = _dogecoin_realloc2Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void dogecoin_free2(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _dogecoin_free2(
      ptr,
    );
  }

  late final _dogecoin_free2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'dogecoin_free');
  late final _dogecoin_free2 =
      _dogecoin_free2Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> memcpy_safe2(
    ffi.Pointer<ffi.Void> destination,
    ffi.Pointer<ffi.Void> source,
    int count,
  ) {
    return _memcpy_safe2(
      destination,
      source,
      count,
    );
  }

  late final _memcpy_safe2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.UnsignedInt)>>('memcpy_safe');
  late final _memcpy_safe2 = _memcpy_safe2Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int remove17(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove17(
      __filename,
    );
  }

  late final _remove17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove17 =
      _remove17Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename17(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename17(
      __old,
      __new,
    );
  }

  late final _rename17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename17 = _rename17Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat17(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat17(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameat17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat17 = _renameat17Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose17(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose17(
      __stream,
    );
  }

  late final _fclose17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose17 =
      _fclose17Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile17() {
    return _tmpfile17();
  }

  late final _tmpfile17Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile17 =
      _tmpfile17Ptr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam17(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam17(
      arg0,
    );
  }

  late final _tmpnam17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam17 = _tmpnam17Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r17(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r17(
      __s,
    );
  }

  late final _tmpnam_r17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r17 = _tmpnam_r17Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam17(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam17(
      __dir,
      __pfx,
    );
  }

  late final _tempnam17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam17 = _tempnam17Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush17(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush17(
      __stream,
    );
  }

  late final _fflush17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush17 =
      _fflush17Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked17(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked17(
      __stream,
    );
  }

  late final _fflush_unlocked17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked17 =
      _fflush_unlocked17Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen17(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen17(
      __filename,
      __modes,
    );
  }

  late final _fopen17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen17 = _fopen17Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen17(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen17(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopen17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen17 = _freopen17Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen17(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen17(
      __fd,
      __modes,
    );
  }

  late final _fdopen17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen17 = _fdopen17Ptr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen17(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen17(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopen17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen17 = _fmemopen17Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream17(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Int> __sizeloc,
  ) {
    return _open_memstream17(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstream17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('open_memstream');
  late final _open_memstream17 = _open_memstream17Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void setbuf17(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf17(
      __stream,
      __buf,
    );
  }

  late final _setbuf17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf17 = _setbuf17Ptr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf17(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf17(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbuf17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('setvbuf');
  late final _setvbuf17 = _setvbuf17Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer17(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer17(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbuffer17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer17 = _setbuffer17Ptr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf17(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf17(
      __stream,
    );
  }

  late final _setlinebuf17Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf17 =
      _setlinebuf17Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf17(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf17(
      __stream,
      __format,
    );
  }

  late final _fprintf17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf17 = _fprintf17Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf17(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf17(
      __format,
    );
  }

  late final _printf17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf17 =
      _printf17Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf17(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf17(
      __s,
      __format,
    );
  }

  late final _sprintf17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf17 = _sprintf17Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf17(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfprintf17(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintf17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfprintf');
  late final _vfprintf17 = _vfprintf17Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vprintf17(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vprintf17(
      __format,
      __arg,
    );
  }

  late final _vprintf17Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vprintf');
  late final _vprintf17 =
      _vprintf17Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsprintf17(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsprintf17(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintf17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsprintf');
  late final _vsprintf17 = _vsprintf17Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int snprintf17(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf17(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintf17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf17 = _snprintf17Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf17(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsnprintf17(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintf17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('vsnprintf');
  late final _vsnprintf17 = _vsnprintf17Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int vdprintf17(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    int __arg,
  ) {
    return _vdprintf17(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintf17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('vdprintf');
  late final _vdprintf17 = _vdprintf17Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int dprintf17(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf17(
      __fd,
      __fmt,
    );
  }

  late final _dprintf17Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf17 =
      _dprintf17Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf34(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf34(
      __stream,
      __format,
    );
  }

  late final _fscanf34Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf34 = _fscanf34Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf34(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf34(
      __format,
    );
  }

  late final _scanf34Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf34 =
      _scanf34Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf34(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf34(
      __s,
      __format,
    );
  }

  late final _sscanf34Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf34 = _sscanf34Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fscanf35(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf35(
      __stream,
      __format,
    );
  }

  late final _fscanf35Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf35 = _fscanf35Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf35(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf35(
      __format,
    );
  }

  late final _scanf35Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf35 =
      _scanf35Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf35(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf35(
      __s,
      __format,
    );
  }

  late final _sscanf35Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf35 = _sscanf35Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf34(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf34(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf34Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf34 = _vfscanf34Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf34(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf34(
      __format,
      __arg,
    );
  }

  late final _vscanf34Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf34 =
      _vscanf34Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf34(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf34(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf34Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf34 = _vsscanf34Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int vfscanf35(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf35(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf35Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf35 = _vfscanf35Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf35(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf35(
      __format,
      __arg,
    );
  }

  late final _vscanf35Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf35 =
      _vscanf35Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf35(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf35(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf35Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf35 = _vsscanf35Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fgetc17(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc17(
      __stream,
    );
  }

  late final _fgetc17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc17 =
      _fgetc17Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc17(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc17(
      __stream,
    );
  }

  late final _getc17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc17 = _getc17Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar17() {
    return _getchar17();
  }

  late final _getchar17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar17 = _getchar17Ptr.asFunction<int Function()>();

  int getc_unlocked17(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked17(
      __stream,
    );
  }

  late final _getc_unlocked17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked17 =
      _getc_unlocked17Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked17() {
    return _getchar_unlocked17();
  }

  late final _getchar_unlocked17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked17 =
      _getchar_unlocked17Ptr.asFunction<int Function()>();

  int fgetc_unlocked17(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked17(
      __stream,
    );
  }

  late final _fgetc_unlocked17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked17 =
      _fgetc_unlocked17Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc17(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc17(
      __c,
      __stream,
    );
  }

  late final _fputc17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc17 =
      _fputc17Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc17(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc17(
      __c,
      __stream,
    );
  }

  late final _putc17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc17 =
      _putc17Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar17(
    int __c,
  ) {
    return _putchar17(
      __c,
    );
  }

  late final _putchar17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar17 = _putchar17Ptr.asFunction<int Function(int)>();

  int fputc_unlocked17(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked17(
      __c,
      __stream,
    );
  }

  late final _fputc_unlocked17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked17 =
      _fputc_unlocked17Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked17(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked17(
      __c,
      __stream,
    );
  }

  late final _putc_unlocked17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked17 =
      _putc_unlocked17Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked17(
    int __c,
  ) {
    return _putchar_unlocked17(
      __c,
    );
  }

  late final _putchar_unlocked17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked17 =
      _putchar_unlocked17Ptr.asFunction<int Function(int)>();

  int getw17(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw17(
      __stream,
    );
  }

  late final _getw17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw17 = _getw17Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw17(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw17(
      __w,
      __stream,
    );
  }

  late final _putw17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw17 =
      _putw17Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets17(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets17(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgets17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets17 = _fgets17Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim17(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim17(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelim17Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim17 = ___getdelim17Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getdelim17(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim17(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelim17Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim17 = _getdelim17Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getline17(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline17(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getline17Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<FILE>)>>('getline');
  late final _getline17 = _getline17Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<FILE>)>();

  int fputs17(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs17(
      __s,
      __stream,
    );
  }

  late final _fputs17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs17 = _fputs17Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts17(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts17(
      __s,
    );
  }

  late final _puts17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts17 =
      _puts17Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc17(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc17(
      __c,
      __stream,
    );
  }

  late final _ungetc17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc17 =
      _ungetc17Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread17(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread17(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread17 = _fread17Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite17(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite17(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwrite17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite17 = _fwrite17Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked17(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked17(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlocked17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked17 = _fread_unlocked17Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked17(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked17(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlocked17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked17 = _fwrite_unlocked17Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek17(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek17(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseek17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek17 =
      _fseek17Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell17(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell17(
      __stream,
    );
  }

  late final _ftell17Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell17 =
      _ftell17Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind17(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind17(
      __stream,
    );
  }

  late final _rewind17Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind17 =
      _rewind17Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko17(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko17(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseeko17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko17 =
      _fseeko17Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello17(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello17(
      __stream,
    );
  }

  late final _ftello17Ptr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello17 =
      _ftello17Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos17(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos17(
      __stream,
      __pos,
    );
  }

  late final _fgetpos17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos17 = _fgetpos17Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos17(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos17(
      __stream,
      __pos,
    );
  }

  late final _fsetpos17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos17 = _fsetpos17Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr17(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr17(
      __stream,
    );
  }

  late final _clearerr17Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr17 =
      _clearerr17Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof17(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof17(
      __stream,
    );
  }

  late final _feof17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof17 = _feof17Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror17(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror17(
      __stream,
    );
  }

  late final _ferror17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror17 =
      _ferror17Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked17(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked17(
      __stream,
    );
  }

  late final _clearerr_unlocked17Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked17 =
      _clearerr_unlocked17Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked17(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked17(
      __stream,
    );
  }

  late final _feof_unlocked17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked17 =
      _feof_unlocked17Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked17(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked17(
      __stream,
    );
  }

  late final _ferror_unlocked17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked17 =
      _ferror_unlocked17Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror17(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror17(
      __s,
    );
  }

  late final _perror17Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror17 =
      _perror17Ptr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno17(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno17(
      __stream,
    );
  }

  late final _fileno17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno17 =
      _fileno17Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked17(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked17(
      __stream,
    );
  }

  late final _fileno_unlocked17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked17 =
      _fileno_unlocked17Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose17(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose17(
      __stream,
    );
  }

  late final _pclose17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose17 =
      _pclose17Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen17(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen17(
      __command,
      __modes,
    );
  }

  late final _popen17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen17 = _popen17Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid17(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid17(
      __s,
    );
  }

  late final _ctermid17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid17 = _ctermid17Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile17(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile17(
      __stream,
    );
  }

  late final _flockfile17Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile17 =
      _flockfile17Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile17(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile17(
      __stream,
    );
  }

  late final _ftrylockfile17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile17 =
      _ftrylockfile17Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile17(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile17(
      __stream,
    );
  }

  late final _funlockfile17Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile17 =
      _funlockfile17Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow17(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow17(
      arg0,
    );
  }

  late final ___uflow17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow17 =
      ___uflow17Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow17(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow17(
      arg0,
      arg1,
    );
  }

  late final ___overflow17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow17 =
      ___overflow17Ptr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __ctype_get_mb_cur_max17() {
    return ___ctype_get_mb_cur_max17();
  }

  late final ___ctype_get_mb_cur_max17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max17 =
      ___ctype_get_mb_cur_max17Ptr.asFunction<int Function()>();

  double atof17(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof17(
      __nptr,
    );
  }

  late final _atof17Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof17 =
      _atof17Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi17(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi17(
      __nptr,
    );
  }

  late final _atoi17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi17 =
      _atoi17Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol17(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol17(
      __nptr,
    );
  }

  late final _atol17Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol17 =
      _atol17Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll17(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll17(
      __nptr,
    );
  }

  late final _atoll17Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll17 =
      _atoll17Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod17(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod17(
      __nptr,
      __endptr,
    );
  }

  late final _strtod17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod17 = _strtod17Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof17(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof17(
      __nptr,
      __endptr,
    );
  }

  late final _strtof17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof17 = _strtof17Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol17(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol17(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol17 = _strtol17Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul17(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul17(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul17 = _strtoul17Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq17(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq17(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq17 = _strtoq17Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq17(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq17(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq17 = _strtouq17Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll17(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll17(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll17 = _strtoll17Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull17(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull17(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull17 = _strtoull17Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a17(
    int __n,
  ) {
    return _l64a17(
      __n,
    );
  }

  late final _l64a17Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a17 =
      _l64a17Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l17(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l17(
      __s,
    );
  }

  late final _a64l17Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l17 =
      _a64l17Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select17(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select17(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select17 = _select17Ptr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect17(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect17(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect17 = _pselect17Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random17() {
    return _random17();
  }

  late final _random17Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random17 = _random17Ptr.asFunction<int Function()>();

  void srandom17(
    int __seed,
  ) {
    return _srandom17(
      __seed,
    );
  }

  late final _srandom17Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom17 = _srandom17Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate17(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate17(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int)>>('initstate');
  late final _initstate17 = _initstate17Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate17(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate17(
      __statebuf,
    );
  }

  late final _setstate17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate17 = _setstate17Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r17(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r17(
      __buf,
      __result,
    );
  }

  late final _random_r17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r17 = _random_r17Ptr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r17(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r17(
      __seed,
      __buf,
    );
  }

  late final _srandom_r17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r17 =
      _srandom_r17Ptr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r17(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r17(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r17 = _initstate_r17Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r17(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r17(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r17 = _setstate_r17Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand17() {
    return _rand17();
  }

  late final _rand17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand17 = _rand17Ptr.asFunction<int Function()>();

  void srand17(
    int __seed,
  ) {
    return _srand17(
      __seed,
    );
  }

  late final _srand17Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand17 = _srand17Ptr.asFunction<void Function(int)>();

  int rand_r17(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r17(
      __seed,
    );
  }

  late final _rand_r17Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r17 =
      _rand_r17Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand4817() {
    return _drand4817();
  }

  late final _drand4817Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand4817 = _drand4817Ptr.asFunction<double Function()>();

  double erand4817(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand4817(
      __xsubi,
    );
  }

  late final _erand4817Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand4817 = _erand4817Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand4817() {
    return _lrand4817();
  }

  late final _lrand4817Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand4817 = _lrand4817Ptr.asFunction<int Function()>();

  int nrand4817(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand4817(
      __xsubi,
    );
  }

  late final _nrand4817Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand4817 =
      _nrand4817Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand4817() {
    return _mrand4817();
  }

  late final _mrand4817Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand4817 = _mrand4817Ptr.asFunction<int Function()>();

  int jrand4817(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand4817(
      __xsubi,
    );
  }

  late final _jrand4817Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand4817 =
      _jrand4817Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand4817(
    int __seedval,
  ) {
    return _srand4817(
      __seedval,
    );
  }

  late final _srand4817Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand4817 = _srand4817Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed4817(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed4817(
      __seed16v,
    );
  }

  late final _seed4817Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed4817 = _seed4817Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong4817(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong4817(
      __param,
    );
  }

  late final _lcong4817Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong4817 =
      _lcong4817Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r17(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r17(
      __buffer,
      __result,
    );
  }

  late final _drand48_r17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r17 = _drand48_r17Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r17(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r17(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r17 = _erand48_r17Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r17(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r17(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r17 = _lrand48_r17Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r17(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r17(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r17 = _nrand48_r17Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r17(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r17(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r17 = _mrand48_r17Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r17(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r17(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r17 = _jrand48_r17Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r17(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r17(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r17 = _srand48_r17Ptr
      .asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r17(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r17(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r17 = _seed48_r17Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r17(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r17(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r17 = _lcong48_r17Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int arc4random17() {
    return _arc4random17();
  }

  late final _arc4random17Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random17 = _arc4random17Ptr.asFunction<int Function()>();

  void arc4random_buf17(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf17(
      __buf,
      __size,
    );
  }

  late final _arc4random_buf17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('arc4random_buf');
  late final _arc4random_buf17 = _arc4random_buf17Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform17(
    int __upper_bound,
  ) {
    return _arc4random_uniform17(
      __upper_bound,
    );
  }

  late final _arc4random_uniform17Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
          'arc4random_uniform');
  late final _arc4random_uniform17 =
      _arc4random_uniform17Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc17(
    int __size,
  ) {
    return _malloc17(
      __size,
    );
  }

  late final _malloc17Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'malloc');
  late final _malloc17 =
      _malloc17Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc17(
    int __nmemb,
    int __size,
  ) {
    return _calloc17(
      __nmemb,
      __size,
    );
  }

  late final _calloc17Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'calloc');
  late final _calloc17 =
      _calloc17Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc17(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc17(
      __ptr,
      __size,
    );
  }

  late final _realloc17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('realloc');
  late final _realloc17 = _realloc17Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free17(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free17(
      __ptr,
    );
  }

  late final _free17Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free17 =
      _free17Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray34(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray34(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray34Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray34 = _reallocarray34Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray35(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray35(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray35Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray35 = _reallocarray35Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca17(
    int __size,
  ) {
    return _alloca17(
      __size,
    );
  }

  late final _alloca17Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'alloca');
  late final _alloca17 =
      _alloca17Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc17(
    int __size,
  ) {
    return _valloc17(
      __size,
    );
  }

  late final _valloc17Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'valloc');
  late final _valloc17 =
      _valloc17Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign17(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign17(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int,
              ffi.Int)>>('posix_memalign');
  late final _posix_memalign17 = _posix_memalign17Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc17(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc17(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc17Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'aligned_alloc');
  late final _aligned_alloc17 = _aligned_alloc17Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort17() {
    return _abort17();
  }

  late final _abort17Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort17 = _abort17Ptr.asFunction<void Function()>();

  int atexit17(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit17(
      __func,
    );
  }

  late final _atexit17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit17 = _atexit17Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit17(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit17(
      __func,
    );
  }

  late final _at_quick_exit17Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit17 = _at_quick_exit17Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit17(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit17(
      __func,
      __arg,
    );
  }

  late final _on_exit17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit17 = _on_exit17Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit17(
    int __status,
  ) {
    return _exit17(
      __status,
    );
  }

  late final _exit17Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit17 = _exit17Ptr.asFunction<void Function(int)>();

  void quick_exit17(
    int __status,
  ) {
    return _quick_exit17(
      __status,
    );
  }

  late final _quick_exit17Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit17 = _quick_exit17Ptr.asFunction<void Function(int)>();

  void _Exit17(
    int __status,
  ) {
    return __Exit17(
      __status,
    );
  }

  late final __Exit17Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit17 = __Exit17Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv17(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv17(
      __name,
    );
  }

  late final _getenv17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv17 = _getenv17Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv17(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv17(
      __string,
    );
  }

  late final _putenv17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv17 =
      _putenv17Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv17(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv17(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv17 = _setenv17Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv17(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv17(
      __name,
    );
  }

  late final _unsetenv17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv17 =
      _unsetenv17Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv17() {
    return _clearenv17();
  }

  late final _clearenv17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv17 = _clearenv17Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp17(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp17(
      __template,
    );
  }

  late final _mktemp17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp17 = _mktemp17Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp17(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp17(
      __template,
    );
  }

  late final _mkstemp17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp17 =
      _mkstemp17Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps17(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps17(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps17Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps17 =
      _mkstemps17Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp17(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp17(
      __template,
    );
  }

  late final _mkdtemp17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp17 = _mkdtemp17Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system17(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system17(
      __command,
    );
  }

  late final _system17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system17 =
      _system17Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath17(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath17(
      __name,
      __resolved,
    );
  }

  late final _realpath17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath17 = _realpath17Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch17(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch17(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              __compar_fn_t)>>('bsearch');
  late final _bsearch17 = _bsearch17Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort17(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort17(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              __compar_fn_t)>>('qsort');
  late final _qsort17 = _qsort17Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs17(
    int __x,
  ) {
    return _abs17(
      __x,
    );
  }

  late final _abs17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs17 = _abs17Ptr.asFunction<int Function(int)>();

  int labs17(
    int __x,
  ) {
    return _labs17(
      __x,
    );
  }

  late final _labs17Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs17 = _labs17Ptr.asFunction<int Function(int)>();

  int llabs17(
    int __x,
  ) {
    return _llabs17(
      __x,
    );
  }

  late final _llabs17Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs17 = _llabs17Ptr.asFunction<int Function(int)>();

  div_t div17(
    int __numer,
    int __denom,
  ) {
    return _div17(
      __numer,
      __denom,
    );
  }

  late final _div17Ptr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div17 = _div17Ptr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv17(
    int __numer,
    int __denom,
  ) {
    return _ldiv17(
      __numer,
      __denom,
    );
  }

  late final _ldiv17Ptr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv17 = _ldiv17Ptr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv17(
    int __numer,
    int __denom,
  ) {
    return _lldiv17(
      __numer,
      __denom,
    );
  }

  late final _lldiv17Ptr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv17 = _lldiv17Ptr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt17(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt17(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt17 = _ecvt17Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt17(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt17(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt17 = _fcvt17Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt17(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt17(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt17 = _gcvt17Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r17(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r17(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('ecvt_r');
  late final _ecvt_r17 = _ecvt_r17Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r17(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r17(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('fcvt_r');
  late final _fcvt_r17 = _fcvt_r17Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen17(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen17(
      __s,
      __n,
    );
  }

  late final _mblen17Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mblen');
  late final _mblen17 =
      _mblen17Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc17(
    ffi.Pointer<ffi.Int> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc17(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('mbtowc');
  late final _mbtowc17 = _mbtowc17Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb17(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb17(
      __s,
      __wchar,
    );
  }

  late final _wctomb17Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'wctomb');
  late final _wctomb17 =
      _wctomb17Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs17(
    ffi.Pointer<ffi.Int> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs17(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mbstowcs');
  late final _mbstowcs17 = _mbstowcs17Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs17(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Int> __pwcs,
    int __n,
  ) {
    return _wcstombs17(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('wcstombs');
  late final _wcstombs17 = _wcstombs17Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  int rpmatch17(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch17(
      __response,
    );
  }

  late final _rpmatch17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch17 =
      _rpmatch17Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt17(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt17(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt17 = _getsubopt17Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg17(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg17(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg17 =
      _getloadavg17Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Void> memcpy17(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy17(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpy17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memcpy');
  late final _memcpy17 = _memcpy17Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove17(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove17(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmove17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memmove');
  late final _memmove17 = _memmove17Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy17(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy17(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpy17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memccpy');
  late final _memccpy17 = _memccpy17Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset17(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset17(
      __s,
      __c,
      __n,
    );
  }

  late final _memset17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memset');
  late final _memset17 = _memset17Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp17(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp17(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmp17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('memcmp');
  late final _memcmp17 = _memcmp17Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq17(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq17(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeq17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__memcmpeq');
  late final ___memcmpeq17 = ___memcmpeq17Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr17(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr17(
      __s,
      __c,
      __n,
    );
  }

  late final _memchr17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memchr');
  late final _memchr17 = _memchr17Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy17(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy17(
      __dest,
      __src,
    );
  }

  late final _strcpy17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy17 = _strcpy17Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy17(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy17(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpy17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncpy');
  late final _strncpy17 = _strncpy17Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat17(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat17(
      __dest,
      __src,
    );
  }

  late final _strcat17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat17 = _strcat17Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat17(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat17(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncat17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncat');
  late final _strncat17 = _strncat17Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp17(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp17(
      __s1,
      __s2,
    );
  }

  late final _strcmp17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp17 = _strcmp17Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp17(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp17(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmp17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncmp');
  late final _strncmp17 = _strncmp17Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll17(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll17(
      __s1,
      __s2,
    );
  }

  late final _strcoll17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll17 = _strcoll17Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm17(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm17(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrm17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strxfrm');
  late final _strxfrm17 = _strxfrm17Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l17(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l17(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_l17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l17 = _strcoll_l17Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l17(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l17(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_l17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strxfrm_l');
  late final _strxfrm_l17 = _strxfrm_l17Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup17(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup17(
      __s,
    );
  }

  late final _strdup17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup17 = _strdup17Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup17(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup17(
      __string,
      __n,
    );
  }

  late final _strndup17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strndup');
  late final _strndup17 = _strndup17Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr17(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr17(
      __s,
      __c,
    );
  }

  late final _strchr17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr17 = _strchr17Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr17(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr17(
      __s,
      __c,
    );
  }

  late final _strrchr17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr17 = _strrchr17Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn17(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn17(
      __s,
      __reject,
    );
  }

  late final _strcspn17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn17 = _strcspn17Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn17(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn17(
      __s,
      __accept,
    );
  }

  late final _strspn17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn17 = _strspn17Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk17(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk17(
      __s,
      __accept,
    );
  }

  late final _strpbrk17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk17 = _strpbrk17Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr17(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr17(
      __haystack,
      __needle,
    );
  }

  late final _strstr17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr17 = _strstr17Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok17(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok17(
      __s,
      __delim,
    );
  }

  late final _strtok17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok17 = _strtok17Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r17(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r17(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_r17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r17 = ___strtok_r17Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r17(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r17(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_r17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r17 = _strtok_r17Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen17(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen17(
      __s,
    );
  }

  late final _strlen17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'strlen');
  late final _strlen17 =
      _strlen17Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen17(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen17(
      __string,
      __maxlen,
    );
  }

  late final _strnlen17Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'strnlen');
  late final _strnlen17 =
      _strnlen17Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror17(
    int __errnum,
  ) {
    return _strerror17(
      __errnum,
    );
  }

  late final _strerror17Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror17 =
      _strerror17Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r17(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r17(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_r17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('strerror_r');
  late final _strerror_r17 = _strerror_r17Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l17(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l17(
      __errnum,
      __l,
    );
  }

  late final _strerror_l17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l17 = _strerror_l17Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp17(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp17(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmp17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcmp');
  late final _bcmp17 = _bcmp17Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy17(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy17(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopy17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcopy');
  late final _bcopy17 = _bcopy17Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero17(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero17(
      __s,
      __n,
    );
  }

  late final _bzero17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('bzero');
  late final _bzero17 =
      _bzero17Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index17(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index17(
      __s,
      __c,
    );
  }

  late final _index17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index17 = _index17Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex17(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex17(
      __s,
      __c,
    );
  }

  late final _rindex17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex17 = _rindex17Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs17(
    int __i,
  ) {
    return _ffs17(
      __i,
    );
  }

  late final _ffs17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs17 = _ffs17Ptr.asFunction<int Function(int)>();

  int ffsl17(
    int __l,
  ) {
    return _ffsl17(
      __l,
    );
  }

  late final _ffsl17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl17 = _ffsl17Ptr.asFunction<int Function(int)>();

  int ffsll17(
    int __ll,
  ) {
    return _ffsll17(
      __ll,
    );
  }

  late final _ffsll17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll17 = _ffsll17Ptr.asFunction<int Function(int)>();

  int strcasecmp17(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp17(
      __s1,
      __s2,
    );
  }

  late final _strcasecmp17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp17 = _strcasecmp17Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp17(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp17(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmp17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncasecmp');
  late final _strncasecmp17 = _strncasecmp17Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l17(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l17(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_l17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l17 = _strcasecmp_l17Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l17(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l17(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_l17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l17 = _strncasecmp_l17Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero17(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero17(
      __s,
      __n,
    );
  }

  late final _explicit_bzero17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('explicit_bzero');
  late final _explicit_bzero17 = _explicit_bzero17Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep17(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep17(
      __stringp,
      __delim,
    );
  }

  late final _strsep17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep17 = _strsep17Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal17(
    int __sig,
  ) {
    return _strsignal17(
      __sig,
    );
  }

  late final _strsignal17Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal17 =
      _strsignal17Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy17(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy17(
      __dest,
      __src,
    );
  }

  late final ___stpcpy17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy17 = ___stpcpy17Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy17(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy17(
      __dest,
      __src,
    );
  }

  late final _stpcpy17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy17 = _stpcpy17Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy17(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy17(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpy17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('__stpncpy');
  late final ___stpncpy17 = ___stpncpy17Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy17(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy17(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpy17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('stpncpy');
  late final _stpncpy17 = _stpncpy17Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int buffer_equal2(
    ffi.Pointer<ffi.Void> a,
    ffi.Pointer<ffi.Void> b,
  ) {
    return _buffer_equal2(
      a,
      b,
    );
  }

  late final _buffer_equal2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>('buffer_equal');
  late final _buffer_equal2 = _buffer_equal2Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  void buffer_free2(
    ffi.Pointer<ffi.Void> struct_buffer,
  ) {
    return _buffer_free2(
      struct_buffer,
    );
  }

  late final _buffer_free2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'buffer_free');
  late final _buffer_free2 =
      _buffer_free2Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<buffer> buffer_copy2(
    ffi.Pointer<ffi.Void> data,
    int data_len,
  ) {
    return _buffer_copy2(
      data,
      data_len,
    );
  }

  late final _buffer_copy2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<buffer> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('buffer_copy');
  late final _buffer_copy2 = _buffer_copy2Ptr
      .asFunction<ffi.Pointer<buffer> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<cstring> cstr_new3(
    ffi.Pointer<ffi.Char> init_str,
  ) {
    return _cstr_new3(
      init_str,
    );
  }

  late final _cstr_new3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cstring> Function(ffi.Pointer<ffi.Char>)>>('cstr_new');
  late final _cstr_new3 = _cstr_new3Ptr
      .asFunction<ffi.Pointer<cstring> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<cstring> cstr_new_sz3(
    int sz,
  ) {
    return _cstr_new_sz3(
      sz,
    );
  }

  late final _cstr_new_sz3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<cstring> Function(ffi.Int)>>(
          'cstr_new_sz');
  late final _cstr_new_sz3 =
      _cstr_new_sz3Ptr.asFunction<ffi.Pointer<cstring> Function(int)>();

  ffi.Pointer<cstring> cstr_new_buf3(
    ffi.Pointer<ffi.Void> buf,
    int sz,
  ) {
    return _cstr_new_buf3(
      buf,
      sz,
    );
  }

  late final _cstr_new_buf3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cstring> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('cstr_new_buf');
  late final _cstr_new_buf3 = _cstr_new_buf3Ptr
      .asFunction<ffi.Pointer<cstring> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<cstring> cstr_new_cstr3(
    ffi.Pointer<cstring> copy_str,
  ) {
    return _cstr_new_cstr3(
      copy_str,
    );
  }

  late final _cstr_new_cstr3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cstring> Function(
              ffi.Pointer<cstring>)>>('cstr_new_cstr');
  late final _cstr_new_cstr3 = _cstr_new_cstr3Ptr
      .asFunction<ffi.Pointer<cstring> Function(ffi.Pointer<cstring>)>();

  void cstr_free3(
    ffi.Pointer<cstring> s,
    int free_buf,
  ) {
    return _cstr_free3(
      s,
      free_buf,
    );
  }

  late final _cstr_free3Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_free');
  late final _cstr_free3 =
      _cstr_free3Ptr.asFunction<void Function(ffi.Pointer<cstring>, int)>();

  int cstr_equal3(
    ffi.Pointer<cstring> a,
    ffi.Pointer<cstring> b,
  ) {
    return _cstr_equal3(
      a,
      b,
    );
  }

  late final _cstr_equal3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_equal');
  late final _cstr_equal3 = _cstr_equal3Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_compare3(
    ffi.Pointer<cstring> a,
    ffi.Pointer<cstring> b,
  ) {
    return _cstr_compare3(
      a,
      b,
    );
  }

  late final _cstr_compare3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_compare');
  late final _cstr_compare3 = _cstr_compare3Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_resize3(
    ffi.Pointer<cstring> s,
    int sz,
  ) {
    return _cstr_resize3(
      s,
      sz,
    );
  }

  late final _cstr_resize3Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_resize');
  late final _cstr_resize3 =
      _cstr_resize3Ptr.asFunction<int Function(ffi.Pointer<cstring>, int)>();

  int cstr_erase3(
    ffi.Pointer<cstring> s,
    int pos,
    int len,
  ) {
    return _cstr_erase3(
      s,
      pos,
      len,
    );
  }

  late final _cstr_erase3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Int, ssize_t)>>('cstr_erase');
  late final _cstr_erase3 = _cstr_erase3Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, int, int)>();

  int cstr_append_buf3(
    ffi.Pointer<cstring> s,
    ffi.Pointer<ffi.Void> buf,
    int sz,
  ) {
    return _cstr_append_buf3(
      s,
      buf,
      sz,
    );
  }

  late final _cstr_append_buf3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('cstr_append_buf');
  late final _cstr_append_buf3 = _cstr_append_buf3Ptr.asFunction<
      int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Void>, int)>();

  int cstr_append_cstr3(
    ffi.Pointer<cstring> s,
    ffi.Pointer<cstring> append,
  ) {
    return _cstr_append_cstr3(
      s,
      append,
    );
  }

  late final _cstr_append_cstr3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_append_cstr');
  late final _cstr_append_cstr3 = _cstr_append_cstr3Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_append_c3(
    ffi.Pointer<cstring> s,
    int ch,
  ) {
    return _cstr_append_c3(
      s,
      ch,
    );
  }

  late final _cstr_append_c3Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Char)>>(
      'cstr_append_c');
  late final _cstr_append_c3 =
      _cstr_append_c3Ptr.asFunction<int Function(ffi.Pointer<cstring>, int)>();

  int cstr_alloc_minsize3(
    ffi.Pointer<cstring> s,
    int sz,
  ) {
    return _cstr_alloc_minsize3(
      s,
      sz,
    );
  }

  late final _cstr_alloc_minsize3Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_alloc_minsize');
  late final _cstr_alloc_minsize3 = _cstr_alloc_minsize3Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, int)>();

  ffi.Pointer<vector> vector_new2(
    int res,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        free_f,
  ) {
    return _vector_new2(
      res,
      free_f,
    );
  }

  late final _vector_new2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<vector> Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>)>>)>>('vector_new');
  late final _vector_new2 = _vector_new2Ptr.asFunction<
      ffi.Pointer<vector> Function(
          int,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  void vector_free2(
    ffi.Pointer<vector> vec,
    int free_array,
  ) {
    return _vector_free2(
      vec,
      free_array,
    );
  }

  late final _vector_free2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<vector>, dogecoin_bool)>>('vector_free');
  late final _vector_free2 =
      _vector_free2Ptr.asFunction<void Function(ffi.Pointer<vector>, int)>();

  int vector_add2(
    ffi.Pointer<vector> vec,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _vector_add2(
      vec,
      data,
    );
  }

  late final _vector_add2Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>>('vector_add');
  late final _vector_add2 = _vector_add2Ptr
      .asFunction<int Function(ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>();

  int vector_remove2(
    ffi.Pointer<vector> vec,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _vector_remove2(
      vec,
      data,
    );
  }

  late final _vector_remove2Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>>('vector_remove');
  late final _vector_remove2 = _vector_remove2Ptr
      .asFunction<int Function(ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>();

  void vector_remove_idx2(
    ffi.Pointer<vector> vec,
    int idx,
  ) {
    return _vector_remove_idx2(
      vec,
      idx,
    );
  }

  late final _vector_remove_idx2Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<vector>, ffi.Int)>>(
      'vector_remove_idx');
  late final _vector_remove_idx2 = _vector_remove_idx2Ptr
      .asFunction<void Function(ffi.Pointer<vector>, int)>();

  void vector_remove_range2(
    ffi.Pointer<vector> vec,
    int idx,
    int len,
  ) {
    return _vector_remove_range2(
      vec,
      idx,
      len,
    );
  }

  late final _vector_remove_range2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<vector>, ffi.Int, ffi.Int)>>('vector_remove_range');
  late final _vector_remove_range2 = _vector_remove_range2Ptr
      .asFunction<void Function(ffi.Pointer<vector>, int, int)>();

  int vector_resize2(
    ffi.Pointer<vector> vec,
    int newsz,
  ) {
    return _vector_resize2(
      vec,
      newsz,
    );
  }

  late final _vector_resize2Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<vector>, ffi.Int)>>('vector_resize');
  late final _vector_resize2 =
      _vector_resize2Ptr.asFunction<int Function(ffi.Pointer<vector>, int)>();

  int vector_find2(
    ffi.Pointer<vector> vec,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _vector_find2(
      vec,
      data,
    );
  }

  late final _vector_find2Ptr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>>('vector_find');
  late final _vector_find2 = _vector_find2Ptr
      .asFunction<int Function(ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<cmsghdr> __cmsg_nxthdr(
    ffi.Pointer<msghdr> __mhdr,
    ffi.Pointer<cmsghdr> __cmsg,
  ) {
    return ___cmsg_nxthdr(
      __mhdr,
      __cmsg,
    );
  }

  late final ___cmsg_nxthdrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cmsghdr> Function(
              ffi.Pointer<msghdr>, ffi.Pointer<cmsghdr>)>>('__cmsg_nxthdr');
  late final ___cmsg_nxthdr = ___cmsg_nxthdrPtr.asFunction<
      ffi.Pointer<cmsghdr> Function(
          ffi.Pointer<msghdr>, ffi.Pointer<cmsghdr>)>();

  int socket(
    int __domain,
    int __type,
    int __protocol,
  ) {
    return _socket(
      __domain,
      __type,
      __protocol,
    );
  }

  late final _socketPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'socket');
  late final _socket = _socketPtr.asFunction<int Function(int, int, int)>();

  int socketpair(
    int __domain,
    int __type,
    int __protocol,
    ffi.Pointer<ffi.Int> __fds,
  ) {
    return _socketpair(
      __domain,
      __type,
      __protocol,
      __fds,
    );
  }

  late final _socketpairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>)>>('socketpair');
  late final _socketpair = _socketpairPtr
      .asFunction<int Function(int, int, int, ffi.Pointer<ffi.Int>)>();

  int bind(
    int __fd,
    ffi.Pointer<sockaddr> __addr,
    int __len,
  ) {
    return _bind(
      __fd,
      __addr,
      __len,
    );
  }

  late final _bindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr>, socklen_t)>>('bind');
  late final _bind =
      _bindPtr.asFunction<int Function(int, ffi.Pointer<sockaddr>, int)>();

  int getsockname(
    int __fd,
    ffi.Pointer<sockaddr> __addr,
    ffi.Pointer<socklen_t> __len,
  ) {
    return _getsockname(
      __fd,
      __addr,
      __len,
    );
  }

  late final _getsocknamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr>,
              ffi.Pointer<socklen_t>)>>('getsockname');
  late final _getsockname = _getsocknamePtr.asFunction<
      int Function(int, ffi.Pointer<sockaddr>, ffi.Pointer<socklen_t>)>();

  int connect(
    int __fd,
    ffi.Pointer<sockaddr> __addr,
    int __len,
  ) {
    return _connect(
      __fd,
      __addr,
      __len,
    );
  }

  late final _connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<sockaddr>, socklen_t)>>('connect');
  late final _connect =
      _connectPtr.asFunction<int Function(int, ffi.Pointer<sockaddr>, int)>();

  int getpeername(
    int __fd,
    ffi.Pointer<sockaddr> __addr,
    ffi.Pointer<socklen_t> __len,
  ) {
    return _getpeername(
      __fd,
      __addr,
      __len,
    );
  }

  late final _getpeernamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr>,
              ffi.Pointer<socklen_t>)>>('getpeername');
  late final _getpeername = _getpeernamePtr.asFunction<
      int Function(int, ffi.Pointer<sockaddr>, ffi.Pointer<socklen_t>)>();

  int send(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
    int __flags,
  ) {
    return _send(
      __fd,
      __buf,
      __n,
      __flags,
    );
  }

  late final _sendPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int, ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('send');
  late final _send =
      _sendPtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  int recv(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
    int __flags,
  ) {
    return _recv(
      __fd,
      __buf,
      __n,
      __flags,
    );
  }

  late final _recvPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int, ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('recv');
  late final _recv =
      _recvPtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  int sendto(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
    int __flags,
    ffi.Pointer<sockaddr> __addr,
    int __addr_len,
  ) {
    return _sendto(
      __fd,
      __buf,
      __n,
      __flags,
      __addr,
      __addr_len,
    );
  }

  late final _sendtoPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<sockaddr>, socklen_t)>>('sendto');
  late final _sendto = _sendtoPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<sockaddr>, int)>();

  int recvfrom(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
    int __flags,
    ffi.Pointer<sockaddr> __addr,
    ffi.Pointer<socklen_t> __addr_len,
  ) {
    return _recvfrom(
      __fd,
      __buf,
      __n,
      __flags,
      __addr,
      __addr_len,
    );
  }

  late final _recvfromPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<sockaddr>, ffi.Pointer<socklen_t>)>>('recvfrom');
  late final _recvfrom = _recvfromPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<sockaddr>,
          ffi.Pointer<socklen_t>)>();

  int sendmsg(
    int __fd,
    ffi.Pointer<msghdr> __message,
    int __flags,
  ) {
    return _sendmsg(
      __fd,
      __message,
      __flags,
    );
  }

  late final _sendmsgPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<msghdr>, ffi.Int)>>('sendmsg');
  late final _sendmsg =
      _sendmsgPtr.asFunction<int Function(int, ffi.Pointer<msghdr>, int)>();

  int recvmsg(
    int __fd,
    ffi.Pointer<msghdr> __message,
    int __flags,
  ) {
    return _recvmsg(
      __fd,
      __message,
      __flags,
    );
  }

  late final _recvmsgPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<msghdr>, ffi.Int)>>('recvmsg');
  late final _recvmsg =
      _recvmsgPtr.asFunction<int Function(int, ffi.Pointer<msghdr>, int)>();

  int getsockopt(
    int __fd,
    int __level,
    int __optname,
    ffi.Pointer<ffi.Void> __optval,
    ffi.Pointer<socklen_t> __optlen,
  ) {
    return _getsockopt(
      __fd,
      __level,
      __optname,
      __optval,
      __optlen,
    );
  }

  late final _getsockoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<socklen_t>)>>('getsockopt');
  late final _getsockopt = _getsockoptPtr.asFunction<
      int Function(
          int, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<socklen_t>)>();

  int setsockopt(
    int __fd,
    int __level,
    int __optname,
    ffi.Pointer<ffi.Void> __optval,
    int __optlen,
  ) {
    return _setsockopt(
      __fd,
      __level,
      __optname,
      __optval,
      __optlen,
    );
  }

  late final _setsockoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>,
              socklen_t)>>('setsockopt');
  late final _setsockopt = _setsockoptPtr
      .asFunction<int Function(int, int, int, ffi.Pointer<ffi.Void>, int)>();

  int listen(
    int __fd,
    int __n,
  ) {
    return _listen(
      __fd,
      __n,
    );
  }

  late final _listenPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('listen');
  late final _listen = _listenPtr.asFunction<int Function(int, int)>();

  int accept(
    int __fd,
    ffi.Pointer<sockaddr> __addr,
    ffi.Pointer<socklen_t> __addr_len,
  ) {
    return _accept(
      __fd,
      __addr,
      __addr_len,
    );
  }

  late final _acceptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr>,
              ffi.Pointer<socklen_t>)>>('accept');
  late final _accept = _acceptPtr.asFunction<
      int Function(int, ffi.Pointer<sockaddr>, ffi.Pointer<socklen_t>)>();

  int shutdown(
    int __fd,
    int __how,
  ) {
    return _shutdown(
      __fd,
      __how,
    );
  }

  late final _shutdownPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'shutdown');
  late final _shutdown = _shutdownPtr.asFunction<int Function(int, int)>();

  int sockatmark(
    int __fd,
  ) {
    return _sockatmark(
      __fd,
    );
  }

  late final _sockatmarkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sockatmark');
  late final _sockatmark = _sockatmarkPtr.asFunction<int Function(int)>();

  int isfdtype(
    int __fd,
    int __fdtype,
  ) {
    return _isfdtype(
      __fd,
      __fdtype,
    );
  }

  late final _isfdtypePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'isfdtype');
  late final _isfdtype = _isfdtypePtr.asFunction<int Function(int, int)>();

  late final ffi.Pointer<in6_addr> _in6addr_any =
      _lookup<in6_addr>('in6addr_any');

  in6_addr get in6addr_any => _in6addr_any.ref;

  late final ffi.Pointer<in6_addr> _in6addr_loopback =
      _lookup<in6_addr>('in6addr_loopback');

  in6_addr get in6addr_loopback => _in6addr_loopback.ref;

  int ntohl(
    int __netlong,
  ) {
    return _ntohl(
      __netlong,
    );
  }

  late final _ntohlPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>>('ntohl');
  late final _ntohl = _ntohlPtr.asFunction<int Function(int)>();

  int ntohs(
    int __netshort,
  ) {
    return _ntohs(
      __netshort,
    );
  }

  late final _ntohsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(ffi.Uint16)>>('ntohs');
  late final _ntohs = _ntohsPtr.asFunction<int Function(int)>();

  int htonl(
    int __hostlong,
  ) {
    return _htonl(
      __hostlong,
    );
  }

  late final _htonlPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>>('htonl');
  late final _htonl = _htonlPtr.asFunction<int Function(int)>();

  int htons(
    int __hostshort,
  ) {
    return _htons(
      __hostshort,
    );
  }

  late final _htonsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(ffi.Uint16)>>('htons');
  late final _htons = _htonsPtr.asFunction<int Function(int)>();

  int bindresvport(
    int __sockfd,
    ffi.Pointer<sockaddr_in> __sock_in,
  ) {
    return _bindresvport(
      __sockfd,
      __sock_in,
    );
  }

  late final _bindresvportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr_in>)>>('bindresvport');
  late final _bindresvport = _bindresvportPtr
      .asFunction<int Function(int, ffi.Pointer<sockaddr_in>)>();

  int bindresvport6(
    int __sockfd,
    ffi.Pointer<sockaddr_in6> __sock_in,
  ) {
    return _bindresvport6(
      __sockfd,
      __sock_in,
    );
  }

  late final _bindresvport6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<sockaddr_in6>)>>('bindresvport6');
  late final _bindresvport6 = _bindresvport6Ptr
      .asFunction<int Function(int, ffi.Pointer<sockaddr_in6>)>();

  int inet_addr(
    ffi.Pointer<ffi.Char> __cp,
  ) {
    return _inet_addr(
      __cp,
    );
  }

  late final _inet_addrPtr =
      _lookup<ffi.NativeFunction<in_addr_t Function(ffi.Pointer<ffi.Char>)>>(
          'inet_addr');
  late final _inet_addr =
      _inet_addrPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int inet_lnaof(
    in_addr __in,
  ) {
    return _inet_lnaof(
      __in,
    );
  }

  late final _inet_lnaofPtr =
      _lookup<ffi.NativeFunction<in_addr_t Function(in_addr)>>('inet_lnaof');
  late final _inet_lnaof = _inet_lnaofPtr.asFunction<int Function(in_addr)>();

  in_addr inet_makeaddr(
    int __net,
    int __host,
  ) {
    return _inet_makeaddr(
      __net,
      __host,
    );
  }

  late final _inet_makeaddrPtr =
      _lookup<ffi.NativeFunction<in_addr Function(in_addr_t, in_addr_t)>>(
          'inet_makeaddr');
  late final _inet_makeaddr =
      _inet_makeaddrPtr.asFunction<in_addr Function(int, int)>();

  int inet_netof(
    in_addr __in,
  ) {
    return _inet_netof(
      __in,
    );
  }

  late final _inet_netofPtr =
      _lookup<ffi.NativeFunction<in_addr_t Function(in_addr)>>('inet_netof');
  late final _inet_netof = _inet_netofPtr.asFunction<int Function(in_addr)>();

  int inet_network(
    ffi.Pointer<ffi.Char> __cp,
  ) {
    return _inet_network(
      __cp,
    );
  }

  late final _inet_networkPtr =
      _lookup<ffi.NativeFunction<in_addr_t Function(ffi.Pointer<ffi.Char>)>>(
          'inet_network');
  late final _inet_network =
      _inet_networkPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> inet_ntoa(
    in_addr __in,
  ) {
    return _inet_ntoa(
      __in,
    );
  }

  late final _inet_ntoaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(in_addr)>>(
          'inet_ntoa');
  late final _inet_ntoa =
      _inet_ntoaPtr.asFunction<ffi.Pointer<ffi.Char> Function(in_addr)>();

  int inet_pton(
    int __af,
    ffi.Pointer<ffi.Char> __cp,
    ffi.Pointer<ffi.Void> __buf,
  ) {
    return _inet_pton(
      __af,
      __cp,
      __buf,
    );
  }

  late final _inet_ptonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('inet_pton');
  late final _inet_pton = _inet_ptonPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> inet_ntop(
    int __af,
    ffi.Pointer<ffi.Void> __cp,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _inet_ntop(
      __af,
      __cp,
      __buf,
      __len,
    );
  }

  late final _inet_ntopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>, socklen_t)>>('inet_ntop');
  late final _inet_ntop = _inet_ntopPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, int)>();

  int inet_aton(
    ffi.Pointer<ffi.Char> __cp,
    ffi.Pointer<in_addr> __inp,
  ) {
    return _inet_aton(
      __cp,
      __inp,
    );
  }

  late final _inet_atonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<in_addr>)>>('inet_aton');
  late final _inet_aton = _inet_atonPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<in_addr>)>();

  ffi.Pointer<ffi.Char> inet_neta(
    int __net,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _inet_neta(
      __net,
      __buf,
      __len,
    );
  }

  late final _inet_netaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              in_addr_t, ffi.Pointer<ffi.Char>, ffi.Int)>>('inet_neta');
  late final _inet_neta = _inet_netaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> inet_net_ntop(
    int __af,
    ffi.Pointer<ffi.Void> __cp,
    int __bits,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _inet_net_ntop(
      __af,
      __cp,
      __bits,
      __buf,
      __len,
    );
  }

  late final _inet_net_ntopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('inet_net_ntop');
  late final _inet_net_ntop = _inet_net_ntopPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          int, ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>, int)>();

  int inet_net_pton(
    int __af,
    ffi.Pointer<ffi.Char> __cp,
    ffi.Pointer<ffi.Void> __buf,
    int __len,
  ) {
    return _inet_net_pton(
      __af,
      __cp,
      __buf,
      __len,
    );
  }

  late final _inet_net_ptonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('inet_net_pton');
  late final _inet_net_pton = _inet_net_ptonPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>, int)>();

  int inet_nsap_addr(
    ffi.Pointer<ffi.Char> __cp,
    ffi.Pointer<ffi.UnsignedChar> __buf,
    int __len,
  ) {
    return _inet_nsap_addr(
      __cp,
      __buf,
      __len,
    );
  }

  late final _inet_nsap_addrPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('inet_nsap_addr');
  late final _inet_nsap_addr = _inet_nsap_addrPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<ffi.Char> inet_nsap_ntoa(
    int __len,
    ffi.Pointer<ffi.UnsignedChar> __cp,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _inet_nsap_ntoa(
      __len,
      __cp,
      __buf,
    );
  }

  late final _inet_nsap_ntoaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Char>)>>('inet_nsap_ntoa');
  late final _inet_nsap_ntoa = _inet_nsap_ntoaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          int, ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<ffi.UnsignedInt> _DOGECOIN_MAX_P2P_MSG_SIZE =
      _lookup<ffi.UnsignedInt>('DOGECOIN_MAX_P2P_MSG_SIZE');

  int get DOGECOIN_MAX_P2P_MSG_SIZE => _DOGECOIN_MAX_P2P_MSG_SIZE.value;

  set DOGECOIN_MAX_P2P_MSG_SIZE(int value) =>
      _DOGECOIN_MAX_P2P_MSG_SIZE.value = value;

  late final ffi.Pointer<ffi.UnsignedInt> _DOGECOIN_P2P_HDRSZ =
      _lookup<ffi.UnsignedInt>('DOGECOIN_P2P_HDRSZ');

  int get DOGECOIN_P2P_HDRSZ => _DOGECOIN_P2P_HDRSZ.value;

  set DOGECOIN_P2P_HDRSZ(int value) => _DOGECOIN_P2P_HDRSZ.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Uint8>> _NULLHASH =
      _lookup<ffi.Pointer<ffi.Uint8>>('NULLHASH');

  ffi.Pointer<ffi.Uint8> get NULLHASH => _NULLHASH.value;

  set NULLHASH(ffi.Pointer<ffi.Uint8> value) => _NULLHASH.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _DOGECOIN_MSG_VERSION =
      _lookup<ffi.Pointer<ffi.Char>>('DOGECOIN_MSG_VERSION');

  ffi.Pointer<ffi.Char> get DOGECOIN_MSG_VERSION => _DOGECOIN_MSG_VERSION.value;

  set DOGECOIN_MSG_VERSION(ffi.Pointer<ffi.Char> value) =>
      _DOGECOIN_MSG_VERSION.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _DOGECOIN_MSG_VERACK =
      _lookup<ffi.Pointer<ffi.Char>>('DOGECOIN_MSG_VERACK');

  ffi.Pointer<ffi.Char> get DOGECOIN_MSG_VERACK => _DOGECOIN_MSG_VERACK.value;

  set DOGECOIN_MSG_VERACK(ffi.Pointer<ffi.Char> value) =>
      _DOGECOIN_MSG_VERACK.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _DOGECOIN_MSG_PING =
      _lookup<ffi.Pointer<ffi.Char>>('DOGECOIN_MSG_PING');

  ffi.Pointer<ffi.Char> get DOGECOIN_MSG_PING => _DOGECOIN_MSG_PING.value;

  set DOGECOIN_MSG_PING(ffi.Pointer<ffi.Char> value) =>
      _DOGECOIN_MSG_PING.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _DOGECOIN_MSG_PONG =
      _lookup<ffi.Pointer<ffi.Char>>('DOGECOIN_MSG_PONG');

  ffi.Pointer<ffi.Char> get DOGECOIN_MSG_PONG => _DOGECOIN_MSG_PONG.value;

  set DOGECOIN_MSG_PONG(ffi.Pointer<ffi.Char> value) =>
      _DOGECOIN_MSG_PONG.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _DOGECOIN_MSG_GETDATA =
      _lookup<ffi.Pointer<ffi.Char>>('DOGECOIN_MSG_GETDATA');

  ffi.Pointer<ffi.Char> get DOGECOIN_MSG_GETDATA => _DOGECOIN_MSG_GETDATA.value;

  set DOGECOIN_MSG_GETDATA(ffi.Pointer<ffi.Char> value) =>
      _DOGECOIN_MSG_GETDATA.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _DOGECOIN_MSG_GETHEADERS =
      _lookup<ffi.Pointer<ffi.Char>>('DOGECOIN_MSG_GETHEADERS');

  ffi.Pointer<ffi.Char> get DOGECOIN_MSG_GETHEADERS =>
      _DOGECOIN_MSG_GETHEADERS.value;

  set DOGECOIN_MSG_GETHEADERS(ffi.Pointer<ffi.Char> value) =>
      _DOGECOIN_MSG_GETHEADERS.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _DOGECOIN_MSG_HEADERS =
      _lookup<ffi.Pointer<ffi.Char>>('DOGECOIN_MSG_HEADERS');

  ffi.Pointer<ffi.Char> get DOGECOIN_MSG_HEADERS => _DOGECOIN_MSG_HEADERS.value;

  set DOGECOIN_MSG_HEADERS(ffi.Pointer<ffi.Char> value) =>
      _DOGECOIN_MSG_HEADERS.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _DOGECOIN_MSG_GETBLOCKS =
      _lookup<ffi.Pointer<ffi.Char>>('DOGECOIN_MSG_GETBLOCKS');

  ffi.Pointer<ffi.Char> get DOGECOIN_MSG_GETBLOCKS =>
      _DOGECOIN_MSG_GETBLOCKS.value;

  set DOGECOIN_MSG_GETBLOCKS(ffi.Pointer<ffi.Char> value) =>
      _DOGECOIN_MSG_GETBLOCKS.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _DOGECOIN_MSG_BLOCK =
      _lookup<ffi.Pointer<ffi.Char>>('DOGECOIN_MSG_BLOCK');

  ffi.Pointer<ffi.Char> get DOGECOIN_MSG_BLOCK => _DOGECOIN_MSG_BLOCK.value;

  set DOGECOIN_MSG_BLOCK(ffi.Pointer<ffi.Char> value) =>
      _DOGECOIN_MSG_BLOCK.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _DOGECOIN_MSG_INV =
      _lookup<ffi.Pointer<ffi.Char>>('DOGECOIN_MSG_INV');

  ffi.Pointer<ffi.Char> get DOGECOIN_MSG_INV => _DOGECOIN_MSG_INV.value;

  set DOGECOIN_MSG_INV(ffi.Pointer<ffi.Char> value) =>
      _DOGECOIN_MSG_INV.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _DOGECOIN_MSG_TX =
      _lookup<ffi.Pointer<ffi.Char>>('DOGECOIN_MSG_TX');

  ffi.Pointer<ffi.Char> get DOGECOIN_MSG_TX => _DOGECOIN_MSG_TX.value;

  set DOGECOIN_MSG_TX(ffi.Pointer<ffi.Char> value) =>
      _DOGECOIN_MSG_TX.value = value;

  late final ffi.Pointer<ffi.UnsignedInt> _MAX_HEADERS_RESULTS =
      _lookup<ffi.UnsignedInt>('MAX_HEADERS_RESULTS');

  int get MAX_HEADERS_RESULTS => _MAX_HEADERS_RESULTS.value;

  set MAX_HEADERS_RESULTS(int value) => _MAX_HEADERS_RESULTS.value = value;

  late final ffi.Pointer<ffi.Int> _DOGECOIN_PROTOCOL_VERSION =
      _lookup<ffi.Int>('DOGECOIN_PROTOCOL_VERSION');

  int get DOGECOIN_PROTOCOL_VERSION => _DOGECOIN_PROTOCOL_VERSION.value;

  set DOGECOIN_PROTOCOL_VERSION(int value) =>
      _DOGECOIN_PROTOCOL_VERSION.value = value;

  /// getdata message type flags
  late final ffi.Pointer<ffi.Uint32> _MSG_TYPE_MASK =
      _lookup<ffi.Uint32>('MSG_TYPE_MASK');

  int get MSG_TYPE_MASK => _MSG_TYPE_MASK.value;

  set MSG_TYPE_MASK(int value) => _MSG_TYPE_MASK.value = value;

  void dogecoin_p2p_msg_version_init(
    ffi.Pointer<dogecoin_p2p_version_msg> msg,
    ffi.Pointer<dogecoin_p2p_address> addrFrom,
    ffi.Pointer<dogecoin_p2p_address> addrTo,
    ffi.Pointer<ffi.Char> strSubVer,
    int relay,
  ) {
    return _dogecoin_p2p_msg_version_init(
      msg,
      addrFrom,
      addrTo,
      strSubVer,
      relay,
    );
  }

  late final _dogecoin_p2p_msg_version_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<dogecoin_p2p_version_msg>,
              ffi.Pointer<dogecoin_p2p_address>,
              ffi.Pointer<dogecoin_p2p_address>,
              ffi.Pointer<ffi.Char>,
              dogecoin_bool)>>('dogecoin_p2p_msg_version_init');
  late final _dogecoin_p2p_msg_version_init =
      _dogecoin_p2p_msg_version_initPtr.asFunction<
          void Function(
              ffi.Pointer<dogecoin_p2p_version_msg>,
              ffi.Pointer<dogecoin_p2p_address>,
              ffi.Pointer<dogecoin_p2p_address>,
              ffi.Pointer<ffi.Char>,
              int)>();

  void dogecoin_p2p_msg_version_ser(
    ffi.Pointer<dogecoin_p2p_version_msg> msg,
    ffi.Pointer<cstring> buf,
  ) {
    return _dogecoin_p2p_msg_version_ser(
      msg,
      buf,
    );
  }

  late final _dogecoin_p2p_msg_version_serPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_p2p_version_msg>,
              ffi.Pointer<cstring>)>>('dogecoin_p2p_msg_version_ser');
  late final _dogecoin_p2p_msg_version_ser =
      _dogecoin_p2p_msg_version_serPtr.asFunction<
          void Function(
              ffi.Pointer<dogecoin_p2p_version_msg>, ffi.Pointer<cstring>)>();

  int dogecoin_p2p_msg_version_deser(
    ffi.Pointer<dogecoin_p2p_version_msg> msg,
    ffi.Pointer<const_buffer> buf,
  ) {
    return _dogecoin_p2p_msg_version_deser(
      msg,
      buf,
    );
  }

  late final _dogecoin_p2p_msg_version_deserPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_p2p_version_msg>,
              ffi.Pointer<const_buffer>)>>('dogecoin_p2p_msg_version_deser');
  late final _dogecoin_p2p_msg_version_deser =
      _dogecoin_p2p_msg_version_deserPtr.asFunction<
          int Function(ffi.Pointer<dogecoin_p2p_version_msg>,
              ffi.Pointer<const_buffer>)>();

  void dogecoin_p2p_msg_inv_init(
    ffi.Pointer<dogecoin_p2p_inv_msg> msg,
    int type,
    ffi.Pointer<ffi.Uint8> hash,
  ) {
    return _dogecoin_p2p_msg_inv_init(
      msg,
      type,
      hash,
    );
  }

  late final _dogecoin_p2p_msg_inv_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_p2p_inv_msg>, ffi.Uint32,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_p2p_msg_inv_init');
  late final _dogecoin_p2p_msg_inv_init =
      _dogecoin_p2p_msg_inv_initPtr.asFunction<
          void Function(ffi.Pointer<dogecoin_p2p_inv_msg>, int,
              ffi.Pointer<ffi.Uint8>)>();

  void dogecoin_p2p_msg_inv_ser(
    ffi.Pointer<dogecoin_p2p_inv_msg> msg,
    ffi.Pointer<cstring> buf,
  ) {
    return _dogecoin_p2p_msg_inv_ser(
      msg,
      buf,
    );
  }

  late final _dogecoin_p2p_msg_inv_serPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_p2p_inv_msg>,
              ffi.Pointer<cstring>)>>('dogecoin_p2p_msg_inv_ser');
  late final _dogecoin_p2p_msg_inv_ser =
      _dogecoin_p2p_msg_inv_serPtr.asFunction<
          void Function(
              ffi.Pointer<dogecoin_p2p_inv_msg>, ffi.Pointer<cstring>)>();

  int dogecoin_p2p_msg_inv_deser(
    ffi.Pointer<dogecoin_p2p_inv_msg> msg,
    ffi.Pointer<const_buffer> buf,
  ) {
    return _dogecoin_p2p_msg_inv_deser(
      msg,
      buf,
    );
  }

  late final _dogecoin_p2p_msg_inv_deserPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_p2p_inv_msg>,
              ffi.Pointer<const_buffer>)>>('dogecoin_p2p_msg_inv_deser');
  late final _dogecoin_p2p_msg_inv_deser =
      _dogecoin_p2p_msg_inv_deserPtr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_p2p_inv_msg>, ffi.Pointer<const_buffer>)>();

  void dogecoin_p2p_address_init(
    ffi.Pointer<dogecoin_p2p_address> addr,
  ) {
    return _dogecoin_p2p_address_init(
      addr,
    );
  }

  late final _dogecoin_p2p_address_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<dogecoin_p2p_address>)>>('dogecoin_p2p_address_init');
  late final _dogecoin_p2p_address_init = _dogecoin_p2p_address_initPtr
      .asFunction<void Function(ffi.Pointer<dogecoin_p2p_address>)>();

  void dogecoin_addr_to_p2paddr(
    ffi.Pointer<sockaddr> addr,
    ffi.Pointer<dogecoin_p2p_address> addr_out,
  ) {
    return _dogecoin_addr_to_p2paddr(
      addr,
      addr_out,
    );
  }

  late final _dogecoin_addr_to_p2paddrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sockaddr>,
              ffi.Pointer<dogecoin_p2p_address>)>>('dogecoin_addr_to_p2paddr');
  late final _dogecoin_addr_to_p2paddr =
      _dogecoin_addr_to_p2paddrPtr.asFunction<
          void Function(
              ffi.Pointer<sockaddr>, ffi.Pointer<dogecoin_p2p_address>)>();

  int dogecoin_p2p_deser_addr(
    int protocol_version,
    ffi.Pointer<dogecoin_p2p_address> addr,
    ffi.Pointer<const_buffer> buf,
  ) {
    return _dogecoin_p2p_deser_addr(
      protocol_version,
      addr,
      buf,
    );
  }

  late final _dogecoin_p2p_deser_addrPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.UnsignedInt,
              ffi.Pointer<dogecoin_p2p_address>,
              ffi.Pointer<const_buffer>)>>('dogecoin_p2p_deser_addr');
  late final _dogecoin_p2p_deser_addr = _dogecoin_p2p_deser_addrPtr.asFunction<
      int Function(
          int, ffi.Pointer<dogecoin_p2p_address>, ffi.Pointer<const_buffer>)>();

  void dogecoin_p2p_ser_addr(
    int protover,
    ffi.Pointer<dogecoin_p2p_address> addr,
    ffi.Pointer<cstring> str_out,
  ) {
    return _dogecoin_p2p_ser_addr(
      protover,
      addr,
      str_out,
    );
  }

  late final _dogecoin_p2p_ser_addrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.UnsignedInt, ffi.Pointer<dogecoin_p2p_address>,
              ffi.Pointer<cstring>)>>('dogecoin_p2p_ser_addr');
  late final _dogecoin_p2p_ser_addr = _dogecoin_p2p_ser_addrPtr.asFunction<
      void Function(
          int, ffi.Pointer<dogecoin_p2p_address>, ffi.Pointer<cstring>)>();

  void dogecoin_p2paddr_to_addr(
    ffi.Pointer<dogecoin_p2p_address> p2p_addr,
    ffi.Pointer<sockaddr> addr_out,
  ) {
    return _dogecoin_p2paddr_to_addr(
      p2p_addr,
      addr_out,
    );
  }

  late final _dogecoin_p2paddr_to_addrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_p2p_address>,
              ffi.Pointer<sockaddr>)>>('dogecoin_p2paddr_to_addr');
  late final _dogecoin_p2paddr_to_addr =
      _dogecoin_p2paddr_to_addrPtr.asFunction<
          void Function(
              ffi.Pointer<dogecoin_p2p_address>, ffi.Pointer<sockaddr>)>();

  void dogecoin_p2p_deser_msghdr(
    ffi.Pointer<dogecoin_p2p_msg_hdr> hdr,
    ffi.Pointer<const_buffer> buf,
  ) {
    return _dogecoin_p2p_deser_msghdr(
      hdr,
      buf,
    );
  }

  late final _dogecoin_p2p_deser_msghdrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_p2p_msg_hdr>,
              ffi.Pointer<const_buffer>)>>('dogecoin_p2p_deser_msghdr');
  late final _dogecoin_p2p_deser_msghdr =
      _dogecoin_p2p_deser_msghdrPtr.asFunction<
          void Function(
              ffi.Pointer<dogecoin_p2p_msg_hdr>, ffi.Pointer<const_buffer>)>();

  ffi.Pointer<cstring> dogecoin_p2p_message_new(
    ffi.Pointer<ffi.UnsignedChar> netmagic,
    ffi.Pointer<ffi.Char> command,
    ffi.Pointer<ffi.Void> data,
    int data_len,
  ) {
    return _dogecoin_p2p_message_new(
      netmagic,
      command,
      data,
      data_len,
    );
  }

  late final _dogecoin_p2p_message_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cstring> Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Uint32)>>('dogecoin_p2p_message_new');
  late final _dogecoin_p2p_message_new =
      _dogecoin_p2p_message_newPtr.asFunction<
          ffi.Pointer<cstring> Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>, int)>();

  void dogecoin_p2p_msg_getheaders(
    ffi.Pointer<vector> blocklocators,
    ffi.Pointer<ffi.Uint8> hashstop,
    ffi.Pointer<cstring> str_out,
  ) {
    return _dogecoin_p2p_msg_getheaders(
      blocklocators,
      hashstop,
      str_out,
    );
  }

  late final _dogecoin_p2p_msg_getheadersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<vector>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<cstring>)>>('dogecoin_p2p_msg_getheaders');
  late final _dogecoin_p2p_msg_getheaders =
      _dogecoin_p2p_msg_getheadersPtr.asFunction<
          void Function(ffi.Pointer<vector>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<cstring>)>();

  int dogecoin_p2p_deser_msg_getheaders(
    ffi.Pointer<vector> blocklocators,
    ffi.Pointer<ffi.Uint8> hashstop,
    ffi.Pointer<const_buffer> buf,
  ) {
    return _dogecoin_p2p_deser_msg_getheaders(
      blocklocators,
      hashstop,
      buf,
    );
  }

  late final _dogecoin_p2p_deser_msg_getheadersPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<vector>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<const_buffer>)>>('dogecoin_p2p_deser_msg_getheaders');
  late final _dogecoin_p2p_deser_msg_getheaders =
      _dogecoin_p2p_deser_msg_getheadersPtr.asFunction<
          int Function(ffi.Pointer<vector>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<const_buffer>)>();

  ffi.Pointer<dogecoin_chainparams> chain_from_b58_prefix5(
    ffi.Pointer<ffi.Char> address,
  ) {
    return _chain_from_b58_prefix5(
      address,
    );
  }

  late final _chain_from_b58_prefix5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<dogecoin_chainparams> Function(
              ffi.Pointer<ffi.Char>)>>('chain_from_b58_prefix');
  late final _chain_from_b58_prefix5 = _chain_from_b58_prefix5Ptr.asFunction<
      ffi.Pointer<dogecoin_chainparams> Function(ffi.Pointer<ffi.Char>)>();

  int chain_from_b58_prefix_bool5(
    ffi.Pointer<ffi.Char> address,
  ) {
    return _chain_from_b58_prefix_bool5(
      address,
    );
  }

  late final _chain_from_b58_prefix_bool5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'chain_from_b58_prefix_bool');
  late final _chain_from_b58_prefix_bool5 = _chain_from_b58_prefix_bool5Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void dogecoin_mem_set_mapper3(
    dogecoin_mem_mapper mapper,
  ) {
    return _dogecoin_mem_set_mapper3(
      mapper,
    );
  }

  late final _dogecoin_mem_set_mapper3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dogecoin_mem_mapper)>>(
          'dogecoin_mem_set_mapper');
  late final _dogecoin_mem_set_mapper3 = _dogecoin_mem_set_mapper3Ptr
      .asFunction<void Function(dogecoin_mem_mapper)>();

  void dogecoin_mem_set_mapper_default3() {
    return _dogecoin_mem_set_mapper_default3();
  }

  late final _dogecoin_mem_set_mapper_default3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'dogecoin_mem_set_mapper_default');
  late final _dogecoin_mem_set_mapper_default3 =
      _dogecoin_mem_set_mapper_default3Ptr.asFunction<void Function()>();

  ffi.Pointer<ffi.Void> dogecoin_malloc3(
    int size,
  ) {
    return _dogecoin_malloc3(
      size,
    );
  }

  late final _dogecoin_malloc3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'dogecoin_malloc');
  late final _dogecoin_malloc3 =
      _dogecoin_malloc3Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> dogecoin_calloc3(
    int count,
    int size,
  ) {
    return _dogecoin_calloc3(
      count,
      size,
    );
  }

  late final _dogecoin_calloc3Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'dogecoin_calloc');
  late final _dogecoin_calloc3 = _dogecoin_calloc3Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> dogecoin_realloc3(
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _dogecoin_realloc3(
      ptr,
      size,
    );
  }

  late final _dogecoin_realloc3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('dogecoin_realloc');
  late final _dogecoin_realloc3 = _dogecoin_realloc3Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void dogecoin_free3(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _dogecoin_free3(
      ptr,
    );
  }

  late final _dogecoin_free3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'dogecoin_free');
  late final _dogecoin_free3 =
      _dogecoin_free3Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> memcpy_safe3(
    ffi.Pointer<ffi.Void> destination,
    ffi.Pointer<ffi.Void> source,
    int count,
  ) {
    return _memcpy_safe3(
      destination,
      source,
      count,
    );
  }

  late final _memcpy_safe3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.UnsignedInt)>>('memcpy_safe');
  late final _memcpy_safe3 = _memcpy_safe3Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void sha256_init2(
    ffi.Pointer<sha256_context> arg0,
  ) {
    return _sha256_init2(
      arg0,
    );
  }

  late final _sha256_init2Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sha256_context>)>>(
      'sha256_init');
  late final _sha256_init2 =
      _sha256_init2Ptr.asFunction<void Function(ffi.Pointer<sha256_context>)>();

  void sha256_write2(
    ffi.Pointer<sha256_context> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
    int size_t,
  ) {
    return _sha256_write2(
      arg0,
      arg1,
      size_t,
    );
  }

  late final _sha256_write2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sha256_context>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('sha256_write');
  late final _sha256_write2 = _sha256_write2Ptr.asFunction<
      void Function(
          ffi.Pointer<sha256_context>, ffi.Pointer<ffi.Uint8>, int)>();

  void sha256_finalize2(
    ffi.Pointer<sha256_context> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
  ) {
    return _sha256_finalize2(
      arg0,
      arg1,
    );
  }

  late final _sha256_finalize2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sha256_context>,
              ffi.Pointer<ffi.Uint8>)>>('sha256_finalize');
  late final _sha256_finalize2 = _sha256_finalize2Ptr.asFunction<
      void Function(ffi.Pointer<sha256_context>, ffi.Pointer<ffi.Uint8>)>();

  void sha256_raw2(
    ffi.Pointer<ffi.Uint8> arg0,
    int size_t,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return _sha256_raw2(
      arg0,
      size_t,
      arg2,
    );
  }

  late final _sha256_raw2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<ffi.Uint8>)>>('sha256_raw');
  late final _sha256_raw2 = _sha256_raw2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  void sha512_init2(
    ffi.Pointer<sha512_context> arg0,
  ) {
    return _sha512_init2(
      arg0,
    );
  }

  late final _sha512_init2Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sha512_context>)>>(
      'sha512_init');
  late final _sha512_init2 =
      _sha512_init2Ptr.asFunction<void Function(ffi.Pointer<sha512_context>)>();

  void sha512_write2(
    ffi.Pointer<sha512_context> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
    int size_t,
  ) {
    return _sha512_write2(
      arg0,
      arg1,
      size_t,
    );
  }

  late final _sha512_write2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sha512_context>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('sha512_write');
  late final _sha512_write2 = _sha512_write2Ptr.asFunction<
      void Function(
          ffi.Pointer<sha512_context>, ffi.Pointer<ffi.Uint8>, int)>();

  void sha512_finalize2(
    ffi.Pointer<sha512_context> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
  ) {
    return _sha512_finalize2(
      arg0,
      arg1,
    );
  }

  late final _sha512_finalize2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sha512_context>,
              ffi.Pointer<ffi.Uint8>)>>('sha512_finalize');
  late final _sha512_finalize2 = _sha512_finalize2Ptr.asFunction<
      void Function(ffi.Pointer<sha512_context>, ffi.Pointer<ffi.Uint8>)>();

  void sha512_raw2(
    ffi.Pointer<ffi.Uint8> arg0,
    int size_t,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return _sha512_raw2(
      arg0,
      size_t,
      arg2,
    );
  }

  late final _sha512_raw2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<ffi.Uint8>)>>('sha512_raw');
  late final _sha512_raw2 = _sha512_raw2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  void hmac_sha2562(
    ffi.Pointer<ffi.Uint8> key,
    int keylen,
    ffi.Pointer<ffi.Uint8> msg,
    int msglen,
    ffi.Pointer<ffi.Uint8> hmac,
  ) {
    return _hmac_sha2562(
      key,
      keylen,
      msg,
      msglen,
      hmac,
    );
  }

  late final _hmac_sha2562Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint8>)>>('hmac_sha256');
  late final _hmac_sha2562 = _hmac_sha2562Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>)>();

  void hmac_sha5122(
    ffi.Pointer<ffi.Uint8> key,
    int keylen,
    ffi.Pointer<ffi.Uint8> msg,
    int msglen,
    ffi.Pointer<ffi.Uint8> hmac,
  ) {
    return _hmac_sha5122(
      key,
      keylen,
      msg,
      msglen,
      hmac,
    );
  }

  late final _hmac_sha5122Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint8>)>>('hmac_sha512');
  late final _hmac_sha5122 = _hmac_sha5122Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>)>();

  void dogecoin_privkey_init2(
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_init2(
      privkey,
    );
  }

  late final _dogecoin_privkey_init2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_key>)>>(
          'dogecoin_privkey_init');
  late final _dogecoin_privkey_init2 = _dogecoin_privkey_init2Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_key>)>();

  int dogecoin_privkey_is_valid2(
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_is_valid2(
      privkey,
    );
  }

  late final _dogecoin_privkey_is_valid2Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_key>)>>('dogecoin_privkey_is_valid');
  late final _dogecoin_privkey_is_valid2 = _dogecoin_privkey_is_valid2Ptr
      .asFunction<int Function(ffi.Pointer<dogecoin_key>)>();

  void dogecoin_privkey_cleanse2(
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_cleanse2(
      privkey,
    );
  }

  late final _dogecoin_privkey_cleanse2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_key>)>>(
          'dogecoin_privkey_cleanse');
  late final _dogecoin_privkey_cleanse2 = _dogecoin_privkey_cleanse2Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_key>)>();

  int dogecoin_privkey_gen2(
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_gen2(
      privkey,
    );
  }

  late final _dogecoin_privkey_gen2Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_key>)>>('dogecoin_privkey_gen');
  late final _dogecoin_privkey_gen2 = _dogecoin_privkey_gen2Ptr
      .asFunction<int Function(ffi.Pointer<dogecoin_key>)>();

  int dogecoin_privkey_verify_pubkey2(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_privkey_verify_pubkey2(
      privkey,
      pubkey,
    );
  }

  late final _dogecoin_privkey_verify_pubkey2Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_key>,
              ffi.Pointer<dogecoin_pubkey>)>>('dogecoin_privkey_verify_pubkey');
  late final _dogecoin_privkey_verify_pubkey2 =
      _dogecoin_privkey_verify_pubkey2Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_key>, ffi.Pointer<dogecoin_pubkey>)>();

  void dogecoin_privkey_encode_wif2(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<dogecoin_chainparams> chain,
    ffi.Pointer<ffi.Char> privkey_wif,
    ffi.Pointer<ffi.Int> strsize_inout,
  ) {
    return _dogecoin_privkey_encode_wif2(
      privkey,
      chain,
      privkey_wif,
      strsize_inout,
    );
  }

  late final _dogecoin_privkey_encode_wif2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_privkey_encode_wif');
  late final _dogecoin_privkey_encode_wif2 =
      _dogecoin_privkey_encode_wif2Ptr.asFunction<
          void Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>();

  int dogecoin_privkey_decode_wif2(
    ffi.Pointer<ffi.Char> privkey_wif,
    ffi.Pointer<dogecoin_chainparams> chain,
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_decode_wif2(
      privkey_wif,
      chain,
      privkey,
    );
  }

  late final _dogecoin_privkey_decode_wif2Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<dogecoin_key>)>>('dogecoin_privkey_decode_wif');
  late final _dogecoin_privkey_decode_wif2 =
      _dogecoin_privkey_decode_wif2Ptr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<dogecoin_key>)>();

  void dogecoin_pubkey_init2(
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_pubkey_init2(
      pubkey,
    );
  }

  late final _dogecoin_pubkey_init2Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_pubkey>)>>(
      'dogecoin_pubkey_init');
  late final _dogecoin_pubkey_init2 = _dogecoin_pubkey_init2Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_pubkey>)>();

  int dogecoin_pubkey_get_length2(
    int ch_header,
  ) {
    return _dogecoin_pubkey_get_length2(
      ch_header,
    );
  }

  late final _dogecoin_pubkey_get_length2Ptr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedChar)>>(
          'dogecoin_pubkey_get_length');
  late final _dogecoin_pubkey_get_length2 =
      _dogecoin_pubkey_get_length2Ptr.asFunction<int Function(int)>();

  int dogecoin_pubkey_is_valid2(
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_pubkey_is_valid2(
      pubkey,
    );
  }

  late final _dogecoin_pubkey_is_valid2Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_pubkey>)>>('dogecoin_pubkey_is_valid');
  late final _dogecoin_pubkey_is_valid2 = _dogecoin_pubkey_is_valid2Ptr
      .asFunction<int Function(ffi.Pointer<dogecoin_pubkey>)>();

  void dogecoin_pubkey_cleanse2(
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_pubkey_cleanse2(
      pubkey,
    );
  }

  late final _dogecoin_pubkey_cleanse2Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_pubkey>)>>(
      'dogecoin_pubkey_cleanse');
  late final _dogecoin_pubkey_cleanse2 = _dogecoin_pubkey_cleanse2Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_pubkey>)>();

  void dogecoin_pubkey_from_key2(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<dogecoin_pubkey> pubkey_inout,
  ) {
    return _dogecoin_pubkey_from_key2(
      privkey,
      pubkey_inout,
    );
  }

  late final _dogecoin_pubkey_from_key2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_key>,
              ffi.Pointer<dogecoin_pubkey>)>>('dogecoin_pubkey_from_key');
  late final _dogecoin_pubkey_from_key2 =
      _dogecoin_pubkey_from_key2Ptr.asFunction<
          void Function(
              ffi.Pointer<dogecoin_key>, ffi.Pointer<dogecoin_pubkey>)>();

  void dogecoin_pubkey_get_hash1602(
    ffi.Pointer<dogecoin_pubkey> pubkey,
    ffi.Pointer<ffi.Uint8> hash160,
  ) {
    return _dogecoin_pubkey_get_hash1602(
      pubkey,
      hash160,
    );
  }

  late final _dogecoin_pubkey_get_hash1602Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_pubkey>,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_pubkey_get_hash160');
  late final _dogecoin_pubkey_get_hash1602 =
      _dogecoin_pubkey_get_hash1602Ptr.asFunction<
          void Function(
              ffi.Pointer<dogecoin_pubkey>, ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_pubkey_get_hex2(
    ffi.Pointer<dogecoin_pubkey> pubkey,
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.Int> strsize,
  ) {
    return _dogecoin_pubkey_get_hex2(
      pubkey,
      str,
      strsize,
    );
  }

  late final _dogecoin_pubkey_get_hex2Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_pubkey>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_pubkey_get_hex');
  late final _dogecoin_pubkey_get_hex2 =
      _dogecoin_pubkey_get_hex2Ptr.asFunction<
          int Function(ffi.Pointer<dogecoin_pubkey>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>();

  int dogecoin_key_sign_hash2(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<ffi.Uint8> hash,
    ffi.Pointer<ffi.UnsignedChar> sigout,
    ffi.Pointer<ffi.Int> outlen,
  ) {
    return _dogecoin_key_sign_hash2(
      privkey,
      hash,
      sigout,
      outlen,
    );
  }

  late final _dogecoin_key_sign_hash2Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_key_sign_hash');
  late final _dogecoin_key_sign_hash2 = _dogecoin_key_sign_hash2Ptr.asFunction<
      int Function(ffi.Pointer<dogecoin_key>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Int>)>();

  int dogecoin_key_sign_hash_compact2(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<ffi.Uint8> hash,
    ffi.Pointer<ffi.UnsignedChar> sigout,
    ffi.Pointer<ffi.Int> outlen,
  ) {
    return _dogecoin_key_sign_hash_compact2(
      privkey,
      hash,
      sigout,
      outlen,
    );
  }

  late final _dogecoin_key_sign_hash_compact2Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_key_sign_hash_compact');
  late final _dogecoin_key_sign_hash_compact2 =
      _dogecoin_key_sign_hash_compact2Ptr.asFunction<
          int Function(ffi.Pointer<dogecoin_key>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Int>)>();

  int dogecoin_key_sign_hash_compact_recoverable2(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<ffi.Uint8> hash,
    ffi.Pointer<ffi.UnsignedChar> sigout,
    ffi.Pointer<ffi.Int> outlen,
    ffi.Pointer<ffi.Int> recid,
  ) {
    return _dogecoin_key_sign_hash_compact_recoverable2(
      privkey,
      hash,
      sigout,
      outlen,
      recid,
    );
  }

  late final _dogecoin_key_sign_hash_compact_recoverable2Ptr = _lookup<
          ffi.NativeFunction<
              dogecoin_bool Function(
                  ffi.Pointer<dogecoin_key>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.UnsignedChar>,
                  ffi.Pointer<ffi.Int>,
                  ffi.Pointer<ffi.Int>)>>(
      'dogecoin_key_sign_hash_compact_recoverable');
  late final _dogecoin_key_sign_hash_compact_recoverable2 =
      _dogecoin_key_sign_hash_compact_recoverable2Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  int dogecoin_key_sign_recover_pubkey2(
    ffi.Pointer<ffi.UnsignedChar> sig,
    ffi.Pointer<ffi.Uint8> hash,
    int recid,
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_key_sign_recover_pubkey2(
      sig,
      hash,
      recid,
      pubkey,
    );
  }

  late final _dogecoin_key_sign_recover_pubkey2Ptr = _lookup<
          ffi.NativeFunction<
              dogecoin_bool Function(
                  ffi.Pointer<ffi.UnsignedChar>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Int,
                  ffi.Pointer<dogecoin_pubkey>)>>(
      'dogecoin_key_sign_recover_pubkey');
  late final _dogecoin_key_sign_recover_pubkey2 =
      _dogecoin_key_sign_recover_pubkey2Ptr.asFunction<
          int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Uint8>,
              int, ffi.Pointer<dogecoin_pubkey>)>();

  int dogecoin_pubkey_verify_sig2(
    ffi.Pointer<dogecoin_pubkey> pubkey,
    ffi.Pointer<ffi.Uint8> hash,
    ffi.Pointer<ffi.UnsignedChar> sigder,
    int len,
  ) {
    return _dogecoin_pubkey_verify_sig2(
      pubkey,
      hash,
      sigder,
      len,
    );
  }

  late final _dogecoin_pubkey_verify_sig2Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_pubkey>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('dogecoin_pubkey_verify_sig');
  late final _dogecoin_pubkey_verify_sig2 =
      _dogecoin_pubkey_verify_sig2Ptr.asFunction<
          int Function(ffi.Pointer<dogecoin_pubkey>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>, int)>();

  int dogecoin_pubkey_getaddr_p2pkh2(
    ffi.Pointer<dogecoin_pubkey> pubkey,
    ffi.Pointer<dogecoin_chainparams> chain,
    ffi.Pointer<ffi.Char> addrout,
  ) {
    return _dogecoin_pubkey_getaddr_p2pkh2(
      pubkey,
      chain,
      addrout,
    );
  }

  late final _dogecoin_pubkey_getaddr_p2pkh2Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_pubkey>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<ffi.Char>)>>('dogecoin_pubkey_getaddr_p2pkh');
  late final _dogecoin_pubkey_getaddr_p2pkh2 =
      _dogecoin_pubkey_getaddr_p2pkh2Ptr.asFunction<
          int Function(ffi.Pointer<dogecoin_pubkey>,
              ffi.Pointer<dogecoin_chainparams>, ffi.Pointer<ffi.Char>)>();

  int dogecoin_script_copy_without_op_codeseperator1(
    ffi.Pointer<cstring> scriptin,
    ffi.Pointer<cstring> scriptout,
  ) {
    return _dogecoin_script_copy_without_op_codeseperator1(
      scriptin,
      scriptout,
    );
  }

  late final _dogecoin_script_copy_without_op_codeseperator1Ptr = _lookup<
          ffi.NativeFunction<
              dogecoin_bool Function(
                  ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>(
      'dogecoin_script_copy_without_op_codeseperator');
  late final _dogecoin_script_copy_without_op_codeseperator1 =
      _dogecoin_script_copy_without_op_codeseperator1Ptr.asFunction<
          int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  ffi.Pointer<dogecoin_script_op> dogecoin_script_op_new1() {
    return _dogecoin_script_op_new1();
  }

  late final _dogecoin_script_op_new1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<dogecoin_script_op> Function()>>(
          'dogecoin_script_op_new');
  late final _dogecoin_script_op_new1 = _dogecoin_script_op_new1Ptr
      .asFunction<ffi.Pointer<dogecoin_script_op> Function()>();

  void dogecoin_script_op_free1(
    ffi.Pointer<dogecoin_script_op> script_op,
  ) {
    return _dogecoin_script_op_free1(
      script_op,
    );
  }

  late final _dogecoin_script_op_free1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<dogecoin_script_op>)>>('dogecoin_script_op_free');
  late final _dogecoin_script_op_free1 = _dogecoin_script_op_free1Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_script_op>)>();

  void dogecoin_script_op_free_cb1(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _dogecoin_script_op_free_cb1(
      data,
    );
  }

  late final _dogecoin_script_op_free_cb1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'dogecoin_script_op_free_cb');
  late final _dogecoin_script_op_free_cb1 = _dogecoin_script_op_free_cb1Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int dogecoin_script_get_ops1(
    ffi.Pointer<cstring> script_in,
    ffi.Pointer<vector> ops_out,
  ) {
    return _dogecoin_script_get_ops1(
      script_in,
      ops_out,
    );
  }

  late final _dogecoin_script_get_ops1Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<cstring>,
              ffi.Pointer<vector>)>>('dogecoin_script_get_ops');
  late final _dogecoin_script_get_ops1 = _dogecoin_script_get_ops1Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<vector>)>();

  int dogecoin_script_classify_ops1(
    ffi.Pointer<vector> ops,
  ) {
    return _dogecoin_script_classify_ops1(
      ops,
    );
  }

  late final _dogecoin_script_classify_ops1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<vector>)>>(
          'dogecoin_script_classify_ops');
  late final _dogecoin_script_classify_ops1 = _dogecoin_script_classify_ops1Ptr
      .asFunction<int Function(ffi.Pointer<vector>)>();

  int dogecoin_script_classify1(
    ffi.Pointer<cstring> script,
    ffi.Pointer<vector> data_out,
  ) {
    return _dogecoin_script_classify1(
      script,
      data_out,
    );
  }

  late final _dogecoin_script_classify1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<cstring>,
              ffi.Pointer<vector>)>>('dogecoin_script_classify');
  late final _dogecoin_script_classify1 = _dogecoin_script_classify1Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<vector>)>();

  int dogecoin_encode_op_n1(
    int n,
  ) {
    return _dogecoin_encode_op_n1(
      n,
    );
  }

  late final _dogecoin_encode_op_n1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int)>>(
          'dogecoin_encode_op_n');
  late final _dogecoin_encode_op_n1 =
      _dogecoin_encode_op_n1Ptr.asFunction<int Function(int)>();

  void dogecoin_script_append_op1(
    ffi.Pointer<cstring> script_in,
    int op,
  ) {
    return _dogecoin_script_append_op1(
      script_in,
      op,
    );
  }

  late final _dogecoin_script_append_op1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cstring>, ffi.Int32)>>('dogecoin_script_append_op');
  late final _dogecoin_script_append_op1 = _dogecoin_script_append_op1Ptr
      .asFunction<void Function(ffi.Pointer<cstring>, int)>();

  void dogecoin_script_append_pushdata1(
    ffi.Pointer<cstring> script_in,
    ffi.Pointer<ffi.UnsignedChar> data,
    int datalen,
  ) {
    return _dogecoin_script_append_pushdata1(
      script_in,
      data,
      datalen,
    );
  }

  late final _dogecoin_script_append_pushdata1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('dogecoin_script_append_pushdata');
  late final _dogecoin_script_append_pushdata1 =
      _dogecoin_script_append_pushdata1Ptr.asFunction<
          void Function(
              ffi.Pointer<cstring>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int dogecoin_script_build_multisig1(
    ffi.Pointer<cstring> script_in,
    int required_signatures,
    ffi.Pointer<vector> pubkeys_chars,
  ) {
    return _dogecoin_script_build_multisig1(
      script_in,
      required_signatures,
      pubkeys_chars,
    );
  }

  late final _dogecoin_script_build_multisig1Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<cstring>, ffi.UnsignedInt,
              ffi.Pointer<vector>)>>('dogecoin_script_build_multisig');
  late final _dogecoin_script_build_multisig1 =
      _dogecoin_script_build_multisig1Ptr.asFunction<
          int Function(ffi.Pointer<cstring>, int, ffi.Pointer<vector>)>();

  int dogecoin_script_build_p2pkh1(
    ffi.Pointer<cstring> script,
    ffi.Pointer<ffi.Uint8> hash160,
  ) {
    return _dogecoin_script_build_p2pkh1(
      script,
      hash160,
    );
  }

  late final _dogecoin_script_build_p2pkh1Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<cstring>,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_script_build_p2pkh');
  late final _dogecoin_script_build_p2pkh1 = _dogecoin_script_build_p2pkh1Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_script_build_p2sh1(
    ffi.Pointer<cstring> script_in,
    ffi.Pointer<ffi.Uint8> hash160,
  ) {
    return _dogecoin_script_build_p2sh1(
      script_in,
      hash160,
    );
  }

  late final _dogecoin_script_build_p2sh1Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<cstring>,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_script_build_p2sh');
  late final _dogecoin_script_build_p2sh1 = _dogecoin_script_build_p2sh1Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_script_get_scripthash1(
    ffi.Pointer<cstring> script_in,
    ffi.Pointer<ffi.Uint8> scripthash,
  ) {
    return _dogecoin_script_get_scripthash1(
      script_in,
      scripthash,
    );
  }

  late final _dogecoin_script_get_scripthash1Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<cstring>,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_script_get_scripthash');
  late final _dogecoin_script_get_scripthash1 =
      _dogecoin_script_get_scripthash1Ptr.asFunction<
          int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<ffi.Char> dogecoin_tx_out_type_to_str1(
    int type,
  ) {
    return _dogecoin_tx_out_type_to_str1(
      type,
    );
  }

  late final _dogecoin_tx_out_type_to_str1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'dogecoin_tx_out_type_to_str');
  late final _dogecoin_tx_out_type_to_str1 = _dogecoin_tx_out_type_to_str1Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  /// !p2pkh utilities
  int dogecoin_script_hash_to_p2pkh1(
    ffi.Pointer<dogecoin_tx_out> txout,
    ffi.Pointer<ffi.Char> p2pkh,
    int is_testnet,
  ) {
    return _dogecoin_script_hash_to_p2pkh1(
      txout,
      p2pkh,
      is_testnet,
    );
  }

  late final _dogecoin_script_hash_to_p2pkh1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<dogecoin_tx_out>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('dogecoin_script_hash_to_p2pkh');
  late final _dogecoin_script_hash_to_p2pkh1 =
      _dogecoin_script_hash_to_p2pkh1Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx_out>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> dogecoin_p2pkh_to_script_hash1(
    ffi.Pointer<ffi.Char> p2pkh,
  ) {
    return _dogecoin_p2pkh_to_script_hash1(
      p2pkh,
    );
  }

  late final _dogecoin_p2pkh_to_script_hash1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('dogecoin_p2pkh_to_script_hash');
  late final _dogecoin_p2pkh_to_script_hash1 =
      _dogecoin_p2pkh_to_script_hash1Ptr
          .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> dogecoin_private_key_wif_to_script_hash1(
    ffi.Pointer<ffi.Char> private_key_wif,
  ) {
    return _dogecoin_private_key_wif_to_script_hash1(
      private_key_wif,
    );
  }

  late final _dogecoin_private_key_wif_to_script_hash1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>(
      'dogecoin_private_key_wif_to_script_hash');
  late final _dogecoin_private_key_wif_to_script_hash1 =
      _dogecoin_private_key_wif_to_script_hash1Ptr
          .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  /// !create a new tx input
  ffi.Pointer<dogecoin_tx_in> dogecoin_tx_in_new1() {
    return _dogecoin_tx_in_new1();
  }

  late final _dogecoin_tx_in_new1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<dogecoin_tx_in> Function()>>(
          'dogecoin_tx_in_new');
  late final _dogecoin_tx_in_new1 = _dogecoin_tx_in_new1Ptr
      .asFunction<ffi.Pointer<dogecoin_tx_in> Function()>();

  void dogecoin_tx_in_free1(
    ffi.Pointer<dogecoin_tx_in> tx_in,
  ) {
    return _dogecoin_tx_in_free1(
      tx_in,
    );
  }

  late final _dogecoin_tx_in_free1Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_tx_in>)>>(
      'dogecoin_tx_in_free');
  late final _dogecoin_tx_in_free1 = _dogecoin_tx_in_free1Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_tx_in>)>();

  void dogecoin_tx_in_copy1(
    ffi.Pointer<dogecoin_tx_in> dest,
    ffi.Pointer<dogecoin_tx_in> src,
  ) {
    return _dogecoin_tx_in_copy1(
      dest,
      src,
    );
  }

  late final _dogecoin_tx_in_copy1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_tx_in>,
              ffi.Pointer<dogecoin_tx_in>)>>('dogecoin_tx_in_copy');
  late final _dogecoin_tx_in_copy1 = _dogecoin_tx_in_copy1Ptr.asFunction<
      void Function(
          ffi.Pointer<dogecoin_tx_in>, ffi.Pointer<dogecoin_tx_in>)>();

  int dogecoin_tx_in_deserialize1(
    ffi.Pointer<dogecoin_tx_in> tx_in,
    ffi.Pointer<const_buffer> buf,
  ) {
    return _dogecoin_tx_in_deserialize1(
      tx_in,
      buf,
    );
  }

  late final _dogecoin_tx_in_deserialize1Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_tx_in>,
              ffi.Pointer<const_buffer>)>>('dogecoin_tx_in_deserialize');
  late final _dogecoin_tx_in_deserialize1 =
      _dogecoin_tx_in_deserialize1Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx_in>, ffi.Pointer<const_buffer>)>();

  void dogecoin_tx_in_serialize1(
    ffi.Pointer<cstring> s,
    ffi.Pointer<dogecoin_tx_in> tx_in,
  ) {
    return _dogecoin_tx_in_serialize1(
      s,
      tx_in,
    );
  }

  late final _dogecoin_tx_in_serialize1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cstring>,
              ffi.Pointer<dogecoin_tx_in>)>>('dogecoin_tx_in_serialize');
  late final _dogecoin_tx_in_serialize1 =
      _dogecoin_tx_in_serialize1Ptr.asFunction<
          void Function(ffi.Pointer<cstring>, ffi.Pointer<dogecoin_tx_in>)>();

  /// !create a new tx output
  ffi.Pointer<dogecoin_tx_out> dogecoin_tx_out_new1() {
    return _dogecoin_tx_out_new1();
  }

  late final _dogecoin_tx_out_new1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<dogecoin_tx_out> Function()>>(
          'dogecoin_tx_out_new');
  late final _dogecoin_tx_out_new1 = _dogecoin_tx_out_new1Ptr
      .asFunction<ffi.Pointer<dogecoin_tx_out> Function()>();

  void dogecoin_tx_out_free1(
    ffi.Pointer<dogecoin_tx_out> tx_out,
  ) {
    return _dogecoin_tx_out_free1(
      tx_out,
    );
  }

  late final _dogecoin_tx_out_free1Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_tx_out>)>>(
      'dogecoin_tx_out_free');
  late final _dogecoin_tx_out_free1 = _dogecoin_tx_out_free1Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_tx_out>)>();

  void dogecoin_tx_out_copy1(
    ffi.Pointer<dogecoin_tx_out> dest,
    ffi.Pointer<dogecoin_tx_out> src,
  ) {
    return _dogecoin_tx_out_copy1(
      dest,
      src,
    );
  }

  late final _dogecoin_tx_out_copy1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_tx_out>,
              ffi.Pointer<dogecoin_tx_out>)>>('dogecoin_tx_out_copy');
  late final _dogecoin_tx_out_copy1 = _dogecoin_tx_out_copy1Ptr.asFunction<
      void Function(
          ffi.Pointer<dogecoin_tx_out>, ffi.Pointer<dogecoin_tx_out>)>();

  int dogecoin_tx_out_deserialize1(
    ffi.Pointer<dogecoin_tx_out> tx_out,
    ffi.Pointer<const_buffer> buf,
  ) {
    return _dogecoin_tx_out_deserialize1(
      tx_out,
      buf,
    );
  }

  late final _dogecoin_tx_out_deserialize1Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_tx_out>,
              ffi.Pointer<const_buffer>)>>('dogecoin_tx_out_deserialize');
  late final _dogecoin_tx_out_deserialize1 =
      _dogecoin_tx_out_deserialize1Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx_out>, ffi.Pointer<const_buffer>)>();

  void dogecoin_tx_out_serialize1(
    ffi.Pointer<cstring> s,
    ffi.Pointer<dogecoin_tx_out> tx_out,
  ) {
    return _dogecoin_tx_out_serialize1(
      s,
      tx_out,
    );
  }

  late final _dogecoin_tx_out_serialize1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cstring>,
              ffi.Pointer<dogecoin_tx_out>)>>('dogecoin_tx_out_serialize');
  late final _dogecoin_tx_out_serialize1 =
      _dogecoin_tx_out_serialize1Ptr.asFunction<
          void Function(ffi.Pointer<cstring>, ffi.Pointer<dogecoin_tx_out>)>();

  /// !create a new tx input
  ffi.Pointer<dogecoin_tx> dogecoin_tx_new1() {
    return _dogecoin_tx_new1();
  }

  late final _dogecoin_tx_new1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<dogecoin_tx> Function()>>(
          'dogecoin_tx_new');
  late final _dogecoin_tx_new1 =
      _dogecoin_tx_new1Ptr.asFunction<ffi.Pointer<dogecoin_tx> Function()>();

  void dogecoin_tx_free1(
    ffi.Pointer<dogecoin_tx> tx,
  ) {
    return _dogecoin_tx_free1(
      tx,
    );
  }

  late final _dogecoin_tx_free1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_tx>)>>(
          'dogecoin_tx_free');
  late final _dogecoin_tx_free1 = _dogecoin_tx_free1Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_tx>)>();

  void dogecoin_tx_copy1(
    ffi.Pointer<dogecoin_tx> dest,
    ffi.Pointer<dogecoin_tx> src,
  ) {
    return _dogecoin_tx_copy1(
      dest,
      src,
    );
  }

  late final _dogecoin_tx_copy1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<dogecoin_tx>)>>('dogecoin_tx_copy');
  late final _dogecoin_tx_copy1 = _dogecoin_tx_copy1Ptr.asFunction<
      void Function(ffi.Pointer<dogecoin_tx>, ffi.Pointer<dogecoin_tx>)>();

  /// !deserialize/parse a p2p serialized dogecoin transaction
  int dogecoin_tx_deserialize1(
    ffi.Pointer<ffi.UnsignedChar> tx_serialized,
    int inlen,
    ffi.Pointer<dogecoin_tx> tx,
    ffi.Pointer<ffi.Int> consumed_length,
  ) {
    return _dogecoin_tx_deserialize1(
      tx_serialized,
      inlen,
      tx,
      consumed_length,
    );
  }

  late final _dogecoin_tx_deserialize1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_tx_deserialize');
  late final _dogecoin_tx_deserialize1 =
      _dogecoin_tx_deserialize1Ptr.asFunction<
          int Function(ffi.Pointer<ffi.UnsignedChar>, int,
              ffi.Pointer<dogecoin_tx>, ffi.Pointer<ffi.Int>)>();

  /// !serialize a dogecoin data structure into a p2p serialized buffer
  void dogecoin_tx_serialize1(
    ffi.Pointer<cstring> s,
    ffi.Pointer<dogecoin_tx> tx,
  ) {
    return _dogecoin_tx_serialize1(
      s,
      tx,
    );
  }

  late final _dogecoin_tx_serialize1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cstring>,
              ffi.Pointer<dogecoin_tx>)>>('dogecoin_tx_serialize');
  late final _dogecoin_tx_serialize1 = _dogecoin_tx_serialize1Ptr.asFunction<
      void Function(ffi.Pointer<cstring>, ffi.Pointer<dogecoin_tx>)>();

  void dogecoin_tx_hash1(
    ffi.Pointer<dogecoin_tx> tx,
    ffi.Pointer<ffi.Uint8> hashout,
  ) {
    return _dogecoin_tx_hash1(
      tx,
      hashout,
    );
  }

  late final _dogecoin_tx_hash1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_tx_hash');
  late final _dogecoin_tx_hash1 = _dogecoin_tx_hash1Ptr.asFunction<
      void Function(ffi.Pointer<dogecoin_tx>, ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_tx_sighash1(
    ffi.Pointer<dogecoin_tx> tx_to,
    ffi.Pointer<cstring> fromPubKey,
    int in_num,
    int hashtype,
    ffi.Pointer<ffi.Uint8> hash,
  ) {
    return _dogecoin_tx_sighash1(
      tx_to,
      fromPubKey,
      in_num,
      hashtype,
      hash,
    );
  }

  late final _dogecoin_tx_sighash1Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<cstring>,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_tx_sighash');
  late final _dogecoin_tx_sighash1 = _dogecoin_tx_sighash1Ptr.asFunction<
      int Function(ffi.Pointer<dogecoin_tx>, ffi.Pointer<cstring>, int, int,
          ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_tx_add_address_out1(
    ffi.Pointer<dogecoin_tx> tx,
    ffi.Pointer<dogecoin_chainparams> chain,
    int amount,
    ffi.Pointer<ffi.Char> address,
  ) {
    return _dogecoin_tx_add_address_out1(
      tx,
      chain,
      amount,
      address,
    );
  }

  late final _dogecoin_tx_add_address_out1Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Int64,
              ffi.Pointer<ffi.Char>)>>('dogecoin_tx_add_address_out');
  late final _dogecoin_tx_add_address_out1 =
      _dogecoin_tx_add_address_out1Ptr.asFunction<
          int Function(ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<dogecoin_chainparams>, int, ffi.Pointer<ffi.Char>)>();

  int dogecoin_tx_add_p2sh_hash160_out1(
    ffi.Pointer<dogecoin_tx> tx,
    int amount,
    ffi.Pointer<ffi.Uint8> hash160,
  ) {
    return _dogecoin_tx_add_p2sh_hash160_out1(
      tx,
      amount,
      hash160,
    );
  }

  late final _dogecoin_tx_add_p2sh_hash160_out1Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_tx>, ffi.Int64,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_tx_add_p2sh_hash160_out');
  late final _dogecoin_tx_add_p2sh_hash160_out1 =
      _dogecoin_tx_add_p2sh_hash160_out1Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx>, int, ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_tx_add_p2pkh_hash160_out1(
    ffi.Pointer<dogecoin_tx> tx,
    int amount,
    ffi.Pointer<ffi.Uint8> hash160,
  ) {
    return _dogecoin_tx_add_p2pkh_hash160_out1(
      tx,
      amount,
      hash160,
    );
  }

  late final _dogecoin_tx_add_p2pkh_hash160_out1Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_tx>, ffi.Int64,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_tx_add_p2pkh_hash160_out');
  late final _dogecoin_tx_add_p2pkh_hash160_out1 =
      _dogecoin_tx_add_p2pkh_hash160_out1Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx>, int, ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_tx_add_p2pkh_out1(
    ffi.Pointer<dogecoin_tx> tx,
    int amount,
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_tx_add_p2pkh_out1(
      tx,
      amount,
      pubkey,
    );
  }

  late final _dogecoin_tx_add_p2pkh_out1Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_tx>, ffi.Int64,
              ffi.Pointer<dogecoin_pubkey>)>>('dogecoin_tx_add_p2pkh_out');
  late final _dogecoin_tx_add_p2pkh_out1 =
      _dogecoin_tx_add_p2pkh_out1Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx>, int, ffi.Pointer<dogecoin_pubkey>)>();

  int dogecoin_tx_add_data_out1(
    ffi.Pointer<dogecoin_tx> tx,
    int amount,
    ffi.Pointer<ffi.Uint8> data,
    int datalen,
  ) {
    return _dogecoin_tx_add_data_out1(
      tx,
      amount,
      data,
      datalen,
    );
  }

  late final _dogecoin_tx_add_data_out1Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_tx>, ffi.Int64,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('dogecoin_tx_add_data_out');
  late final _dogecoin_tx_add_data_out1 =
      _dogecoin_tx_add_data_out1Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx>, int, ffi.Pointer<ffi.Uint8>, int)>();

  int dogecoin_tx_add_puzzle_out1(
    ffi.Pointer<dogecoin_tx> tx,
    int amount,
    ffi.Pointer<ffi.Uint8> puzzle,
    int puzzlelen,
  ) {
    return _dogecoin_tx_add_puzzle_out1(
      tx,
      amount,
      puzzle,
      puzzlelen,
    );
  }

  late final _dogecoin_tx_add_puzzle_out1Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_tx>, ffi.Int64,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('dogecoin_tx_add_puzzle_out');
  late final _dogecoin_tx_add_puzzle_out1 =
      _dogecoin_tx_add_puzzle_out1Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx>, int, ffi.Pointer<ffi.Uint8>, int)>();

  int dogecoin_tx_outpoint_is_null1(
    ffi.Pointer<dogecoin_tx_outpoint> tx,
  ) {
    return _dogecoin_tx_outpoint_is_null1(
      tx,
    );
  }

  late final _dogecoin_tx_outpoint_is_null1Ptr = _lookup<
          ffi.NativeFunction<
              dogecoin_bool Function(ffi.Pointer<dogecoin_tx_outpoint>)>>(
      'dogecoin_tx_outpoint_is_null');
  late final _dogecoin_tx_outpoint_is_null1 = _dogecoin_tx_outpoint_is_null1Ptr
      .asFunction<int Function(ffi.Pointer<dogecoin_tx_outpoint>)>();

  int dogecoin_tx_is_coinbase1(
    ffi.Pointer<dogecoin_tx> tx,
  ) {
    return _dogecoin_tx_is_coinbase1(
      tx,
    );
  }

  late final _dogecoin_tx_is_coinbase1Ptr = _lookup<
          ffi.NativeFunction<dogecoin_bool Function(ffi.Pointer<dogecoin_tx>)>>(
      'dogecoin_tx_is_coinbase');
  late final _dogecoin_tx_is_coinbase1 = _dogecoin_tx_is_coinbase1Ptr
      .asFunction<int Function(ffi.Pointer<dogecoin_tx>)>();

  ffi.Pointer<ffi.Char> dogecoin_tx_sign_result_to_str1(
    int result,
  ) {
    return _dogecoin_tx_sign_result_to_str1(
      result,
    );
  }

  late final _dogecoin_tx_sign_result_to_str1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'dogecoin_tx_sign_result_to_str');
  late final _dogecoin_tx_sign_result_to_str1 =
      _dogecoin_tx_sign_result_to_str1Ptr
          .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int dogecoin_tx_sign_input1(
    ffi.Pointer<dogecoin_tx> tx_in_out,
    ffi.Pointer<cstring> script,
    ffi.Pointer<dogecoin_key> privkey,
    int inputindex,
    int sighashtype,
    ffi.Pointer<ffi.Uint8> sigcompact_out,
    ffi.Pointer<ffi.Uint8> sigder_out,
    ffi.Pointer<ffi.Int> sigder_len,
  ) {
    return _dogecoin_tx_sign_input1(
      tx_in_out,
      script,
      privkey,
      inputindex,
      sighashtype,
      sigcompact_out,
      sigder_out,
      sigder_len,
    );
  }

  late final _dogecoin_tx_sign_input1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<cstring>,
              ffi.Pointer<dogecoin_key>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_tx_sign_input');
  late final _dogecoin_tx_sign_input1 = _dogecoin_tx_sign_input1Ptr.asFunction<
      int Function(
          ffi.Pointer<dogecoin_tx>,
          ffi.Pointer<cstring>,
          ffi.Pointer<dogecoin_key>,
          int,
          int,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Int>)>();

  late final ffi.Pointer<ffi.UnsignedInt> _DOGECOIN_P2P_MESSAGE_CHUNK_SIZE =
      _lookup<ffi.UnsignedInt>('DOGECOIN_P2P_MESSAGE_CHUNK_SIZE');

  int get DOGECOIN_P2P_MESSAGE_CHUNK_SIZE =>
      _DOGECOIN_P2P_MESSAGE_CHUNK_SIZE.value;

  set DOGECOIN_P2P_MESSAGE_CHUNK_SIZE(int value) =>
      _DOGECOIN_P2P_MESSAGE_CHUNK_SIZE.value = value;

  int net_write_log_printf(
    ffi.Pointer<ffi.Char> format,
  ) {
    return _net_write_log_printf(
      format,
    );
  }

  late final _net_write_log_printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'net_write_log_printf');
  late final _net_write_log_printf = _net_write_log_printfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int net_write_log_null(
    ffi.Pointer<ffi.Char> format,
  ) {
    return _net_write_log_null(
      format,
    );
  }

  late final _net_write_log_nullPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'net_write_log_null');
  late final _net_write_log_null =
      _net_write_log_nullPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<dogecoin_node> dogecoin_node_new() {
    return _dogecoin_node_new();
  }

  late final _dogecoin_node_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<dogecoin_node> Function()>>(
          'dogecoin_node_new');
  late final _dogecoin_node_new =
      _dogecoin_node_newPtr.asFunction<ffi.Pointer<dogecoin_node> Function()>();

  void dogecoin_node_free(
    ffi.Pointer<dogecoin_node> node,
  ) {
    return _dogecoin_node_free(
      node,
    );
  }

  late final _dogecoin_node_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_node>)>>(
      'dogecoin_node_free');
  late final _dogecoin_node_free = _dogecoin_node_freePtr
      .asFunction<void Function(ffi.Pointer<dogecoin_node>)>();

  int dogecoin_node_set_ipport(
    ffi.Pointer<dogecoin_node> node,
    ffi.Pointer<ffi.Char> ipport,
  ) {
    return _dogecoin_node_set_ipport(
      node,
      ipport,
    );
  }

  late final _dogecoin_node_set_ipportPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_node>,
              ffi.Pointer<ffi.Char>)>>('dogecoin_node_set_ipport');
  late final _dogecoin_node_set_ipport =
      _dogecoin_node_set_ipportPtr.asFunction<
          int Function(ffi.Pointer<dogecoin_node>, ffi.Pointer<ffi.Char>)>();

  void dogecoin_node_disconnect(
    ffi.Pointer<dogecoin_node> node,
  ) {
    return _dogecoin_node_disconnect(
      node,
    );
  }

  late final _dogecoin_node_disconnectPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_node>)>>(
      'dogecoin_node_disconnect');
  late final _dogecoin_node_disconnect = _dogecoin_node_disconnectPtr
      .asFunction<void Function(ffi.Pointer<dogecoin_node>)>();

  int dogecoin_node_misbehave(
    ffi.Pointer<dogecoin_node> node,
  ) {
    return _dogecoin_node_misbehave(
      node,
    );
  }

  late final _dogecoin_node_misbehavePtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_node>)>>('dogecoin_node_misbehave');
  late final _dogecoin_node_misbehave = _dogecoin_node_misbehavePtr
      .asFunction<int Function(ffi.Pointer<dogecoin_node>)>();

  ffi.Pointer<dogecoin_node_group> dogecoin_node_group_new(
    ffi.Pointer<dogecoin_chainparams> chainparams,
  ) {
    return _dogecoin_node_group_new(
      chainparams,
    );
  }

  late final _dogecoin_node_group_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<dogecoin_node_group> Function(
              ffi.Pointer<dogecoin_chainparams>)>>('dogecoin_node_group_new');
  late final _dogecoin_node_group_new = _dogecoin_node_group_newPtr.asFunction<
      ffi.Pointer<dogecoin_node_group> Function(
          ffi.Pointer<dogecoin_chainparams>)>();

  void dogecoin_node_group_free(
    ffi.Pointer<dogecoin_node_group> group,
  ) {
    return _dogecoin_node_group_free(
      group,
    );
  }

  late final _dogecoin_node_group_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<dogecoin_node_group>)>>('dogecoin_node_group_free');
  late final _dogecoin_node_group_free = _dogecoin_node_group_freePtr
      .asFunction<void Function(ffi.Pointer<dogecoin_node_group>)>();

  void dogecoin_node_group_shutdown(
    ffi.Pointer<dogecoin_node_group> group,
  ) {
    return _dogecoin_node_group_shutdown(
      group,
    );
  }

  late final _dogecoin_node_group_shutdownPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<dogecoin_node_group>)>>(
      'dogecoin_node_group_shutdown');
  late final _dogecoin_node_group_shutdown = _dogecoin_node_group_shutdownPtr
      .asFunction<void Function(ffi.Pointer<dogecoin_node_group>)>();

  void dogecoin_node_group_add_node(
    ffi.Pointer<dogecoin_node_group> group,
    ffi.Pointer<dogecoin_node> node,
  ) {
    return _dogecoin_node_group_add_node(
      group,
      node,
    );
  }

  late final _dogecoin_node_group_add_nodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_node_group>,
              ffi.Pointer<dogecoin_node>)>>('dogecoin_node_group_add_node');
  late final _dogecoin_node_group_add_node =
      _dogecoin_node_group_add_nodePtr.asFunction<
          void Function(
              ffi.Pointer<dogecoin_node_group>, ffi.Pointer<dogecoin_node>)>();

  void dogecoin_node_group_event_loop(
    ffi.Pointer<dogecoin_node_group> group,
  ) {
    return _dogecoin_node_group_event_loop(
      group,
    );
  }

  late final _dogecoin_node_group_event_loopPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<dogecoin_node_group>)>>(
      'dogecoin_node_group_event_loop');
  late final _dogecoin_node_group_event_loop =
      _dogecoin_node_group_event_loopPtr
          .asFunction<void Function(ffi.Pointer<dogecoin_node_group>)>();

  int dogecoin_node_group_connect_next_nodes(
    ffi.Pointer<dogecoin_node_group> group,
  ) {
    return _dogecoin_node_group_connect_next_nodes(
      group,
    );
  }

  late final _dogecoin_node_group_connect_next_nodesPtr = _lookup<
          ffi.NativeFunction<
              dogecoin_bool Function(ffi.Pointer<dogecoin_node_group>)>>(
      'dogecoin_node_group_connect_next_nodes');
  late final _dogecoin_node_group_connect_next_nodes =
      _dogecoin_node_group_connect_next_nodesPtr
          .asFunction<int Function(ffi.Pointer<dogecoin_node_group>)>();

  int dogecoin_node_group_amount_of_connected_nodes(
    ffi.Pointer<dogecoin_node_group> group,
    int state,
  ) {
    return _dogecoin_node_group_amount_of_connected_nodes(
      group,
      state,
    );
  }

  late final _dogecoin_node_group_amount_of_connected_nodesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<dogecoin_node_group>,
              ffi.Int32)>>('dogecoin_node_group_amount_of_connected_nodes');
  late final _dogecoin_node_group_amount_of_connected_nodes =
      _dogecoin_node_group_amount_of_connected_nodesPtr
          .asFunction<int Function(ffi.Pointer<dogecoin_node_group>, int)>();

  void dogecoin_node_send_version(
    ffi.Pointer<dogecoin_node> node,
  ) {
    return _dogecoin_node_send_version(
      node,
    );
  }

  late final _dogecoin_node_send_versionPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_node>)>>(
      'dogecoin_node_send_version');
  late final _dogecoin_node_send_version = _dogecoin_node_send_versionPtr
      .asFunction<void Function(ffi.Pointer<dogecoin_node>)>();

  void dogecoin_node_send(
    ffi.Pointer<dogecoin_node> node,
    ffi.Pointer<cstring> data,
  ) {
    return _dogecoin_node_send(
      node,
      data,
    );
  }

  late final _dogecoin_node_sendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_node>,
              ffi.Pointer<cstring>)>>('dogecoin_node_send');
  late final _dogecoin_node_send = _dogecoin_node_sendPtr.asFunction<
      void Function(ffi.Pointer<dogecoin_node>, ffi.Pointer<cstring>)>();

  int dogecoin_node_parse_message(
    ffi.Pointer<dogecoin_node> node,
    ffi.Pointer<dogecoin_p2p_msg_hdr> hdr,
    ffi.Pointer<const_buffer> buf,
  ) {
    return _dogecoin_node_parse_message(
      node,
      hdr,
      buf,
    );
  }

  late final _dogecoin_node_parse_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<dogecoin_node>,
              ffi.Pointer<dogecoin_p2p_msg_hdr>,
              ffi.Pointer<const_buffer>)>>('dogecoin_node_parse_message');
  late final _dogecoin_node_parse_message =
      _dogecoin_node_parse_messagePtr.asFunction<
          int Function(ffi.Pointer<dogecoin_node>,
              ffi.Pointer<dogecoin_p2p_msg_hdr>, ffi.Pointer<const_buffer>)>();

  void dogecoin_node_connection_state_changed(
    ffi.Pointer<dogecoin_node> node,
  ) {
    return _dogecoin_node_connection_state_changed(
      node,
    );
  }

  late final _dogecoin_node_connection_state_changedPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_node>)>>(
      'dogecoin_node_connection_state_changed');
  late final _dogecoin_node_connection_state_changed =
      _dogecoin_node_connection_state_changedPtr
          .asFunction<void Function(ffi.Pointer<dogecoin_node>)>();

  int dogecoin_node_group_add_peers_by_ip_or_seed(
    ffi.Pointer<dogecoin_node_group> group,
    ffi.Pointer<ffi.Char> ips,
  ) {
    return _dogecoin_node_group_add_peers_by_ip_or_seed(
      group,
      ips,
    );
  }

  late final _dogecoin_node_group_add_peers_by_ip_or_seedPtr = _lookup<
          ffi.NativeFunction<
              dogecoin_bool Function(
                  ffi.Pointer<dogecoin_node_group>, ffi.Pointer<ffi.Char>)>>(
      'dogecoin_node_group_add_peers_by_ip_or_seed');
  late final _dogecoin_node_group_add_peers_by_ip_or_seed =
      _dogecoin_node_group_add_peers_by_ip_or_seedPtr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_node_group>, ffi.Pointer<ffi.Char>)>();

  int dogecoin_get_peers_from_dns(
    ffi.Pointer<ffi.Char> seed,
    ffi.Pointer<vector> ips_out,
    int port,
    int family,
  ) {
    return _dogecoin_get_peers_from_dns(
      seed,
      ips_out,
      port,
      family,
    );
  }

  late final _dogecoin_get_peers_from_dnsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<vector>, ffi.Int,
              ffi.Int)>>('dogecoin_get_peers_from_dns');
  late final _dogecoin_get_peers_from_dns =
      _dogecoin_get_peers_from_dnsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<vector>, int, int)>();

  /// !broadcast utilities
  int broadcast_tx(
    ffi.Pointer<dogecoin_chainparams> chain,
    ffi.Pointer<dogecoin_tx> tx,
    ffi.Pointer<ffi.Char> ips,
    int maxpeers,
    int timeout,
    int debug,
  ) {
    return _broadcast_tx(
      chain,
      tx,
      ips,
      maxpeers,
      timeout,
      debug,
    );
  }

  late final _broadcast_txPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              dogecoin_bool)>>('broadcast_tx');
  late final _broadcast_tx = _broadcast_txPtr.asFunction<
      int Function(ffi.Pointer<dogecoin_chainparams>, ffi.Pointer<dogecoin_tx>,
          ffi.Pointer<ffi.Char>, int, int, int)>();

  int remove18(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove18(
      __filename,
    );
  }

  late final _remove18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove18 =
      _remove18Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename18(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename18(
      __old,
      __new,
    );
  }

  late final _rename18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename18 = _rename18Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat18(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat18(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameat18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat18 = _renameat18Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose18(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose18(
      __stream,
    );
  }

  late final _fclose18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose18 =
      _fclose18Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile18() {
    return _tmpfile18();
  }

  late final _tmpfile18Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile18 =
      _tmpfile18Ptr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam18(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam18(
      arg0,
    );
  }

  late final _tmpnam18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam18 = _tmpnam18Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r18(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r18(
      __s,
    );
  }

  late final _tmpnam_r18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r18 = _tmpnam_r18Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam18(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam18(
      __dir,
      __pfx,
    );
  }

  late final _tempnam18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam18 = _tempnam18Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush18(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush18(
      __stream,
    );
  }

  late final _fflush18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush18 =
      _fflush18Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked18(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked18(
      __stream,
    );
  }

  late final _fflush_unlocked18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked18 =
      _fflush_unlocked18Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen18(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen18(
      __filename,
      __modes,
    );
  }

  late final _fopen18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen18 = _fopen18Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen18(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen18(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopen18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen18 = _freopen18Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen18(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen18(
      __fd,
      __modes,
    );
  }

  late final _fdopen18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen18 = _fdopen18Ptr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen18(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen18(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopen18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen18 = _fmemopen18Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream18(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Int> __sizeloc,
  ) {
    return _open_memstream18(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstream18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('open_memstream');
  late final _open_memstream18 = _open_memstream18Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void setbuf18(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf18(
      __stream,
      __buf,
    );
  }

  late final _setbuf18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf18 = _setbuf18Ptr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf18(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf18(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbuf18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('setvbuf');
  late final _setvbuf18 = _setvbuf18Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer18(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer18(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbuffer18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer18 = _setbuffer18Ptr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf18(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf18(
      __stream,
    );
  }

  late final _setlinebuf18Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf18 =
      _setlinebuf18Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf18(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf18(
      __stream,
      __format,
    );
  }

  late final _fprintf18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf18 = _fprintf18Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf18(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf18(
      __format,
    );
  }

  late final _printf18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf18 =
      _printf18Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf18(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf18(
      __s,
      __format,
    );
  }

  late final _sprintf18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf18 = _sprintf18Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf18(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfprintf18(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintf18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfprintf');
  late final _vfprintf18 = _vfprintf18Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vprintf18(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vprintf18(
      __format,
      __arg,
    );
  }

  late final _vprintf18Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vprintf');
  late final _vprintf18 =
      _vprintf18Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsprintf18(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsprintf18(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintf18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsprintf');
  late final _vsprintf18 = _vsprintf18Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int snprintf18(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf18(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintf18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf18 = _snprintf18Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf18(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsnprintf18(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintf18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('vsnprintf');
  late final _vsnprintf18 = _vsnprintf18Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int vdprintf18(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    int __arg,
  ) {
    return _vdprintf18(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintf18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('vdprintf');
  late final _vdprintf18 = _vdprintf18Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int dprintf18(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf18(
      __fd,
      __fmt,
    );
  }

  late final _dprintf18Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf18 =
      _dprintf18Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf36(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf36(
      __stream,
      __format,
    );
  }

  late final _fscanf36Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf36 = _fscanf36Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf36(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf36(
      __format,
    );
  }

  late final _scanf36Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf36 =
      _scanf36Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf36(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf36(
      __s,
      __format,
    );
  }

  late final _sscanf36Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf36 = _sscanf36Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fscanf37(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf37(
      __stream,
      __format,
    );
  }

  late final _fscanf37Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf37 = _fscanf37Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf37(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf37(
      __format,
    );
  }

  late final _scanf37Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf37 =
      _scanf37Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf37(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf37(
      __s,
      __format,
    );
  }

  late final _sscanf37Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf37 = _sscanf37Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf36(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf36(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf36Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf36 = _vfscanf36Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf36(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf36(
      __format,
      __arg,
    );
  }

  late final _vscanf36Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf36 =
      _vscanf36Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf36(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf36(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf36Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf36 = _vsscanf36Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int vfscanf37(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf37(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf37Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf37 = _vfscanf37Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf37(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf37(
      __format,
      __arg,
    );
  }

  late final _vscanf37Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf37 =
      _vscanf37Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf37(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf37(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf37Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf37 = _vsscanf37Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fgetc18(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc18(
      __stream,
    );
  }

  late final _fgetc18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc18 =
      _fgetc18Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc18(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc18(
      __stream,
    );
  }

  late final _getc18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc18 = _getc18Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar18() {
    return _getchar18();
  }

  late final _getchar18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar18 = _getchar18Ptr.asFunction<int Function()>();

  int getc_unlocked18(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked18(
      __stream,
    );
  }

  late final _getc_unlocked18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked18 =
      _getc_unlocked18Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked18() {
    return _getchar_unlocked18();
  }

  late final _getchar_unlocked18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked18 =
      _getchar_unlocked18Ptr.asFunction<int Function()>();

  int fgetc_unlocked18(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked18(
      __stream,
    );
  }

  late final _fgetc_unlocked18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked18 =
      _fgetc_unlocked18Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc18(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc18(
      __c,
      __stream,
    );
  }

  late final _fputc18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc18 =
      _fputc18Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc18(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc18(
      __c,
      __stream,
    );
  }

  late final _putc18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc18 =
      _putc18Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar18(
    int __c,
  ) {
    return _putchar18(
      __c,
    );
  }

  late final _putchar18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar18 = _putchar18Ptr.asFunction<int Function(int)>();

  int fputc_unlocked18(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked18(
      __c,
      __stream,
    );
  }

  late final _fputc_unlocked18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked18 =
      _fputc_unlocked18Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked18(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked18(
      __c,
      __stream,
    );
  }

  late final _putc_unlocked18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked18 =
      _putc_unlocked18Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked18(
    int __c,
  ) {
    return _putchar_unlocked18(
      __c,
    );
  }

  late final _putchar_unlocked18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked18 =
      _putchar_unlocked18Ptr.asFunction<int Function(int)>();

  int getw18(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw18(
      __stream,
    );
  }

  late final _getw18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw18 = _getw18Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw18(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw18(
      __w,
      __stream,
    );
  }

  late final _putw18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw18 =
      _putw18Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets18(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets18(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgets18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets18 = _fgets18Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim18(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim18(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelim18Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim18 = ___getdelim18Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getdelim18(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim18(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelim18Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim18 = _getdelim18Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getline18(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline18(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getline18Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<FILE>)>>('getline');
  late final _getline18 = _getline18Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<FILE>)>();

  int fputs18(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs18(
      __s,
      __stream,
    );
  }

  late final _fputs18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs18 = _fputs18Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts18(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts18(
      __s,
    );
  }

  late final _puts18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts18 =
      _puts18Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc18(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc18(
      __c,
      __stream,
    );
  }

  late final _ungetc18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc18 =
      _ungetc18Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread18(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread18(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread18 = _fread18Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite18(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite18(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwrite18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite18 = _fwrite18Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked18(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked18(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlocked18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked18 = _fread_unlocked18Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked18(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked18(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlocked18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked18 = _fwrite_unlocked18Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek18(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek18(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseek18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek18 =
      _fseek18Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell18(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell18(
      __stream,
    );
  }

  late final _ftell18Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell18 =
      _ftell18Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind18(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind18(
      __stream,
    );
  }

  late final _rewind18Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind18 =
      _rewind18Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko18(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko18(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseeko18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko18 =
      _fseeko18Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello18(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello18(
      __stream,
    );
  }

  late final _ftello18Ptr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello18 =
      _ftello18Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos18(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos18(
      __stream,
      __pos,
    );
  }

  late final _fgetpos18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos18 = _fgetpos18Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos18(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos18(
      __stream,
      __pos,
    );
  }

  late final _fsetpos18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos18 = _fsetpos18Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr18(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr18(
      __stream,
    );
  }

  late final _clearerr18Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr18 =
      _clearerr18Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof18(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof18(
      __stream,
    );
  }

  late final _feof18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof18 = _feof18Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror18(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror18(
      __stream,
    );
  }

  late final _ferror18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror18 =
      _ferror18Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked18(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked18(
      __stream,
    );
  }

  late final _clearerr_unlocked18Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked18 =
      _clearerr_unlocked18Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked18(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked18(
      __stream,
    );
  }

  late final _feof_unlocked18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked18 =
      _feof_unlocked18Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked18(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked18(
      __stream,
    );
  }

  late final _ferror_unlocked18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked18 =
      _ferror_unlocked18Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror18(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror18(
      __s,
    );
  }

  late final _perror18Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror18 =
      _perror18Ptr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno18(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno18(
      __stream,
    );
  }

  late final _fileno18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno18 =
      _fileno18Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked18(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked18(
      __stream,
    );
  }

  late final _fileno_unlocked18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked18 =
      _fileno_unlocked18Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose18(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose18(
      __stream,
    );
  }

  late final _pclose18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose18 =
      _pclose18Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen18(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen18(
      __command,
      __modes,
    );
  }

  late final _popen18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen18 = _popen18Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid18(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid18(
      __s,
    );
  }

  late final _ctermid18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid18 = _ctermid18Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile18(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile18(
      __stream,
    );
  }

  late final _flockfile18Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile18 =
      _flockfile18Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile18(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile18(
      __stream,
    );
  }

  late final _ftrylockfile18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile18 =
      _ftrylockfile18Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile18(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile18(
      __stream,
    );
  }

  late final _funlockfile18Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile18 =
      _funlockfile18Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow18(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow18(
      arg0,
    );
  }

  late final ___uflow18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow18 =
      ___uflow18Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow18(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow18(
      arg0,
      arg1,
    );
  }

  late final ___overflow18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow18 =
      ___overflow18Ptr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __ctype_get_mb_cur_max18() {
    return ___ctype_get_mb_cur_max18();
  }

  late final ___ctype_get_mb_cur_max18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max18 =
      ___ctype_get_mb_cur_max18Ptr.asFunction<int Function()>();

  double atof18(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof18(
      __nptr,
    );
  }

  late final _atof18Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof18 =
      _atof18Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi18(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi18(
      __nptr,
    );
  }

  late final _atoi18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi18 =
      _atoi18Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol18(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol18(
      __nptr,
    );
  }

  late final _atol18Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol18 =
      _atol18Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll18(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll18(
      __nptr,
    );
  }

  late final _atoll18Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll18 =
      _atoll18Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod18(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod18(
      __nptr,
      __endptr,
    );
  }

  late final _strtod18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod18 = _strtod18Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof18(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof18(
      __nptr,
      __endptr,
    );
  }

  late final _strtof18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof18 = _strtof18Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol18(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol18(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol18 = _strtol18Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul18(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul18(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul18 = _strtoul18Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq18(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq18(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq18 = _strtoq18Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq18(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq18(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq18 = _strtouq18Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll18(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll18(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll18 = _strtoll18Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull18(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull18(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull18 = _strtoull18Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a18(
    int __n,
  ) {
    return _l64a18(
      __n,
    );
  }

  late final _l64a18Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a18 =
      _l64a18Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l18(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l18(
      __s,
    );
  }

  late final _a64l18Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l18 =
      _a64l18Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select18(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select18(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select18 = _select18Ptr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect18(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect18(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect18 = _pselect18Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random18() {
    return _random18();
  }

  late final _random18Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random18 = _random18Ptr.asFunction<int Function()>();

  void srandom18(
    int __seed,
  ) {
    return _srandom18(
      __seed,
    );
  }

  late final _srandom18Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom18 = _srandom18Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate18(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate18(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int)>>('initstate');
  late final _initstate18 = _initstate18Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate18(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate18(
      __statebuf,
    );
  }

  late final _setstate18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate18 = _setstate18Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r18(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r18(
      __buf,
      __result,
    );
  }

  late final _random_r18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r18 = _random_r18Ptr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r18(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r18(
      __seed,
      __buf,
    );
  }

  late final _srandom_r18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r18 =
      _srandom_r18Ptr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r18(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r18(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r18 = _initstate_r18Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r18(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r18(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r18 = _setstate_r18Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand18() {
    return _rand18();
  }

  late final _rand18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand18 = _rand18Ptr.asFunction<int Function()>();

  void srand18(
    int __seed,
  ) {
    return _srand18(
      __seed,
    );
  }

  late final _srand18Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand18 = _srand18Ptr.asFunction<void Function(int)>();

  int rand_r18(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r18(
      __seed,
    );
  }

  late final _rand_r18Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r18 =
      _rand_r18Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand4818() {
    return _drand4818();
  }

  late final _drand4818Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand4818 = _drand4818Ptr.asFunction<double Function()>();

  double erand4818(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand4818(
      __xsubi,
    );
  }

  late final _erand4818Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand4818 = _erand4818Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand4818() {
    return _lrand4818();
  }

  late final _lrand4818Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand4818 = _lrand4818Ptr.asFunction<int Function()>();

  int nrand4818(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand4818(
      __xsubi,
    );
  }

  late final _nrand4818Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand4818 =
      _nrand4818Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand4818() {
    return _mrand4818();
  }

  late final _mrand4818Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand4818 = _mrand4818Ptr.asFunction<int Function()>();

  int jrand4818(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand4818(
      __xsubi,
    );
  }

  late final _jrand4818Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand4818 =
      _jrand4818Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand4818(
    int __seedval,
  ) {
    return _srand4818(
      __seedval,
    );
  }

  late final _srand4818Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand4818 = _srand4818Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed4818(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed4818(
      __seed16v,
    );
  }

  late final _seed4818Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed4818 = _seed4818Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong4818(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong4818(
      __param,
    );
  }

  late final _lcong4818Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong4818 =
      _lcong4818Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r18(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r18(
      __buffer,
      __result,
    );
  }

  late final _drand48_r18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r18 = _drand48_r18Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r18(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r18(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r18 = _erand48_r18Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r18(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r18(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r18 = _lrand48_r18Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r18(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r18(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r18 = _nrand48_r18Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r18(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r18(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r18 = _mrand48_r18Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r18(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r18(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r18 = _jrand48_r18Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r18(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r18(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r18 = _srand48_r18Ptr
      .asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r18(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r18(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r18 = _seed48_r18Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r18(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r18(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r18 = _lcong48_r18Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int arc4random18() {
    return _arc4random18();
  }

  late final _arc4random18Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random18 = _arc4random18Ptr.asFunction<int Function()>();

  void arc4random_buf18(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf18(
      __buf,
      __size,
    );
  }

  late final _arc4random_buf18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('arc4random_buf');
  late final _arc4random_buf18 = _arc4random_buf18Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform18(
    int __upper_bound,
  ) {
    return _arc4random_uniform18(
      __upper_bound,
    );
  }

  late final _arc4random_uniform18Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
          'arc4random_uniform');
  late final _arc4random_uniform18 =
      _arc4random_uniform18Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc18(
    int __size,
  ) {
    return _malloc18(
      __size,
    );
  }

  late final _malloc18Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'malloc');
  late final _malloc18 =
      _malloc18Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc18(
    int __nmemb,
    int __size,
  ) {
    return _calloc18(
      __nmemb,
      __size,
    );
  }

  late final _calloc18Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'calloc');
  late final _calloc18 =
      _calloc18Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc18(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc18(
      __ptr,
      __size,
    );
  }

  late final _realloc18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('realloc');
  late final _realloc18 = _realloc18Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free18(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free18(
      __ptr,
    );
  }

  late final _free18Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free18 =
      _free18Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray36(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray36(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray36Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray36 = _reallocarray36Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray37(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray37(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray37Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray37 = _reallocarray37Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca18(
    int __size,
  ) {
    return _alloca18(
      __size,
    );
  }

  late final _alloca18Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'alloca');
  late final _alloca18 =
      _alloca18Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc18(
    int __size,
  ) {
    return _valloc18(
      __size,
    );
  }

  late final _valloc18Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'valloc');
  late final _valloc18 =
      _valloc18Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign18(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign18(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int,
              ffi.Int)>>('posix_memalign');
  late final _posix_memalign18 = _posix_memalign18Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc18(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc18(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc18Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'aligned_alloc');
  late final _aligned_alloc18 = _aligned_alloc18Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort18() {
    return _abort18();
  }

  late final _abort18Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort18 = _abort18Ptr.asFunction<void Function()>();

  int atexit18(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit18(
      __func,
    );
  }

  late final _atexit18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit18 = _atexit18Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit18(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit18(
      __func,
    );
  }

  late final _at_quick_exit18Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit18 = _at_quick_exit18Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit18(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit18(
      __func,
      __arg,
    );
  }

  late final _on_exit18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit18 = _on_exit18Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit18(
    int __status,
  ) {
    return _exit18(
      __status,
    );
  }

  late final _exit18Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit18 = _exit18Ptr.asFunction<void Function(int)>();

  void quick_exit18(
    int __status,
  ) {
    return _quick_exit18(
      __status,
    );
  }

  late final _quick_exit18Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit18 = _quick_exit18Ptr.asFunction<void Function(int)>();

  void _Exit18(
    int __status,
  ) {
    return __Exit18(
      __status,
    );
  }

  late final __Exit18Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit18 = __Exit18Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv18(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv18(
      __name,
    );
  }

  late final _getenv18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv18 = _getenv18Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv18(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv18(
      __string,
    );
  }

  late final _putenv18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv18 =
      _putenv18Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv18(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv18(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv18 = _setenv18Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv18(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv18(
      __name,
    );
  }

  late final _unsetenv18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv18 =
      _unsetenv18Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv18() {
    return _clearenv18();
  }

  late final _clearenv18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv18 = _clearenv18Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp18(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp18(
      __template,
    );
  }

  late final _mktemp18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp18 = _mktemp18Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp18(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp18(
      __template,
    );
  }

  late final _mkstemp18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp18 =
      _mkstemp18Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps18(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps18(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps18Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps18 =
      _mkstemps18Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp18(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp18(
      __template,
    );
  }

  late final _mkdtemp18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp18 = _mkdtemp18Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system18(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system18(
      __command,
    );
  }

  late final _system18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system18 =
      _system18Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath18(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath18(
      __name,
      __resolved,
    );
  }

  late final _realpath18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath18 = _realpath18Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch18(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch18(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              __compar_fn_t)>>('bsearch');
  late final _bsearch18 = _bsearch18Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort18(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort18(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              __compar_fn_t)>>('qsort');
  late final _qsort18 = _qsort18Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs18(
    int __x,
  ) {
    return _abs18(
      __x,
    );
  }

  late final _abs18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs18 = _abs18Ptr.asFunction<int Function(int)>();

  int labs18(
    int __x,
  ) {
    return _labs18(
      __x,
    );
  }

  late final _labs18Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs18 = _labs18Ptr.asFunction<int Function(int)>();

  int llabs18(
    int __x,
  ) {
    return _llabs18(
      __x,
    );
  }

  late final _llabs18Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs18 = _llabs18Ptr.asFunction<int Function(int)>();

  div_t div18(
    int __numer,
    int __denom,
  ) {
    return _div18(
      __numer,
      __denom,
    );
  }

  late final _div18Ptr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div18 = _div18Ptr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv18(
    int __numer,
    int __denom,
  ) {
    return _ldiv18(
      __numer,
      __denom,
    );
  }

  late final _ldiv18Ptr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv18 = _ldiv18Ptr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv18(
    int __numer,
    int __denom,
  ) {
    return _lldiv18(
      __numer,
      __denom,
    );
  }

  late final _lldiv18Ptr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv18 = _lldiv18Ptr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt18(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt18(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt18 = _ecvt18Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt18(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt18(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt18 = _fcvt18Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt18(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt18(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt18 = _gcvt18Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r18(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r18(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('ecvt_r');
  late final _ecvt_r18 = _ecvt_r18Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r18(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r18(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('fcvt_r');
  late final _fcvt_r18 = _fcvt_r18Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen18(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen18(
      __s,
      __n,
    );
  }

  late final _mblen18Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mblen');
  late final _mblen18 =
      _mblen18Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc18(
    ffi.Pointer<ffi.Int> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc18(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('mbtowc');
  late final _mbtowc18 = _mbtowc18Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb18(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb18(
      __s,
      __wchar,
    );
  }

  late final _wctomb18Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'wctomb');
  late final _wctomb18 =
      _wctomb18Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs18(
    ffi.Pointer<ffi.Int> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs18(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mbstowcs');
  late final _mbstowcs18 = _mbstowcs18Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs18(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Int> __pwcs,
    int __n,
  ) {
    return _wcstombs18(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('wcstombs');
  late final _wcstombs18 = _wcstombs18Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  int rpmatch18(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch18(
      __response,
    );
  }

  late final _rpmatch18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch18 =
      _rpmatch18Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt18(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt18(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt18 = _getsubopt18Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg18(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg18(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg18 =
      _getloadavg18Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Void> memcpy18(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy18(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpy18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memcpy');
  late final _memcpy18 = _memcpy18Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove18(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove18(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmove18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memmove');
  late final _memmove18 = _memmove18Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy18(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy18(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpy18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memccpy');
  late final _memccpy18 = _memccpy18Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset18(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset18(
      __s,
      __c,
      __n,
    );
  }

  late final _memset18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memset');
  late final _memset18 = _memset18Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp18(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp18(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmp18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('memcmp');
  late final _memcmp18 = _memcmp18Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq18(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq18(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeq18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__memcmpeq');
  late final ___memcmpeq18 = ___memcmpeq18Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr18(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr18(
      __s,
      __c,
      __n,
    );
  }

  late final _memchr18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memchr');
  late final _memchr18 = _memchr18Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy18(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy18(
      __dest,
      __src,
    );
  }

  late final _strcpy18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy18 = _strcpy18Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy18(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy18(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpy18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncpy');
  late final _strncpy18 = _strncpy18Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat18(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat18(
      __dest,
      __src,
    );
  }

  late final _strcat18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat18 = _strcat18Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat18(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat18(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncat18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncat');
  late final _strncat18 = _strncat18Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp18(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp18(
      __s1,
      __s2,
    );
  }

  late final _strcmp18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp18 = _strcmp18Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp18(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp18(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmp18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncmp');
  late final _strncmp18 = _strncmp18Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll18(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll18(
      __s1,
      __s2,
    );
  }

  late final _strcoll18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll18 = _strcoll18Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm18(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm18(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrm18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strxfrm');
  late final _strxfrm18 = _strxfrm18Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l18(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l18(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_l18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l18 = _strcoll_l18Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l18(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l18(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_l18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strxfrm_l');
  late final _strxfrm_l18 = _strxfrm_l18Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup18(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup18(
      __s,
    );
  }

  late final _strdup18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup18 = _strdup18Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup18(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup18(
      __string,
      __n,
    );
  }

  late final _strndup18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strndup');
  late final _strndup18 = _strndup18Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr18(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr18(
      __s,
      __c,
    );
  }

  late final _strchr18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr18 = _strchr18Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr18(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr18(
      __s,
      __c,
    );
  }

  late final _strrchr18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr18 = _strrchr18Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn18(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn18(
      __s,
      __reject,
    );
  }

  late final _strcspn18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn18 = _strcspn18Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn18(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn18(
      __s,
      __accept,
    );
  }

  late final _strspn18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn18 = _strspn18Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk18(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk18(
      __s,
      __accept,
    );
  }

  late final _strpbrk18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk18 = _strpbrk18Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr18(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr18(
      __haystack,
      __needle,
    );
  }

  late final _strstr18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr18 = _strstr18Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok18(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok18(
      __s,
      __delim,
    );
  }

  late final _strtok18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok18 = _strtok18Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r18(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r18(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_r18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r18 = ___strtok_r18Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r18(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r18(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_r18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r18 = _strtok_r18Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen18(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen18(
      __s,
    );
  }

  late final _strlen18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'strlen');
  late final _strlen18 =
      _strlen18Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen18(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen18(
      __string,
      __maxlen,
    );
  }

  late final _strnlen18Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'strnlen');
  late final _strnlen18 =
      _strnlen18Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror18(
    int __errnum,
  ) {
    return _strerror18(
      __errnum,
    );
  }

  late final _strerror18Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror18 =
      _strerror18Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r18(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r18(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_r18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('strerror_r');
  late final _strerror_r18 = _strerror_r18Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l18(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l18(
      __errnum,
      __l,
    );
  }

  late final _strerror_l18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l18 = _strerror_l18Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp18(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp18(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmp18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcmp');
  late final _bcmp18 = _bcmp18Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy18(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy18(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopy18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcopy');
  late final _bcopy18 = _bcopy18Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero18(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero18(
      __s,
      __n,
    );
  }

  late final _bzero18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('bzero');
  late final _bzero18 =
      _bzero18Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index18(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index18(
      __s,
      __c,
    );
  }

  late final _index18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index18 = _index18Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex18(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex18(
      __s,
      __c,
    );
  }

  late final _rindex18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex18 = _rindex18Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs18(
    int __i,
  ) {
    return _ffs18(
      __i,
    );
  }

  late final _ffs18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs18 = _ffs18Ptr.asFunction<int Function(int)>();

  int ffsl18(
    int __l,
  ) {
    return _ffsl18(
      __l,
    );
  }

  late final _ffsl18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl18 = _ffsl18Ptr.asFunction<int Function(int)>();

  int ffsll18(
    int __ll,
  ) {
    return _ffsll18(
      __ll,
    );
  }

  late final _ffsll18Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll18 = _ffsll18Ptr.asFunction<int Function(int)>();

  int strcasecmp18(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp18(
      __s1,
      __s2,
    );
  }

  late final _strcasecmp18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp18 = _strcasecmp18Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp18(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp18(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmp18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncasecmp');
  late final _strncasecmp18 = _strncasecmp18Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l18(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l18(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_l18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l18 = _strcasecmp_l18Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l18(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l18(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_l18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l18 = _strncasecmp_l18Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero18(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero18(
      __s,
      __n,
    );
  }

  late final _explicit_bzero18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('explicit_bzero');
  late final _explicit_bzero18 = _explicit_bzero18Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep18(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep18(
      __stringp,
      __delim,
    );
  }

  late final _strsep18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep18 = _strsep18Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal18(
    int __sig,
  ) {
    return _strsignal18(
      __sig,
    );
  }

  late final _strsignal18Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal18 =
      _strsignal18Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy18(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy18(
      __dest,
      __src,
    );
  }

  late final ___stpcpy18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy18 = ___stpcpy18Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy18(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy18(
      __dest,
      __src,
    );
  }

  late final _stpcpy18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy18 = _stpcpy18Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy18(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy18(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpy18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('__stpncpy');
  late final ___stpncpy18 = ___stpncpy18Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy18(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy18(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpy18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('stpncpy');
  late final _stpncpy18 = _stpncpy18Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int remove19(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove19(
      __filename,
    );
  }

  late final _remove19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove19 =
      _remove19Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename19(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename19(
      __old,
      __new,
    );
  }

  late final _rename19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename19 = _rename19Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat19(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat19(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameat19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat19 = _renameat19Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose19(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose19(
      __stream,
    );
  }

  late final _fclose19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose19 =
      _fclose19Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile19() {
    return _tmpfile19();
  }

  late final _tmpfile19Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile19 =
      _tmpfile19Ptr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam19(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam19(
      arg0,
    );
  }

  late final _tmpnam19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam19 = _tmpnam19Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r19(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r19(
      __s,
    );
  }

  late final _tmpnam_r19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r19 = _tmpnam_r19Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam19(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam19(
      __dir,
      __pfx,
    );
  }

  late final _tempnam19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam19 = _tempnam19Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush19(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush19(
      __stream,
    );
  }

  late final _fflush19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush19 =
      _fflush19Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked19(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked19(
      __stream,
    );
  }

  late final _fflush_unlocked19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked19 =
      _fflush_unlocked19Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen19(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen19(
      __filename,
      __modes,
    );
  }

  late final _fopen19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen19 = _fopen19Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen19(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen19(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopen19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen19 = _freopen19Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen19(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen19(
      __fd,
      __modes,
    );
  }

  late final _fdopen19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen19 = _fdopen19Ptr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen19(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen19(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopen19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen19 = _fmemopen19Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream19(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Int> __sizeloc,
  ) {
    return _open_memstream19(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstream19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('open_memstream');
  late final _open_memstream19 = _open_memstream19Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void setbuf19(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf19(
      __stream,
      __buf,
    );
  }

  late final _setbuf19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf19 = _setbuf19Ptr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf19(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf19(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbuf19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('setvbuf');
  late final _setvbuf19 = _setvbuf19Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer19(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer19(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbuffer19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer19 = _setbuffer19Ptr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf19(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf19(
      __stream,
    );
  }

  late final _setlinebuf19Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf19 =
      _setlinebuf19Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf19(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf19(
      __stream,
      __format,
    );
  }

  late final _fprintf19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf19 = _fprintf19Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf19(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf19(
      __format,
    );
  }

  late final _printf19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf19 =
      _printf19Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf19(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf19(
      __s,
      __format,
    );
  }

  late final _sprintf19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf19 = _sprintf19Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf19(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfprintf19(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintf19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfprintf');
  late final _vfprintf19 = _vfprintf19Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vprintf19(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vprintf19(
      __format,
      __arg,
    );
  }

  late final _vprintf19Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vprintf');
  late final _vprintf19 =
      _vprintf19Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsprintf19(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsprintf19(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintf19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsprintf');
  late final _vsprintf19 = _vsprintf19Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int snprintf19(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf19(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintf19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf19 = _snprintf19Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf19(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsnprintf19(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintf19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('vsnprintf');
  late final _vsnprintf19 = _vsnprintf19Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int vdprintf19(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    int __arg,
  ) {
    return _vdprintf19(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintf19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('vdprintf');
  late final _vdprintf19 = _vdprintf19Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int dprintf19(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf19(
      __fd,
      __fmt,
    );
  }

  late final _dprintf19Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf19 =
      _dprintf19Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf38(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf38(
      __stream,
      __format,
    );
  }

  late final _fscanf38Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf38 = _fscanf38Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf38(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf38(
      __format,
    );
  }

  late final _scanf38Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf38 =
      _scanf38Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf38(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf38(
      __s,
      __format,
    );
  }

  late final _sscanf38Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf38 = _sscanf38Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fscanf39(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf39(
      __stream,
      __format,
    );
  }

  late final _fscanf39Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf39 = _fscanf39Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf39(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf39(
      __format,
    );
  }

  late final _scanf39Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf39 =
      _scanf39Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf39(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf39(
      __s,
      __format,
    );
  }

  late final _sscanf39Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf39 = _sscanf39Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf38(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf38(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf38Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf38 = _vfscanf38Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf38(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf38(
      __format,
      __arg,
    );
  }

  late final _vscanf38Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf38 =
      _vscanf38Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf38(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf38(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf38Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf38 = _vsscanf38Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int vfscanf39(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf39(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf39Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf39 = _vfscanf39Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf39(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf39(
      __format,
      __arg,
    );
  }

  late final _vscanf39Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf39 =
      _vscanf39Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf39(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf39(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf39Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf39 = _vsscanf39Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fgetc19(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc19(
      __stream,
    );
  }

  late final _fgetc19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc19 =
      _fgetc19Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc19(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc19(
      __stream,
    );
  }

  late final _getc19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc19 = _getc19Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar19() {
    return _getchar19();
  }

  late final _getchar19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar19 = _getchar19Ptr.asFunction<int Function()>();

  int getc_unlocked19(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked19(
      __stream,
    );
  }

  late final _getc_unlocked19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked19 =
      _getc_unlocked19Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked19() {
    return _getchar_unlocked19();
  }

  late final _getchar_unlocked19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked19 =
      _getchar_unlocked19Ptr.asFunction<int Function()>();

  int fgetc_unlocked19(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked19(
      __stream,
    );
  }

  late final _fgetc_unlocked19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked19 =
      _fgetc_unlocked19Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc19(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc19(
      __c,
      __stream,
    );
  }

  late final _fputc19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc19 =
      _fputc19Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc19(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc19(
      __c,
      __stream,
    );
  }

  late final _putc19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc19 =
      _putc19Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar19(
    int __c,
  ) {
    return _putchar19(
      __c,
    );
  }

  late final _putchar19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar19 = _putchar19Ptr.asFunction<int Function(int)>();

  int fputc_unlocked19(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked19(
      __c,
      __stream,
    );
  }

  late final _fputc_unlocked19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked19 =
      _fputc_unlocked19Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked19(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked19(
      __c,
      __stream,
    );
  }

  late final _putc_unlocked19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked19 =
      _putc_unlocked19Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked19(
    int __c,
  ) {
    return _putchar_unlocked19(
      __c,
    );
  }

  late final _putchar_unlocked19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked19 =
      _putchar_unlocked19Ptr.asFunction<int Function(int)>();

  int getw19(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw19(
      __stream,
    );
  }

  late final _getw19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw19 = _getw19Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw19(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw19(
      __w,
      __stream,
    );
  }

  late final _putw19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw19 =
      _putw19Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets19(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets19(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgets19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets19 = _fgets19Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim19(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim19(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelim19Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim19 = ___getdelim19Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getdelim19(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim19(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelim19Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim19 = _getdelim19Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getline19(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline19(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getline19Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<FILE>)>>('getline');
  late final _getline19 = _getline19Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<FILE>)>();

  int fputs19(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs19(
      __s,
      __stream,
    );
  }

  late final _fputs19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs19 = _fputs19Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts19(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts19(
      __s,
    );
  }

  late final _puts19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts19 =
      _puts19Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc19(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc19(
      __c,
      __stream,
    );
  }

  late final _ungetc19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc19 =
      _ungetc19Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread19(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread19(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread19 = _fread19Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite19(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite19(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwrite19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite19 = _fwrite19Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked19(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked19(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlocked19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked19 = _fread_unlocked19Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked19(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked19(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlocked19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked19 = _fwrite_unlocked19Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek19(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek19(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseek19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek19 =
      _fseek19Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell19(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell19(
      __stream,
    );
  }

  late final _ftell19Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell19 =
      _ftell19Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind19(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind19(
      __stream,
    );
  }

  late final _rewind19Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind19 =
      _rewind19Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko19(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko19(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseeko19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko19 =
      _fseeko19Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello19(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello19(
      __stream,
    );
  }

  late final _ftello19Ptr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello19 =
      _ftello19Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos19(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos19(
      __stream,
      __pos,
    );
  }

  late final _fgetpos19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos19 = _fgetpos19Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos19(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos19(
      __stream,
      __pos,
    );
  }

  late final _fsetpos19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos19 = _fsetpos19Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr19(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr19(
      __stream,
    );
  }

  late final _clearerr19Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr19 =
      _clearerr19Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof19(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof19(
      __stream,
    );
  }

  late final _feof19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof19 = _feof19Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror19(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror19(
      __stream,
    );
  }

  late final _ferror19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror19 =
      _ferror19Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked19(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked19(
      __stream,
    );
  }

  late final _clearerr_unlocked19Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked19 =
      _clearerr_unlocked19Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked19(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked19(
      __stream,
    );
  }

  late final _feof_unlocked19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked19 =
      _feof_unlocked19Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked19(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked19(
      __stream,
    );
  }

  late final _ferror_unlocked19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked19 =
      _ferror_unlocked19Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror19(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror19(
      __s,
    );
  }

  late final _perror19Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror19 =
      _perror19Ptr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno19(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno19(
      __stream,
    );
  }

  late final _fileno19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno19 =
      _fileno19Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked19(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked19(
      __stream,
    );
  }

  late final _fileno_unlocked19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked19 =
      _fileno_unlocked19Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose19(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose19(
      __stream,
    );
  }

  late final _pclose19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose19 =
      _pclose19Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen19(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen19(
      __command,
      __modes,
    );
  }

  late final _popen19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen19 = _popen19Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid19(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid19(
      __s,
    );
  }

  late final _ctermid19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid19 = _ctermid19Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile19(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile19(
      __stream,
    );
  }

  late final _flockfile19Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile19 =
      _flockfile19Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile19(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile19(
      __stream,
    );
  }

  late final _ftrylockfile19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile19 =
      _ftrylockfile19Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile19(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile19(
      __stream,
    );
  }

  late final _funlockfile19Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile19 =
      _funlockfile19Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow19(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow19(
      arg0,
    );
  }

  late final ___uflow19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow19 =
      ___uflow19Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow19(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow19(
      arg0,
      arg1,
    );
  }

  late final ___overflow19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow19 =
      ___overflow19Ptr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __ctype_get_mb_cur_max19() {
    return ___ctype_get_mb_cur_max19();
  }

  late final ___ctype_get_mb_cur_max19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max19 =
      ___ctype_get_mb_cur_max19Ptr.asFunction<int Function()>();

  double atof19(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof19(
      __nptr,
    );
  }

  late final _atof19Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof19 =
      _atof19Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi19(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi19(
      __nptr,
    );
  }

  late final _atoi19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi19 =
      _atoi19Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol19(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol19(
      __nptr,
    );
  }

  late final _atol19Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol19 =
      _atol19Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll19(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll19(
      __nptr,
    );
  }

  late final _atoll19Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll19 =
      _atoll19Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod19(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod19(
      __nptr,
      __endptr,
    );
  }

  late final _strtod19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod19 = _strtod19Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof19(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof19(
      __nptr,
      __endptr,
    );
  }

  late final _strtof19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof19 = _strtof19Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol19(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol19(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol19 = _strtol19Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul19(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul19(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul19 = _strtoul19Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq19(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq19(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq19 = _strtoq19Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq19(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq19(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq19 = _strtouq19Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll19(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll19(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll19 = _strtoll19Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull19(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull19(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull19 = _strtoull19Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a19(
    int __n,
  ) {
    return _l64a19(
      __n,
    );
  }

  late final _l64a19Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a19 =
      _l64a19Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l19(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l19(
      __s,
    );
  }

  late final _a64l19Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l19 =
      _a64l19Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select19(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select19(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select19 = _select19Ptr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect19(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect19(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect19 = _pselect19Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random19() {
    return _random19();
  }

  late final _random19Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random19 = _random19Ptr.asFunction<int Function()>();

  void srandom19(
    int __seed,
  ) {
    return _srandom19(
      __seed,
    );
  }

  late final _srandom19Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom19 = _srandom19Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate19(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate19(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int)>>('initstate');
  late final _initstate19 = _initstate19Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate19(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate19(
      __statebuf,
    );
  }

  late final _setstate19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate19 = _setstate19Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r19(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r19(
      __buf,
      __result,
    );
  }

  late final _random_r19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r19 = _random_r19Ptr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r19(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r19(
      __seed,
      __buf,
    );
  }

  late final _srandom_r19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r19 =
      _srandom_r19Ptr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r19(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r19(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r19 = _initstate_r19Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r19(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r19(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r19 = _setstate_r19Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand19() {
    return _rand19();
  }

  late final _rand19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand19 = _rand19Ptr.asFunction<int Function()>();

  void srand19(
    int __seed,
  ) {
    return _srand19(
      __seed,
    );
  }

  late final _srand19Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand19 = _srand19Ptr.asFunction<void Function(int)>();

  int rand_r19(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r19(
      __seed,
    );
  }

  late final _rand_r19Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r19 =
      _rand_r19Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand4819() {
    return _drand4819();
  }

  late final _drand4819Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand4819 = _drand4819Ptr.asFunction<double Function()>();

  double erand4819(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand4819(
      __xsubi,
    );
  }

  late final _erand4819Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand4819 = _erand4819Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand4819() {
    return _lrand4819();
  }

  late final _lrand4819Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand4819 = _lrand4819Ptr.asFunction<int Function()>();

  int nrand4819(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand4819(
      __xsubi,
    );
  }

  late final _nrand4819Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand4819 =
      _nrand4819Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand4819() {
    return _mrand4819();
  }

  late final _mrand4819Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand4819 = _mrand4819Ptr.asFunction<int Function()>();

  int jrand4819(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand4819(
      __xsubi,
    );
  }

  late final _jrand4819Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand4819 =
      _jrand4819Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand4819(
    int __seedval,
  ) {
    return _srand4819(
      __seedval,
    );
  }

  late final _srand4819Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand4819 = _srand4819Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed4819(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed4819(
      __seed16v,
    );
  }

  late final _seed4819Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed4819 = _seed4819Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong4819(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong4819(
      __param,
    );
  }

  late final _lcong4819Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong4819 =
      _lcong4819Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r19(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r19(
      __buffer,
      __result,
    );
  }

  late final _drand48_r19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r19 = _drand48_r19Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r19(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r19(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r19 = _erand48_r19Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r19(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r19(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r19 = _lrand48_r19Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r19(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r19(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r19 = _nrand48_r19Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r19(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r19(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r19 = _mrand48_r19Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r19(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r19(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r19 = _jrand48_r19Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r19(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r19(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r19 = _srand48_r19Ptr
      .asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r19(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r19(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r19 = _seed48_r19Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r19(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r19(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r19 = _lcong48_r19Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int arc4random19() {
    return _arc4random19();
  }

  late final _arc4random19Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random19 = _arc4random19Ptr.asFunction<int Function()>();

  void arc4random_buf19(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf19(
      __buf,
      __size,
    );
  }

  late final _arc4random_buf19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('arc4random_buf');
  late final _arc4random_buf19 = _arc4random_buf19Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform19(
    int __upper_bound,
  ) {
    return _arc4random_uniform19(
      __upper_bound,
    );
  }

  late final _arc4random_uniform19Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
          'arc4random_uniform');
  late final _arc4random_uniform19 =
      _arc4random_uniform19Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc19(
    int __size,
  ) {
    return _malloc19(
      __size,
    );
  }

  late final _malloc19Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'malloc');
  late final _malloc19 =
      _malloc19Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc19(
    int __nmemb,
    int __size,
  ) {
    return _calloc19(
      __nmemb,
      __size,
    );
  }

  late final _calloc19Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'calloc');
  late final _calloc19 =
      _calloc19Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc19(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc19(
      __ptr,
      __size,
    );
  }

  late final _realloc19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('realloc');
  late final _realloc19 = _realloc19Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free19(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free19(
      __ptr,
    );
  }

  late final _free19Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free19 =
      _free19Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray38(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray38(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray38Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray38 = _reallocarray38Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray39(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray39(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray39Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray39 = _reallocarray39Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca19(
    int __size,
  ) {
    return _alloca19(
      __size,
    );
  }

  late final _alloca19Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'alloca');
  late final _alloca19 =
      _alloca19Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc19(
    int __size,
  ) {
    return _valloc19(
      __size,
    );
  }

  late final _valloc19Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'valloc');
  late final _valloc19 =
      _valloc19Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign19(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign19(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int,
              ffi.Int)>>('posix_memalign');
  late final _posix_memalign19 = _posix_memalign19Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc19(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc19(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc19Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'aligned_alloc');
  late final _aligned_alloc19 = _aligned_alloc19Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort19() {
    return _abort19();
  }

  late final _abort19Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort19 = _abort19Ptr.asFunction<void Function()>();

  int atexit19(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit19(
      __func,
    );
  }

  late final _atexit19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit19 = _atexit19Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit19(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit19(
      __func,
    );
  }

  late final _at_quick_exit19Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit19 = _at_quick_exit19Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit19(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit19(
      __func,
      __arg,
    );
  }

  late final _on_exit19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit19 = _on_exit19Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit19(
    int __status,
  ) {
    return _exit19(
      __status,
    );
  }

  late final _exit19Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit19 = _exit19Ptr.asFunction<void Function(int)>();

  void quick_exit19(
    int __status,
  ) {
    return _quick_exit19(
      __status,
    );
  }

  late final _quick_exit19Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit19 = _quick_exit19Ptr.asFunction<void Function(int)>();

  void _Exit19(
    int __status,
  ) {
    return __Exit19(
      __status,
    );
  }

  late final __Exit19Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit19 = __Exit19Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv19(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv19(
      __name,
    );
  }

  late final _getenv19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv19 = _getenv19Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv19(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv19(
      __string,
    );
  }

  late final _putenv19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv19 =
      _putenv19Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv19(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv19(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv19 = _setenv19Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv19(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv19(
      __name,
    );
  }

  late final _unsetenv19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv19 =
      _unsetenv19Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv19() {
    return _clearenv19();
  }

  late final _clearenv19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv19 = _clearenv19Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp19(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp19(
      __template,
    );
  }

  late final _mktemp19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp19 = _mktemp19Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp19(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp19(
      __template,
    );
  }

  late final _mkstemp19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp19 =
      _mkstemp19Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps19(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps19(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps19Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps19 =
      _mkstemps19Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp19(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp19(
      __template,
    );
  }

  late final _mkdtemp19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp19 = _mkdtemp19Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system19(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system19(
      __command,
    );
  }

  late final _system19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system19 =
      _system19Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath19(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath19(
      __name,
      __resolved,
    );
  }

  late final _realpath19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath19 = _realpath19Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch19(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch19(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              __compar_fn_t)>>('bsearch');
  late final _bsearch19 = _bsearch19Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort19(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort19(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              __compar_fn_t)>>('qsort');
  late final _qsort19 = _qsort19Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs19(
    int __x,
  ) {
    return _abs19(
      __x,
    );
  }

  late final _abs19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs19 = _abs19Ptr.asFunction<int Function(int)>();

  int labs19(
    int __x,
  ) {
    return _labs19(
      __x,
    );
  }

  late final _labs19Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs19 = _labs19Ptr.asFunction<int Function(int)>();

  int llabs19(
    int __x,
  ) {
    return _llabs19(
      __x,
    );
  }

  late final _llabs19Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs19 = _llabs19Ptr.asFunction<int Function(int)>();

  div_t div19(
    int __numer,
    int __denom,
  ) {
    return _div19(
      __numer,
      __denom,
    );
  }

  late final _div19Ptr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div19 = _div19Ptr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv19(
    int __numer,
    int __denom,
  ) {
    return _ldiv19(
      __numer,
      __denom,
    );
  }

  late final _ldiv19Ptr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv19 = _ldiv19Ptr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv19(
    int __numer,
    int __denom,
  ) {
    return _lldiv19(
      __numer,
      __denom,
    );
  }

  late final _lldiv19Ptr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv19 = _lldiv19Ptr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt19(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt19(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt19 = _ecvt19Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt19(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt19(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt19 = _fcvt19Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt19(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt19(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt19 = _gcvt19Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r19(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r19(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('ecvt_r');
  late final _ecvt_r19 = _ecvt_r19Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r19(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r19(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('fcvt_r');
  late final _fcvt_r19 = _fcvt_r19Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen19(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen19(
      __s,
      __n,
    );
  }

  late final _mblen19Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mblen');
  late final _mblen19 =
      _mblen19Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc19(
    ffi.Pointer<ffi.Int> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc19(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('mbtowc');
  late final _mbtowc19 = _mbtowc19Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb19(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb19(
      __s,
      __wchar,
    );
  }

  late final _wctomb19Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'wctomb');
  late final _wctomb19 =
      _wctomb19Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs19(
    ffi.Pointer<ffi.Int> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs19(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mbstowcs');
  late final _mbstowcs19 = _mbstowcs19Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs19(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Int> __pwcs,
    int __n,
  ) {
    return _wcstombs19(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('wcstombs');
  late final _wcstombs19 = _wcstombs19Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  int rpmatch19(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch19(
      __response,
    );
  }

  late final _rpmatch19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch19 =
      _rpmatch19Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt19(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt19(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt19 = _getsubopt19Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg19(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg19(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg19 =
      _getloadavg19Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Void> memcpy19(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy19(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpy19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memcpy');
  late final _memcpy19 = _memcpy19Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove19(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove19(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmove19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memmove');
  late final _memmove19 = _memmove19Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy19(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy19(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpy19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memccpy');
  late final _memccpy19 = _memccpy19Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset19(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset19(
      __s,
      __c,
      __n,
    );
  }

  late final _memset19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memset');
  late final _memset19 = _memset19Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp19(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp19(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmp19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('memcmp');
  late final _memcmp19 = _memcmp19Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq19(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq19(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeq19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__memcmpeq');
  late final ___memcmpeq19 = ___memcmpeq19Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr19(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr19(
      __s,
      __c,
      __n,
    );
  }

  late final _memchr19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memchr');
  late final _memchr19 = _memchr19Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy19(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy19(
      __dest,
      __src,
    );
  }

  late final _strcpy19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy19 = _strcpy19Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy19(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy19(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpy19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncpy');
  late final _strncpy19 = _strncpy19Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat19(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat19(
      __dest,
      __src,
    );
  }

  late final _strcat19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat19 = _strcat19Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat19(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat19(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncat19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncat');
  late final _strncat19 = _strncat19Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp19(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp19(
      __s1,
      __s2,
    );
  }

  late final _strcmp19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp19 = _strcmp19Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp19(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp19(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmp19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncmp');
  late final _strncmp19 = _strncmp19Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll19(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll19(
      __s1,
      __s2,
    );
  }

  late final _strcoll19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll19 = _strcoll19Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm19(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm19(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrm19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strxfrm');
  late final _strxfrm19 = _strxfrm19Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l19(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l19(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_l19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l19 = _strcoll_l19Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l19(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l19(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_l19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strxfrm_l');
  late final _strxfrm_l19 = _strxfrm_l19Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup19(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup19(
      __s,
    );
  }

  late final _strdup19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup19 = _strdup19Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup19(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup19(
      __string,
      __n,
    );
  }

  late final _strndup19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strndup');
  late final _strndup19 = _strndup19Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr19(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr19(
      __s,
      __c,
    );
  }

  late final _strchr19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr19 = _strchr19Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr19(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr19(
      __s,
      __c,
    );
  }

  late final _strrchr19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr19 = _strrchr19Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn19(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn19(
      __s,
      __reject,
    );
  }

  late final _strcspn19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn19 = _strcspn19Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn19(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn19(
      __s,
      __accept,
    );
  }

  late final _strspn19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn19 = _strspn19Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk19(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk19(
      __s,
      __accept,
    );
  }

  late final _strpbrk19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk19 = _strpbrk19Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr19(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr19(
      __haystack,
      __needle,
    );
  }

  late final _strstr19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr19 = _strstr19Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok19(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok19(
      __s,
      __delim,
    );
  }

  late final _strtok19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok19 = _strtok19Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r19(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r19(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_r19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r19 = ___strtok_r19Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r19(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r19(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_r19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r19 = _strtok_r19Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen19(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen19(
      __s,
    );
  }

  late final _strlen19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'strlen');
  late final _strlen19 =
      _strlen19Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen19(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen19(
      __string,
      __maxlen,
    );
  }

  late final _strnlen19Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'strnlen');
  late final _strnlen19 =
      _strnlen19Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror19(
    int __errnum,
  ) {
    return _strerror19(
      __errnum,
    );
  }

  late final _strerror19Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror19 =
      _strerror19Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r19(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r19(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_r19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('strerror_r');
  late final _strerror_r19 = _strerror_r19Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l19(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l19(
      __errnum,
      __l,
    );
  }

  late final _strerror_l19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l19 = _strerror_l19Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp19(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp19(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmp19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcmp');
  late final _bcmp19 = _bcmp19Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy19(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy19(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopy19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcopy');
  late final _bcopy19 = _bcopy19Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero19(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero19(
      __s,
      __n,
    );
  }

  late final _bzero19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('bzero');
  late final _bzero19 =
      _bzero19Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index19(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index19(
      __s,
      __c,
    );
  }

  late final _index19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index19 = _index19Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex19(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex19(
      __s,
      __c,
    );
  }

  late final _rindex19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex19 = _rindex19Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs19(
    int __i,
  ) {
    return _ffs19(
      __i,
    );
  }

  late final _ffs19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs19 = _ffs19Ptr.asFunction<int Function(int)>();

  int ffsl19(
    int __l,
  ) {
    return _ffsl19(
      __l,
    );
  }

  late final _ffsl19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl19 = _ffsl19Ptr.asFunction<int Function(int)>();

  int ffsll19(
    int __ll,
  ) {
    return _ffsll19(
      __ll,
    );
  }

  late final _ffsll19Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll19 = _ffsll19Ptr.asFunction<int Function(int)>();

  int strcasecmp19(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp19(
      __s1,
      __s2,
    );
  }

  late final _strcasecmp19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp19 = _strcasecmp19Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp19(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp19(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmp19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncasecmp');
  late final _strncasecmp19 = _strncasecmp19Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l19(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l19(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_l19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l19 = _strcasecmp_l19Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l19(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l19(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_l19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l19 = _strncasecmp_l19Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero19(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero19(
      __s,
      __n,
    );
  }

  late final _explicit_bzero19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('explicit_bzero');
  late final _explicit_bzero19 = _explicit_bzero19Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep19(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep19(
      __stringp,
      __delim,
    );
  }

  late final _strsep19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep19 = _strsep19Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal19(
    int __sig,
  ) {
    return _strsignal19(
      __sig,
    );
  }

  late final _strsignal19Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal19 =
      _strsignal19Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy19(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy19(
      __dest,
      __src,
    );
  }

  late final ___stpcpy19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy19 = ___stpcpy19Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy19(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy19(
      __dest,
      __src,
    );
  }

  late final _stpcpy19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy19 = _stpcpy19Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy19(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy19(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpy19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('__stpncpy');
  late final ___stpncpy19 = ___stpncpy19Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy19(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy19(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpy19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('stpncpy');
  late final _stpncpy19 = _stpncpy19Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int buffer_equal3(
    ffi.Pointer<ffi.Void> a,
    ffi.Pointer<ffi.Void> b,
  ) {
    return _buffer_equal3(
      a,
      b,
    );
  }

  late final _buffer_equal3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>('buffer_equal');
  late final _buffer_equal3 = _buffer_equal3Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  void buffer_free3(
    ffi.Pointer<ffi.Void> struct_buffer,
  ) {
    return _buffer_free3(
      struct_buffer,
    );
  }

  late final _buffer_free3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'buffer_free');
  late final _buffer_free3 =
      _buffer_free3Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<buffer> buffer_copy3(
    ffi.Pointer<ffi.Void> data,
    int data_len,
  ) {
    return _buffer_copy3(
      data,
      data_len,
    );
  }

  late final _buffer_copy3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<buffer> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('buffer_copy');
  late final _buffer_copy3 = _buffer_copy3Ptr
      .asFunction<ffi.Pointer<buffer> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<cstring> cstr_new4(
    ffi.Pointer<ffi.Char> init_str,
  ) {
    return _cstr_new4(
      init_str,
    );
  }

  late final _cstr_new4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cstring> Function(ffi.Pointer<ffi.Char>)>>('cstr_new');
  late final _cstr_new4 = _cstr_new4Ptr
      .asFunction<ffi.Pointer<cstring> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<cstring> cstr_new_sz4(
    int sz,
  ) {
    return _cstr_new_sz4(
      sz,
    );
  }

  late final _cstr_new_sz4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<cstring> Function(ffi.Int)>>(
          'cstr_new_sz');
  late final _cstr_new_sz4 =
      _cstr_new_sz4Ptr.asFunction<ffi.Pointer<cstring> Function(int)>();

  ffi.Pointer<cstring> cstr_new_buf4(
    ffi.Pointer<ffi.Void> buf,
    int sz,
  ) {
    return _cstr_new_buf4(
      buf,
      sz,
    );
  }

  late final _cstr_new_buf4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cstring> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('cstr_new_buf');
  late final _cstr_new_buf4 = _cstr_new_buf4Ptr
      .asFunction<ffi.Pointer<cstring> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<cstring> cstr_new_cstr4(
    ffi.Pointer<cstring> copy_str,
  ) {
    return _cstr_new_cstr4(
      copy_str,
    );
  }

  late final _cstr_new_cstr4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cstring> Function(
              ffi.Pointer<cstring>)>>('cstr_new_cstr');
  late final _cstr_new_cstr4 = _cstr_new_cstr4Ptr
      .asFunction<ffi.Pointer<cstring> Function(ffi.Pointer<cstring>)>();

  void cstr_free4(
    ffi.Pointer<cstring> s,
    int free_buf,
  ) {
    return _cstr_free4(
      s,
      free_buf,
    );
  }

  late final _cstr_free4Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_free');
  late final _cstr_free4 =
      _cstr_free4Ptr.asFunction<void Function(ffi.Pointer<cstring>, int)>();

  int cstr_equal4(
    ffi.Pointer<cstring> a,
    ffi.Pointer<cstring> b,
  ) {
    return _cstr_equal4(
      a,
      b,
    );
  }

  late final _cstr_equal4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_equal');
  late final _cstr_equal4 = _cstr_equal4Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_compare4(
    ffi.Pointer<cstring> a,
    ffi.Pointer<cstring> b,
  ) {
    return _cstr_compare4(
      a,
      b,
    );
  }

  late final _cstr_compare4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_compare');
  late final _cstr_compare4 = _cstr_compare4Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_resize4(
    ffi.Pointer<cstring> s,
    int sz,
  ) {
    return _cstr_resize4(
      s,
      sz,
    );
  }

  late final _cstr_resize4Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_resize');
  late final _cstr_resize4 =
      _cstr_resize4Ptr.asFunction<int Function(ffi.Pointer<cstring>, int)>();

  int cstr_erase4(
    ffi.Pointer<cstring> s,
    int pos,
    int len,
  ) {
    return _cstr_erase4(
      s,
      pos,
      len,
    );
  }

  late final _cstr_erase4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Int, ssize_t)>>('cstr_erase');
  late final _cstr_erase4 = _cstr_erase4Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, int, int)>();

  int cstr_append_buf4(
    ffi.Pointer<cstring> s,
    ffi.Pointer<ffi.Void> buf,
    int sz,
  ) {
    return _cstr_append_buf4(
      s,
      buf,
      sz,
    );
  }

  late final _cstr_append_buf4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('cstr_append_buf');
  late final _cstr_append_buf4 = _cstr_append_buf4Ptr.asFunction<
      int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Void>, int)>();

  int cstr_append_cstr4(
    ffi.Pointer<cstring> s,
    ffi.Pointer<cstring> append,
  ) {
    return _cstr_append_cstr4(
      s,
      append,
    );
  }

  late final _cstr_append_cstr4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_append_cstr');
  late final _cstr_append_cstr4 = _cstr_append_cstr4Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_append_c4(
    ffi.Pointer<cstring> s,
    int ch,
  ) {
    return _cstr_append_c4(
      s,
      ch,
    );
  }

  late final _cstr_append_c4Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Char)>>(
      'cstr_append_c');
  late final _cstr_append_c4 =
      _cstr_append_c4Ptr.asFunction<int Function(ffi.Pointer<cstring>, int)>();

  int cstr_alloc_minsize4(
    ffi.Pointer<cstring> s,
    int sz,
  ) {
    return _cstr_alloc_minsize4(
      s,
      sz,
    );
  }

  late final _cstr_alloc_minsize4Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_alloc_minsize');
  late final _cstr_alloc_minsize4 = _cstr_alloc_minsize4Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, int)>();

  ffi.Pointer<vector> vector_new3(
    int res,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        free_f,
  ) {
    return _vector_new3(
      res,
      free_f,
    );
  }

  late final _vector_new3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<vector> Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>)>>)>>('vector_new');
  late final _vector_new3 = _vector_new3Ptr.asFunction<
      ffi.Pointer<vector> Function(
          int,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  void vector_free3(
    ffi.Pointer<vector> vec,
    int free_array,
  ) {
    return _vector_free3(
      vec,
      free_array,
    );
  }

  late final _vector_free3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<vector>, dogecoin_bool)>>('vector_free');
  late final _vector_free3 =
      _vector_free3Ptr.asFunction<void Function(ffi.Pointer<vector>, int)>();

  int vector_add3(
    ffi.Pointer<vector> vec,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _vector_add3(
      vec,
      data,
    );
  }

  late final _vector_add3Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>>('vector_add');
  late final _vector_add3 = _vector_add3Ptr
      .asFunction<int Function(ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>();

  int vector_remove3(
    ffi.Pointer<vector> vec,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _vector_remove3(
      vec,
      data,
    );
  }

  late final _vector_remove3Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>>('vector_remove');
  late final _vector_remove3 = _vector_remove3Ptr
      .asFunction<int Function(ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>();

  void vector_remove_idx3(
    ffi.Pointer<vector> vec,
    int idx,
  ) {
    return _vector_remove_idx3(
      vec,
      idx,
    );
  }

  late final _vector_remove_idx3Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<vector>, ffi.Int)>>(
      'vector_remove_idx');
  late final _vector_remove_idx3 = _vector_remove_idx3Ptr
      .asFunction<void Function(ffi.Pointer<vector>, int)>();

  void vector_remove_range3(
    ffi.Pointer<vector> vec,
    int idx,
    int len,
  ) {
    return _vector_remove_range3(
      vec,
      idx,
      len,
    );
  }

  late final _vector_remove_range3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<vector>, ffi.Int, ffi.Int)>>('vector_remove_range');
  late final _vector_remove_range3 = _vector_remove_range3Ptr
      .asFunction<void Function(ffi.Pointer<vector>, int, int)>();

  int vector_resize3(
    ffi.Pointer<vector> vec,
    int newsz,
  ) {
    return _vector_resize3(
      vec,
      newsz,
    );
  }

  late final _vector_resize3Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<vector>, ffi.Int)>>('vector_resize');
  late final _vector_resize3 =
      _vector_resize3Ptr.asFunction<int Function(ffi.Pointer<vector>, int)>();

  int vector_find3(
    ffi.Pointer<vector> vec,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _vector_find3(
      vec,
      data,
    );
  }

  late final _vector_find3Ptr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>>('vector_find');
  late final _vector_find3 = _vector_find3Ptr
      .asFunction<int Function(ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<cmsghdr> __cmsg_nxthdr1(
    ffi.Pointer<msghdr> __mhdr,
    ffi.Pointer<cmsghdr> __cmsg,
  ) {
    return ___cmsg_nxthdr1(
      __mhdr,
      __cmsg,
    );
  }

  late final ___cmsg_nxthdr1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cmsghdr> Function(
              ffi.Pointer<msghdr>, ffi.Pointer<cmsghdr>)>>('__cmsg_nxthdr');
  late final ___cmsg_nxthdr1 = ___cmsg_nxthdr1Ptr.asFunction<
      ffi.Pointer<cmsghdr> Function(
          ffi.Pointer<msghdr>, ffi.Pointer<cmsghdr>)>();

  int socket1(
    int __domain,
    int __type,
    int __protocol,
  ) {
    return _socket1(
      __domain,
      __type,
      __protocol,
    );
  }

  late final _socket1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'socket');
  late final _socket1 = _socket1Ptr.asFunction<int Function(int, int, int)>();

  int socketpair1(
    int __domain,
    int __type,
    int __protocol,
    ffi.Pointer<ffi.Int> __fds,
  ) {
    return _socketpair1(
      __domain,
      __type,
      __protocol,
      __fds,
    );
  }

  late final _socketpair1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>)>>('socketpair');
  late final _socketpair1 = _socketpair1Ptr
      .asFunction<int Function(int, int, int, ffi.Pointer<ffi.Int>)>();

  int bind1(
    int __fd,
    ffi.Pointer<sockaddr> __addr,
    int __len,
  ) {
    return _bind1(
      __fd,
      __addr,
      __len,
    );
  }

  late final _bind1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr>, socklen_t)>>('bind');
  late final _bind1 =
      _bind1Ptr.asFunction<int Function(int, ffi.Pointer<sockaddr>, int)>();

  int getsockname1(
    int __fd,
    ffi.Pointer<sockaddr> __addr,
    ffi.Pointer<socklen_t> __len,
  ) {
    return _getsockname1(
      __fd,
      __addr,
      __len,
    );
  }

  late final _getsockname1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr>,
              ffi.Pointer<socklen_t>)>>('getsockname');
  late final _getsockname1 = _getsockname1Ptr.asFunction<
      int Function(int, ffi.Pointer<sockaddr>, ffi.Pointer<socklen_t>)>();

  int connect1(
    int __fd,
    ffi.Pointer<sockaddr> __addr,
    int __len,
  ) {
    return _connect1(
      __fd,
      __addr,
      __len,
    );
  }

  late final _connect1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<sockaddr>, socklen_t)>>('connect');
  late final _connect1 =
      _connect1Ptr.asFunction<int Function(int, ffi.Pointer<sockaddr>, int)>();

  int getpeername1(
    int __fd,
    ffi.Pointer<sockaddr> __addr,
    ffi.Pointer<socklen_t> __len,
  ) {
    return _getpeername1(
      __fd,
      __addr,
      __len,
    );
  }

  late final _getpeername1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr>,
              ffi.Pointer<socklen_t>)>>('getpeername');
  late final _getpeername1 = _getpeername1Ptr.asFunction<
      int Function(int, ffi.Pointer<sockaddr>, ffi.Pointer<socklen_t>)>();

  int send1(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
    int __flags,
  ) {
    return _send1(
      __fd,
      __buf,
      __n,
      __flags,
    );
  }

  late final _send1Ptr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int, ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('send');
  late final _send1 = _send1Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  int recv1(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
    int __flags,
  ) {
    return _recv1(
      __fd,
      __buf,
      __n,
      __flags,
    );
  }

  late final _recv1Ptr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int, ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('recv');
  late final _recv1 = _recv1Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  int sendto1(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
    int __flags,
    ffi.Pointer<sockaddr> __addr,
    int __addr_len,
  ) {
    return _sendto1(
      __fd,
      __buf,
      __n,
      __flags,
      __addr,
      __addr_len,
    );
  }

  late final _sendto1Ptr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<sockaddr>, socklen_t)>>('sendto');
  late final _sendto1 = _sendto1Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<sockaddr>, int)>();

  int recvfrom1(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
    int __flags,
    ffi.Pointer<sockaddr> __addr,
    ffi.Pointer<socklen_t> __addr_len,
  ) {
    return _recvfrom1(
      __fd,
      __buf,
      __n,
      __flags,
      __addr,
      __addr_len,
    );
  }

  late final _recvfrom1Ptr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<sockaddr>, ffi.Pointer<socklen_t>)>>('recvfrom');
  late final _recvfrom1 = _recvfrom1Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<sockaddr>,
          ffi.Pointer<socklen_t>)>();

  int sendmsg1(
    int __fd,
    ffi.Pointer<msghdr> __message,
    int __flags,
  ) {
    return _sendmsg1(
      __fd,
      __message,
      __flags,
    );
  }

  late final _sendmsg1Ptr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<msghdr>, ffi.Int)>>('sendmsg');
  late final _sendmsg1 =
      _sendmsg1Ptr.asFunction<int Function(int, ffi.Pointer<msghdr>, int)>();

  int recvmsg1(
    int __fd,
    ffi.Pointer<msghdr> __message,
    int __flags,
  ) {
    return _recvmsg1(
      __fd,
      __message,
      __flags,
    );
  }

  late final _recvmsg1Ptr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<msghdr>, ffi.Int)>>('recvmsg');
  late final _recvmsg1 =
      _recvmsg1Ptr.asFunction<int Function(int, ffi.Pointer<msghdr>, int)>();

  int getsockopt1(
    int __fd,
    int __level,
    int __optname,
    ffi.Pointer<ffi.Void> __optval,
    ffi.Pointer<socklen_t> __optlen,
  ) {
    return _getsockopt1(
      __fd,
      __level,
      __optname,
      __optval,
      __optlen,
    );
  }

  late final _getsockopt1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<socklen_t>)>>('getsockopt');
  late final _getsockopt1 = _getsockopt1Ptr.asFunction<
      int Function(
          int, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<socklen_t>)>();

  int setsockopt1(
    int __fd,
    int __level,
    int __optname,
    ffi.Pointer<ffi.Void> __optval,
    int __optlen,
  ) {
    return _setsockopt1(
      __fd,
      __level,
      __optname,
      __optval,
      __optlen,
    );
  }

  late final _setsockopt1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>,
              socklen_t)>>('setsockopt');
  late final _setsockopt1 = _setsockopt1Ptr
      .asFunction<int Function(int, int, int, ffi.Pointer<ffi.Void>, int)>();

  int listen1(
    int __fd,
    int __n,
  ) {
    return _listen1(
      __fd,
      __n,
    );
  }

  late final _listen1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('listen');
  late final _listen1 = _listen1Ptr.asFunction<int Function(int, int)>();

  int accept1(
    int __fd,
    ffi.Pointer<sockaddr> __addr,
    ffi.Pointer<socklen_t> __addr_len,
  ) {
    return _accept1(
      __fd,
      __addr,
      __addr_len,
    );
  }

  late final _accept1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr>,
              ffi.Pointer<socklen_t>)>>('accept');
  late final _accept1 = _accept1Ptr.asFunction<
      int Function(int, ffi.Pointer<sockaddr>, ffi.Pointer<socklen_t>)>();

  int shutdown1(
    int __fd,
    int __how,
  ) {
    return _shutdown1(
      __fd,
      __how,
    );
  }

  late final _shutdown1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'shutdown');
  late final _shutdown1 = _shutdown1Ptr.asFunction<int Function(int, int)>();

  int sockatmark1(
    int __fd,
  ) {
    return _sockatmark1(
      __fd,
    );
  }

  late final _sockatmark1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sockatmark');
  late final _sockatmark1 = _sockatmark1Ptr.asFunction<int Function(int)>();

  int isfdtype1(
    int __fd,
    int __fdtype,
  ) {
    return _isfdtype1(
      __fd,
      __fdtype,
    );
  }

  late final _isfdtype1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'isfdtype');
  late final _isfdtype1 = _isfdtype1Ptr.asFunction<int Function(int, int)>();

  int ntohl1(
    int __netlong,
  ) {
    return _ntohl1(
      __netlong,
    );
  }

  late final _ntohl1Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>>('ntohl');
  late final _ntohl1 = _ntohl1Ptr.asFunction<int Function(int)>();

  int ntohs1(
    int __netshort,
  ) {
    return _ntohs1(
      __netshort,
    );
  }

  late final _ntohs1Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(ffi.Uint16)>>('ntohs');
  late final _ntohs1 = _ntohs1Ptr.asFunction<int Function(int)>();

  int htonl1(
    int __hostlong,
  ) {
    return _htonl1(
      __hostlong,
    );
  }

  late final _htonl1Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>>('htonl');
  late final _htonl1 = _htonl1Ptr.asFunction<int Function(int)>();

  int htons1(
    int __hostshort,
  ) {
    return _htons1(
      __hostshort,
    );
  }

  late final _htons1Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(ffi.Uint16)>>('htons');
  late final _htons1 = _htons1Ptr.asFunction<int Function(int)>();

  int bindresvport1(
    int __sockfd,
    ffi.Pointer<sockaddr_in> __sock_in,
  ) {
    return _bindresvport1(
      __sockfd,
      __sock_in,
    );
  }

  late final _bindresvport1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr_in>)>>('bindresvport');
  late final _bindresvport1 = _bindresvport1Ptr
      .asFunction<int Function(int, ffi.Pointer<sockaddr_in>)>();

  int bindresvport61(
    int __sockfd,
    ffi.Pointer<sockaddr_in6> __sock_in,
  ) {
    return _bindresvport61(
      __sockfd,
      __sock_in,
    );
  }

  late final _bindresvport61Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<sockaddr_in6>)>>('bindresvport6');
  late final _bindresvport61 = _bindresvport61Ptr
      .asFunction<int Function(int, ffi.Pointer<sockaddr_in6>)>();

  int inet_addr1(
    ffi.Pointer<ffi.Char> __cp,
  ) {
    return _inet_addr1(
      __cp,
    );
  }

  late final _inet_addr1Ptr =
      _lookup<ffi.NativeFunction<in_addr_t Function(ffi.Pointer<ffi.Char>)>>(
          'inet_addr');
  late final _inet_addr1 =
      _inet_addr1Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int inet_lnaof1(
    in_addr __in,
  ) {
    return _inet_lnaof1(
      __in,
    );
  }

  late final _inet_lnaof1Ptr =
      _lookup<ffi.NativeFunction<in_addr_t Function(in_addr)>>('inet_lnaof');
  late final _inet_lnaof1 = _inet_lnaof1Ptr.asFunction<int Function(in_addr)>();

  in_addr inet_makeaddr1(
    int __net,
    int __host,
  ) {
    return _inet_makeaddr1(
      __net,
      __host,
    );
  }

  late final _inet_makeaddr1Ptr =
      _lookup<ffi.NativeFunction<in_addr Function(in_addr_t, in_addr_t)>>(
          'inet_makeaddr');
  late final _inet_makeaddr1 =
      _inet_makeaddr1Ptr.asFunction<in_addr Function(int, int)>();

  int inet_netof1(
    in_addr __in,
  ) {
    return _inet_netof1(
      __in,
    );
  }

  late final _inet_netof1Ptr =
      _lookup<ffi.NativeFunction<in_addr_t Function(in_addr)>>('inet_netof');
  late final _inet_netof1 = _inet_netof1Ptr.asFunction<int Function(in_addr)>();

  int inet_network1(
    ffi.Pointer<ffi.Char> __cp,
  ) {
    return _inet_network1(
      __cp,
    );
  }

  late final _inet_network1Ptr =
      _lookup<ffi.NativeFunction<in_addr_t Function(ffi.Pointer<ffi.Char>)>>(
          'inet_network');
  late final _inet_network1 =
      _inet_network1Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> inet_ntoa1(
    in_addr __in,
  ) {
    return _inet_ntoa1(
      __in,
    );
  }

  late final _inet_ntoa1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(in_addr)>>(
          'inet_ntoa');
  late final _inet_ntoa1 =
      _inet_ntoa1Ptr.asFunction<ffi.Pointer<ffi.Char> Function(in_addr)>();

  int inet_pton1(
    int __af,
    ffi.Pointer<ffi.Char> __cp,
    ffi.Pointer<ffi.Void> __buf,
  ) {
    return _inet_pton1(
      __af,
      __cp,
      __buf,
    );
  }

  late final _inet_pton1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('inet_pton');
  late final _inet_pton1 = _inet_pton1Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> inet_ntop1(
    int __af,
    ffi.Pointer<ffi.Void> __cp,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _inet_ntop1(
      __af,
      __cp,
      __buf,
      __len,
    );
  }

  late final _inet_ntop1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>, socklen_t)>>('inet_ntop');
  late final _inet_ntop1 = _inet_ntop1Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, int)>();

  int inet_aton1(
    ffi.Pointer<ffi.Char> __cp,
    ffi.Pointer<in_addr> __inp,
  ) {
    return _inet_aton1(
      __cp,
      __inp,
    );
  }

  late final _inet_aton1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<in_addr>)>>('inet_aton');
  late final _inet_aton1 = _inet_aton1Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<in_addr>)>();

  ffi.Pointer<ffi.Char> inet_neta1(
    int __net,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _inet_neta1(
      __net,
      __buf,
      __len,
    );
  }

  late final _inet_neta1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              in_addr_t, ffi.Pointer<ffi.Char>, ffi.Int)>>('inet_neta');
  late final _inet_neta1 = _inet_neta1Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> inet_net_ntop1(
    int __af,
    ffi.Pointer<ffi.Void> __cp,
    int __bits,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _inet_net_ntop1(
      __af,
      __cp,
      __bits,
      __buf,
      __len,
    );
  }

  late final _inet_net_ntop1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('inet_net_ntop');
  late final _inet_net_ntop1 = _inet_net_ntop1Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          int, ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>, int)>();

  int inet_net_pton1(
    int __af,
    ffi.Pointer<ffi.Char> __cp,
    ffi.Pointer<ffi.Void> __buf,
    int __len,
  ) {
    return _inet_net_pton1(
      __af,
      __cp,
      __buf,
      __len,
    );
  }

  late final _inet_net_pton1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('inet_net_pton');
  late final _inet_net_pton1 = _inet_net_pton1Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>, int)>();

  int inet_nsap_addr1(
    ffi.Pointer<ffi.Char> __cp,
    ffi.Pointer<ffi.UnsignedChar> __buf,
    int __len,
  ) {
    return _inet_nsap_addr1(
      __cp,
      __buf,
      __len,
    );
  }

  late final _inet_nsap_addr1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('inet_nsap_addr');
  late final _inet_nsap_addr1 = _inet_nsap_addr1Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<ffi.Char> inet_nsap_ntoa1(
    int __len,
    ffi.Pointer<ffi.UnsignedChar> __cp,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _inet_nsap_ntoa1(
      __len,
      __cp,
      __buf,
    );
  }

  late final _inet_nsap_ntoa1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Char>)>>('inet_nsap_ntoa');
  late final _inet_nsap_ntoa1 = _inet_nsap_ntoa1Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          int, ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Char>)>();

  void dogecoin_p2p_msg_version_init1(
    ffi.Pointer<dogecoin_p2p_version_msg> msg,
    ffi.Pointer<dogecoin_p2p_address> addrFrom,
    ffi.Pointer<dogecoin_p2p_address> addrTo,
    ffi.Pointer<ffi.Char> strSubVer,
    int relay,
  ) {
    return _dogecoin_p2p_msg_version_init1(
      msg,
      addrFrom,
      addrTo,
      strSubVer,
      relay,
    );
  }

  late final _dogecoin_p2p_msg_version_init1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<dogecoin_p2p_version_msg>,
              ffi.Pointer<dogecoin_p2p_address>,
              ffi.Pointer<dogecoin_p2p_address>,
              ffi.Pointer<ffi.Char>,
              dogecoin_bool)>>('dogecoin_p2p_msg_version_init');
  late final _dogecoin_p2p_msg_version_init1 =
      _dogecoin_p2p_msg_version_init1Ptr.asFunction<
          void Function(
              ffi.Pointer<dogecoin_p2p_version_msg>,
              ffi.Pointer<dogecoin_p2p_address>,
              ffi.Pointer<dogecoin_p2p_address>,
              ffi.Pointer<ffi.Char>,
              int)>();

  void dogecoin_p2p_msg_version_ser1(
    ffi.Pointer<dogecoin_p2p_version_msg> msg,
    ffi.Pointer<cstring> buf,
  ) {
    return _dogecoin_p2p_msg_version_ser1(
      msg,
      buf,
    );
  }

  late final _dogecoin_p2p_msg_version_ser1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_p2p_version_msg>,
              ffi.Pointer<cstring>)>>('dogecoin_p2p_msg_version_ser');
  late final _dogecoin_p2p_msg_version_ser1 =
      _dogecoin_p2p_msg_version_ser1Ptr.asFunction<
          void Function(
              ffi.Pointer<dogecoin_p2p_version_msg>, ffi.Pointer<cstring>)>();

  int dogecoin_p2p_msg_version_deser1(
    ffi.Pointer<dogecoin_p2p_version_msg> msg,
    ffi.Pointer<const_buffer> buf,
  ) {
    return _dogecoin_p2p_msg_version_deser1(
      msg,
      buf,
    );
  }

  late final _dogecoin_p2p_msg_version_deser1Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_p2p_version_msg>,
              ffi.Pointer<const_buffer>)>>('dogecoin_p2p_msg_version_deser');
  late final _dogecoin_p2p_msg_version_deser1 =
      _dogecoin_p2p_msg_version_deser1Ptr.asFunction<
          int Function(ffi.Pointer<dogecoin_p2p_version_msg>,
              ffi.Pointer<const_buffer>)>();

  void dogecoin_p2p_msg_inv_init1(
    ffi.Pointer<dogecoin_p2p_inv_msg> msg,
    int type,
    ffi.Pointer<ffi.Uint8> hash,
  ) {
    return _dogecoin_p2p_msg_inv_init1(
      msg,
      type,
      hash,
    );
  }

  late final _dogecoin_p2p_msg_inv_init1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_p2p_inv_msg>, ffi.Uint32,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_p2p_msg_inv_init');
  late final _dogecoin_p2p_msg_inv_init1 =
      _dogecoin_p2p_msg_inv_init1Ptr.asFunction<
          void Function(ffi.Pointer<dogecoin_p2p_inv_msg>, int,
              ffi.Pointer<ffi.Uint8>)>();

  void dogecoin_p2p_msg_inv_ser1(
    ffi.Pointer<dogecoin_p2p_inv_msg> msg,
    ffi.Pointer<cstring> buf,
  ) {
    return _dogecoin_p2p_msg_inv_ser1(
      msg,
      buf,
    );
  }

  late final _dogecoin_p2p_msg_inv_ser1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_p2p_inv_msg>,
              ffi.Pointer<cstring>)>>('dogecoin_p2p_msg_inv_ser');
  late final _dogecoin_p2p_msg_inv_ser1 =
      _dogecoin_p2p_msg_inv_ser1Ptr.asFunction<
          void Function(
              ffi.Pointer<dogecoin_p2p_inv_msg>, ffi.Pointer<cstring>)>();

  int dogecoin_p2p_msg_inv_deser1(
    ffi.Pointer<dogecoin_p2p_inv_msg> msg,
    ffi.Pointer<const_buffer> buf,
  ) {
    return _dogecoin_p2p_msg_inv_deser1(
      msg,
      buf,
    );
  }

  late final _dogecoin_p2p_msg_inv_deser1Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_p2p_inv_msg>,
              ffi.Pointer<const_buffer>)>>('dogecoin_p2p_msg_inv_deser');
  late final _dogecoin_p2p_msg_inv_deser1 =
      _dogecoin_p2p_msg_inv_deser1Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_p2p_inv_msg>, ffi.Pointer<const_buffer>)>();

  void dogecoin_p2p_address_init1(
    ffi.Pointer<dogecoin_p2p_address> addr,
  ) {
    return _dogecoin_p2p_address_init1(
      addr,
    );
  }

  late final _dogecoin_p2p_address_init1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<dogecoin_p2p_address>)>>('dogecoin_p2p_address_init');
  late final _dogecoin_p2p_address_init1 = _dogecoin_p2p_address_init1Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_p2p_address>)>();

  void dogecoin_addr_to_p2paddr1(
    ffi.Pointer<sockaddr> addr,
    ffi.Pointer<dogecoin_p2p_address> addr_out,
  ) {
    return _dogecoin_addr_to_p2paddr1(
      addr,
      addr_out,
    );
  }

  late final _dogecoin_addr_to_p2paddr1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sockaddr>,
              ffi.Pointer<dogecoin_p2p_address>)>>('dogecoin_addr_to_p2paddr');
  late final _dogecoin_addr_to_p2paddr1 =
      _dogecoin_addr_to_p2paddr1Ptr.asFunction<
          void Function(
              ffi.Pointer<sockaddr>, ffi.Pointer<dogecoin_p2p_address>)>();

  int dogecoin_p2p_deser_addr1(
    int protocol_version,
    ffi.Pointer<dogecoin_p2p_address> addr,
    ffi.Pointer<const_buffer> buf,
  ) {
    return _dogecoin_p2p_deser_addr1(
      protocol_version,
      addr,
      buf,
    );
  }

  late final _dogecoin_p2p_deser_addr1Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.UnsignedInt,
              ffi.Pointer<dogecoin_p2p_address>,
              ffi.Pointer<const_buffer>)>>('dogecoin_p2p_deser_addr');
  late final _dogecoin_p2p_deser_addr1 =
      _dogecoin_p2p_deser_addr1Ptr.asFunction<
          int Function(int, ffi.Pointer<dogecoin_p2p_address>,
              ffi.Pointer<const_buffer>)>();

  void dogecoin_p2p_ser_addr1(
    int protover,
    ffi.Pointer<dogecoin_p2p_address> addr,
    ffi.Pointer<cstring> str_out,
  ) {
    return _dogecoin_p2p_ser_addr1(
      protover,
      addr,
      str_out,
    );
  }

  late final _dogecoin_p2p_ser_addr1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.UnsignedInt, ffi.Pointer<dogecoin_p2p_address>,
              ffi.Pointer<cstring>)>>('dogecoin_p2p_ser_addr');
  late final _dogecoin_p2p_ser_addr1 = _dogecoin_p2p_ser_addr1Ptr.asFunction<
      void Function(
          int, ffi.Pointer<dogecoin_p2p_address>, ffi.Pointer<cstring>)>();

  void dogecoin_p2paddr_to_addr1(
    ffi.Pointer<dogecoin_p2p_address> p2p_addr,
    ffi.Pointer<sockaddr> addr_out,
  ) {
    return _dogecoin_p2paddr_to_addr1(
      p2p_addr,
      addr_out,
    );
  }

  late final _dogecoin_p2paddr_to_addr1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_p2p_address>,
              ffi.Pointer<sockaddr>)>>('dogecoin_p2paddr_to_addr');
  late final _dogecoin_p2paddr_to_addr1 =
      _dogecoin_p2paddr_to_addr1Ptr.asFunction<
          void Function(
              ffi.Pointer<dogecoin_p2p_address>, ffi.Pointer<sockaddr>)>();

  void dogecoin_p2p_deser_msghdr1(
    ffi.Pointer<dogecoin_p2p_msg_hdr> hdr,
    ffi.Pointer<const_buffer> buf,
  ) {
    return _dogecoin_p2p_deser_msghdr1(
      hdr,
      buf,
    );
  }

  late final _dogecoin_p2p_deser_msghdr1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_p2p_msg_hdr>,
              ffi.Pointer<const_buffer>)>>('dogecoin_p2p_deser_msghdr');
  late final _dogecoin_p2p_deser_msghdr1 =
      _dogecoin_p2p_deser_msghdr1Ptr.asFunction<
          void Function(
              ffi.Pointer<dogecoin_p2p_msg_hdr>, ffi.Pointer<const_buffer>)>();

  ffi.Pointer<cstring> dogecoin_p2p_message_new1(
    ffi.Pointer<ffi.UnsignedChar> netmagic,
    ffi.Pointer<ffi.Char> command,
    ffi.Pointer<ffi.Void> data,
    int data_len,
  ) {
    return _dogecoin_p2p_message_new1(
      netmagic,
      command,
      data,
      data_len,
    );
  }

  late final _dogecoin_p2p_message_new1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cstring> Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Uint32)>>('dogecoin_p2p_message_new');
  late final _dogecoin_p2p_message_new1 =
      _dogecoin_p2p_message_new1Ptr.asFunction<
          ffi.Pointer<cstring> Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>, int)>();

  void dogecoin_p2p_msg_getheaders1(
    ffi.Pointer<vector> blocklocators,
    ffi.Pointer<ffi.Uint8> hashstop,
    ffi.Pointer<cstring> str_out,
  ) {
    return _dogecoin_p2p_msg_getheaders1(
      blocklocators,
      hashstop,
      str_out,
    );
  }

  late final _dogecoin_p2p_msg_getheaders1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<vector>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<cstring>)>>('dogecoin_p2p_msg_getheaders');
  late final _dogecoin_p2p_msg_getheaders1 =
      _dogecoin_p2p_msg_getheaders1Ptr.asFunction<
          void Function(ffi.Pointer<vector>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<cstring>)>();

  int dogecoin_p2p_deser_msg_getheaders1(
    ffi.Pointer<vector> blocklocators,
    ffi.Pointer<ffi.Uint8> hashstop,
    ffi.Pointer<const_buffer> buf,
  ) {
    return _dogecoin_p2p_deser_msg_getheaders1(
      blocklocators,
      hashstop,
      buf,
    );
  }

  late final _dogecoin_p2p_deser_msg_getheaders1Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<vector>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<const_buffer>)>>('dogecoin_p2p_deser_msg_getheaders');
  late final _dogecoin_p2p_deser_msg_getheaders1 =
      _dogecoin_p2p_deser_msg_getheaders1Ptr.asFunction<
          int Function(ffi.Pointer<vector>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<const_buffer>)>();

  int remove20(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove20(
      __filename,
    );
  }

  late final _remove20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove20 =
      _remove20Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename20(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename20(
      __old,
      __new,
    );
  }

  late final _rename20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename20 = _rename20Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat20(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat20(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameat20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat20 = _renameat20Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose20(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose20(
      __stream,
    );
  }

  late final _fclose20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose20 =
      _fclose20Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile20() {
    return _tmpfile20();
  }

  late final _tmpfile20Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile20 =
      _tmpfile20Ptr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam20(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam20(
      arg0,
    );
  }

  late final _tmpnam20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam20 = _tmpnam20Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r20(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r20(
      __s,
    );
  }

  late final _tmpnam_r20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r20 = _tmpnam_r20Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam20(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam20(
      __dir,
      __pfx,
    );
  }

  late final _tempnam20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam20 = _tempnam20Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush20(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush20(
      __stream,
    );
  }

  late final _fflush20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush20 =
      _fflush20Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked20(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked20(
      __stream,
    );
  }

  late final _fflush_unlocked20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked20 =
      _fflush_unlocked20Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen20(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen20(
      __filename,
      __modes,
    );
  }

  late final _fopen20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen20 = _fopen20Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen20(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen20(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopen20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen20 = _freopen20Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen20(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen20(
      __fd,
      __modes,
    );
  }

  late final _fdopen20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen20 = _fdopen20Ptr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen20(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen20(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopen20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen20 = _fmemopen20Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream20(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Int> __sizeloc,
  ) {
    return _open_memstream20(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstream20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('open_memstream');
  late final _open_memstream20 = _open_memstream20Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void setbuf20(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf20(
      __stream,
      __buf,
    );
  }

  late final _setbuf20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf20 = _setbuf20Ptr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf20(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf20(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbuf20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('setvbuf');
  late final _setvbuf20 = _setvbuf20Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer20(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer20(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbuffer20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer20 = _setbuffer20Ptr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf20(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf20(
      __stream,
    );
  }

  late final _setlinebuf20Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf20 =
      _setlinebuf20Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf20(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf20(
      __stream,
      __format,
    );
  }

  late final _fprintf20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf20 = _fprintf20Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf20(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf20(
      __format,
    );
  }

  late final _printf20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf20 =
      _printf20Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf20(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf20(
      __s,
      __format,
    );
  }

  late final _sprintf20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf20 = _sprintf20Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf20(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfprintf20(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintf20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfprintf');
  late final _vfprintf20 = _vfprintf20Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vprintf20(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vprintf20(
      __format,
      __arg,
    );
  }

  late final _vprintf20Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vprintf');
  late final _vprintf20 =
      _vprintf20Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsprintf20(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsprintf20(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintf20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsprintf');
  late final _vsprintf20 = _vsprintf20Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int snprintf20(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf20(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintf20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf20 = _snprintf20Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf20(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsnprintf20(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintf20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('vsnprintf');
  late final _vsnprintf20 = _vsnprintf20Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int vdprintf20(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    int __arg,
  ) {
    return _vdprintf20(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintf20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('vdprintf');
  late final _vdprintf20 = _vdprintf20Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int dprintf20(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf20(
      __fd,
      __fmt,
    );
  }

  late final _dprintf20Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf20 =
      _dprintf20Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf40(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf40(
      __stream,
      __format,
    );
  }

  late final _fscanf40Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf40 = _fscanf40Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf40(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf40(
      __format,
    );
  }

  late final _scanf40Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf40 =
      _scanf40Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf40(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf40(
      __s,
      __format,
    );
  }

  late final _sscanf40Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf40 = _sscanf40Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fscanf41(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf41(
      __stream,
      __format,
    );
  }

  late final _fscanf41Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf41 = _fscanf41Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf41(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf41(
      __format,
    );
  }

  late final _scanf41Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf41 =
      _scanf41Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf41(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf41(
      __s,
      __format,
    );
  }

  late final _sscanf41Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf41 = _sscanf41Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf40(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf40(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf40Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf40 = _vfscanf40Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf40(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf40(
      __format,
      __arg,
    );
  }

  late final _vscanf40Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf40 =
      _vscanf40Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf40(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf40(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf40Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf40 = _vsscanf40Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int vfscanf41(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf41(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf41Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf41 = _vfscanf41Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf41(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf41(
      __format,
      __arg,
    );
  }

  late final _vscanf41Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf41 =
      _vscanf41Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf41(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf41(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf41Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf41 = _vsscanf41Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fgetc20(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc20(
      __stream,
    );
  }

  late final _fgetc20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc20 =
      _fgetc20Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc20(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc20(
      __stream,
    );
  }

  late final _getc20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc20 = _getc20Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar20() {
    return _getchar20();
  }

  late final _getchar20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar20 = _getchar20Ptr.asFunction<int Function()>();

  int getc_unlocked20(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked20(
      __stream,
    );
  }

  late final _getc_unlocked20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked20 =
      _getc_unlocked20Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked20() {
    return _getchar_unlocked20();
  }

  late final _getchar_unlocked20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked20 =
      _getchar_unlocked20Ptr.asFunction<int Function()>();

  int fgetc_unlocked20(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked20(
      __stream,
    );
  }

  late final _fgetc_unlocked20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked20 =
      _fgetc_unlocked20Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc20(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc20(
      __c,
      __stream,
    );
  }

  late final _fputc20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc20 =
      _fputc20Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc20(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc20(
      __c,
      __stream,
    );
  }

  late final _putc20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc20 =
      _putc20Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar20(
    int __c,
  ) {
    return _putchar20(
      __c,
    );
  }

  late final _putchar20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar20 = _putchar20Ptr.asFunction<int Function(int)>();

  int fputc_unlocked20(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked20(
      __c,
      __stream,
    );
  }

  late final _fputc_unlocked20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked20 =
      _fputc_unlocked20Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked20(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked20(
      __c,
      __stream,
    );
  }

  late final _putc_unlocked20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked20 =
      _putc_unlocked20Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked20(
    int __c,
  ) {
    return _putchar_unlocked20(
      __c,
    );
  }

  late final _putchar_unlocked20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked20 =
      _putchar_unlocked20Ptr.asFunction<int Function(int)>();

  int getw20(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw20(
      __stream,
    );
  }

  late final _getw20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw20 = _getw20Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw20(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw20(
      __w,
      __stream,
    );
  }

  late final _putw20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw20 =
      _putw20Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets20(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets20(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgets20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets20 = _fgets20Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim20(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim20(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelim20Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim20 = ___getdelim20Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getdelim20(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim20(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelim20Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim20 = _getdelim20Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getline20(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline20(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getline20Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<FILE>)>>('getline');
  late final _getline20 = _getline20Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<FILE>)>();

  int fputs20(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs20(
      __s,
      __stream,
    );
  }

  late final _fputs20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs20 = _fputs20Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts20(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts20(
      __s,
    );
  }

  late final _puts20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts20 =
      _puts20Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc20(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc20(
      __c,
      __stream,
    );
  }

  late final _ungetc20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc20 =
      _ungetc20Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread20(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread20(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread20 = _fread20Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite20(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite20(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwrite20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite20 = _fwrite20Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked20(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked20(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlocked20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked20 = _fread_unlocked20Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked20(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked20(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlocked20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked20 = _fwrite_unlocked20Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek20(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek20(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseek20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek20 =
      _fseek20Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell20(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell20(
      __stream,
    );
  }

  late final _ftell20Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell20 =
      _ftell20Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind20(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind20(
      __stream,
    );
  }

  late final _rewind20Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind20 =
      _rewind20Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko20(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko20(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseeko20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko20 =
      _fseeko20Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello20(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello20(
      __stream,
    );
  }

  late final _ftello20Ptr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello20 =
      _ftello20Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos20(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos20(
      __stream,
      __pos,
    );
  }

  late final _fgetpos20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos20 = _fgetpos20Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos20(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos20(
      __stream,
      __pos,
    );
  }

  late final _fsetpos20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos20 = _fsetpos20Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr20(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr20(
      __stream,
    );
  }

  late final _clearerr20Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr20 =
      _clearerr20Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof20(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof20(
      __stream,
    );
  }

  late final _feof20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof20 = _feof20Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror20(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror20(
      __stream,
    );
  }

  late final _ferror20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror20 =
      _ferror20Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked20(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked20(
      __stream,
    );
  }

  late final _clearerr_unlocked20Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked20 =
      _clearerr_unlocked20Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked20(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked20(
      __stream,
    );
  }

  late final _feof_unlocked20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked20 =
      _feof_unlocked20Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked20(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked20(
      __stream,
    );
  }

  late final _ferror_unlocked20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked20 =
      _ferror_unlocked20Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror20(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror20(
      __s,
    );
  }

  late final _perror20Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror20 =
      _perror20Ptr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno20(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno20(
      __stream,
    );
  }

  late final _fileno20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno20 =
      _fileno20Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked20(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked20(
      __stream,
    );
  }

  late final _fileno_unlocked20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked20 =
      _fileno_unlocked20Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose20(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose20(
      __stream,
    );
  }

  late final _pclose20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose20 =
      _pclose20Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen20(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen20(
      __command,
      __modes,
    );
  }

  late final _popen20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen20 = _popen20Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid20(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid20(
      __s,
    );
  }

  late final _ctermid20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid20 = _ctermid20Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile20(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile20(
      __stream,
    );
  }

  late final _flockfile20Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile20 =
      _flockfile20Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile20(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile20(
      __stream,
    );
  }

  late final _ftrylockfile20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile20 =
      _ftrylockfile20Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile20(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile20(
      __stream,
    );
  }

  late final _funlockfile20Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile20 =
      _funlockfile20Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow20(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow20(
      arg0,
    );
  }

  late final ___uflow20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow20 =
      ___uflow20Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow20(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow20(
      arg0,
      arg1,
    );
  }

  late final ___overflow20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow20 =
      ___overflow20Ptr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __ctype_get_mb_cur_max20() {
    return ___ctype_get_mb_cur_max20();
  }

  late final ___ctype_get_mb_cur_max20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max20 =
      ___ctype_get_mb_cur_max20Ptr.asFunction<int Function()>();

  double atof20(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof20(
      __nptr,
    );
  }

  late final _atof20Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof20 =
      _atof20Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi20(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi20(
      __nptr,
    );
  }

  late final _atoi20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi20 =
      _atoi20Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol20(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol20(
      __nptr,
    );
  }

  late final _atol20Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol20 =
      _atol20Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll20(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll20(
      __nptr,
    );
  }

  late final _atoll20Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll20 =
      _atoll20Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod20(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod20(
      __nptr,
      __endptr,
    );
  }

  late final _strtod20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod20 = _strtod20Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof20(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof20(
      __nptr,
      __endptr,
    );
  }

  late final _strtof20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof20 = _strtof20Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol20(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol20(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol20 = _strtol20Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul20(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul20(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul20 = _strtoul20Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq20(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq20(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq20 = _strtoq20Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq20(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq20(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq20 = _strtouq20Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll20(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll20(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll20 = _strtoll20Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull20(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull20(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull20 = _strtoull20Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a20(
    int __n,
  ) {
    return _l64a20(
      __n,
    );
  }

  late final _l64a20Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a20 =
      _l64a20Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l20(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l20(
      __s,
    );
  }

  late final _a64l20Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l20 =
      _a64l20Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select20(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select20(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select20 = _select20Ptr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect20(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect20(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect20 = _pselect20Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random20() {
    return _random20();
  }

  late final _random20Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random20 = _random20Ptr.asFunction<int Function()>();

  void srandom20(
    int __seed,
  ) {
    return _srandom20(
      __seed,
    );
  }

  late final _srandom20Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom20 = _srandom20Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate20(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate20(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int)>>('initstate');
  late final _initstate20 = _initstate20Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate20(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate20(
      __statebuf,
    );
  }

  late final _setstate20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate20 = _setstate20Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r20(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r20(
      __buf,
      __result,
    );
  }

  late final _random_r20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r20 = _random_r20Ptr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r20(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r20(
      __seed,
      __buf,
    );
  }

  late final _srandom_r20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r20 =
      _srandom_r20Ptr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r20(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r20(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r20 = _initstate_r20Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r20(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r20(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r20 = _setstate_r20Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand20() {
    return _rand20();
  }

  late final _rand20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand20 = _rand20Ptr.asFunction<int Function()>();

  void srand20(
    int __seed,
  ) {
    return _srand20(
      __seed,
    );
  }

  late final _srand20Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand20 = _srand20Ptr.asFunction<void Function(int)>();

  int rand_r20(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r20(
      __seed,
    );
  }

  late final _rand_r20Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r20 =
      _rand_r20Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand4820() {
    return _drand4820();
  }

  late final _drand4820Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand4820 = _drand4820Ptr.asFunction<double Function()>();

  double erand4820(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand4820(
      __xsubi,
    );
  }

  late final _erand4820Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand4820 = _erand4820Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand4820() {
    return _lrand4820();
  }

  late final _lrand4820Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand4820 = _lrand4820Ptr.asFunction<int Function()>();

  int nrand4820(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand4820(
      __xsubi,
    );
  }

  late final _nrand4820Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand4820 =
      _nrand4820Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand4820() {
    return _mrand4820();
  }

  late final _mrand4820Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand4820 = _mrand4820Ptr.asFunction<int Function()>();

  int jrand4820(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand4820(
      __xsubi,
    );
  }

  late final _jrand4820Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand4820 =
      _jrand4820Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand4820(
    int __seedval,
  ) {
    return _srand4820(
      __seedval,
    );
  }

  late final _srand4820Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand4820 = _srand4820Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed4820(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed4820(
      __seed16v,
    );
  }

  late final _seed4820Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed4820 = _seed4820Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong4820(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong4820(
      __param,
    );
  }

  late final _lcong4820Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong4820 =
      _lcong4820Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r20(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r20(
      __buffer,
      __result,
    );
  }

  late final _drand48_r20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r20 = _drand48_r20Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r20(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r20(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r20 = _erand48_r20Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r20(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r20(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r20 = _lrand48_r20Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r20(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r20(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r20 = _nrand48_r20Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r20(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r20(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r20 = _mrand48_r20Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r20(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r20(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r20 = _jrand48_r20Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r20(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r20(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r20 = _srand48_r20Ptr
      .asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r20(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r20(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r20 = _seed48_r20Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r20(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r20(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r20 = _lcong48_r20Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int arc4random20() {
    return _arc4random20();
  }

  late final _arc4random20Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random20 = _arc4random20Ptr.asFunction<int Function()>();

  void arc4random_buf20(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf20(
      __buf,
      __size,
    );
  }

  late final _arc4random_buf20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('arc4random_buf');
  late final _arc4random_buf20 = _arc4random_buf20Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform20(
    int __upper_bound,
  ) {
    return _arc4random_uniform20(
      __upper_bound,
    );
  }

  late final _arc4random_uniform20Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
          'arc4random_uniform');
  late final _arc4random_uniform20 =
      _arc4random_uniform20Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc20(
    int __size,
  ) {
    return _malloc20(
      __size,
    );
  }

  late final _malloc20Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'malloc');
  late final _malloc20 =
      _malloc20Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc20(
    int __nmemb,
    int __size,
  ) {
    return _calloc20(
      __nmemb,
      __size,
    );
  }

  late final _calloc20Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'calloc');
  late final _calloc20 =
      _calloc20Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc20(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc20(
      __ptr,
      __size,
    );
  }

  late final _realloc20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('realloc');
  late final _realloc20 = _realloc20Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free20(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free20(
      __ptr,
    );
  }

  late final _free20Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free20 =
      _free20Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray40(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray40(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray40Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray40 = _reallocarray40Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray41(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray41(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray41Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray41 = _reallocarray41Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca20(
    int __size,
  ) {
    return _alloca20(
      __size,
    );
  }

  late final _alloca20Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'alloca');
  late final _alloca20 =
      _alloca20Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc20(
    int __size,
  ) {
    return _valloc20(
      __size,
    );
  }

  late final _valloc20Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'valloc');
  late final _valloc20 =
      _valloc20Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign20(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign20(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int,
              ffi.Int)>>('posix_memalign');
  late final _posix_memalign20 = _posix_memalign20Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc20(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc20(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc20Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'aligned_alloc');
  late final _aligned_alloc20 = _aligned_alloc20Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort20() {
    return _abort20();
  }

  late final _abort20Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort20 = _abort20Ptr.asFunction<void Function()>();

  int atexit20(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit20(
      __func,
    );
  }

  late final _atexit20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit20 = _atexit20Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit20(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit20(
      __func,
    );
  }

  late final _at_quick_exit20Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit20 = _at_quick_exit20Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit20(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit20(
      __func,
      __arg,
    );
  }

  late final _on_exit20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit20 = _on_exit20Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit20(
    int __status,
  ) {
    return _exit20(
      __status,
    );
  }

  late final _exit20Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit20 = _exit20Ptr.asFunction<void Function(int)>();

  void quick_exit20(
    int __status,
  ) {
    return _quick_exit20(
      __status,
    );
  }

  late final _quick_exit20Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit20 = _quick_exit20Ptr.asFunction<void Function(int)>();

  void _Exit20(
    int __status,
  ) {
    return __Exit20(
      __status,
    );
  }

  late final __Exit20Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit20 = __Exit20Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv20(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv20(
      __name,
    );
  }

  late final _getenv20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv20 = _getenv20Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv20(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv20(
      __string,
    );
  }

  late final _putenv20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv20 =
      _putenv20Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv20(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv20(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv20 = _setenv20Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv20(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv20(
      __name,
    );
  }

  late final _unsetenv20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv20 =
      _unsetenv20Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv20() {
    return _clearenv20();
  }

  late final _clearenv20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv20 = _clearenv20Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp20(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp20(
      __template,
    );
  }

  late final _mktemp20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp20 = _mktemp20Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp20(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp20(
      __template,
    );
  }

  late final _mkstemp20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp20 =
      _mkstemp20Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps20(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps20(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps20Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps20 =
      _mkstemps20Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp20(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp20(
      __template,
    );
  }

  late final _mkdtemp20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp20 = _mkdtemp20Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system20(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system20(
      __command,
    );
  }

  late final _system20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system20 =
      _system20Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath20(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath20(
      __name,
      __resolved,
    );
  }

  late final _realpath20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath20 = _realpath20Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch20(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch20(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              __compar_fn_t)>>('bsearch');
  late final _bsearch20 = _bsearch20Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort20(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort20(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              __compar_fn_t)>>('qsort');
  late final _qsort20 = _qsort20Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs20(
    int __x,
  ) {
    return _abs20(
      __x,
    );
  }

  late final _abs20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs20 = _abs20Ptr.asFunction<int Function(int)>();

  int labs20(
    int __x,
  ) {
    return _labs20(
      __x,
    );
  }

  late final _labs20Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs20 = _labs20Ptr.asFunction<int Function(int)>();

  int llabs20(
    int __x,
  ) {
    return _llabs20(
      __x,
    );
  }

  late final _llabs20Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs20 = _llabs20Ptr.asFunction<int Function(int)>();

  div_t div20(
    int __numer,
    int __denom,
  ) {
    return _div20(
      __numer,
      __denom,
    );
  }

  late final _div20Ptr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div20 = _div20Ptr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv20(
    int __numer,
    int __denom,
  ) {
    return _ldiv20(
      __numer,
      __denom,
    );
  }

  late final _ldiv20Ptr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv20 = _ldiv20Ptr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv20(
    int __numer,
    int __denom,
  ) {
    return _lldiv20(
      __numer,
      __denom,
    );
  }

  late final _lldiv20Ptr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv20 = _lldiv20Ptr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt20(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt20(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt20 = _ecvt20Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt20(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt20(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt20 = _fcvt20Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt20(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt20(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt20 = _gcvt20Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r20(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r20(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('ecvt_r');
  late final _ecvt_r20 = _ecvt_r20Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r20(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r20(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('fcvt_r');
  late final _fcvt_r20 = _fcvt_r20Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen20(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen20(
      __s,
      __n,
    );
  }

  late final _mblen20Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mblen');
  late final _mblen20 =
      _mblen20Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc20(
    ffi.Pointer<ffi.Int> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc20(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('mbtowc');
  late final _mbtowc20 = _mbtowc20Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb20(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb20(
      __s,
      __wchar,
    );
  }

  late final _wctomb20Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'wctomb');
  late final _wctomb20 =
      _wctomb20Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs20(
    ffi.Pointer<ffi.Int> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs20(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mbstowcs');
  late final _mbstowcs20 = _mbstowcs20Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs20(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Int> __pwcs,
    int __n,
  ) {
    return _wcstombs20(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('wcstombs');
  late final _wcstombs20 = _wcstombs20Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  int rpmatch20(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch20(
      __response,
    );
  }

  late final _rpmatch20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch20 =
      _rpmatch20Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt20(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt20(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt20 = _getsubopt20Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg20(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg20(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg20 =
      _getloadavg20Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Void> memcpy20(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy20(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpy20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memcpy');
  late final _memcpy20 = _memcpy20Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove20(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove20(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmove20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memmove');
  late final _memmove20 = _memmove20Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy20(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy20(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpy20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memccpy');
  late final _memccpy20 = _memccpy20Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset20(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset20(
      __s,
      __c,
      __n,
    );
  }

  late final _memset20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memset');
  late final _memset20 = _memset20Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp20(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp20(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmp20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('memcmp');
  late final _memcmp20 = _memcmp20Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq20(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq20(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeq20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__memcmpeq');
  late final ___memcmpeq20 = ___memcmpeq20Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr20(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr20(
      __s,
      __c,
      __n,
    );
  }

  late final _memchr20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memchr');
  late final _memchr20 = _memchr20Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy20(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy20(
      __dest,
      __src,
    );
  }

  late final _strcpy20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy20 = _strcpy20Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy20(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy20(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpy20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncpy');
  late final _strncpy20 = _strncpy20Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat20(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat20(
      __dest,
      __src,
    );
  }

  late final _strcat20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat20 = _strcat20Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat20(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat20(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncat20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncat');
  late final _strncat20 = _strncat20Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp20(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp20(
      __s1,
      __s2,
    );
  }

  late final _strcmp20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp20 = _strcmp20Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp20(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp20(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmp20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncmp');
  late final _strncmp20 = _strncmp20Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll20(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll20(
      __s1,
      __s2,
    );
  }

  late final _strcoll20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll20 = _strcoll20Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm20(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm20(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrm20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strxfrm');
  late final _strxfrm20 = _strxfrm20Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l20(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l20(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_l20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l20 = _strcoll_l20Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l20(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l20(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_l20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strxfrm_l');
  late final _strxfrm_l20 = _strxfrm_l20Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup20(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup20(
      __s,
    );
  }

  late final _strdup20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup20 = _strdup20Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup20(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup20(
      __string,
      __n,
    );
  }

  late final _strndup20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strndup');
  late final _strndup20 = _strndup20Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr20(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr20(
      __s,
      __c,
    );
  }

  late final _strchr20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr20 = _strchr20Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr20(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr20(
      __s,
      __c,
    );
  }

  late final _strrchr20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr20 = _strrchr20Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn20(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn20(
      __s,
      __reject,
    );
  }

  late final _strcspn20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn20 = _strcspn20Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn20(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn20(
      __s,
      __accept,
    );
  }

  late final _strspn20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn20 = _strspn20Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk20(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk20(
      __s,
      __accept,
    );
  }

  late final _strpbrk20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk20 = _strpbrk20Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr20(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr20(
      __haystack,
      __needle,
    );
  }

  late final _strstr20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr20 = _strstr20Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok20(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok20(
      __s,
      __delim,
    );
  }

  late final _strtok20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok20 = _strtok20Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r20(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r20(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_r20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r20 = ___strtok_r20Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r20(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r20(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_r20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r20 = _strtok_r20Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen20(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen20(
      __s,
    );
  }

  late final _strlen20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'strlen');
  late final _strlen20 =
      _strlen20Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen20(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen20(
      __string,
      __maxlen,
    );
  }

  late final _strnlen20Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'strnlen');
  late final _strnlen20 =
      _strnlen20Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror20(
    int __errnum,
  ) {
    return _strerror20(
      __errnum,
    );
  }

  late final _strerror20Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror20 =
      _strerror20Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r20(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r20(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_r20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('strerror_r');
  late final _strerror_r20 = _strerror_r20Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l20(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l20(
      __errnum,
      __l,
    );
  }

  late final _strerror_l20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l20 = _strerror_l20Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp20(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp20(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmp20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcmp');
  late final _bcmp20 = _bcmp20Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy20(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy20(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopy20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcopy');
  late final _bcopy20 = _bcopy20Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero20(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero20(
      __s,
      __n,
    );
  }

  late final _bzero20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('bzero');
  late final _bzero20 =
      _bzero20Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index20(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index20(
      __s,
      __c,
    );
  }

  late final _index20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index20 = _index20Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex20(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex20(
      __s,
      __c,
    );
  }

  late final _rindex20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex20 = _rindex20Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs20(
    int __i,
  ) {
    return _ffs20(
      __i,
    );
  }

  late final _ffs20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs20 = _ffs20Ptr.asFunction<int Function(int)>();

  int ffsl20(
    int __l,
  ) {
    return _ffsl20(
      __l,
    );
  }

  late final _ffsl20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl20 = _ffsl20Ptr.asFunction<int Function(int)>();

  int ffsll20(
    int __ll,
  ) {
    return _ffsll20(
      __ll,
    );
  }

  late final _ffsll20Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll20 = _ffsll20Ptr.asFunction<int Function(int)>();

  int strcasecmp20(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp20(
      __s1,
      __s2,
    );
  }

  late final _strcasecmp20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp20 = _strcasecmp20Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp20(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp20(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmp20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncasecmp');
  late final _strncasecmp20 = _strncasecmp20Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l20(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l20(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_l20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l20 = _strcasecmp_l20Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l20(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l20(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_l20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l20 = _strncasecmp_l20Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero20(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero20(
      __s,
      __n,
    );
  }

  late final _explicit_bzero20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('explicit_bzero');
  late final _explicit_bzero20 = _explicit_bzero20Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep20(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep20(
      __stringp,
      __delim,
    );
  }

  late final _strsep20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep20 = _strsep20Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal20(
    int __sig,
  ) {
    return _strsignal20(
      __sig,
    );
  }

  late final _strsignal20Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal20 =
      _strsignal20Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy20(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy20(
      __dest,
      __src,
    );
  }

  late final ___stpcpy20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy20 = ___stpcpy20Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy20(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy20(
      __dest,
      __src,
    );
  }

  late final _stpcpy20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy20 = _stpcpy20Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy20(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy20(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpy20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('__stpncpy');
  late final ___stpncpy20 = ___stpncpy20Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy20(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy20(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpy20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('stpncpy');
  late final _stpncpy20 = _stpncpy20Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void dogecoin_rnd_set_mapper(
    dogecoin_rnd_mapper mapper,
  ) {
    return _dogecoin_rnd_set_mapper(
      mapper,
    );
  }

  late final _dogecoin_rnd_set_mapperPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dogecoin_rnd_mapper)>>(
          'dogecoin_rnd_set_mapper');
  late final _dogecoin_rnd_set_mapper = _dogecoin_rnd_set_mapperPtr
      .asFunction<void Function(dogecoin_rnd_mapper)>();

  void dogecoin_rnd_set_mapper_default() {
    return _dogecoin_rnd_set_mapper_default();
  }

  late final _dogecoin_rnd_set_mapper_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'dogecoin_rnd_set_mapper_default');
  late final _dogecoin_rnd_set_mapper_default =
      _dogecoin_rnd_set_mapper_defaultPtr.asFunction<void Function()>();

  void dogecoin_random_init() {
    return _dogecoin_random_init();
  }

  late final _dogecoin_random_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('dogecoin_random_init');
  late final _dogecoin_random_init =
      _dogecoin_random_initPtr.asFunction<void Function()>();

  int dogecoin_random_bytes(
    ffi.Pointer<ffi.Uint8> buf,
    int len,
    int update_seed,
  ) {
    return _dogecoin_random_bytes(
      buf,
      len,
      update_seed,
    );
  }

  late final _dogecoin_random_bytesPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<ffi.Uint8>, ffi.Uint32,
              ffi.Uint8)>>('dogecoin_random_bytes');
  late final _dogecoin_random_bytes = _dogecoin_random_bytesPtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  int remove21(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove21(
      __filename,
    );
  }

  late final _remove21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove21 =
      _remove21Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename21(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename21(
      __old,
      __new,
    );
  }

  late final _rename21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename21 = _rename21Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat21(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat21(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameat21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat21 = _renameat21Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose21(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose21(
      __stream,
    );
  }

  late final _fclose21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose21 =
      _fclose21Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile21() {
    return _tmpfile21();
  }

  late final _tmpfile21Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile21 =
      _tmpfile21Ptr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam21(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam21(
      arg0,
    );
  }

  late final _tmpnam21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam21 = _tmpnam21Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r21(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r21(
      __s,
    );
  }

  late final _tmpnam_r21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r21 = _tmpnam_r21Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam21(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam21(
      __dir,
      __pfx,
    );
  }

  late final _tempnam21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam21 = _tempnam21Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush21(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush21(
      __stream,
    );
  }

  late final _fflush21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush21 =
      _fflush21Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked21(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked21(
      __stream,
    );
  }

  late final _fflush_unlocked21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked21 =
      _fflush_unlocked21Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen21(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen21(
      __filename,
      __modes,
    );
  }

  late final _fopen21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen21 = _fopen21Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen21(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen21(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopen21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen21 = _freopen21Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen21(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen21(
      __fd,
      __modes,
    );
  }

  late final _fdopen21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen21 = _fdopen21Ptr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen21(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen21(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopen21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen21 = _fmemopen21Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream21(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Int> __sizeloc,
  ) {
    return _open_memstream21(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstream21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('open_memstream');
  late final _open_memstream21 = _open_memstream21Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void setbuf21(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf21(
      __stream,
      __buf,
    );
  }

  late final _setbuf21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf21 = _setbuf21Ptr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf21(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf21(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbuf21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('setvbuf');
  late final _setvbuf21 = _setvbuf21Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer21(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer21(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbuffer21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer21 = _setbuffer21Ptr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf21(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf21(
      __stream,
    );
  }

  late final _setlinebuf21Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf21 =
      _setlinebuf21Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf21(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf21(
      __stream,
      __format,
    );
  }

  late final _fprintf21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf21 = _fprintf21Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf21(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf21(
      __format,
    );
  }

  late final _printf21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf21 =
      _printf21Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf21(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf21(
      __s,
      __format,
    );
  }

  late final _sprintf21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf21 = _sprintf21Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf21(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfprintf21(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintf21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfprintf');
  late final _vfprintf21 = _vfprintf21Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vprintf21(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vprintf21(
      __format,
      __arg,
    );
  }

  late final _vprintf21Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vprintf');
  late final _vprintf21 =
      _vprintf21Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsprintf21(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsprintf21(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintf21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsprintf');
  late final _vsprintf21 = _vsprintf21Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int snprintf21(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf21(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintf21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf21 = _snprintf21Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf21(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsnprintf21(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintf21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('vsnprintf');
  late final _vsnprintf21 = _vsnprintf21Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int vdprintf21(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    int __arg,
  ) {
    return _vdprintf21(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintf21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('vdprintf');
  late final _vdprintf21 = _vdprintf21Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int dprintf21(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf21(
      __fd,
      __fmt,
    );
  }

  late final _dprintf21Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf21 =
      _dprintf21Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf42(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf42(
      __stream,
      __format,
    );
  }

  late final _fscanf42Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf42 = _fscanf42Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf42(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf42(
      __format,
    );
  }

  late final _scanf42Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf42 =
      _scanf42Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf42(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf42(
      __s,
      __format,
    );
  }

  late final _sscanf42Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf42 = _sscanf42Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fscanf43(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf43(
      __stream,
      __format,
    );
  }

  late final _fscanf43Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf43 = _fscanf43Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf43(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf43(
      __format,
    );
  }

  late final _scanf43Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf43 =
      _scanf43Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf43(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf43(
      __s,
      __format,
    );
  }

  late final _sscanf43Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf43 = _sscanf43Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf42(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf42(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf42Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf42 = _vfscanf42Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf42(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf42(
      __format,
      __arg,
    );
  }

  late final _vscanf42Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf42 =
      _vscanf42Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf42(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf42(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf42Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf42 = _vsscanf42Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int vfscanf43(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf43(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf43Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf43 = _vfscanf43Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf43(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf43(
      __format,
      __arg,
    );
  }

  late final _vscanf43Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf43 =
      _vscanf43Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf43(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf43(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf43Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf43 = _vsscanf43Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fgetc21(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc21(
      __stream,
    );
  }

  late final _fgetc21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc21 =
      _fgetc21Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc21(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc21(
      __stream,
    );
  }

  late final _getc21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc21 = _getc21Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar21() {
    return _getchar21();
  }

  late final _getchar21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar21 = _getchar21Ptr.asFunction<int Function()>();

  int getc_unlocked21(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked21(
      __stream,
    );
  }

  late final _getc_unlocked21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked21 =
      _getc_unlocked21Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked21() {
    return _getchar_unlocked21();
  }

  late final _getchar_unlocked21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked21 =
      _getchar_unlocked21Ptr.asFunction<int Function()>();

  int fgetc_unlocked21(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked21(
      __stream,
    );
  }

  late final _fgetc_unlocked21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked21 =
      _fgetc_unlocked21Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc21(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc21(
      __c,
      __stream,
    );
  }

  late final _fputc21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc21 =
      _fputc21Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc21(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc21(
      __c,
      __stream,
    );
  }

  late final _putc21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc21 =
      _putc21Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar21(
    int __c,
  ) {
    return _putchar21(
      __c,
    );
  }

  late final _putchar21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar21 = _putchar21Ptr.asFunction<int Function(int)>();

  int fputc_unlocked21(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked21(
      __c,
      __stream,
    );
  }

  late final _fputc_unlocked21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked21 =
      _fputc_unlocked21Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked21(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked21(
      __c,
      __stream,
    );
  }

  late final _putc_unlocked21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked21 =
      _putc_unlocked21Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked21(
    int __c,
  ) {
    return _putchar_unlocked21(
      __c,
    );
  }

  late final _putchar_unlocked21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked21 =
      _putchar_unlocked21Ptr.asFunction<int Function(int)>();

  int getw21(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw21(
      __stream,
    );
  }

  late final _getw21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw21 = _getw21Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw21(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw21(
      __w,
      __stream,
    );
  }

  late final _putw21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw21 =
      _putw21Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets21(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets21(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgets21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets21 = _fgets21Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim21(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim21(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelim21Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim21 = ___getdelim21Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getdelim21(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim21(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelim21Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim21 = _getdelim21Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getline21(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline21(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getline21Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<FILE>)>>('getline');
  late final _getline21 = _getline21Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<FILE>)>();

  int fputs21(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs21(
      __s,
      __stream,
    );
  }

  late final _fputs21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs21 = _fputs21Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts21(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts21(
      __s,
    );
  }

  late final _puts21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts21 =
      _puts21Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc21(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc21(
      __c,
      __stream,
    );
  }

  late final _ungetc21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc21 =
      _ungetc21Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread21(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread21(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread21 = _fread21Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite21(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite21(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwrite21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite21 = _fwrite21Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked21(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked21(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlocked21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked21 = _fread_unlocked21Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked21(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked21(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlocked21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked21 = _fwrite_unlocked21Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek21(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek21(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseek21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek21 =
      _fseek21Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell21(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell21(
      __stream,
    );
  }

  late final _ftell21Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell21 =
      _ftell21Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind21(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind21(
      __stream,
    );
  }

  late final _rewind21Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind21 =
      _rewind21Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko21(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko21(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseeko21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko21 =
      _fseeko21Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello21(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello21(
      __stream,
    );
  }

  late final _ftello21Ptr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello21 =
      _ftello21Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos21(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos21(
      __stream,
      __pos,
    );
  }

  late final _fgetpos21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos21 = _fgetpos21Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos21(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos21(
      __stream,
      __pos,
    );
  }

  late final _fsetpos21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos21 = _fsetpos21Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr21(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr21(
      __stream,
    );
  }

  late final _clearerr21Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr21 =
      _clearerr21Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof21(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof21(
      __stream,
    );
  }

  late final _feof21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof21 = _feof21Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror21(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror21(
      __stream,
    );
  }

  late final _ferror21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror21 =
      _ferror21Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked21(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked21(
      __stream,
    );
  }

  late final _clearerr_unlocked21Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked21 =
      _clearerr_unlocked21Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked21(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked21(
      __stream,
    );
  }

  late final _feof_unlocked21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked21 =
      _feof_unlocked21Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked21(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked21(
      __stream,
    );
  }

  late final _ferror_unlocked21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked21 =
      _ferror_unlocked21Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror21(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror21(
      __s,
    );
  }

  late final _perror21Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror21 =
      _perror21Ptr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno21(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno21(
      __stream,
    );
  }

  late final _fileno21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno21 =
      _fileno21Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked21(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked21(
      __stream,
    );
  }

  late final _fileno_unlocked21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked21 =
      _fileno_unlocked21Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose21(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose21(
      __stream,
    );
  }

  late final _pclose21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose21 =
      _pclose21Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen21(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen21(
      __command,
      __modes,
    );
  }

  late final _popen21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen21 = _popen21Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid21(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid21(
      __s,
    );
  }

  late final _ctermid21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid21 = _ctermid21Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile21(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile21(
      __stream,
    );
  }

  late final _flockfile21Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile21 =
      _flockfile21Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile21(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile21(
      __stream,
    );
  }

  late final _ftrylockfile21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile21 =
      _ftrylockfile21Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile21(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile21(
      __stream,
    );
  }

  late final _funlockfile21Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile21 =
      _funlockfile21Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow21(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow21(
      arg0,
    );
  }

  late final ___uflow21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow21 =
      ___uflow21Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow21(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow21(
      arg0,
      arg1,
    );
  }

  late final ___overflow21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow21 =
      ___overflow21Ptr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __ctype_get_mb_cur_max21() {
    return ___ctype_get_mb_cur_max21();
  }

  late final ___ctype_get_mb_cur_max21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max21 =
      ___ctype_get_mb_cur_max21Ptr.asFunction<int Function()>();

  double atof21(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof21(
      __nptr,
    );
  }

  late final _atof21Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof21 =
      _atof21Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi21(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi21(
      __nptr,
    );
  }

  late final _atoi21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi21 =
      _atoi21Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol21(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol21(
      __nptr,
    );
  }

  late final _atol21Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol21 =
      _atol21Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll21(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll21(
      __nptr,
    );
  }

  late final _atoll21Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll21 =
      _atoll21Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod21(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod21(
      __nptr,
      __endptr,
    );
  }

  late final _strtod21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod21 = _strtod21Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof21(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof21(
      __nptr,
      __endptr,
    );
  }

  late final _strtof21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof21 = _strtof21Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol21(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol21(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol21 = _strtol21Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul21(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul21(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul21 = _strtoul21Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq21(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq21(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq21 = _strtoq21Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq21(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq21(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq21 = _strtouq21Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll21(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll21(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll21 = _strtoll21Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull21(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull21(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull21 = _strtoull21Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a21(
    int __n,
  ) {
    return _l64a21(
      __n,
    );
  }

  late final _l64a21Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a21 =
      _l64a21Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l21(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l21(
      __s,
    );
  }

  late final _a64l21Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l21 =
      _a64l21Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select21(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select21(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select21 = _select21Ptr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect21(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect21(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect21 = _pselect21Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random21() {
    return _random21();
  }

  late final _random21Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random21 = _random21Ptr.asFunction<int Function()>();

  void srandom21(
    int __seed,
  ) {
    return _srandom21(
      __seed,
    );
  }

  late final _srandom21Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom21 = _srandom21Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate21(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate21(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int)>>('initstate');
  late final _initstate21 = _initstate21Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate21(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate21(
      __statebuf,
    );
  }

  late final _setstate21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate21 = _setstate21Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r21(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r21(
      __buf,
      __result,
    );
  }

  late final _random_r21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r21 = _random_r21Ptr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r21(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r21(
      __seed,
      __buf,
    );
  }

  late final _srandom_r21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r21 =
      _srandom_r21Ptr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r21(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r21(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r21 = _initstate_r21Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r21(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r21(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r21 = _setstate_r21Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand21() {
    return _rand21();
  }

  late final _rand21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand21 = _rand21Ptr.asFunction<int Function()>();

  void srand21(
    int __seed,
  ) {
    return _srand21(
      __seed,
    );
  }

  late final _srand21Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand21 = _srand21Ptr.asFunction<void Function(int)>();

  int rand_r21(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r21(
      __seed,
    );
  }

  late final _rand_r21Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r21 =
      _rand_r21Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand4821() {
    return _drand4821();
  }

  late final _drand4821Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand4821 = _drand4821Ptr.asFunction<double Function()>();

  double erand4821(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand4821(
      __xsubi,
    );
  }

  late final _erand4821Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand4821 = _erand4821Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand4821() {
    return _lrand4821();
  }

  late final _lrand4821Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand4821 = _lrand4821Ptr.asFunction<int Function()>();

  int nrand4821(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand4821(
      __xsubi,
    );
  }

  late final _nrand4821Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand4821 =
      _nrand4821Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand4821() {
    return _mrand4821();
  }

  late final _mrand4821Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand4821 = _mrand4821Ptr.asFunction<int Function()>();

  int jrand4821(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand4821(
      __xsubi,
    );
  }

  late final _jrand4821Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand4821 =
      _jrand4821Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand4821(
    int __seedval,
  ) {
    return _srand4821(
      __seedval,
    );
  }

  late final _srand4821Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand4821 = _srand4821Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed4821(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed4821(
      __seed16v,
    );
  }

  late final _seed4821Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed4821 = _seed4821Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong4821(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong4821(
      __param,
    );
  }

  late final _lcong4821Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong4821 =
      _lcong4821Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r21(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r21(
      __buffer,
      __result,
    );
  }

  late final _drand48_r21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r21 = _drand48_r21Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r21(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r21(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r21 = _erand48_r21Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r21(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r21(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r21 = _lrand48_r21Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r21(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r21(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r21 = _nrand48_r21Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r21(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r21(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r21 = _mrand48_r21Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r21(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r21(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r21 = _jrand48_r21Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r21(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r21(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r21 = _srand48_r21Ptr
      .asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r21(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r21(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r21 = _seed48_r21Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r21(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r21(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r21 = _lcong48_r21Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int arc4random21() {
    return _arc4random21();
  }

  late final _arc4random21Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random21 = _arc4random21Ptr.asFunction<int Function()>();

  void arc4random_buf21(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf21(
      __buf,
      __size,
    );
  }

  late final _arc4random_buf21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('arc4random_buf');
  late final _arc4random_buf21 = _arc4random_buf21Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform21(
    int __upper_bound,
  ) {
    return _arc4random_uniform21(
      __upper_bound,
    );
  }

  late final _arc4random_uniform21Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
          'arc4random_uniform');
  late final _arc4random_uniform21 =
      _arc4random_uniform21Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc21(
    int __size,
  ) {
    return _malloc21(
      __size,
    );
  }

  late final _malloc21Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'malloc');
  late final _malloc21 =
      _malloc21Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc21(
    int __nmemb,
    int __size,
  ) {
    return _calloc21(
      __nmemb,
      __size,
    );
  }

  late final _calloc21Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'calloc');
  late final _calloc21 =
      _calloc21Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc21(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc21(
      __ptr,
      __size,
    );
  }

  late final _realloc21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('realloc');
  late final _realloc21 = _realloc21Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free21(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free21(
      __ptr,
    );
  }

  late final _free21Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free21 =
      _free21Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray42(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray42(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray42Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray42 = _reallocarray42Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray43(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray43(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray43Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray43 = _reallocarray43Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca21(
    int __size,
  ) {
    return _alloca21(
      __size,
    );
  }

  late final _alloca21Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'alloca');
  late final _alloca21 =
      _alloca21Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc21(
    int __size,
  ) {
    return _valloc21(
      __size,
    );
  }

  late final _valloc21Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'valloc');
  late final _valloc21 =
      _valloc21Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign21(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign21(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int,
              ffi.Int)>>('posix_memalign');
  late final _posix_memalign21 = _posix_memalign21Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc21(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc21(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc21Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'aligned_alloc');
  late final _aligned_alloc21 = _aligned_alloc21Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort21() {
    return _abort21();
  }

  late final _abort21Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort21 = _abort21Ptr.asFunction<void Function()>();

  int atexit21(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit21(
      __func,
    );
  }

  late final _atexit21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit21 = _atexit21Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit21(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit21(
      __func,
    );
  }

  late final _at_quick_exit21Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit21 = _at_quick_exit21Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit21(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit21(
      __func,
      __arg,
    );
  }

  late final _on_exit21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit21 = _on_exit21Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit21(
    int __status,
  ) {
    return _exit21(
      __status,
    );
  }

  late final _exit21Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit21 = _exit21Ptr.asFunction<void Function(int)>();

  void quick_exit21(
    int __status,
  ) {
    return _quick_exit21(
      __status,
    );
  }

  late final _quick_exit21Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit21 = _quick_exit21Ptr.asFunction<void Function(int)>();

  void _Exit21(
    int __status,
  ) {
    return __Exit21(
      __status,
    );
  }

  late final __Exit21Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit21 = __Exit21Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv21(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv21(
      __name,
    );
  }

  late final _getenv21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv21 = _getenv21Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv21(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv21(
      __string,
    );
  }

  late final _putenv21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv21 =
      _putenv21Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv21(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv21(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv21 = _setenv21Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv21(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv21(
      __name,
    );
  }

  late final _unsetenv21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv21 =
      _unsetenv21Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv21() {
    return _clearenv21();
  }

  late final _clearenv21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv21 = _clearenv21Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp21(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp21(
      __template,
    );
  }

  late final _mktemp21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp21 = _mktemp21Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp21(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp21(
      __template,
    );
  }

  late final _mkstemp21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp21 =
      _mkstemp21Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps21(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps21(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps21Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps21 =
      _mkstemps21Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp21(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp21(
      __template,
    );
  }

  late final _mkdtemp21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp21 = _mkdtemp21Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system21(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system21(
      __command,
    );
  }

  late final _system21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system21 =
      _system21Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath21(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath21(
      __name,
      __resolved,
    );
  }

  late final _realpath21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath21 = _realpath21Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch21(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch21(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              __compar_fn_t)>>('bsearch');
  late final _bsearch21 = _bsearch21Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort21(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort21(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              __compar_fn_t)>>('qsort');
  late final _qsort21 = _qsort21Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs21(
    int __x,
  ) {
    return _abs21(
      __x,
    );
  }

  late final _abs21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs21 = _abs21Ptr.asFunction<int Function(int)>();

  int labs21(
    int __x,
  ) {
    return _labs21(
      __x,
    );
  }

  late final _labs21Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs21 = _labs21Ptr.asFunction<int Function(int)>();

  int llabs21(
    int __x,
  ) {
    return _llabs21(
      __x,
    );
  }

  late final _llabs21Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs21 = _llabs21Ptr.asFunction<int Function(int)>();

  div_t div21(
    int __numer,
    int __denom,
  ) {
    return _div21(
      __numer,
      __denom,
    );
  }

  late final _div21Ptr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div21 = _div21Ptr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv21(
    int __numer,
    int __denom,
  ) {
    return _ldiv21(
      __numer,
      __denom,
    );
  }

  late final _ldiv21Ptr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv21 = _ldiv21Ptr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv21(
    int __numer,
    int __denom,
  ) {
    return _lldiv21(
      __numer,
      __denom,
    );
  }

  late final _lldiv21Ptr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv21 = _lldiv21Ptr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt21(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt21(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt21 = _ecvt21Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt21(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt21(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt21 = _fcvt21Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt21(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt21(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt21 = _gcvt21Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r21(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r21(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('ecvt_r');
  late final _ecvt_r21 = _ecvt_r21Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r21(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r21(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('fcvt_r');
  late final _fcvt_r21 = _fcvt_r21Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen21(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen21(
      __s,
      __n,
    );
  }

  late final _mblen21Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mblen');
  late final _mblen21 =
      _mblen21Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc21(
    ffi.Pointer<ffi.Int> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc21(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('mbtowc');
  late final _mbtowc21 = _mbtowc21Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb21(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb21(
      __s,
      __wchar,
    );
  }

  late final _wctomb21Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'wctomb');
  late final _wctomb21 =
      _wctomb21Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs21(
    ffi.Pointer<ffi.Int> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs21(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mbstowcs');
  late final _mbstowcs21 = _mbstowcs21Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs21(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Int> __pwcs,
    int __n,
  ) {
    return _wcstombs21(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('wcstombs');
  late final _wcstombs21 = _wcstombs21Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  int rpmatch21(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch21(
      __response,
    );
  }

  late final _rpmatch21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch21 =
      _rpmatch21Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt21(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt21(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt21 = _getsubopt21Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg21(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg21(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg21 =
      _getloadavg21Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Void> memcpy21(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy21(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpy21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memcpy');
  late final _memcpy21 = _memcpy21Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove21(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove21(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmove21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memmove');
  late final _memmove21 = _memmove21Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy21(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy21(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpy21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memccpy');
  late final _memccpy21 = _memccpy21Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset21(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset21(
      __s,
      __c,
      __n,
    );
  }

  late final _memset21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memset');
  late final _memset21 = _memset21Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp21(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp21(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmp21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('memcmp');
  late final _memcmp21 = _memcmp21Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq21(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq21(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeq21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__memcmpeq');
  late final ___memcmpeq21 = ___memcmpeq21Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr21(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr21(
      __s,
      __c,
      __n,
    );
  }

  late final _memchr21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memchr');
  late final _memchr21 = _memchr21Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy21(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy21(
      __dest,
      __src,
    );
  }

  late final _strcpy21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy21 = _strcpy21Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy21(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy21(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpy21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncpy');
  late final _strncpy21 = _strncpy21Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat21(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat21(
      __dest,
      __src,
    );
  }

  late final _strcat21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat21 = _strcat21Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat21(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat21(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncat21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncat');
  late final _strncat21 = _strncat21Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp21(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp21(
      __s1,
      __s2,
    );
  }

  late final _strcmp21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp21 = _strcmp21Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp21(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp21(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmp21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncmp');
  late final _strncmp21 = _strncmp21Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll21(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll21(
      __s1,
      __s2,
    );
  }

  late final _strcoll21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll21 = _strcoll21Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm21(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm21(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrm21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strxfrm');
  late final _strxfrm21 = _strxfrm21Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l21(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l21(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_l21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l21 = _strcoll_l21Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l21(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l21(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_l21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strxfrm_l');
  late final _strxfrm_l21 = _strxfrm_l21Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup21(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup21(
      __s,
    );
  }

  late final _strdup21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup21 = _strdup21Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup21(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup21(
      __string,
      __n,
    );
  }

  late final _strndup21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strndup');
  late final _strndup21 = _strndup21Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr21(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr21(
      __s,
      __c,
    );
  }

  late final _strchr21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr21 = _strchr21Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr21(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr21(
      __s,
      __c,
    );
  }

  late final _strrchr21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr21 = _strrchr21Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn21(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn21(
      __s,
      __reject,
    );
  }

  late final _strcspn21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn21 = _strcspn21Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn21(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn21(
      __s,
      __accept,
    );
  }

  late final _strspn21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn21 = _strspn21Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk21(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk21(
      __s,
      __accept,
    );
  }

  late final _strpbrk21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk21 = _strpbrk21Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr21(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr21(
      __haystack,
      __needle,
    );
  }

  late final _strstr21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr21 = _strstr21Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok21(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok21(
      __s,
      __delim,
    );
  }

  late final _strtok21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok21 = _strtok21Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r21(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r21(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_r21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r21 = ___strtok_r21Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r21(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r21(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_r21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r21 = _strtok_r21Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen21(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen21(
      __s,
    );
  }

  late final _strlen21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'strlen');
  late final _strlen21 =
      _strlen21Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen21(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen21(
      __string,
      __maxlen,
    );
  }

  late final _strnlen21Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'strnlen');
  late final _strnlen21 =
      _strnlen21Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror21(
    int __errnum,
  ) {
    return _strerror21(
      __errnum,
    );
  }

  late final _strerror21Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror21 =
      _strerror21Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r21(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r21(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_r21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('strerror_r');
  late final _strerror_r21 = _strerror_r21Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l21(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l21(
      __errnum,
      __l,
    );
  }

  late final _strerror_l21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l21 = _strerror_l21Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp21(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp21(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmp21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcmp');
  late final _bcmp21 = _bcmp21Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy21(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy21(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopy21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcopy');
  late final _bcopy21 = _bcopy21Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero21(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero21(
      __s,
      __n,
    );
  }

  late final _bzero21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('bzero');
  late final _bzero21 =
      _bzero21Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index21(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index21(
      __s,
      __c,
    );
  }

  late final _index21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index21 = _index21Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex21(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex21(
      __s,
      __c,
    );
  }

  late final _rindex21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex21 = _rindex21Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs21(
    int __i,
  ) {
    return _ffs21(
      __i,
    );
  }

  late final _ffs21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs21 = _ffs21Ptr.asFunction<int Function(int)>();

  int ffsl21(
    int __l,
  ) {
    return _ffsl21(
      __l,
    );
  }

  late final _ffsl21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl21 = _ffsl21Ptr.asFunction<int Function(int)>();

  int ffsll21(
    int __ll,
  ) {
    return _ffsll21(
      __ll,
    );
  }

  late final _ffsll21Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll21 = _ffsll21Ptr.asFunction<int Function(int)>();

  int strcasecmp21(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp21(
      __s1,
      __s2,
    );
  }

  late final _strcasecmp21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp21 = _strcasecmp21Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp21(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp21(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmp21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncasecmp');
  late final _strncasecmp21 = _strncasecmp21Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l21(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l21(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_l21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l21 = _strcasecmp_l21Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l21(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l21(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_l21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l21 = _strncasecmp_l21Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero21(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero21(
      __s,
      __n,
    );
  }

  late final _explicit_bzero21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('explicit_bzero');
  late final _explicit_bzero21 = _explicit_bzero21Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep21(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep21(
      __stringp,
      __delim,
    );
  }

  late final _strsep21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep21 = _strsep21Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal21(
    int __sig,
  ) {
    return _strsignal21(
      __sig,
    );
  }

  late final _strsignal21Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal21 =
      _strsignal21Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy21(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy21(
      __dest,
      __src,
    );
  }

  late final ___stpcpy21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy21 = ___stpcpy21Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy21(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy21(
      __dest,
      __src,
    );
  }

  late final _stpcpy21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy21 = _stpcpy21Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy21(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy21(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpy21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('__stpncpy');
  late final ___stpncpy21 = ___stpncpy21Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy21(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy21(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpy21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('stpncpy');
  late final _stpncpy21 = _stpncpy21Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void rmd160(
    ffi.Pointer<ffi.Uint8> msg,
    int msg_len,
    ffi.Pointer<ffi.Uint8> hash,
  ) {
    return _rmd160(
      msg,
      msg_len,
      hash,
    );
  }

  late final _rmd160Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Uint32,
              ffi.Pointer<ffi.Uint8>)>>('rmd160');
  late final _rmd160 = _rmd160Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  int remove22(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove22(
      __filename,
    );
  }

  late final _remove22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove22 =
      _remove22Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename22(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename22(
      __old,
      __new,
    );
  }

  late final _rename22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename22 = _rename22Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat22(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat22(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameat22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat22 = _renameat22Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose22(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose22(
      __stream,
    );
  }

  late final _fclose22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose22 =
      _fclose22Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile22() {
    return _tmpfile22();
  }

  late final _tmpfile22Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile22 =
      _tmpfile22Ptr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam22(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam22(
      arg0,
    );
  }

  late final _tmpnam22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam22 = _tmpnam22Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r22(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r22(
      __s,
    );
  }

  late final _tmpnam_r22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r22 = _tmpnam_r22Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam22(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam22(
      __dir,
      __pfx,
    );
  }

  late final _tempnam22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam22 = _tempnam22Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush22(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush22(
      __stream,
    );
  }

  late final _fflush22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush22 =
      _fflush22Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked22(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked22(
      __stream,
    );
  }

  late final _fflush_unlocked22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked22 =
      _fflush_unlocked22Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen22(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen22(
      __filename,
      __modes,
    );
  }

  late final _fopen22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen22 = _fopen22Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen22(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen22(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopen22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen22 = _freopen22Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen22(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen22(
      __fd,
      __modes,
    );
  }

  late final _fdopen22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen22 = _fdopen22Ptr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen22(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen22(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopen22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen22 = _fmemopen22Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream22(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Int> __sizeloc,
  ) {
    return _open_memstream22(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstream22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('open_memstream');
  late final _open_memstream22 = _open_memstream22Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void setbuf22(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf22(
      __stream,
      __buf,
    );
  }

  late final _setbuf22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf22 = _setbuf22Ptr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf22(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf22(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbuf22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('setvbuf');
  late final _setvbuf22 = _setvbuf22Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer22(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer22(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbuffer22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer22 = _setbuffer22Ptr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf22(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf22(
      __stream,
    );
  }

  late final _setlinebuf22Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf22 =
      _setlinebuf22Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf22(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf22(
      __stream,
      __format,
    );
  }

  late final _fprintf22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf22 = _fprintf22Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf22(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf22(
      __format,
    );
  }

  late final _printf22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf22 =
      _printf22Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf22(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf22(
      __s,
      __format,
    );
  }

  late final _sprintf22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf22 = _sprintf22Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf22(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfprintf22(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintf22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfprintf');
  late final _vfprintf22 = _vfprintf22Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vprintf22(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vprintf22(
      __format,
      __arg,
    );
  }

  late final _vprintf22Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vprintf');
  late final _vprintf22 =
      _vprintf22Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsprintf22(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsprintf22(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintf22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsprintf');
  late final _vsprintf22 = _vsprintf22Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int snprintf22(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf22(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintf22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf22 = _snprintf22Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf22(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsnprintf22(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintf22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('vsnprintf');
  late final _vsnprintf22 = _vsnprintf22Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int vdprintf22(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    int __arg,
  ) {
    return _vdprintf22(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintf22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('vdprintf');
  late final _vdprintf22 = _vdprintf22Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int dprintf22(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf22(
      __fd,
      __fmt,
    );
  }

  late final _dprintf22Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf22 =
      _dprintf22Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf44(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf44(
      __stream,
      __format,
    );
  }

  late final _fscanf44Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf44 = _fscanf44Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf44(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf44(
      __format,
    );
  }

  late final _scanf44Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf44 =
      _scanf44Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf44(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf44(
      __s,
      __format,
    );
  }

  late final _sscanf44Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf44 = _sscanf44Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fscanf45(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf45(
      __stream,
      __format,
    );
  }

  late final _fscanf45Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf45 = _fscanf45Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf45(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf45(
      __format,
    );
  }

  late final _scanf45Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf45 =
      _scanf45Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf45(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf45(
      __s,
      __format,
    );
  }

  late final _sscanf45Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf45 = _sscanf45Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf44(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf44(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf44Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf44 = _vfscanf44Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf44(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf44(
      __format,
      __arg,
    );
  }

  late final _vscanf44Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf44 =
      _vscanf44Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf44(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf44(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf44Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf44 = _vsscanf44Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int vfscanf45(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf45(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf45Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf45 = _vfscanf45Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf45(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf45(
      __format,
      __arg,
    );
  }

  late final _vscanf45Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf45 =
      _vscanf45Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf45(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf45(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf45Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf45 = _vsscanf45Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fgetc22(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc22(
      __stream,
    );
  }

  late final _fgetc22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc22 =
      _fgetc22Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc22(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc22(
      __stream,
    );
  }

  late final _getc22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc22 = _getc22Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar22() {
    return _getchar22();
  }

  late final _getchar22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar22 = _getchar22Ptr.asFunction<int Function()>();

  int getc_unlocked22(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked22(
      __stream,
    );
  }

  late final _getc_unlocked22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked22 =
      _getc_unlocked22Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked22() {
    return _getchar_unlocked22();
  }

  late final _getchar_unlocked22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked22 =
      _getchar_unlocked22Ptr.asFunction<int Function()>();

  int fgetc_unlocked22(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked22(
      __stream,
    );
  }

  late final _fgetc_unlocked22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked22 =
      _fgetc_unlocked22Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc22(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc22(
      __c,
      __stream,
    );
  }

  late final _fputc22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc22 =
      _fputc22Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc22(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc22(
      __c,
      __stream,
    );
  }

  late final _putc22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc22 =
      _putc22Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar22(
    int __c,
  ) {
    return _putchar22(
      __c,
    );
  }

  late final _putchar22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar22 = _putchar22Ptr.asFunction<int Function(int)>();

  int fputc_unlocked22(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked22(
      __c,
      __stream,
    );
  }

  late final _fputc_unlocked22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked22 =
      _fputc_unlocked22Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked22(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked22(
      __c,
      __stream,
    );
  }

  late final _putc_unlocked22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked22 =
      _putc_unlocked22Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked22(
    int __c,
  ) {
    return _putchar_unlocked22(
      __c,
    );
  }

  late final _putchar_unlocked22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked22 =
      _putchar_unlocked22Ptr.asFunction<int Function(int)>();

  int getw22(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw22(
      __stream,
    );
  }

  late final _getw22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw22 = _getw22Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw22(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw22(
      __w,
      __stream,
    );
  }

  late final _putw22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw22 =
      _putw22Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets22(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets22(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgets22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets22 = _fgets22Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim22(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim22(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelim22Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim22 = ___getdelim22Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getdelim22(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim22(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelim22Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim22 = _getdelim22Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getline22(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline22(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getline22Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<FILE>)>>('getline');
  late final _getline22 = _getline22Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<FILE>)>();

  int fputs22(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs22(
      __s,
      __stream,
    );
  }

  late final _fputs22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs22 = _fputs22Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts22(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts22(
      __s,
    );
  }

  late final _puts22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts22 =
      _puts22Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc22(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc22(
      __c,
      __stream,
    );
  }

  late final _ungetc22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc22 =
      _ungetc22Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread22(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread22(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread22 = _fread22Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite22(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite22(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwrite22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite22 = _fwrite22Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked22(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked22(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlocked22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked22 = _fread_unlocked22Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked22(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked22(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlocked22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked22 = _fwrite_unlocked22Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek22(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek22(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseek22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek22 =
      _fseek22Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell22(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell22(
      __stream,
    );
  }

  late final _ftell22Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell22 =
      _ftell22Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind22(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind22(
      __stream,
    );
  }

  late final _rewind22Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind22 =
      _rewind22Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko22(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko22(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseeko22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko22 =
      _fseeko22Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello22(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello22(
      __stream,
    );
  }

  late final _ftello22Ptr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello22 =
      _ftello22Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos22(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos22(
      __stream,
      __pos,
    );
  }

  late final _fgetpos22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos22 = _fgetpos22Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos22(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos22(
      __stream,
      __pos,
    );
  }

  late final _fsetpos22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos22 = _fsetpos22Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr22(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr22(
      __stream,
    );
  }

  late final _clearerr22Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr22 =
      _clearerr22Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof22(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof22(
      __stream,
    );
  }

  late final _feof22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof22 = _feof22Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror22(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror22(
      __stream,
    );
  }

  late final _ferror22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror22 =
      _ferror22Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked22(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked22(
      __stream,
    );
  }

  late final _clearerr_unlocked22Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked22 =
      _clearerr_unlocked22Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked22(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked22(
      __stream,
    );
  }

  late final _feof_unlocked22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked22 =
      _feof_unlocked22Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked22(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked22(
      __stream,
    );
  }

  late final _ferror_unlocked22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked22 =
      _ferror_unlocked22Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror22(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror22(
      __s,
    );
  }

  late final _perror22Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror22 =
      _perror22Ptr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno22(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno22(
      __stream,
    );
  }

  late final _fileno22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno22 =
      _fileno22Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked22(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked22(
      __stream,
    );
  }

  late final _fileno_unlocked22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked22 =
      _fileno_unlocked22Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose22(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose22(
      __stream,
    );
  }

  late final _pclose22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose22 =
      _pclose22Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen22(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen22(
      __command,
      __modes,
    );
  }

  late final _popen22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen22 = _popen22Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid22(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid22(
      __s,
    );
  }

  late final _ctermid22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid22 = _ctermid22Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile22(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile22(
      __stream,
    );
  }

  late final _flockfile22Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile22 =
      _flockfile22Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile22(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile22(
      __stream,
    );
  }

  late final _ftrylockfile22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile22 =
      _ftrylockfile22Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile22(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile22(
      __stream,
    );
  }

  late final _funlockfile22Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile22 =
      _funlockfile22Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow22(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow22(
      arg0,
    );
  }

  late final ___uflow22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow22 =
      ___uflow22Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow22(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow22(
      arg0,
      arg1,
    );
  }

  late final ___overflow22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow22 =
      ___overflow22Ptr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __ctype_get_mb_cur_max22() {
    return ___ctype_get_mb_cur_max22();
  }

  late final ___ctype_get_mb_cur_max22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max22 =
      ___ctype_get_mb_cur_max22Ptr.asFunction<int Function()>();

  double atof22(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof22(
      __nptr,
    );
  }

  late final _atof22Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof22 =
      _atof22Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi22(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi22(
      __nptr,
    );
  }

  late final _atoi22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi22 =
      _atoi22Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol22(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol22(
      __nptr,
    );
  }

  late final _atol22Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol22 =
      _atol22Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll22(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll22(
      __nptr,
    );
  }

  late final _atoll22Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll22 =
      _atoll22Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod22(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod22(
      __nptr,
      __endptr,
    );
  }

  late final _strtod22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod22 = _strtod22Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof22(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof22(
      __nptr,
      __endptr,
    );
  }

  late final _strtof22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof22 = _strtof22Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol22(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol22(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol22 = _strtol22Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul22(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul22(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul22 = _strtoul22Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq22(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq22(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq22 = _strtoq22Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq22(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq22(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq22 = _strtouq22Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll22(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll22(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll22 = _strtoll22Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull22(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull22(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull22 = _strtoull22Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a22(
    int __n,
  ) {
    return _l64a22(
      __n,
    );
  }

  late final _l64a22Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a22 =
      _l64a22Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l22(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l22(
      __s,
    );
  }

  late final _a64l22Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l22 =
      _a64l22Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select22(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select22(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select22 = _select22Ptr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect22(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect22(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect22 = _pselect22Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random22() {
    return _random22();
  }

  late final _random22Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random22 = _random22Ptr.asFunction<int Function()>();

  void srandom22(
    int __seed,
  ) {
    return _srandom22(
      __seed,
    );
  }

  late final _srandom22Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom22 = _srandom22Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate22(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate22(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int)>>('initstate');
  late final _initstate22 = _initstate22Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate22(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate22(
      __statebuf,
    );
  }

  late final _setstate22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate22 = _setstate22Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r22(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r22(
      __buf,
      __result,
    );
  }

  late final _random_r22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r22 = _random_r22Ptr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r22(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r22(
      __seed,
      __buf,
    );
  }

  late final _srandom_r22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r22 =
      _srandom_r22Ptr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r22(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r22(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r22 = _initstate_r22Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r22(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r22(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r22 = _setstate_r22Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand22() {
    return _rand22();
  }

  late final _rand22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand22 = _rand22Ptr.asFunction<int Function()>();

  void srand22(
    int __seed,
  ) {
    return _srand22(
      __seed,
    );
  }

  late final _srand22Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand22 = _srand22Ptr.asFunction<void Function(int)>();

  int rand_r22(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r22(
      __seed,
    );
  }

  late final _rand_r22Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r22 =
      _rand_r22Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand4822() {
    return _drand4822();
  }

  late final _drand4822Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand4822 = _drand4822Ptr.asFunction<double Function()>();

  double erand4822(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand4822(
      __xsubi,
    );
  }

  late final _erand4822Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand4822 = _erand4822Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand4822() {
    return _lrand4822();
  }

  late final _lrand4822Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand4822 = _lrand4822Ptr.asFunction<int Function()>();

  int nrand4822(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand4822(
      __xsubi,
    );
  }

  late final _nrand4822Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand4822 =
      _nrand4822Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand4822() {
    return _mrand4822();
  }

  late final _mrand4822Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand4822 = _mrand4822Ptr.asFunction<int Function()>();

  int jrand4822(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand4822(
      __xsubi,
    );
  }

  late final _jrand4822Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand4822 =
      _jrand4822Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand4822(
    int __seedval,
  ) {
    return _srand4822(
      __seedval,
    );
  }

  late final _srand4822Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand4822 = _srand4822Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed4822(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed4822(
      __seed16v,
    );
  }

  late final _seed4822Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed4822 = _seed4822Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong4822(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong4822(
      __param,
    );
  }

  late final _lcong4822Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong4822 =
      _lcong4822Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r22(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r22(
      __buffer,
      __result,
    );
  }

  late final _drand48_r22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r22 = _drand48_r22Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r22(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r22(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r22 = _erand48_r22Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r22(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r22(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r22 = _lrand48_r22Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r22(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r22(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r22 = _nrand48_r22Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r22(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r22(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r22 = _mrand48_r22Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r22(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r22(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r22 = _jrand48_r22Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r22(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r22(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r22 = _srand48_r22Ptr
      .asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r22(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r22(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r22 = _seed48_r22Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r22(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r22(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r22 = _lcong48_r22Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int arc4random22() {
    return _arc4random22();
  }

  late final _arc4random22Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random22 = _arc4random22Ptr.asFunction<int Function()>();

  void arc4random_buf22(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf22(
      __buf,
      __size,
    );
  }

  late final _arc4random_buf22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('arc4random_buf');
  late final _arc4random_buf22 = _arc4random_buf22Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform22(
    int __upper_bound,
  ) {
    return _arc4random_uniform22(
      __upper_bound,
    );
  }

  late final _arc4random_uniform22Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
          'arc4random_uniform');
  late final _arc4random_uniform22 =
      _arc4random_uniform22Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc22(
    int __size,
  ) {
    return _malloc22(
      __size,
    );
  }

  late final _malloc22Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'malloc');
  late final _malloc22 =
      _malloc22Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc22(
    int __nmemb,
    int __size,
  ) {
    return _calloc22(
      __nmemb,
      __size,
    );
  }

  late final _calloc22Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'calloc');
  late final _calloc22 =
      _calloc22Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc22(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc22(
      __ptr,
      __size,
    );
  }

  late final _realloc22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('realloc');
  late final _realloc22 = _realloc22Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free22(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free22(
      __ptr,
    );
  }

  late final _free22Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free22 =
      _free22Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray44(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray44(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray44Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray44 = _reallocarray44Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray45(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray45(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray45Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray45 = _reallocarray45Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca22(
    int __size,
  ) {
    return _alloca22(
      __size,
    );
  }

  late final _alloca22Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'alloca');
  late final _alloca22 =
      _alloca22Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc22(
    int __size,
  ) {
    return _valloc22(
      __size,
    );
  }

  late final _valloc22Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'valloc');
  late final _valloc22 =
      _valloc22Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign22(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign22(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int,
              ffi.Int)>>('posix_memalign');
  late final _posix_memalign22 = _posix_memalign22Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc22(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc22(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc22Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'aligned_alloc');
  late final _aligned_alloc22 = _aligned_alloc22Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort22() {
    return _abort22();
  }

  late final _abort22Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort22 = _abort22Ptr.asFunction<void Function()>();

  int atexit22(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit22(
      __func,
    );
  }

  late final _atexit22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit22 = _atexit22Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit22(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit22(
      __func,
    );
  }

  late final _at_quick_exit22Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit22 = _at_quick_exit22Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit22(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit22(
      __func,
      __arg,
    );
  }

  late final _on_exit22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit22 = _on_exit22Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit22(
    int __status,
  ) {
    return _exit22(
      __status,
    );
  }

  late final _exit22Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit22 = _exit22Ptr.asFunction<void Function(int)>();

  void quick_exit22(
    int __status,
  ) {
    return _quick_exit22(
      __status,
    );
  }

  late final _quick_exit22Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit22 = _quick_exit22Ptr.asFunction<void Function(int)>();

  void _Exit22(
    int __status,
  ) {
    return __Exit22(
      __status,
    );
  }

  late final __Exit22Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit22 = __Exit22Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv22(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv22(
      __name,
    );
  }

  late final _getenv22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv22 = _getenv22Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv22(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv22(
      __string,
    );
  }

  late final _putenv22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv22 =
      _putenv22Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv22(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv22(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv22 = _setenv22Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv22(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv22(
      __name,
    );
  }

  late final _unsetenv22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv22 =
      _unsetenv22Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv22() {
    return _clearenv22();
  }

  late final _clearenv22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv22 = _clearenv22Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp22(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp22(
      __template,
    );
  }

  late final _mktemp22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp22 = _mktemp22Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp22(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp22(
      __template,
    );
  }

  late final _mkstemp22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp22 =
      _mkstemp22Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps22(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps22(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps22Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps22 =
      _mkstemps22Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp22(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp22(
      __template,
    );
  }

  late final _mkdtemp22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp22 = _mkdtemp22Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system22(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system22(
      __command,
    );
  }

  late final _system22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system22 =
      _system22Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath22(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath22(
      __name,
      __resolved,
    );
  }

  late final _realpath22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath22 = _realpath22Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch22(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch22(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              __compar_fn_t)>>('bsearch');
  late final _bsearch22 = _bsearch22Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort22(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort22(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              __compar_fn_t)>>('qsort');
  late final _qsort22 = _qsort22Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs22(
    int __x,
  ) {
    return _abs22(
      __x,
    );
  }

  late final _abs22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs22 = _abs22Ptr.asFunction<int Function(int)>();

  int labs22(
    int __x,
  ) {
    return _labs22(
      __x,
    );
  }

  late final _labs22Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs22 = _labs22Ptr.asFunction<int Function(int)>();

  int llabs22(
    int __x,
  ) {
    return _llabs22(
      __x,
    );
  }

  late final _llabs22Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs22 = _llabs22Ptr.asFunction<int Function(int)>();

  div_t div22(
    int __numer,
    int __denom,
  ) {
    return _div22(
      __numer,
      __denom,
    );
  }

  late final _div22Ptr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div22 = _div22Ptr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv22(
    int __numer,
    int __denom,
  ) {
    return _ldiv22(
      __numer,
      __denom,
    );
  }

  late final _ldiv22Ptr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv22 = _ldiv22Ptr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv22(
    int __numer,
    int __denom,
  ) {
    return _lldiv22(
      __numer,
      __denom,
    );
  }

  late final _lldiv22Ptr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv22 = _lldiv22Ptr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt22(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt22(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt22 = _ecvt22Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt22(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt22(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt22 = _fcvt22Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt22(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt22(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt22 = _gcvt22Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r22(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r22(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('ecvt_r');
  late final _ecvt_r22 = _ecvt_r22Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r22(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r22(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('fcvt_r');
  late final _fcvt_r22 = _fcvt_r22Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen22(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen22(
      __s,
      __n,
    );
  }

  late final _mblen22Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mblen');
  late final _mblen22 =
      _mblen22Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc22(
    ffi.Pointer<ffi.Int> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc22(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('mbtowc');
  late final _mbtowc22 = _mbtowc22Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb22(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb22(
      __s,
      __wchar,
    );
  }

  late final _wctomb22Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'wctomb');
  late final _wctomb22 =
      _wctomb22Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs22(
    ffi.Pointer<ffi.Int> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs22(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mbstowcs');
  late final _mbstowcs22 = _mbstowcs22Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs22(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Int> __pwcs,
    int __n,
  ) {
    return _wcstombs22(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('wcstombs');
  late final _wcstombs22 = _wcstombs22Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  int rpmatch22(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch22(
      __response,
    );
  }

  late final _rpmatch22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch22 =
      _rpmatch22Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt22(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt22(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt22 = _getsubopt22Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg22(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg22(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg22 =
      _getloadavg22Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Void> memcpy22(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy22(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpy22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memcpy');
  late final _memcpy22 = _memcpy22Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove22(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove22(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmove22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memmove');
  late final _memmove22 = _memmove22Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy22(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy22(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpy22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memccpy');
  late final _memccpy22 = _memccpy22Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset22(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset22(
      __s,
      __c,
      __n,
    );
  }

  late final _memset22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memset');
  late final _memset22 = _memset22Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp22(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp22(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmp22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('memcmp');
  late final _memcmp22 = _memcmp22Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq22(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq22(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeq22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__memcmpeq');
  late final ___memcmpeq22 = ___memcmpeq22Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr22(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr22(
      __s,
      __c,
      __n,
    );
  }

  late final _memchr22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memchr');
  late final _memchr22 = _memchr22Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy22(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy22(
      __dest,
      __src,
    );
  }

  late final _strcpy22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy22 = _strcpy22Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy22(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy22(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpy22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncpy');
  late final _strncpy22 = _strncpy22Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat22(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat22(
      __dest,
      __src,
    );
  }

  late final _strcat22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat22 = _strcat22Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat22(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat22(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncat22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncat');
  late final _strncat22 = _strncat22Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp22(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp22(
      __s1,
      __s2,
    );
  }

  late final _strcmp22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp22 = _strcmp22Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp22(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp22(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmp22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncmp');
  late final _strncmp22 = _strncmp22Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll22(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll22(
      __s1,
      __s2,
    );
  }

  late final _strcoll22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll22 = _strcoll22Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm22(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm22(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrm22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strxfrm');
  late final _strxfrm22 = _strxfrm22Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l22(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l22(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_l22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l22 = _strcoll_l22Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l22(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l22(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_l22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strxfrm_l');
  late final _strxfrm_l22 = _strxfrm_l22Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup22(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup22(
      __s,
    );
  }

  late final _strdup22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup22 = _strdup22Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup22(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup22(
      __string,
      __n,
    );
  }

  late final _strndup22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strndup');
  late final _strndup22 = _strndup22Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr22(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr22(
      __s,
      __c,
    );
  }

  late final _strchr22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr22 = _strchr22Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr22(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr22(
      __s,
      __c,
    );
  }

  late final _strrchr22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr22 = _strrchr22Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn22(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn22(
      __s,
      __reject,
    );
  }

  late final _strcspn22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn22 = _strcspn22Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn22(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn22(
      __s,
      __accept,
    );
  }

  late final _strspn22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn22 = _strspn22Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk22(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk22(
      __s,
      __accept,
    );
  }

  late final _strpbrk22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk22 = _strpbrk22Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr22(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr22(
      __haystack,
      __needle,
    );
  }

  late final _strstr22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr22 = _strstr22Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok22(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok22(
      __s,
      __delim,
    );
  }

  late final _strtok22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok22 = _strtok22Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r22(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r22(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_r22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r22 = ___strtok_r22Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r22(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r22(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_r22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r22 = _strtok_r22Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen22(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen22(
      __s,
    );
  }

  late final _strlen22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'strlen');
  late final _strlen22 =
      _strlen22Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen22(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen22(
      __string,
      __maxlen,
    );
  }

  late final _strnlen22Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'strnlen');
  late final _strnlen22 =
      _strnlen22Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror22(
    int __errnum,
  ) {
    return _strerror22(
      __errnum,
    );
  }

  late final _strerror22Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror22 =
      _strerror22Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r22(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r22(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_r22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('strerror_r');
  late final _strerror_r22 = _strerror_r22Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l22(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l22(
      __errnum,
      __l,
    );
  }

  late final _strerror_l22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l22 = _strerror_l22Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp22(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp22(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmp22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcmp');
  late final _bcmp22 = _bcmp22Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy22(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy22(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopy22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcopy');
  late final _bcopy22 = _bcopy22Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero22(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero22(
      __s,
      __n,
    );
  }

  late final _bzero22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('bzero');
  late final _bzero22 =
      _bzero22Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index22(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index22(
      __s,
      __c,
    );
  }

  late final _index22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index22 = _index22Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex22(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex22(
      __s,
      __c,
    );
  }

  late final _rindex22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex22 = _rindex22Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs22(
    int __i,
  ) {
    return _ffs22(
      __i,
    );
  }

  late final _ffs22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs22 = _ffs22Ptr.asFunction<int Function(int)>();

  int ffsl22(
    int __l,
  ) {
    return _ffsl22(
      __l,
    );
  }

  late final _ffsl22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl22 = _ffsl22Ptr.asFunction<int Function(int)>();

  int ffsll22(
    int __ll,
  ) {
    return _ffsll22(
      __ll,
    );
  }

  late final _ffsll22Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll22 = _ffsll22Ptr.asFunction<int Function(int)>();

  int strcasecmp22(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp22(
      __s1,
      __s2,
    );
  }

  late final _strcasecmp22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp22 = _strcasecmp22Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp22(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp22(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmp22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncasecmp');
  late final _strncasecmp22 = _strncasecmp22Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l22(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l22(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_l22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l22 = _strcasecmp_l22Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l22(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l22(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_l22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l22 = _strncasecmp_l22Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero22(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero22(
      __s,
      __n,
    );
  }

  late final _explicit_bzero22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('explicit_bzero');
  late final _explicit_bzero22 = _explicit_bzero22Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep22(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep22(
      __stringp,
      __delim,
    );
  }

  late final _strsep22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep22 = _strsep22Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal22(
    int __sig,
  ) {
    return _strsignal22(
      __sig,
    );
  }

  late final _strsignal22Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal22 =
      _strsignal22Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy22(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy22(
      __dest,
      __src,
    );
  }

  late final ___stpcpy22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy22 = ___stpcpy22Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy22(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy22(
      __dest,
      __src,
    );
  }

  late final _stpcpy22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy22 = _stpcpy22Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy22(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy22(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpy22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('__stpncpy');
  late final ___stpncpy22 = ___stpncpy22Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy22(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy22(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpy22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('stpncpy');
  late final _stpncpy22 = _stpncpy22Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<cstring> cstr_new5(
    ffi.Pointer<ffi.Char> init_str,
  ) {
    return _cstr_new5(
      init_str,
    );
  }

  late final _cstr_new5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cstring> Function(ffi.Pointer<ffi.Char>)>>('cstr_new');
  late final _cstr_new5 = _cstr_new5Ptr
      .asFunction<ffi.Pointer<cstring> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<cstring> cstr_new_sz5(
    int sz,
  ) {
    return _cstr_new_sz5(
      sz,
    );
  }

  late final _cstr_new_sz5Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<cstring> Function(ffi.Int)>>(
          'cstr_new_sz');
  late final _cstr_new_sz5 =
      _cstr_new_sz5Ptr.asFunction<ffi.Pointer<cstring> Function(int)>();

  ffi.Pointer<cstring> cstr_new_buf5(
    ffi.Pointer<ffi.Void> buf,
    int sz,
  ) {
    return _cstr_new_buf5(
      buf,
      sz,
    );
  }

  late final _cstr_new_buf5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cstring> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('cstr_new_buf');
  late final _cstr_new_buf5 = _cstr_new_buf5Ptr
      .asFunction<ffi.Pointer<cstring> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<cstring> cstr_new_cstr5(
    ffi.Pointer<cstring> copy_str,
  ) {
    return _cstr_new_cstr5(
      copy_str,
    );
  }

  late final _cstr_new_cstr5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cstring> Function(
              ffi.Pointer<cstring>)>>('cstr_new_cstr');
  late final _cstr_new_cstr5 = _cstr_new_cstr5Ptr
      .asFunction<ffi.Pointer<cstring> Function(ffi.Pointer<cstring>)>();

  void cstr_free5(
    ffi.Pointer<cstring> s,
    int free_buf,
  ) {
    return _cstr_free5(
      s,
      free_buf,
    );
  }

  late final _cstr_free5Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_free');
  late final _cstr_free5 =
      _cstr_free5Ptr.asFunction<void Function(ffi.Pointer<cstring>, int)>();

  int cstr_equal5(
    ffi.Pointer<cstring> a,
    ffi.Pointer<cstring> b,
  ) {
    return _cstr_equal5(
      a,
      b,
    );
  }

  late final _cstr_equal5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_equal');
  late final _cstr_equal5 = _cstr_equal5Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_compare5(
    ffi.Pointer<cstring> a,
    ffi.Pointer<cstring> b,
  ) {
    return _cstr_compare5(
      a,
      b,
    );
  }

  late final _cstr_compare5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_compare');
  late final _cstr_compare5 = _cstr_compare5Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_resize5(
    ffi.Pointer<cstring> s,
    int sz,
  ) {
    return _cstr_resize5(
      s,
      sz,
    );
  }

  late final _cstr_resize5Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_resize');
  late final _cstr_resize5 =
      _cstr_resize5Ptr.asFunction<int Function(ffi.Pointer<cstring>, int)>();

  int cstr_erase5(
    ffi.Pointer<cstring> s,
    int pos,
    int len,
  ) {
    return _cstr_erase5(
      s,
      pos,
      len,
    );
  }

  late final _cstr_erase5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Int, ssize_t)>>('cstr_erase');
  late final _cstr_erase5 = _cstr_erase5Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, int, int)>();

  int cstr_append_buf5(
    ffi.Pointer<cstring> s,
    ffi.Pointer<ffi.Void> buf,
    int sz,
  ) {
    return _cstr_append_buf5(
      s,
      buf,
      sz,
    );
  }

  late final _cstr_append_buf5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('cstr_append_buf');
  late final _cstr_append_buf5 = _cstr_append_buf5Ptr.asFunction<
      int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Void>, int)>();

  int cstr_append_cstr5(
    ffi.Pointer<cstring> s,
    ffi.Pointer<cstring> append,
  ) {
    return _cstr_append_cstr5(
      s,
      append,
    );
  }

  late final _cstr_append_cstr5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_append_cstr');
  late final _cstr_append_cstr5 = _cstr_append_cstr5Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_append_c5(
    ffi.Pointer<cstring> s,
    int ch,
  ) {
    return _cstr_append_c5(
      s,
      ch,
    );
  }

  late final _cstr_append_c5Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Char)>>(
      'cstr_append_c');
  late final _cstr_append_c5 =
      _cstr_append_c5Ptr.asFunction<int Function(ffi.Pointer<cstring>, int)>();

  int cstr_alloc_minsize5(
    ffi.Pointer<cstring> s,
    int sz,
  ) {
    return _cstr_alloc_minsize5(
      s,
      sz,
    );
  }

  late final _cstr_alloc_minsize5Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_alloc_minsize');
  late final _cstr_alloc_minsize5 = _cstr_alloc_minsize5Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, int)>();

  ffi.Pointer<dogecoin_chainparams> chain_from_b58_prefix6(
    ffi.Pointer<ffi.Char> address,
  ) {
    return _chain_from_b58_prefix6(
      address,
    );
  }

  late final _chain_from_b58_prefix6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<dogecoin_chainparams> Function(
              ffi.Pointer<ffi.Char>)>>('chain_from_b58_prefix');
  late final _chain_from_b58_prefix6 = _chain_from_b58_prefix6Ptr.asFunction<
      ffi.Pointer<dogecoin_chainparams> Function(ffi.Pointer<ffi.Char>)>();

  int chain_from_b58_prefix_bool6(
    ffi.Pointer<ffi.Char> address,
  ) {
    return _chain_from_b58_prefix_bool6(
      address,
    );
  }

  late final _chain_from_b58_prefix_bool6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'chain_from_b58_prefix_bool');
  late final _chain_from_b58_prefix_bool6 = _chain_from_b58_prefix_bool6Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void dogecoin_privkey_init3(
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_init3(
      privkey,
    );
  }

  late final _dogecoin_privkey_init3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_key>)>>(
          'dogecoin_privkey_init');
  late final _dogecoin_privkey_init3 = _dogecoin_privkey_init3Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_key>)>();

  int dogecoin_privkey_is_valid3(
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_is_valid3(
      privkey,
    );
  }

  late final _dogecoin_privkey_is_valid3Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_key>)>>('dogecoin_privkey_is_valid');
  late final _dogecoin_privkey_is_valid3 = _dogecoin_privkey_is_valid3Ptr
      .asFunction<int Function(ffi.Pointer<dogecoin_key>)>();

  void dogecoin_privkey_cleanse3(
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_cleanse3(
      privkey,
    );
  }

  late final _dogecoin_privkey_cleanse3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_key>)>>(
          'dogecoin_privkey_cleanse');
  late final _dogecoin_privkey_cleanse3 = _dogecoin_privkey_cleanse3Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_key>)>();

  int dogecoin_privkey_gen3(
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_gen3(
      privkey,
    );
  }

  late final _dogecoin_privkey_gen3Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_key>)>>('dogecoin_privkey_gen');
  late final _dogecoin_privkey_gen3 = _dogecoin_privkey_gen3Ptr
      .asFunction<int Function(ffi.Pointer<dogecoin_key>)>();

  int dogecoin_privkey_verify_pubkey3(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_privkey_verify_pubkey3(
      privkey,
      pubkey,
    );
  }

  late final _dogecoin_privkey_verify_pubkey3Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_key>,
              ffi.Pointer<dogecoin_pubkey>)>>('dogecoin_privkey_verify_pubkey');
  late final _dogecoin_privkey_verify_pubkey3 =
      _dogecoin_privkey_verify_pubkey3Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_key>, ffi.Pointer<dogecoin_pubkey>)>();

  void dogecoin_privkey_encode_wif3(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<dogecoin_chainparams> chain,
    ffi.Pointer<ffi.Char> privkey_wif,
    ffi.Pointer<ffi.Int> strsize_inout,
  ) {
    return _dogecoin_privkey_encode_wif3(
      privkey,
      chain,
      privkey_wif,
      strsize_inout,
    );
  }

  late final _dogecoin_privkey_encode_wif3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_privkey_encode_wif');
  late final _dogecoin_privkey_encode_wif3 =
      _dogecoin_privkey_encode_wif3Ptr.asFunction<
          void Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>();

  int dogecoin_privkey_decode_wif3(
    ffi.Pointer<ffi.Char> privkey_wif,
    ffi.Pointer<dogecoin_chainparams> chain,
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_decode_wif3(
      privkey_wif,
      chain,
      privkey,
    );
  }

  late final _dogecoin_privkey_decode_wif3Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<dogecoin_key>)>>('dogecoin_privkey_decode_wif');
  late final _dogecoin_privkey_decode_wif3 =
      _dogecoin_privkey_decode_wif3Ptr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<dogecoin_key>)>();

  void dogecoin_pubkey_init3(
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_pubkey_init3(
      pubkey,
    );
  }

  late final _dogecoin_pubkey_init3Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_pubkey>)>>(
      'dogecoin_pubkey_init');
  late final _dogecoin_pubkey_init3 = _dogecoin_pubkey_init3Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_pubkey>)>();

  int dogecoin_pubkey_get_length3(
    int ch_header,
  ) {
    return _dogecoin_pubkey_get_length3(
      ch_header,
    );
  }

  late final _dogecoin_pubkey_get_length3Ptr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedChar)>>(
          'dogecoin_pubkey_get_length');
  late final _dogecoin_pubkey_get_length3 =
      _dogecoin_pubkey_get_length3Ptr.asFunction<int Function(int)>();

  int dogecoin_pubkey_is_valid3(
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_pubkey_is_valid3(
      pubkey,
    );
  }

  late final _dogecoin_pubkey_is_valid3Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_pubkey>)>>('dogecoin_pubkey_is_valid');
  late final _dogecoin_pubkey_is_valid3 = _dogecoin_pubkey_is_valid3Ptr
      .asFunction<int Function(ffi.Pointer<dogecoin_pubkey>)>();

  void dogecoin_pubkey_cleanse3(
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_pubkey_cleanse3(
      pubkey,
    );
  }

  late final _dogecoin_pubkey_cleanse3Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_pubkey>)>>(
      'dogecoin_pubkey_cleanse');
  late final _dogecoin_pubkey_cleanse3 = _dogecoin_pubkey_cleanse3Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_pubkey>)>();

  void dogecoin_pubkey_from_key3(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<dogecoin_pubkey> pubkey_inout,
  ) {
    return _dogecoin_pubkey_from_key3(
      privkey,
      pubkey_inout,
    );
  }

  late final _dogecoin_pubkey_from_key3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_key>,
              ffi.Pointer<dogecoin_pubkey>)>>('dogecoin_pubkey_from_key');
  late final _dogecoin_pubkey_from_key3 =
      _dogecoin_pubkey_from_key3Ptr.asFunction<
          void Function(
              ffi.Pointer<dogecoin_key>, ffi.Pointer<dogecoin_pubkey>)>();

  void dogecoin_pubkey_get_hash1603(
    ffi.Pointer<dogecoin_pubkey> pubkey,
    ffi.Pointer<ffi.Uint8> hash160,
  ) {
    return _dogecoin_pubkey_get_hash1603(
      pubkey,
      hash160,
    );
  }

  late final _dogecoin_pubkey_get_hash1603Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_pubkey>,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_pubkey_get_hash160');
  late final _dogecoin_pubkey_get_hash1603 =
      _dogecoin_pubkey_get_hash1603Ptr.asFunction<
          void Function(
              ffi.Pointer<dogecoin_pubkey>, ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_pubkey_get_hex3(
    ffi.Pointer<dogecoin_pubkey> pubkey,
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.Int> strsize,
  ) {
    return _dogecoin_pubkey_get_hex3(
      pubkey,
      str,
      strsize,
    );
  }

  late final _dogecoin_pubkey_get_hex3Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_pubkey>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_pubkey_get_hex');
  late final _dogecoin_pubkey_get_hex3 =
      _dogecoin_pubkey_get_hex3Ptr.asFunction<
          int Function(ffi.Pointer<dogecoin_pubkey>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>();

  int dogecoin_key_sign_hash3(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<ffi.Uint8> hash,
    ffi.Pointer<ffi.UnsignedChar> sigout,
    ffi.Pointer<ffi.Int> outlen,
  ) {
    return _dogecoin_key_sign_hash3(
      privkey,
      hash,
      sigout,
      outlen,
    );
  }

  late final _dogecoin_key_sign_hash3Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_key_sign_hash');
  late final _dogecoin_key_sign_hash3 = _dogecoin_key_sign_hash3Ptr.asFunction<
      int Function(ffi.Pointer<dogecoin_key>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Int>)>();

  int dogecoin_key_sign_hash_compact3(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<ffi.Uint8> hash,
    ffi.Pointer<ffi.UnsignedChar> sigout,
    ffi.Pointer<ffi.Int> outlen,
  ) {
    return _dogecoin_key_sign_hash_compact3(
      privkey,
      hash,
      sigout,
      outlen,
    );
  }

  late final _dogecoin_key_sign_hash_compact3Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_key_sign_hash_compact');
  late final _dogecoin_key_sign_hash_compact3 =
      _dogecoin_key_sign_hash_compact3Ptr.asFunction<
          int Function(ffi.Pointer<dogecoin_key>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Int>)>();

  int dogecoin_key_sign_hash_compact_recoverable3(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<ffi.Uint8> hash,
    ffi.Pointer<ffi.UnsignedChar> sigout,
    ffi.Pointer<ffi.Int> outlen,
    ffi.Pointer<ffi.Int> recid,
  ) {
    return _dogecoin_key_sign_hash_compact_recoverable3(
      privkey,
      hash,
      sigout,
      outlen,
      recid,
    );
  }

  late final _dogecoin_key_sign_hash_compact_recoverable3Ptr = _lookup<
          ffi.NativeFunction<
              dogecoin_bool Function(
                  ffi.Pointer<dogecoin_key>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.UnsignedChar>,
                  ffi.Pointer<ffi.Int>,
                  ffi.Pointer<ffi.Int>)>>(
      'dogecoin_key_sign_hash_compact_recoverable');
  late final _dogecoin_key_sign_hash_compact_recoverable3 =
      _dogecoin_key_sign_hash_compact_recoverable3Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  int dogecoin_key_sign_recover_pubkey3(
    ffi.Pointer<ffi.UnsignedChar> sig,
    ffi.Pointer<ffi.Uint8> hash,
    int recid,
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_key_sign_recover_pubkey3(
      sig,
      hash,
      recid,
      pubkey,
    );
  }

  late final _dogecoin_key_sign_recover_pubkey3Ptr = _lookup<
          ffi.NativeFunction<
              dogecoin_bool Function(
                  ffi.Pointer<ffi.UnsignedChar>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Int,
                  ffi.Pointer<dogecoin_pubkey>)>>(
      'dogecoin_key_sign_recover_pubkey');
  late final _dogecoin_key_sign_recover_pubkey3 =
      _dogecoin_key_sign_recover_pubkey3Ptr.asFunction<
          int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Uint8>,
              int, ffi.Pointer<dogecoin_pubkey>)>();

  int dogecoin_pubkey_verify_sig3(
    ffi.Pointer<dogecoin_pubkey> pubkey,
    ffi.Pointer<ffi.Uint8> hash,
    ffi.Pointer<ffi.UnsignedChar> sigder,
    int len,
  ) {
    return _dogecoin_pubkey_verify_sig3(
      pubkey,
      hash,
      sigder,
      len,
    );
  }

  late final _dogecoin_pubkey_verify_sig3Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_pubkey>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('dogecoin_pubkey_verify_sig');
  late final _dogecoin_pubkey_verify_sig3 =
      _dogecoin_pubkey_verify_sig3Ptr.asFunction<
          int Function(ffi.Pointer<dogecoin_pubkey>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>, int)>();

  int dogecoin_pubkey_getaddr_p2pkh3(
    ffi.Pointer<dogecoin_pubkey> pubkey,
    ffi.Pointer<dogecoin_chainparams> chain,
    ffi.Pointer<ffi.Char> addrout,
  ) {
    return _dogecoin_pubkey_getaddr_p2pkh3(
      pubkey,
      chain,
      addrout,
    );
  }

  late final _dogecoin_pubkey_getaddr_p2pkh3Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_pubkey>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<ffi.Char>)>>('dogecoin_pubkey_getaddr_p2pkh');
  late final _dogecoin_pubkey_getaddr_p2pkh3 =
      _dogecoin_pubkey_getaddr_p2pkh3Ptr.asFunction<
          int Function(ffi.Pointer<dogecoin_pubkey>,
              ffi.Pointer<dogecoin_chainparams>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<vector> vector_new4(
    int res,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        free_f,
  ) {
    return _vector_new4(
      res,
      free_f,
    );
  }

  late final _vector_new4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<vector> Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>)>>)>>('vector_new');
  late final _vector_new4 = _vector_new4Ptr.asFunction<
      ffi.Pointer<vector> Function(
          int,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  void vector_free4(
    ffi.Pointer<vector> vec,
    int free_array,
  ) {
    return _vector_free4(
      vec,
      free_array,
    );
  }

  late final _vector_free4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<vector>, dogecoin_bool)>>('vector_free');
  late final _vector_free4 =
      _vector_free4Ptr.asFunction<void Function(ffi.Pointer<vector>, int)>();

  int vector_add4(
    ffi.Pointer<vector> vec,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _vector_add4(
      vec,
      data,
    );
  }

  late final _vector_add4Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>>('vector_add');
  late final _vector_add4 = _vector_add4Ptr
      .asFunction<int Function(ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>();

  int vector_remove4(
    ffi.Pointer<vector> vec,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _vector_remove4(
      vec,
      data,
    );
  }

  late final _vector_remove4Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>>('vector_remove');
  late final _vector_remove4 = _vector_remove4Ptr
      .asFunction<int Function(ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>();

  void vector_remove_idx4(
    ffi.Pointer<vector> vec,
    int idx,
  ) {
    return _vector_remove_idx4(
      vec,
      idx,
    );
  }

  late final _vector_remove_idx4Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<vector>, ffi.Int)>>(
      'vector_remove_idx');
  late final _vector_remove_idx4 = _vector_remove_idx4Ptr
      .asFunction<void Function(ffi.Pointer<vector>, int)>();

  void vector_remove_range4(
    ffi.Pointer<vector> vec,
    int idx,
    int len,
  ) {
    return _vector_remove_range4(
      vec,
      idx,
      len,
    );
  }

  late final _vector_remove_range4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<vector>, ffi.Int, ffi.Int)>>('vector_remove_range');
  late final _vector_remove_range4 = _vector_remove_range4Ptr
      .asFunction<void Function(ffi.Pointer<vector>, int, int)>();

  int vector_resize4(
    ffi.Pointer<vector> vec,
    int newsz,
  ) {
    return _vector_resize4(
      vec,
      newsz,
    );
  }

  late final _vector_resize4Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<vector>, ffi.Int)>>('vector_resize');
  late final _vector_resize4 =
      _vector_resize4Ptr.asFunction<int Function(ffi.Pointer<vector>, int)>();

  int vector_find4(
    ffi.Pointer<vector> vec,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _vector_find4(
      vec,
      data,
    );
  }

  late final _vector_find4Ptr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>>('vector_find');
  late final _vector_find4 = _vector_find4Ptr
      .asFunction<int Function(ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>();

  int dogecoin_script_copy_without_op_codeseperator2(
    ffi.Pointer<cstring> scriptin,
    ffi.Pointer<cstring> scriptout,
  ) {
    return _dogecoin_script_copy_without_op_codeseperator2(
      scriptin,
      scriptout,
    );
  }

  late final _dogecoin_script_copy_without_op_codeseperator2Ptr = _lookup<
          ffi.NativeFunction<
              dogecoin_bool Function(
                  ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>(
      'dogecoin_script_copy_without_op_codeseperator');
  late final _dogecoin_script_copy_without_op_codeseperator2 =
      _dogecoin_script_copy_without_op_codeseperator2Ptr.asFunction<
          int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  ffi.Pointer<dogecoin_script_op> dogecoin_script_op_new2() {
    return _dogecoin_script_op_new2();
  }

  late final _dogecoin_script_op_new2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<dogecoin_script_op> Function()>>(
          'dogecoin_script_op_new');
  late final _dogecoin_script_op_new2 = _dogecoin_script_op_new2Ptr
      .asFunction<ffi.Pointer<dogecoin_script_op> Function()>();

  void dogecoin_script_op_free2(
    ffi.Pointer<dogecoin_script_op> script_op,
  ) {
    return _dogecoin_script_op_free2(
      script_op,
    );
  }

  late final _dogecoin_script_op_free2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<dogecoin_script_op>)>>('dogecoin_script_op_free');
  late final _dogecoin_script_op_free2 = _dogecoin_script_op_free2Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_script_op>)>();

  void dogecoin_script_op_free_cb2(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _dogecoin_script_op_free_cb2(
      data,
    );
  }

  late final _dogecoin_script_op_free_cb2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'dogecoin_script_op_free_cb');
  late final _dogecoin_script_op_free_cb2 = _dogecoin_script_op_free_cb2Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int dogecoin_script_get_ops2(
    ffi.Pointer<cstring> script_in,
    ffi.Pointer<vector> ops_out,
  ) {
    return _dogecoin_script_get_ops2(
      script_in,
      ops_out,
    );
  }

  late final _dogecoin_script_get_ops2Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<cstring>,
              ffi.Pointer<vector>)>>('dogecoin_script_get_ops');
  late final _dogecoin_script_get_ops2 = _dogecoin_script_get_ops2Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<vector>)>();

  int dogecoin_script_classify_ops2(
    ffi.Pointer<vector> ops,
  ) {
    return _dogecoin_script_classify_ops2(
      ops,
    );
  }

  late final _dogecoin_script_classify_ops2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<vector>)>>(
          'dogecoin_script_classify_ops');
  late final _dogecoin_script_classify_ops2 = _dogecoin_script_classify_ops2Ptr
      .asFunction<int Function(ffi.Pointer<vector>)>();

  int dogecoin_script_classify2(
    ffi.Pointer<cstring> script,
    ffi.Pointer<vector> data_out,
  ) {
    return _dogecoin_script_classify2(
      script,
      data_out,
    );
  }

  late final _dogecoin_script_classify2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<cstring>,
              ffi.Pointer<vector>)>>('dogecoin_script_classify');
  late final _dogecoin_script_classify2 = _dogecoin_script_classify2Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<vector>)>();

  int dogecoin_encode_op_n2(
    int n,
  ) {
    return _dogecoin_encode_op_n2(
      n,
    );
  }

  late final _dogecoin_encode_op_n2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int)>>(
          'dogecoin_encode_op_n');
  late final _dogecoin_encode_op_n2 =
      _dogecoin_encode_op_n2Ptr.asFunction<int Function(int)>();

  void dogecoin_script_append_op2(
    ffi.Pointer<cstring> script_in,
    int op,
  ) {
    return _dogecoin_script_append_op2(
      script_in,
      op,
    );
  }

  late final _dogecoin_script_append_op2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cstring>, ffi.Int32)>>('dogecoin_script_append_op');
  late final _dogecoin_script_append_op2 = _dogecoin_script_append_op2Ptr
      .asFunction<void Function(ffi.Pointer<cstring>, int)>();

  void dogecoin_script_append_pushdata2(
    ffi.Pointer<cstring> script_in,
    ffi.Pointer<ffi.UnsignedChar> data,
    int datalen,
  ) {
    return _dogecoin_script_append_pushdata2(
      script_in,
      data,
      datalen,
    );
  }

  late final _dogecoin_script_append_pushdata2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('dogecoin_script_append_pushdata');
  late final _dogecoin_script_append_pushdata2 =
      _dogecoin_script_append_pushdata2Ptr.asFunction<
          void Function(
              ffi.Pointer<cstring>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int dogecoin_script_build_multisig2(
    ffi.Pointer<cstring> script_in,
    int required_signatures,
    ffi.Pointer<vector> pubkeys_chars,
  ) {
    return _dogecoin_script_build_multisig2(
      script_in,
      required_signatures,
      pubkeys_chars,
    );
  }

  late final _dogecoin_script_build_multisig2Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<cstring>, ffi.UnsignedInt,
              ffi.Pointer<vector>)>>('dogecoin_script_build_multisig');
  late final _dogecoin_script_build_multisig2 =
      _dogecoin_script_build_multisig2Ptr.asFunction<
          int Function(ffi.Pointer<cstring>, int, ffi.Pointer<vector>)>();

  int dogecoin_script_build_p2pkh2(
    ffi.Pointer<cstring> script,
    ffi.Pointer<ffi.Uint8> hash160,
  ) {
    return _dogecoin_script_build_p2pkh2(
      script,
      hash160,
    );
  }

  late final _dogecoin_script_build_p2pkh2Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<cstring>,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_script_build_p2pkh');
  late final _dogecoin_script_build_p2pkh2 = _dogecoin_script_build_p2pkh2Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_script_build_p2sh2(
    ffi.Pointer<cstring> script_in,
    ffi.Pointer<ffi.Uint8> hash160,
  ) {
    return _dogecoin_script_build_p2sh2(
      script_in,
      hash160,
    );
  }

  late final _dogecoin_script_build_p2sh2Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<cstring>,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_script_build_p2sh');
  late final _dogecoin_script_build_p2sh2 = _dogecoin_script_build_p2sh2Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_script_get_scripthash2(
    ffi.Pointer<cstring> script_in,
    ffi.Pointer<ffi.Uint8> scripthash,
  ) {
    return _dogecoin_script_get_scripthash2(
      script_in,
      scripthash,
    );
  }

  late final _dogecoin_script_get_scripthash2Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<cstring>,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_script_get_scripthash');
  late final _dogecoin_script_get_scripthash2 =
      _dogecoin_script_get_scripthash2Ptr.asFunction<
          int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<ffi.Char> dogecoin_tx_out_type_to_str2(
    int type,
  ) {
    return _dogecoin_tx_out_type_to_str2(
      type,
    );
  }

  late final _dogecoin_tx_out_type_to_str2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'dogecoin_tx_out_type_to_str');
  late final _dogecoin_tx_out_type_to_str2 = _dogecoin_tx_out_type_to_str2Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int remove23(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove23(
      __filename,
    );
  }

  late final _remove23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove23 =
      _remove23Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename23(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename23(
      __old,
      __new,
    );
  }

  late final _rename23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename23 = _rename23Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat23(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat23(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameat23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat23 = _renameat23Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose23(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose23(
      __stream,
    );
  }

  late final _fclose23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose23 =
      _fclose23Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile23() {
    return _tmpfile23();
  }

  late final _tmpfile23Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile23 =
      _tmpfile23Ptr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam23(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam23(
      arg0,
    );
  }

  late final _tmpnam23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam23 = _tmpnam23Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r23(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r23(
      __s,
    );
  }

  late final _tmpnam_r23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r23 = _tmpnam_r23Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam23(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam23(
      __dir,
      __pfx,
    );
  }

  late final _tempnam23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam23 = _tempnam23Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush23(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush23(
      __stream,
    );
  }

  late final _fflush23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush23 =
      _fflush23Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked23(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked23(
      __stream,
    );
  }

  late final _fflush_unlocked23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked23 =
      _fflush_unlocked23Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen23(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen23(
      __filename,
      __modes,
    );
  }

  late final _fopen23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen23 = _fopen23Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen23(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen23(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopen23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen23 = _freopen23Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen23(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen23(
      __fd,
      __modes,
    );
  }

  late final _fdopen23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen23 = _fdopen23Ptr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen23(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen23(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopen23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen23 = _fmemopen23Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream23(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Int> __sizeloc,
  ) {
    return _open_memstream23(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstream23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('open_memstream');
  late final _open_memstream23 = _open_memstream23Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void setbuf23(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf23(
      __stream,
      __buf,
    );
  }

  late final _setbuf23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf23 = _setbuf23Ptr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf23(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf23(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbuf23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('setvbuf');
  late final _setvbuf23 = _setvbuf23Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer23(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer23(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbuffer23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer23 = _setbuffer23Ptr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf23(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf23(
      __stream,
    );
  }

  late final _setlinebuf23Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf23 =
      _setlinebuf23Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf23(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf23(
      __stream,
      __format,
    );
  }

  late final _fprintf23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf23 = _fprintf23Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf23(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf23(
      __format,
    );
  }

  late final _printf23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf23 =
      _printf23Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf23(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf23(
      __s,
      __format,
    );
  }

  late final _sprintf23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf23 = _sprintf23Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf23(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfprintf23(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintf23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfprintf');
  late final _vfprintf23 = _vfprintf23Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vprintf23(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vprintf23(
      __format,
      __arg,
    );
  }

  late final _vprintf23Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vprintf');
  late final _vprintf23 =
      _vprintf23Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsprintf23(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsprintf23(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintf23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsprintf');
  late final _vsprintf23 = _vsprintf23Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int snprintf23(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf23(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintf23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf23 = _snprintf23Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf23(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsnprintf23(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintf23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('vsnprintf');
  late final _vsnprintf23 = _vsnprintf23Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int vdprintf23(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    int __arg,
  ) {
    return _vdprintf23(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintf23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('vdprintf');
  late final _vdprintf23 = _vdprintf23Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int dprintf23(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf23(
      __fd,
      __fmt,
    );
  }

  late final _dprintf23Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf23 =
      _dprintf23Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf46(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf46(
      __stream,
      __format,
    );
  }

  late final _fscanf46Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf46 = _fscanf46Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf46(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf46(
      __format,
    );
  }

  late final _scanf46Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf46 =
      _scanf46Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf46(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf46(
      __s,
      __format,
    );
  }

  late final _sscanf46Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf46 = _sscanf46Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fscanf47(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf47(
      __stream,
      __format,
    );
  }

  late final _fscanf47Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf47 = _fscanf47Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf47(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf47(
      __format,
    );
  }

  late final _scanf47Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf47 =
      _scanf47Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf47(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf47(
      __s,
      __format,
    );
  }

  late final _sscanf47Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf47 = _sscanf47Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf46(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf46(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf46Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf46 = _vfscanf46Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf46(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf46(
      __format,
      __arg,
    );
  }

  late final _vscanf46Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf46 =
      _vscanf46Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf46(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf46(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf46Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf46 = _vsscanf46Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int vfscanf47(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf47(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf47Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf47 = _vfscanf47Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf47(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf47(
      __format,
      __arg,
    );
  }

  late final _vscanf47Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf47 =
      _vscanf47Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf47(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf47(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf47Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf47 = _vsscanf47Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fgetc23(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc23(
      __stream,
    );
  }

  late final _fgetc23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc23 =
      _fgetc23Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc23(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc23(
      __stream,
    );
  }

  late final _getc23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc23 = _getc23Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar23() {
    return _getchar23();
  }

  late final _getchar23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar23 = _getchar23Ptr.asFunction<int Function()>();

  int getc_unlocked23(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked23(
      __stream,
    );
  }

  late final _getc_unlocked23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked23 =
      _getc_unlocked23Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked23() {
    return _getchar_unlocked23();
  }

  late final _getchar_unlocked23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked23 =
      _getchar_unlocked23Ptr.asFunction<int Function()>();

  int fgetc_unlocked23(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked23(
      __stream,
    );
  }

  late final _fgetc_unlocked23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked23 =
      _fgetc_unlocked23Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc23(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc23(
      __c,
      __stream,
    );
  }

  late final _fputc23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc23 =
      _fputc23Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc23(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc23(
      __c,
      __stream,
    );
  }

  late final _putc23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc23 =
      _putc23Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar23(
    int __c,
  ) {
    return _putchar23(
      __c,
    );
  }

  late final _putchar23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar23 = _putchar23Ptr.asFunction<int Function(int)>();

  int fputc_unlocked23(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked23(
      __c,
      __stream,
    );
  }

  late final _fputc_unlocked23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked23 =
      _fputc_unlocked23Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked23(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked23(
      __c,
      __stream,
    );
  }

  late final _putc_unlocked23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked23 =
      _putc_unlocked23Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked23(
    int __c,
  ) {
    return _putchar_unlocked23(
      __c,
    );
  }

  late final _putchar_unlocked23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked23 =
      _putchar_unlocked23Ptr.asFunction<int Function(int)>();

  int getw23(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw23(
      __stream,
    );
  }

  late final _getw23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw23 = _getw23Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw23(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw23(
      __w,
      __stream,
    );
  }

  late final _putw23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw23 =
      _putw23Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets23(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets23(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgets23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets23 = _fgets23Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim23(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim23(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelim23Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim23 = ___getdelim23Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getdelim23(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim23(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelim23Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim23 = _getdelim23Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getline23(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline23(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getline23Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<FILE>)>>('getline');
  late final _getline23 = _getline23Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<FILE>)>();

  int fputs23(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs23(
      __s,
      __stream,
    );
  }

  late final _fputs23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs23 = _fputs23Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts23(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts23(
      __s,
    );
  }

  late final _puts23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts23 =
      _puts23Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc23(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc23(
      __c,
      __stream,
    );
  }

  late final _ungetc23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc23 =
      _ungetc23Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread23(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread23(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread23 = _fread23Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite23(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite23(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwrite23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite23 = _fwrite23Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked23(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked23(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlocked23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked23 = _fread_unlocked23Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked23(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked23(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlocked23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked23 = _fwrite_unlocked23Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek23(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek23(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseek23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek23 =
      _fseek23Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell23(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell23(
      __stream,
    );
  }

  late final _ftell23Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell23 =
      _ftell23Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind23(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind23(
      __stream,
    );
  }

  late final _rewind23Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind23 =
      _rewind23Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko23(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko23(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseeko23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko23 =
      _fseeko23Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello23(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello23(
      __stream,
    );
  }

  late final _ftello23Ptr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello23 =
      _ftello23Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos23(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos23(
      __stream,
      __pos,
    );
  }

  late final _fgetpos23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos23 = _fgetpos23Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos23(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos23(
      __stream,
      __pos,
    );
  }

  late final _fsetpos23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos23 = _fsetpos23Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr23(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr23(
      __stream,
    );
  }

  late final _clearerr23Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr23 =
      _clearerr23Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof23(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof23(
      __stream,
    );
  }

  late final _feof23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof23 = _feof23Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror23(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror23(
      __stream,
    );
  }

  late final _ferror23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror23 =
      _ferror23Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked23(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked23(
      __stream,
    );
  }

  late final _clearerr_unlocked23Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked23 =
      _clearerr_unlocked23Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked23(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked23(
      __stream,
    );
  }

  late final _feof_unlocked23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked23 =
      _feof_unlocked23Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked23(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked23(
      __stream,
    );
  }

  late final _ferror_unlocked23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked23 =
      _ferror_unlocked23Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror23(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror23(
      __s,
    );
  }

  late final _perror23Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror23 =
      _perror23Ptr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno23(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno23(
      __stream,
    );
  }

  late final _fileno23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno23 =
      _fileno23Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked23(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked23(
      __stream,
    );
  }

  late final _fileno_unlocked23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked23 =
      _fileno_unlocked23Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose23(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose23(
      __stream,
    );
  }

  late final _pclose23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose23 =
      _pclose23Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen23(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen23(
      __command,
      __modes,
    );
  }

  late final _popen23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen23 = _popen23Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid23(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid23(
      __s,
    );
  }

  late final _ctermid23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid23 = _ctermid23Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile23(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile23(
      __stream,
    );
  }

  late final _flockfile23Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile23 =
      _flockfile23Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile23(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile23(
      __stream,
    );
  }

  late final _ftrylockfile23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile23 =
      _ftrylockfile23Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile23(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile23(
      __stream,
    );
  }

  late final _funlockfile23Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile23 =
      _funlockfile23Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow23(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow23(
      arg0,
    );
  }

  late final ___uflow23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow23 =
      ___uflow23Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow23(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow23(
      arg0,
      arg1,
    );
  }

  late final ___overflow23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow23 =
      ___overflow23Ptr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __ctype_get_mb_cur_max23() {
    return ___ctype_get_mb_cur_max23();
  }

  late final ___ctype_get_mb_cur_max23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max23 =
      ___ctype_get_mb_cur_max23Ptr.asFunction<int Function()>();

  double atof23(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof23(
      __nptr,
    );
  }

  late final _atof23Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof23 =
      _atof23Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi23(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi23(
      __nptr,
    );
  }

  late final _atoi23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi23 =
      _atoi23Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol23(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol23(
      __nptr,
    );
  }

  late final _atol23Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol23 =
      _atol23Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll23(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll23(
      __nptr,
    );
  }

  late final _atoll23Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll23 =
      _atoll23Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod23(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod23(
      __nptr,
      __endptr,
    );
  }

  late final _strtod23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod23 = _strtod23Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof23(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof23(
      __nptr,
      __endptr,
    );
  }

  late final _strtof23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof23 = _strtof23Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol23(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol23(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol23 = _strtol23Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul23(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul23(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul23 = _strtoul23Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq23(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq23(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq23 = _strtoq23Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq23(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq23(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq23 = _strtouq23Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll23(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll23(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll23 = _strtoll23Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull23(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull23(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull23 = _strtoull23Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a23(
    int __n,
  ) {
    return _l64a23(
      __n,
    );
  }

  late final _l64a23Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a23 =
      _l64a23Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l23(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l23(
      __s,
    );
  }

  late final _a64l23Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l23 =
      _a64l23Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select23(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select23(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select23 = _select23Ptr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect23(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect23(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect23 = _pselect23Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random23() {
    return _random23();
  }

  late final _random23Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random23 = _random23Ptr.asFunction<int Function()>();

  void srandom23(
    int __seed,
  ) {
    return _srandom23(
      __seed,
    );
  }

  late final _srandom23Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom23 = _srandom23Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate23(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate23(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int)>>('initstate');
  late final _initstate23 = _initstate23Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate23(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate23(
      __statebuf,
    );
  }

  late final _setstate23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate23 = _setstate23Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r23(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r23(
      __buf,
      __result,
    );
  }

  late final _random_r23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r23 = _random_r23Ptr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r23(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r23(
      __seed,
      __buf,
    );
  }

  late final _srandom_r23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r23 =
      _srandom_r23Ptr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r23(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r23(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r23 = _initstate_r23Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r23(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r23(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r23 = _setstate_r23Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand23() {
    return _rand23();
  }

  late final _rand23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand23 = _rand23Ptr.asFunction<int Function()>();

  void srand23(
    int __seed,
  ) {
    return _srand23(
      __seed,
    );
  }

  late final _srand23Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand23 = _srand23Ptr.asFunction<void Function(int)>();

  int rand_r23(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r23(
      __seed,
    );
  }

  late final _rand_r23Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r23 =
      _rand_r23Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand4823() {
    return _drand4823();
  }

  late final _drand4823Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand4823 = _drand4823Ptr.asFunction<double Function()>();

  double erand4823(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand4823(
      __xsubi,
    );
  }

  late final _erand4823Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand4823 = _erand4823Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand4823() {
    return _lrand4823();
  }

  late final _lrand4823Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand4823 = _lrand4823Ptr.asFunction<int Function()>();

  int nrand4823(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand4823(
      __xsubi,
    );
  }

  late final _nrand4823Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand4823 =
      _nrand4823Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand4823() {
    return _mrand4823();
  }

  late final _mrand4823Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand4823 = _mrand4823Ptr.asFunction<int Function()>();

  int jrand4823(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand4823(
      __xsubi,
    );
  }

  late final _jrand4823Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand4823 =
      _jrand4823Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand4823(
    int __seedval,
  ) {
    return _srand4823(
      __seedval,
    );
  }

  late final _srand4823Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand4823 = _srand4823Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed4823(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed4823(
      __seed16v,
    );
  }

  late final _seed4823Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed4823 = _seed4823Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong4823(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong4823(
      __param,
    );
  }

  late final _lcong4823Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong4823 =
      _lcong4823Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r23(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r23(
      __buffer,
      __result,
    );
  }

  late final _drand48_r23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r23 = _drand48_r23Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r23(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r23(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r23 = _erand48_r23Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r23(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r23(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r23 = _lrand48_r23Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r23(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r23(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r23 = _nrand48_r23Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r23(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r23(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r23 = _mrand48_r23Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r23(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r23(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r23 = _jrand48_r23Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r23(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r23(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r23 = _srand48_r23Ptr
      .asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r23(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r23(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r23 = _seed48_r23Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r23(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r23(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r23 = _lcong48_r23Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int arc4random23() {
    return _arc4random23();
  }

  late final _arc4random23Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random23 = _arc4random23Ptr.asFunction<int Function()>();

  void arc4random_buf23(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf23(
      __buf,
      __size,
    );
  }

  late final _arc4random_buf23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('arc4random_buf');
  late final _arc4random_buf23 = _arc4random_buf23Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform23(
    int __upper_bound,
  ) {
    return _arc4random_uniform23(
      __upper_bound,
    );
  }

  late final _arc4random_uniform23Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
          'arc4random_uniform');
  late final _arc4random_uniform23 =
      _arc4random_uniform23Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc23(
    int __size,
  ) {
    return _malloc23(
      __size,
    );
  }

  late final _malloc23Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'malloc');
  late final _malloc23 =
      _malloc23Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc23(
    int __nmemb,
    int __size,
  ) {
    return _calloc23(
      __nmemb,
      __size,
    );
  }

  late final _calloc23Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'calloc');
  late final _calloc23 =
      _calloc23Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc23(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc23(
      __ptr,
      __size,
    );
  }

  late final _realloc23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('realloc');
  late final _realloc23 = _realloc23Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free23(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free23(
      __ptr,
    );
  }

  late final _free23Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free23 =
      _free23Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray46(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray46(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray46Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray46 = _reallocarray46Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray47(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray47(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray47Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray47 = _reallocarray47Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca23(
    int __size,
  ) {
    return _alloca23(
      __size,
    );
  }

  late final _alloca23Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'alloca');
  late final _alloca23 =
      _alloca23Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc23(
    int __size,
  ) {
    return _valloc23(
      __size,
    );
  }

  late final _valloc23Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'valloc');
  late final _valloc23 =
      _valloc23Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign23(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign23(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int,
              ffi.Int)>>('posix_memalign');
  late final _posix_memalign23 = _posix_memalign23Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc23(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc23(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc23Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'aligned_alloc');
  late final _aligned_alloc23 = _aligned_alloc23Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort23() {
    return _abort23();
  }

  late final _abort23Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort23 = _abort23Ptr.asFunction<void Function()>();

  int atexit23(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit23(
      __func,
    );
  }

  late final _atexit23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit23 = _atexit23Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit23(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit23(
      __func,
    );
  }

  late final _at_quick_exit23Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit23 = _at_quick_exit23Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit23(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit23(
      __func,
      __arg,
    );
  }

  late final _on_exit23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit23 = _on_exit23Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit23(
    int __status,
  ) {
    return _exit23(
      __status,
    );
  }

  late final _exit23Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit23 = _exit23Ptr.asFunction<void Function(int)>();

  void quick_exit23(
    int __status,
  ) {
    return _quick_exit23(
      __status,
    );
  }

  late final _quick_exit23Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit23 = _quick_exit23Ptr.asFunction<void Function(int)>();

  void _Exit23(
    int __status,
  ) {
    return __Exit23(
      __status,
    );
  }

  late final __Exit23Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit23 = __Exit23Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv23(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv23(
      __name,
    );
  }

  late final _getenv23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv23 = _getenv23Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv23(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv23(
      __string,
    );
  }

  late final _putenv23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv23 =
      _putenv23Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv23(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv23(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv23 = _setenv23Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv23(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv23(
      __name,
    );
  }

  late final _unsetenv23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv23 =
      _unsetenv23Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv23() {
    return _clearenv23();
  }

  late final _clearenv23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv23 = _clearenv23Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp23(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp23(
      __template,
    );
  }

  late final _mktemp23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp23 = _mktemp23Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp23(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp23(
      __template,
    );
  }

  late final _mkstemp23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp23 =
      _mkstemp23Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps23(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps23(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps23Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps23 =
      _mkstemps23Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp23(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp23(
      __template,
    );
  }

  late final _mkdtemp23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp23 = _mkdtemp23Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system23(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system23(
      __command,
    );
  }

  late final _system23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system23 =
      _system23Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath23(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath23(
      __name,
      __resolved,
    );
  }

  late final _realpath23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath23 = _realpath23Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch23(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch23(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              __compar_fn_t)>>('bsearch');
  late final _bsearch23 = _bsearch23Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort23(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort23(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              __compar_fn_t)>>('qsort');
  late final _qsort23 = _qsort23Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs23(
    int __x,
  ) {
    return _abs23(
      __x,
    );
  }

  late final _abs23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs23 = _abs23Ptr.asFunction<int Function(int)>();

  int labs23(
    int __x,
  ) {
    return _labs23(
      __x,
    );
  }

  late final _labs23Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs23 = _labs23Ptr.asFunction<int Function(int)>();

  int llabs23(
    int __x,
  ) {
    return _llabs23(
      __x,
    );
  }

  late final _llabs23Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs23 = _llabs23Ptr.asFunction<int Function(int)>();

  div_t div23(
    int __numer,
    int __denom,
  ) {
    return _div23(
      __numer,
      __denom,
    );
  }

  late final _div23Ptr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div23 = _div23Ptr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv23(
    int __numer,
    int __denom,
  ) {
    return _ldiv23(
      __numer,
      __denom,
    );
  }

  late final _ldiv23Ptr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv23 = _ldiv23Ptr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv23(
    int __numer,
    int __denom,
  ) {
    return _lldiv23(
      __numer,
      __denom,
    );
  }

  late final _lldiv23Ptr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv23 = _lldiv23Ptr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt23(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt23(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt23 = _ecvt23Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt23(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt23(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt23 = _fcvt23Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt23(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt23(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt23 = _gcvt23Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r23(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r23(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('ecvt_r');
  late final _ecvt_r23 = _ecvt_r23Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r23(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r23(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('fcvt_r');
  late final _fcvt_r23 = _fcvt_r23Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen23(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen23(
      __s,
      __n,
    );
  }

  late final _mblen23Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mblen');
  late final _mblen23 =
      _mblen23Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc23(
    ffi.Pointer<ffi.Int> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc23(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('mbtowc');
  late final _mbtowc23 = _mbtowc23Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb23(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb23(
      __s,
      __wchar,
    );
  }

  late final _wctomb23Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'wctomb');
  late final _wctomb23 =
      _wctomb23Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs23(
    ffi.Pointer<ffi.Int> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs23(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mbstowcs');
  late final _mbstowcs23 = _mbstowcs23Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs23(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Int> __pwcs,
    int __n,
  ) {
    return _wcstombs23(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('wcstombs');
  late final _wcstombs23 = _wcstombs23Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  int rpmatch23(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch23(
      __response,
    );
  }

  late final _rpmatch23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch23 =
      _rpmatch23Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt23(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt23(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt23 = _getsubopt23Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg23(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg23(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg23 =
      _getloadavg23Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Void> memcpy23(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy23(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpy23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memcpy');
  late final _memcpy23 = _memcpy23Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove23(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove23(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmove23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memmove');
  late final _memmove23 = _memmove23Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy23(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy23(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpy23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memccpy');
  late final _memccpy23 = _memccpy23Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset23(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset23(
      __s,
      __c,
      __n,
    );
  }

  late final _memset23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memset');
  late final _memset23 = _memset23Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp23(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp23(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmp23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('memcmp');
  late final _memcmp23 = _memcmp23Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq23(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq23(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeq23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__memcmpeq');
  late final ___memcmpeq23 = ___memcmpeq23Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr23(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr23(
      __s,
      __c,
      __n,
    );
  }

  late final _memchr23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memchr');
  late final _memchr23 = _memchr23Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy23(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy23(
      __dest,
      __src,
    );
  }

  late final _strcpy23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy23 = _strcpy23Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy23(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy23(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpy23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncpy');
  late final _strncpy23 = _strncpy23Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat23(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat23(
      __dest,
      __src,
    );
  }

  late final _strcat23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat23 = _strcat23Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat23(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat23(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncat23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncat');
  late final _strncat23 = _strncat23Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp23(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp23(
      __s1,
      __s2,
    );
  }

  late final _strcmp23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp23 = _strcmp23Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp23(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp23(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmp23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncmp');
  late final _strncmp23 = _strncmp23Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll23(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll23(
      __s1,
      __s2,
    );
  }

  late final _strcoll23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll23 = _strcoll23Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm23(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm23(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrm23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strxfrm');
  late final _strxfrm23 = _strxfrm23Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l23(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l23(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_l23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l23 = _strcoll_l23Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l23(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l23(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_l23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strxfrm_l');
  late final _strxfrm_l23 = _strxfrm_l23Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup23(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup23(
      __s,
    );
  }

  late final _strdup23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup23 = _strdup23Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup23(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup23(
      __string,
      __n,
    );
  }

  late final _strndup23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strndup');
  late final _strndup23 = _strndup23Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr23(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr23(
      __s,
      __c,
    );
  }

  late final _strchr23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr23 = _strchr23Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr23(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr23(
      __s,
      __c,
    );
  }

  late final _strrchr23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr23 = _strrchr23Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn23(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn23(
      __s,
      __reject,
    );
  }

  late final _strcspn23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn23 = _strcspn23Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn23(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn23(
      __s,
      __accept,
    );
  }

  late final _strspn23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn23 = _strspn23Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk23(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk23(
      __s,
      __accept,
    );
  }

  late final _strpbrk23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk23 = _strpbrk23Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr23(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr23(
      __haystack,
      __needle,
    );
  }

  late final _strstr23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr23 = _strstr23Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok23(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok23(
      __s,
      __delim,
    );
  }

  late final _strtok23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok23 = _strtok23Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r23(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r23(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_r23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r23 = ___strtok_r23Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r23(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r23(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_r23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r23 = _strtok_r23Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen23(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen23(
      __s,
    );
  }

  late final _strlen23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'strlen');
  late final _strlen23 =
      _strlen23Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen23(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen23(
      __string,
      __maxlen,
    );
  }

  late final _strnlen23Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'strnlen');
  late final _strnlen23 =
      _strnlen23Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror23(
    int __errnum,
  ) {
    return _strerror23(
      __errnum,
    );
  }

  late final _strerror23Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror23 =
      _strerror23Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r23(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r23(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_r23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('strerror_r');
  late final _strerror_r23 = _strerror_r23Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l23(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l23(
      __errnum,
      __l,
    );
  }

  late final _strerror_l23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l23 = _strerror_l23Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp23(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp23(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmp23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcmp');
  late final _bcmp23 = _bcmp23Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy23(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy23(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopy23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcopy');
  late final _bcopy23 = _bcopy23Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero23(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero23(
      __s,
      __n,
    );
  }

  late final _bzero23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('bzero');
  late final _bzero23 =
      _bzero23Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index23(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index23(
      __s,
      __c,
    );
  }

  late final _index23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index23 = _index23Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex23(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex23(
      __s,
      __c,
    );
  }

  late final _rindex23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex23 = _rindex23Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs23(
    int __i,
  ) {
    return _ffs23(
      __i,
    );
  }

  late final _ffs23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs23 = _ffs23Ptr.asFunction<int Function(int)>();

  int ffsl23(
    int __l,
  ) {
    return _ffsl23(
      __l,
    );
  }

  late final _ffsl23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl23 = _ffsl23Ptr.asFunction<int Function(int)>();

  int ffsll23(
    int __ll,
  ) {
    return _ffsll23(
      __ll,
    );
  }

  late final _ffsll23Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll23 = _ffsll23Ptr.asFunction<int Function(int)>();

  int strcasecmp23(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp23(
      __s1,
      __s2,
    );
  }

  late final _strcasecmp23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp23 = _strcasecmp23Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp23(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp23(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmp23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncasecmp');
  late final _strncasecmp23 = _strncasecmp23Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l23(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l23(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_l23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l23 = _strcasecmp_l23Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l23(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l23(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_l23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l23 = _strncasecmp_l23Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero23(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero23(
      __s,
      __n,
    );
  }

  late final _explicit_bzero23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('explicit_bzero');
  late final _explicit_bzero23 = _explicit_bzero23Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep23(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep23(
      __stringp,
      __delim,
    );
  }

  late final _strsep23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep23 = _strsep23Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal23(
    int __sig,
  ) {
    return _strsignal23(
      __sig,
    );
  }

  late final _strsignal23Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal23 =
      _strsignal23Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy23(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy23(
      __dest,
      __src,
    );
  }

  late final ___stpcpy23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy23 = ___stpcpy23Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy23(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy23(
      __dest,
      __src,
    );
  }

  late final _stpcpy23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy23 = _stpcpy23Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy23(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy23(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpy23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('__stpncpy');
  late final ___stpncpy23 = ___stpncpy23Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy23(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy23(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpy23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('stpncpy');
  late final _stpncpy23 = _stpncpy23Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int buffer_equal4(
    ffi.Pointer<ffi.Void> a,
    ffi.Pointer<ffi.Void> b,
  ) {
    return _buffer_equal4(
      a,
      b,
    );
  }

  late final _buffer_equal4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>('buffer_equal');
  late final _buffer_equal4 = _buffer_equal4Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  void buffer_free4(
    ffi.Pointer<ffi.Void> struct_buffer,
  ) {
    return _buffer_free4(
      struct_buffer,
    );
  }

  late final _buffer_free4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'buffer_free');
  late final _buffer_free4 =
      _buffer_free4Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<buffer> buffer_copy4(
    ffi.Pointer<ffi.Void> data,
    int data_len,
  ) {
    return _buffer_copy4(
      data,
      data_len,
    );
  }

  late final _buffer_copy4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<buffer> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('buffer_copy');
  late final _buffer_copy4 = _buffer_copy4Ptr
      .asFunction<ffi.Pointer<buffer> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<cstring> cstr_new6(
    ffi.Pointer<ffi.Char> init_str,
  ) {
    return _cstr_new6(
      init_str,
    );
  }

  late final _cstr_new6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cstring> Function(ffi.Pointer<ffi.Char>)>>('cstr_new');
  late final _cstr_new6 = _cstr_new6Ptr
      .asFunction<ffi.Pointer<cstring> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<cstring> cstr_new_sz6(
    int sz,
  ) {
    return _cstr_new_sz6(
      sz,
    );
  }

  late final _cstr_new_sz6Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<cstring> Function(ffi.Int)>>(
          'cstr_new_sz');
  late final _cstr_new_sz6 =
      _cstr_new_sz6Ptr.asFunction<ffi.Pointer<cstring> Function(int)>();

  ffi.Pointer<cstring> cstr_new_buf6(
    ffi.Pointer<ffi.Void> buf,
    int sz,
  ) {
    return _cstr_new_buf6(
      buf,
      sz,
    );
  }

  late final _cstr_new_buf6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cstring> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('cstr_new_buf');
  late final _cstr_new_buf6 = _cstr_new_buf6Ptr
      .asFunction<ffi.Pointer<cstring> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<cstring> cstr_new_cstr6(
    ffi.Pointer<cstring> copy_str,
  ) {
    return _cstr_new_cstr6(
      copy_str,
    );
  }

  late final _cstr_new_cstr6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cstring> Function(
              ffi.Pointer<cstring>)>>('cstr_new_cstr');
  late final _cstr_new_cstr6 = _cstr_new_cstr6Ptr
      .asFunction<ffi.Pointer<cstring> Function(ffi.Pointer<cstring>)>();

  void cstr_free6(
    ffi.Pointer<cstring> s,
    int free_buf,
  ) {
    return _cstr_free6(
      s,
      free_buf,
    );
  }

  late final _cstr_free6Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_free');
  late final _cstr_free6 =
      _cstr_free6Ptr.asFunction<void Function(ffi.Pointer<cstring>, int)>();

  int cstr_equal6(
    ffi.Pointer<cstring> a,
    ffi.Pointer<cstring> b,
  ) {
    return _cstr_equal6(
      a,
      b,
    );
  }

  late final _cstr_equal6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_equal');
  late final _cstr_equal6 = _cstr_equal6Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_compare6(
    ffi.Pointer<cstring> a,
    ffi.Pointer<cstring> b,
  ) {
    return _cstr_compare6(
      a,
      b,
    );
  }

  late final _cstr_compare6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_compare');
  late final _cstr_compare6 = _cstr_compare6Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_resize6(
    ffi.Pointer<cstring> s,
    int sz,
  ) {
    return _cstr_resize6(
      s,
      sz,
    );
  }

  late final _cstr_resize6Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_resize');
  late final _cstr_resize6 =
      _cstr_resize6Ptr.asFunction<int Function(ffi.Pointer<cstring>, int)>();

  int cstr_erase6(
    ffi.Pointer<cstring> s,
    int pos,
    int len,
  ) {
    return _cstr_erase6(
      s,
      pos,
      len,
    );
  }

  late final _cstr_erase6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Int, ssize_t)>>('cstr_erase');
  late final _cstr_erase6 = _cstr_erase6Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, int, int)>();

  int cstr_append_buf6(
    ffi.Pointer<cstring> s,
    ffi.Pointer<ffi.Void> buf,
    int sz,
  ) {
    return _cstr_append_buf6(
      s,
      buf,
      sz,
    );
  }

  late final _cstr_append_buf6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('cstr_append_buf');
  late final _cstr_append_buf6 = _cstr_append_buf6Ptr.asFunction<
      int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Void>, int)>();

  int cstr_append_cstr6(
    ffi.Pointer<cstring> s,
    ffi.Pointer<cstring> append,
  ) {
    return _cstr_append_cstr6(
      s,
      append,
    );
  }

  late final _cstr_append_cstr6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_append_cstr');
  late final _cstr_append_cstr6 = _cstr_append_cstr6Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_append_c6(
    ffi.Pointer<cstring> s,
    int ch,
  ) {
    return _cstr_append_c6(
      s,
      ch,
    );
  }

  late final _cstr_append_c6Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Char)>>(
      'cstr_append_c');
  late final _cstr_append_c6 =
      _cstr_append_c6Ptr.asFunction<int Function(ffi.Pointer<cstring>, int)>();

  int cstr_alloc_minsize6(
    ffi.Pointer<cstring> s,
    int sz,
  ) {
    return _cstr_alloc_minsize6(
      s,
      sz,
    );
  }

  late final _cstr_alloc_minsize6Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_alloc_minsize');
  late final _cstr_alloc_minsize6 = _cstr_alloc_minsize6Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, int)>();

  void ser_bytes(
    ffi.Pointer<cstring> s,
    ffi.Pointer<ffi.Void> p,
    int len,
  ) {
    return _ser_bytes(
      s,
      p,
      len,
    );
  }

  late final _ser_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('ser_bytes');
  late final _ser_bytes = _ser_bytesPtr.asFunction<
      void Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Void>, int)>();

  void ser_u16(
    ffi.Pointer<cstring> s,
    int v_,
  ) {
    return _ser_u16(
      s,
      v_,
    );
  }

  late final _ser_u16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cstring>, ffi.Uint16)>>('ser_u16');
  late final _ser_u16 =
      _ser_u16Ptr.asFunction<void Function(ffi.Pointer<cstring>, int)>();

  void ser_u32(
    ffi.Pointer<cstring> s,
    int v_,
  ) {
    return _ser_u32(
      s,
      v_,
    );
  }

  late final _ser_u32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cstring>, ffi.Uint32)>>('ser_u32');
  late final _ser_u32 =
      _ser_u32Ptr.asFunction<void Function(ffi.Pointer<cstring>, int)>();

  void ser_u64(
    ffi.Pointer<cstring> s,
    int v_,
  ) {
    return _ser_u64(
      s,
      v_,
    );
  }

  late final _ser_u64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cstring>, ffi.Uint64)>>('ser_u64');
  late final _ser_u64 =
      _ser_u64Ptr.asFunction<void Function(ffi.Pointer<cstring>, int)>();

  void ser_u256(
    ffi.Pointer<cstring> s,
    ffi.Pointer<ffi.UnsignedChar> v_,
  ) {
    return _ser_u256(
      s,
      v_,
    );
  }

  late final _ser_u256Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cstring>,
              ffi.Pointer<ffi.UnsignedChar>)>>('ser_u256');
  late final _ser_u256 = _ser_u256Ptr.asFunction<
      void Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.UnsignedChar>)>();

  void ser_varlen(
    ffi.Pointer<cstring> s,
    int vlen,
  ) {
    return _ser_varlen(
      s,
      vlen,
    );
  }

  late final _ser_varlenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cstring>, ffi.Uint32)>>('ser_varlen');
  late final _ser_varlen =
      _ser_varlenPtr.asFunction<void Function(ffi.Pointer<cstring>, int)>();

  void ser_str(
    ffi.Pointer<cstring> s,
    ffi.Pointer<ffi.Char> s_in,
    int maxlen,
  ) {
    return _ser_str(
      s,
      s_in,
      maxlen,
    );
  }

  late final _ser_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('ser_str');
  late final _ser_str = _ser_strPtr.asFunction<
      void Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Char>, int)>();

  void ser_varstr(
    ffi.Pointer<cstring> s,
    ffi.Pointer<cstring> s_in,
  ) {
    return _ser_varstr(
      s,
      s_in,
    );
  }

  late final _ser_varstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('ser_varstr');
  late final _ser_varstr = _ser_varstrPtr
      .asFunction<void Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  void ser_s32(
    ffi.Pointer<cstring> s,
    int v_,
  ) {
    return _ser_s32(
      s,
      v_,
    );
  }

  late final _ser_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cstring>, ffi.Int32)>>('ser_s32');
  late final _ser_s32 =
      _ser_s32Ptr.asFunction<void Function(ffi.Pointer<cstring>, int)>();

  void ser_s64(
    ffi.Pointer<cstring> s,
    int v_,
  ) {
    return _ser_s64(
      s,
      v_,
    );
  }

  late final _ser_s64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cstring>, ffi.Int64)>>('ser_s64');
  late final _ser_s64 =
      _ser_s64Ptr.asFunction<void Function(ffi.Pointer<cstring>, int)>();

  int deser_skip(
    ffi.Pointer<const_buffer> buf,
    int len,
  ) {
    return _deser_skip(
      buf,
      len,
    );
  }

  late final _deser_skipPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<const_buffer>, ffi.Int)>>('deser_skip');
  late final _deser_skip =
      _deser_skipPtr.asFunction<int Function(ffi.Pointer<const_buffer>, int)>();

  int deser_bytes(
    ffi.Pointer<ffi.Void> po,
    ffi.Pointer<const_buffer> buf,
    int len,
  ) {
    return _deser_bytes(
      po,
      buf,
      len,
    );
  }

  late final _deser_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<const_buffer>,
              ffi.Int)>>('deser_bytes');
  late final _deser_bytes = _deser_bytesPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<const_buffer>, int)>();

  int deser_u16(
    ffi.Pointer<ffi.Uint16> vo,
    ffi.Pointer<const_buffer> buf,
  ) {
    return _deser_u16(
      vo,
      buf,
    );
  }

  late final _deser_u16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<const_buffer>)>>('deser_u16');
  late final _deser_u16 = _deser_u16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<const_buffer>)>();

  int deser_u32(
    ffi.Pointer<ffi.Uint32> vo,
    ffi.Pointer<const_buffer> buf,
  ) {
    return _deser_u32(
      vo,
      buf,
    );
  }

  late final _deser_u32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<const_buffer>)>>('deser_u32');
  late final _deser_u32 = _deser_u32Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint32>, ffi.Pointer<const_buffer>)>();

  int deser_i32(
    ffi.Pointer<ffi.Int32> vo,
    ffi.Pointer<const_buffer> buf,
  ) {
    return _deser_i32(
      vo,
      buf,
    );
  }

  late final _deser_i32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int32>, ffi.Pointer<const_buffer>)>>('deser_i32');
  late final _deser_i32 = _deser_i32Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<const_buffer>)>();

  int deser_s32(
    ffi.Pointer<ffi.Int32> vo,
    ffi.Pointer<const_buffer> buf,
  ) {
    return _deser_s32(
      vo,
      buf,
    );
  }

  late final _deser_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int32>, ffi.Pointer<const_buffer>)>>('deser_s32');
  late final _deser_s32 = _deser_s32Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<const_buffer>)>();

  int deser_u64(
    ffi.Pointer<ffi.Uint64> vo,
    ffi.Pointer<const_buffer> buf,
  ) {
    return _deser_u64(
      vo,
      buf,
    );
  }

  late final _deser_u64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<const_buffer>)>>('deser_u64');
  late final _deser_u64 = _deser_u64Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint64>, ffi.Pointer<const_buffer>)>();

  int deser_u256(
    ffi.Pointer<ffi.Uint8> vo,
    ffi.Pointer<const_buffer> buf,
  ) {
    return _deser_u256(
      vo,
      buf,
    );
  }

  late final _deser_u256Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<const_buffer>)>>('deser_u256');
  late final _deser_u256 = _deser_u256Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<const_buffer>)>();

  int deser_varlen(
    ffi.Pointer<ffi.Uint32> lo,
    ffi.Pointer<const_buffer> buf,
  ) {
    return _deser_varlen(
      lo,
      buf,
    );
  }

  late final _deser_varlenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<const_buffer>)>>('deser_varlen');
  late final _deser_varlen = _deser_varlenPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint32>, ffi.Pointer<const_buffer>)>();

  int deser_varlen_file(
    ffi.Pointer<ffi.Uint32> lo,
    ffi.Pointer<FILE> file,
    ffi.Pointer<ffi.Uint8> rawdata,
    ffi.Pointer<ffi.Int> buflen_inout,
  ) {
    return _deser_varlen_file(
      lo,
      file,
      rawdata,
      buflen_inout,
    );
  }

  late final _deser_varlen_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Int>)>>('deser_varlen_file');
  late final _deser_varlen_file = _deser_varlen_filePtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint32>, ffi.Pointer<FILE>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Int>)>();

  int deser_str(
    ffi.Pointer<ffi.Char> so,
    ffi.Pointer<const_buffer> buf,
    int maxlen,
  ) {
    return _deser_str(
      so,
      buf,
      maxlen,
    );
  }

  late final _deser_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<const_buffer>,
              ffi.Int)>>('deser_str');
  late final _deser_str = _deser_strPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<const_buffer>, int)>();

  int deser_varstr(
    ffi.Pointer<ffi.Pointer<cstring>> so,
    ffi.Pointer<const_buffer> buf,
  ) {
    return _deser_varstr(
      so,
      buf,
    );
  }

  late final _deser_varstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<cstring>>,
              ffi.Pointer<const_buffer>)>>('deser_varstr');
  late final _deser_varstr = _deser_varstrPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<cstring>>, ffi.Pointer<const_buffer>)>();

  int deser_s64(
    ffi.Pointer<ffi.Int64> vo,
    ffi.Pointer<const_buffer> buf,
  ) {
    return _deser_s64(
      vo,
      buf,
    );
  }

  late final _deser_s64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int64>, ffi.Pointer<const_buffer>)>>('deser_s64');
  late final _deser_s64 = _deser_s64Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int64>, ffi.Pointer<const_buffer>)>();

  int remove24(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove24(
      __filename,
    );
  }

  late final _remove24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove24 =
      _remove24Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename24(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename24(
      __old,
      __new,
    );
  }

  late final _rename24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename24 = _rename24Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat24(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat24(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameat24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat24 = _renameat24Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose24(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose24(
      __stream,
    );
  }

  late final _fclose24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose24 =
      _fclose24Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile24() {
    return _tmpfile24();
  }

  late final _tmpfile24Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile24 =
      _tmpfile24Ptr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam24(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam24(
      arg0,
    );
  }

  late final _tmpnam24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam24 = _tmpnam24Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r24(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r24(
      __s,
    );
  }

  late final _tmpnam_r24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r24 = _tmpnam_r24Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam24(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam24(
      __dir,
      __pfx,
    );
  }

  late final _tempnam24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam24 = _tempnam24Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush24(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush24(
      __stream,
    );
  }

  late final _fflush24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush24 =
      _fflush24Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked24(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked24(
      __stream,
    );
  }

  late final _fflush_unlocked24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked24 =
      _fflush_unlocked24Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen24(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen24(
      __filename,
      __modes,
    );
  }

  late final _fopen24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen24 = _fopen24Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen24(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen24(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopen24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen24 = _freopen24Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen24(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen24(
      __fd,
      __modes,
    );
  }

  late final _fdopen24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen24 = _fdopen24Ptr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen24(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen24(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopen24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen24 = _fmemopen24Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream24(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Int> __sizeloc,
  ) {
    return _open_memstream24(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstream24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('open_memstream');
  late final _open_memstream24 = _open_memstream24Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void setbuf24(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf24(
      __stream,
      __buf,
    );
  }

  late final _setbuf24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf24 = _setbuf24Ptr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf24(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf24(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbuf24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('setvbuf');
  late final _setvbuf24 = _setvbuf24Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer24(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer24(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbuffer24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer24 = _setbuffer24Ptr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf24(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf24(
      __stream,
    );
  }

  late final _setlinebuf24Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf24 =
      _setlinebuf24Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf24(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf24(
      __stream,
      __format,
    );
  }

  late final _fprintf24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf24 = _fprintf24Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf24(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf24(
      __format,
    );
  }

  late final _printf24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf24 =
      _printf24Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf24(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf24(
      __s,
      __format,
    );
  }

  late final _sprintf24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf24 = _sprintf24Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf24(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfprintf24(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintf24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfprintf');
  late final _vfprintf24 = _vfprintf24Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vprintf24(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vprintf24(
      __format,
      __arg,
    );
  }

  late final _vprintf24Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vprintf');
  late final _vprintf24 =
      _vprintf24Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsprintf24(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsprintf24(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintf24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsprintf');
  late final _vsprintf24 = _vsprintf24Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int snprintf24(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf24(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintf24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf24 = _snprintf24Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf24(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsnprintf24(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintf24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('vsnprintf');
  late final _vsnprintf24 = _vsnprintf24Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int vdprintf24(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    int __arg,
  ) {
    return _vdprintf24(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintf24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('vdprintf');
  late final _vdprintf24 = _vdprintf24Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int dprintf24(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf24(
      __fd,
      __fmt,
    );
  }

  late final _dprintf24Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf24 =
      _dprintf24Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf48(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf48(
      __stream,
      __format,
    );
  }

  late final _fscanf48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf48 = _fscanf48Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf48(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf48(
      __format,
    );
  }

  late final _scanf48Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf48 =
      _scanf48Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf48(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf48(
      __s,
      __format,
    );
  }

  late final _sscanf48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf48 = _sscanf48Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fscanf49(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf49(
      __stream,
      __format,
    );
  }

  late final _fscanf49Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf49 = _fscanf49Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf49(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf49(
      __format,
    );
  }

  late final _scanf49Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf49 =
      _scanf49Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf49(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf49(
      __s,
      __format,
    );
  }

  late final _sscanf49Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf49 = _sscanf49Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf48(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf48(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf48 = _vfscanf48Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf48(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf48(
      __format,
      __arg,
    );
  }

  late final _vscanf48Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf48 =
      _vscanf48Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf48(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf48(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf48 = _vsscanf48Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int vfscanf49(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf49(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf49Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf49 = _vfscanf49Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf49(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf49(
      __format,
      __arg,
    );
  }

  late final _vscanf49Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf49 =
      _vscanf49Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf49(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf49(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf49Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf49 = _vsscanf49Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fgetc24(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc24(
      __stream,
    );
  }

  late final _fgetc24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc24 =
      _fgetc24Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc24(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc24(
      __stream,
    );
  }

  late final _getc24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc24 = _getc24Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar24() {
    return _getchar24();
  }

  late final _getchar24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar24 = _getchar24Ptr.asFunction<int Function()>();

  int getc_unlocked24(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked24(
      __stream,
    );
  }

  late final _getc_unlocked24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked24 =
      _getc_unlocked24Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked24() {
    return _getchar_unlocked24();
  }

  late final _getchar_unlocked24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked24 =
      _getchar_unlocked24Ptr.asFunction<int Function()>();

  int fgetc_unlocked24(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked24(
      __stream,
    );
  }

  late final _fgetc_unlocked24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked24 =
      _fgetc_unlocked24Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc24(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc24(
      __c,
      __stream,
    );
  }

  late final _fputc24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc24 =
      _fputc24Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc24(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc24(
      __c,
      __stream,
    );
  }

  late final _putc24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc24 =
      _putc24Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar24(
    int __c,
  ) {
    return _putchar24(
      __c,
    );
  }

  late final _putchar24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar24 = _putchar24Ptr.asFunction<int Function(int)>();

  int fputc_unlocked24(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked24(
      __c,
      __stream,
    );
  }

  late final _fputc_unlocked24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked24 =
      _fputc_unlocked24Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked24(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked24(
      __c,
      __stream,
    );
  }

  late final _putc_unlocked24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked24 =
      _putc_unlocked24Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked24(
    int __c,
  ) {
    return _putchar_unlocked24(
      __c,
    );
  }

  late final _putchar_unlocked24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked24 =
      _putchar_unlocked24Ptr.asFunction<int Function(int)>();

  int getw24(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw24(
      __stream,
    );
  }

  late final _getw24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw24 = _getw24Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw24(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw24(
      __w,
      __stream,
    );
  }

  late final _putw24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw24 =
      _putw24Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets24(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets24(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgets24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets24 = _fgets24Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim24(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim24(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelim24Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim24 = ___getdelim24Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getdelim24(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim24(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelim24Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim24 = _getdelim24Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getline24(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline24(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getline24Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<FILE>)>>('getline');
  late final _getline24 = _getline24Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<FILE>)>();

  int fputs24(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs24(
      __s,
      __stream,
    );
  }

  late final _fputs24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs24 = _fputs24Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts24(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts24(
      __s,
    );
  }

  late final _puts24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts24 =
      _puts24Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc24(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc24(
      __c,
      __stream,
    );
  }

  late final _ungetc24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc24 =
      _ungetc24Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread24(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread24(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread24 = _fread24Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite24(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite24(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwrite24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite24 = _fwrite24Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked24(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked24(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlocked24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked24 = _fread_unlocked24Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked24(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked24(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlocked24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked24 = _fwrite_unlocked24Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek24(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek24(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseek24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek24 =
      _fseek24Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell24(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell24(
      __stream,
    );
  }

  late final _ftell24Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell24 =
      _ftell24Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind24(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind24(
      __stream,
    );
  }

  late final _rewind24Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind24 =
      _rewind24Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko24(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko24(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseeko24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko24 =
      _fseeko24Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello24(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello24(
      __stream,
    );
  }

  late final _ftello24Ptr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello24 =
      _ftello24Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos24(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos24(
      __stream,
      __pos,
    );
  }

  late final _fgetpos24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos24 = _fgetpos24Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos24(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos24(
      __stream,
      __pos,
    );
  }

  late final _fsetpos24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos24 = _fsetpos24Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr24(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr24(
      __stream,
    );
  }

  late final _clearerr24Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr24 =
      _clearerr24Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof24(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof24(
      __stream,
    );
  }

  late final _feof24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof24 = _feof24Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror24(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror24(
      __stream,
    );
  }

  late final _ferror24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror24 =
      _ferror24Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked24(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked24(
      __stream,
    );
  }

  late final _clearerr_unlocked24Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked24 =
      _clearerr_unlocked24Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked24(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked24(
      __stream,
    );
  }

  late final _feof_unlocked24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked24 =
      _feof_unlocked24Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked24(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked24(
      __stream,
    );
  }

  late final _ferror_unlocked24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked24 =
      _ferror_unlocked24Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror24(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror24(
      __s,
    );
  }

  late final _perror24Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror24 =
      _perror24Ptr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno24(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno24(
      __stream,
    );
  }

  late final _fileno24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno24 =
      _fileno24Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked24(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked24(
      __stream,
    );
  }

  late final _fileno_unlocked24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked24 =
      _fileno_unlocked24Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose24(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose24(
      __stream,
    );
  }

  late final _pclose24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose24 =
      _pclose24Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen24(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen24(
      __command,
      __modes,
    );
  }

  late final _popen24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen24 = _popen24Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid24(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid24(
      __s,
    );
  }

  late final _ctermid24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid24 = _ctermid24Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile24(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile24(
      __stream,
    );
  }

  late final _flockfile24Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile24 =
      _flockfile24Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile24(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile24(
      __stream,
    );
  }

  late final _ftrylockfile24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile24 =
      _ftrylockfile24Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile24(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile24(
      __stream,
    );
  }

  late final _funlockfile24Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile24 =
      _funlockfile24Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow24(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow24(
      arg0,
    );
  }

  late final ___uflow24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow24 =
      ___uflow24Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow24(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow24(
      arg0,
      arg1,
    );
  }

  late final ___overflow24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow24 =
      ___overflow24Ptr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __ctype_get_mb_cur_max24() {
    return ___ctype_get_mb_cur_max24();
  }

  late final ___ctype_get_mb_cur_max24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max24 =
      ___ctype_get_mb_cur_max24Ptr.asFunction<int Function()>();

  double atof24(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof24(
      __nptr,
    );
  }

  late final _atof24Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof24 =
      _atof24Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi24(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi24(
      __nptr,
    );
  }

  late final _atoi24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi24 =
      _atoi24Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol24(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol24(
      __nptr,
    );
  }

  late final _atol24Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol24 =
      _atol24Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll24(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll24(
      __nptr,
    );
  }

  late final _atoll24Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll24 =
      _atoll24Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod24(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod24(
      __nptr,
      __endptr,
    );
  }

  late final _strtod24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod24 = _strtod24Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof24(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof24(
      __nptr,
      __endptr,
    );
  }

  late final _strtof24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof24 = _strtof24Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol24(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol24(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol24 = _strtol24Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul24(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul24(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul24 = _strtoul24Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq24(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq24(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq24 = _strtoq24Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq24(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq24(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq24 = _strtouq24Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll24(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll24(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll24 = _strtoll24Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull24(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull24(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull24 = _strtoull24Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a24(
    int __n,
  ) {
    return _l64a24(
      __n,
    );
  }

  late final _l64a24Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a24 =
      _l64a24Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l24(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l24(
      __s,
    );
  }

  late final _a64l24Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l24 =
      _a64l24Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select24(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select24(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select24 = _select24Ptr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect24(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect24(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect24 = _pselect24Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random24() {
    return _random24();
  }

  late final _random24Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random24 = _random24Ptr.asFunction<int Function()>();

  void srandom24(
    int __seed,
  ) {
    return _srandom24(
      __seed,
    );
  }

  late final _srandom24Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom24 = _srandom24Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate24(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate24(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int)>>('initstate');
  late final _initstate24 = _initstate24Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate24(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate24(
      __statebuf,
    );
  }

  late final _setstate24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate24 = _setstate24Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r24(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r24(
      __buf,
      __result,
    );
  }

  late final _random_r24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r24 = _random_r24Ptr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r24(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r24(
      __seed,
      __buf,
    );
  }

  late final _srandom_r24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r24 =
      _srandom_r24Ptr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r24(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r24(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r24 = _initstate_r24Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r24(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r24(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r24 = _setstate_r24Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand24() {
    return _rand24();
  }

  late final _rand24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand24 = _rand24Ptr.asFunction<int Function()>();

  void srand24(
    int __seed,
  ) {
    return _srand24(
      __seed,
    );
  }

  late final _srand24Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand24 = _srand24Ptr.asFunction<void Function(int)>();

  int rand_r24(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r24(
      __seed,
    );
  }

  late final _rand_r24Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r24 =
      _rand_r24Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand4824() {
    return _drand4824();
  }

  late final _drand4824Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand4824 = _drand4824Ptr.asFunction<double Function()>();

  double erand4824(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand4824(
      __xsubi,
    );
  }

  late final _erand4824Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand4824 = _erand4824Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand4824() {
    return _lrand4824();
  }

  late final _lrand4824Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand4824 = _lrand4824Ptr.asFunction<int Function()>();

  int nrand4824(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand4824(
      __xsubi,
    );
  }

  late final _nrand4824Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand4824 =
      _nrand4824Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand4824() {
    return _mrand4824();
  }

  late final _mrand4824Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand4824 = _mrand4824Ptr.asFunction<int Function()>();

  int jrand4824(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand4824(
      __xsubi,
    );
  }

  late final _jrand4824Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand4824 =
      _jrand4824Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand4824(
    int __seedval,
  ) {
    return _srand4824(
      __seedval,
    );
  }

  late final _srand4824Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand4824 = _srand4824Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed4824(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed4824(
      __seed16v,
    );
  }

  late final _seed4824Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed4824 = _seed4824Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong4824(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong4824(
      __param,
    );
  }

  late final _lcong4824Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong4824 =
      _lcong4824Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r24(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r24(
      __buffer,
      __result,
    );
  }

  late final _drand48_r24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r24 = _drand48_r24Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r24(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r24(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r24 = _erand48_r24Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r24(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r24(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r24 = _lrand48_r24Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r24(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r24(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r24 = _nrand48_r24Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r24(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r24(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r24 = _mrand48_r24Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r24(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r24(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r24 = _jrand48_r24Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r24(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r24(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r24 = _srand48_r24Ptr
      .asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r24(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r24(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r24 = _seed48_r24Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r24(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r24(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r24 = _lcong48_r24Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int arc4random24() {
    return _arc4random24();
  }

  late final _arc4random24Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random24 = _arc4random24Ptr.asFunction<int Function()>();

  void arc4random_buf24(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf24(
      __buf,
      __size,
    );
  }

  late final _arc4random_buf24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('arc4random_buf');
  late final _arc4random_buf24 = _arc4random_buf24Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform24(
    int __upper_bound,
  ) {
    return _arc4random_uniform24(
      __upper_bound,
    );
  }

  late final _arc4random_uniform24Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
          'arc4random_uniform');
  late final _arc4random_uniform24 =
      _arc4random_uniform24Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc24(
    int __size,
  ) {
    return _malloc24(
      __size,
    );
  }

  late final _malloc24Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'malloc');
  late final _malloc24 =
      _malloc24Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc24(
    int __nmemb,
    int __size,
  ) {
    return _calloc24(
      __nmemb,
      __size,
    );
  }

  late final _calloc24Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'calloc');
  late final _calloc24 =
      _calloc24Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc24(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc24(
      __ptr,
      __size,
    );
  }

  late final _realloc24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('realloc');
  late final _realloc24 = _realloc24Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free24(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free24(
      __ptr,
    );
  }

  late final _free24Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free24 =
      _free24Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray48(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray48(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray48 = _reallocarray48Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray49(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray49(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray49Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray49 = _reallocarray49Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca24(
    int __size,
  ) {
    return _alloca24(
      __size,
    );
  }

  late final _alloca24Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'alloca');
  late final _alloca24 =
      _alloca24Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc24(
    int __size,
  ) {
    return _valloc24(
      __size,
    );
  }

  late final _valloc24Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'valloc');
  late final _valloc24 =
      _valloc24Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign24(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign24(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int,
              ffi.Int)>>('posix_memalign');
  late final _posix_memalign24 = _posix_memalign24Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc24(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc24(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc24Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'aligned_alloc');
  late final _aligned_alloc24 = _aligned_alloc24Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort24() {
    return _abort24();
  }

  late final _abort24Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort24 = _abort24Ptr.asFunction<void Function()>();

  int atexit24(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit24(
      __func,
    );
  }

  late final _atexit24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit24 = _atexit24Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit24(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit24(
      __func,
    );
  }

  late final _at_quick_exit24Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit24 = _at_quick_exit24Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit24(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit24(
      __func,
      __arg,
    );
  }

  late final _on_exit24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit24 = _on_exit24Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit24(
    int __status,
  ) {
    return _exit24(
      __status,
    );
  }

  late final _exit24Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit24 = _exit24Ptr.asFunction<void Function(int)>();

  void quick_exit24(
    int __status,
  ) {
    return _quick_exit24(
      __status,
    );
  }

  late final _quick_exit24Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit24 = _quick_exit24Ptr.asFunction<void Function(int)>();

  void _Exit24(
    int __status,
  ) {
    return __Exit24(
      __status,
    );
  }

  late final __Exit24Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit24 = __Exit24Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv24(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv24(
      __name,
    );
  }

  late final _getenv24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv24 = _getenv24Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv24(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv24(
      __string,
    );
  }

  late final _putenv24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv24 =
      _putenv24Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv24(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv24(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv24 = _setenv24Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv24(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv24(
      __name,
    );
  }

  late final _unsetenv24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv24 =
      _unsetenv24Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv24() {
    return _clearenv24();
  }

  late final _clearenv24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv24 = _clearenv24Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp24(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp24(
      __template,
    );
  }

  late final _mktemp24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp24 = _mktemp24Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp24(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp24(
      __template,
    );
  }

  late final _mkstemp24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp24 =
      _mkstemp24Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps24(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps24(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps24Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps24 =
      _mkstemps24Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp24(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp24(
      __template,
    );
  }

  late final _mkdtemp24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp24 = _mkdtemp24Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system24(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system24(
      __command,
    );
  }

  late final _system24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system24 =
      _system24Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath24(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath24(
      __name,
      __resolved,
    );
  }

  late final _realpath24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath24 = _realpath24Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch24(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch24(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              __compar_fn_t)>>('bsearch');
  late final _bsearch24 = _bsearch24Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort24(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort24(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              __compar_fn_t)>>('qsort');
  late final _qsort24 = _qsort24Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs24(
    int __x,
  ) {
    return _abs24(
      __x,
    );
  }

  late final _abs24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs24 = _abs24Ptr.asFunction<int Function(int)>();

  int labs24(
    int __x,
  ) {
    return _labs24(
      __x,
    );
  }

  late final _labs24Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs24 = _labs24Ptr.asFunction<int Function(int)>();

  int llabs24(
    int __x,
  ) {
    return _llabs24(
      __x,
    );
  }

  late final _llabs24Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs24 = _llabs24Ptr.asFunction<int Function(int)>();

  div_t div24(
    int __numer,
    int __denom,
  ) {
    return _div24(
      __numer,
      __denom,
    );
  }

  late final _div24Ptr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div24 = _div24Ptr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv24(
    int __numer,
    int __denom,
  ) {
    return _ldiv24(
      __numer,
      __denom,
    );
  }

  late final _ldiv24Ptr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv24 = _ldiv24Ptr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv24(
    int __numer,
    int __denom,
  ) {
    return _lldiv24(
      __numer,
      __denom,
    );
  }

  late final _lldiv24Ptr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv24 = _lldiv24Ptr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt24(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt24(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt24 = _ecvt24Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt24(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt24(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt24 = _fcvt24Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt24(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt24(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt24 = _gcvt24Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r24(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r24(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('ecvt_r');
  late final _ecvt_r24 = _ecvt_r24Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r24(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r24(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('fcvt_r');
  late final _fcvt_r24 = _fcvt_r24Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen24(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen24(
      __s,
      __n,
    );
  }

  late final _mblen24Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mblen');
  late final _mblen24 =
      _mblen24Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc24(
    ffi.Pointer<ffi.Int> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc24(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('mbtowc');
  late final _mbtowc24 = _mbtowc24Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb24(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb24(
      __s,
      __wchar,
    );
  }

  late final _wctomb24Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'wctomb');
  late final _wctomb24 =
      _wctomb24Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs24(
    ffi.Pointer<ffi.Int> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs24(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mbstowcs');
  late final _mbstowcs24 = _mbstowcs24Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs24(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Int> __pwcs,
    int __n,
  ) {
    return _wcstombs24(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('wcstombs');
  late final _wcstombs24 = _wcstombs24Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  int rpmatch24(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch24(
      __response,
    );
  }

  late final _rpmatch24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch24 =
      _rpmatch24Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt24(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt24(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt24 = _getsubopt24Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg24(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg24(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg24 =
      _getloadavg24Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Void> memcpy24(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy24(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpy24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memcpy');
  late final _memcpy24 = _memcpy24Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove24(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove24(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmove24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memmove');
  late final _memmove24 = _memmove24Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy24(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy24(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpy24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memccpy');
  late final _memccpy24 = _memccpy24Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset24(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset24(
      __s,
      __c,
      __n,
    );
  }

  late final _memset24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memset');
  late final _memset24 = _memset24Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp24(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp24(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmp24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('memcmp');
  late final _memcmp24 = _memcmp24Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq24(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq24(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeq24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__memcmpeq');
  late final ___memcmpeq24 = ___memcmpeq24Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr24(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr24(
      __s,
      __c,
      __n,
    );
  }

  late final _memchr24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memchr');
  late final _memchr24 = _memchr24Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy24(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy24(
      __dest,
      __src,
    );
  }

  late final _strcpy24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy24 = _strcpy24Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy24(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy24(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpy24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncpy');
  late final _strncpy24 = _strncpy24Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat24(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat24(
      __dest,
      __src,
    );
  }

  late final _strcat24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat24 = _strcat24Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat24(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat24(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncat24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncat');
  late final _strncat24 = _strncat24Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp24(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp24(
      __s1,
      __s2,
    );
  }

  late final _strcmp24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp24 = _strcmp24Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp24(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp24(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmp24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncmp');
  late final _strncmp24 = _strncmp24Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll24(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll24(
      __s1,
      __s2,
    );
  }

  late final _strcoll24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll24 = _strcoll24Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm24(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm24(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrm24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strxfrm');
  late final _strxfrm24 = _strxfrm24Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l24(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l24(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_l24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l24 = _strcoll_l24Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l24(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l24(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_l24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strxfrm_l');
  late final _strxfrm_l24 = _strxfrm_l24Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup24(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup24(
      __s,
    );
  }

  late final _strdup24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup24 = _strdup24Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup24(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup24(
      __string,
      __n,
    );
  }

  late final _strndup24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strndup');
  late final _strndup24 = _strndup24Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr24(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr24(
      __s,
      __c,
    );
  }

  late final _strchr24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr24 = _strchr24Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr24(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr24(
      __s,
      __c,
    );
  }

  late final _strrchr24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr24 = _strrchr24Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn24(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn24(
      __s,
      __reject,
    );
  }

  late final _strcspn24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn24 = _strcspn24Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn24(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn24(
      __s,
      __accept,
    );
  }

  late final _strspn24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn24 = _strspn24Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk24(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk24(
      __s,
      __accept,
    );
  }

  late final _strpbrk24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk24 = _strpbrk24Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr24(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr24(
      __haystack,
      __needle,
    );
  }

  late final _strstr24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr24 = _strstr24Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok24(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok24(
      __s,
      __delim,
    );
  }

  late final _strtok24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok24 = _strtok24Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r24(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r24(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_r24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r24 = ___strtok_r24Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r24(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r24(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_r24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r24 = _strtok_r24Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen24(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen24(
      __s,
    );
  }

  late final _strlen24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'strlen');
  late final _strlen24 =
      _strlen24Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen24(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen24(
      __string,
      __maxlen,
    );
  }

  late final _strnlen24Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'strnlen');
  late final _strnlen24 =
      _strnlen24Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror24(
    int __errnum,
  ) {
    return _strerror24(
      __errnum,
    );
  }

  late final _strerror24Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror24 =
      _strerror24Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r24(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r24(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_r24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('strerror_r');
  late final _strerror_r24 = _strerror_r24Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l24(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l24(
      __errnum,
      __l,
    );
  }

  late final _strerror_l24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l24 = _strerror_l24Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp24(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp24(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmp24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcmp');
  late final _bcmp24 = _bcmp24Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy24(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy24(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopy24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcopy');
  late final _bcopy24 = _bcopy24Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero24(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero24(
      __s,
      __n,
    );
  }

  late final _bzero24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('bzero');
  late final _bzero24 =
      _bzero24Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index24(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index24(
      __s,
      __c,
    );
  }

  late final _index24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index24 = _index24Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex24(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex24(
      __s,
      __c,
    );
  }

  late final _rindex24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex24 = _rindex24Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs24(
    int __i,
  ) {
    return _ffs24(
      __i,
    );
  }

  late final _ffs24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs24 = _ffs24Ptr.asFunction<int Function(int)>();

  int ffsl24(
    int __l,
  ) {
    return _ffsl24(
      __l,
    );
  }

  late final _ffsl24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl24 = _ffsl24Ptr.asFunction<int Function(int)>();

  int ffsll24(
    int __ll,
  ) {
    return _ffsll24(
      __ll,
    );
  }

  late final _ffsll24Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll24 = _ffsll24Ptr.asFunction<int Function(int)>();

  int strcasecmp24(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp24(
      __s1,
      __s2,
    );
  }

  late final _strcasecmp24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp24 = _strcasecmp24Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp24(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp24(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmp24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncasecmp');
  late final _strncasecmp24 = _strncasecmp24Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l24(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l24(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_l24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l24 = _strcasecmp_l24Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l24(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l24(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_l24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l24 = _strncasecmp_l24Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero24(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero24(
      __s,
      __n,
    );
  }

  late final _explicit_bzero24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('explicit_bzero');
  late final _explicit_bzero24 = _explicit_bzero24Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep24(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep24(
      __stringp,
      __delim,
    );
  }

  late final _strsep24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep24 = _strsep24Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal24(
    int __sig,
  ) {
    return _strsignal24(
      __sig,
    );
  }

  late final _strsignal24Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal24 =
      _strsignal24Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy24(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy24(
      __dest,
      __src,
    );
  }

  late final ___stpcpy24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy24 = ___stpcpy24Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy24(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy24(
      __dest,
      __src,
    );
  }

  late final _stpcpy24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy24 = _stpcpy24Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy24(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy24(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpy24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('__stpncpy');
  late final ___stpncpy24 = ___stpncpy24Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy24(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy24(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpy24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('stpncpy');
  late final _stpncpy24 = _stpncpy24Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void sha256_init3(
    ffi.Pointer<sha256_context> arg0,
  ) {
    return _sha256_init3(
      arg0,
    );
  }

  late final _sha256_init3Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sha256_context>)>>(
      'sha256_init');
  late final _sha256_init3 =
      _sha256_init3Ptr.asFunction<void Function(ffi.Pointer<sha256_context>)>();

  void sha256_write3(
    ffi.Pointer<sha256_context> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
    int size_t,
  ) {
    return _sha256_write3(
      arg0,
      arg1,
      size_t,
    );
  }

  late final _sha256_write3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sha256_context>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('sha256_write');
  late final _sha256_write3 = _sha256_write3Ptr.asFunction<
      void Function(
          ffi.Pointer<sha256_context>, ffi.Pointer<ffi.Uint8>, int)>();

  void sha256_finalize3(
    ffi.Pointer<sha256_context> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
  ) {
    return _sha256_finalize3(
      arg0,
      arg1,
    );
  }

  late final _sha256_finalize3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sha256_context>,
              ffi.Pointer<ffi.Uint8>)>>('sha256_finalize');
  late final _sha256_finalize3 = _sha256_finalize3Ptr.asFunction<
      void Function(ffi.Pointer<sha256_context>, ffi.Pointer<ffi.Uint8>)>();

  void sha256_raw3(
    ffi.Pointer<ffi.Uint8> arg0,
    int size_t,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return _sha256_raw3(
      arg0,
      size_t,
      arg2,
    );
  }

  late final _sha256_raw3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<ffi.Uint8>)>>('sha256_raw');
  late final _sha256_raw3 = _sha256_raw3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  void sha512_init3(
    ffi.Pointer<sha512_context> arg0,
  ) {
    return _sha512_init3(
      arg0,
    );
  }

  late final _sha512_init3Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sha512_context>)>>(
      'sha512_init');
  late final _sha512_init3 =
      _sha512_init3Ptr.asFunction<void Function(ffi.Pointer<sha512_context>)>();

  void sha512_write3(
    ffi.Pointer<sha512_context> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
    int size_t,
  ) {
    return _sha512_write3(
      arg0,
      arg1,
      size_t,
    );
  }

  late final _sha512_write3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sha512_context>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('sha512_write');
  late final _sha512_write3 = _sha512_write3Ptr.asFunction<
      void Function(
          ffi.Pointer<sha512_context>, ffi.Pointer<ffi.Uint8>, int)>();

  void sha512_finalize3(
    ffi.Pointer<sha512_context> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
  ) {
    return _sha512_finalize3(
      arg0,
      arg1,
    );
  }

  late final _sha512_finalize3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sha512_context>,
              ffi.Pointer<ffi.Uint8>)>>('sha512_finalize');
  late final _sha512_finalize3 = _sha512_finalize3Ptr.asFunction<
      void Function(ffi.Pointer<sha512_context>, ffi.Pointer<ffi.Uint8>)>();

  void sha512_raw3(
    ffi.Pointer<ffi.Uint8> arg0,
    int size_t,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return _sha512_raw3(
      arg0,
      size_t,
      arg2,
    );
  }

  late final _sha512_raw3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<ffi.Uint8>)>>('sha512_raw');
  late final _sha512_raw3 = _sha512_raw3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  void hmac_sha2563(
    ffi.Pointer<ffi.Uint8> key,
    int keylen,
    ffi.Pointer<ffi.Uint8> msg,
    int msglen,
    ffi.Pointer<ffi.Uint8> hmac,
  ) {
    return _hmac_sha2563(
      key,
      keylen,
      msg,
      msglen,
      hmac,
    );
  }

  late final _hmac_sha2563Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint8>)>>('hmac_sha256');
  late final _hmac_sha2563 = _hmac_sha2563Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>)>();

  void hmac_sha5123(
    ffi.Pointer<ffi.Uint8> key,
    int keylen,
    ffi.Pointer<ffi.Uint8> msg,
    int msglen,
    ffi.Pointer<ffi.Uint8> hmac,
  ) {
    return _hmac_sha5123(
      key,
      keylen,
      msg,
      msglen,
      hmac,
    );
  }

  late final _hmac_sha5123Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint8>)>>('hmac_sha512');
  late final _hmac_sha5123 = _hmac_sha5123Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>)>();

  int remove25(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove25(
      __filename,
    );
  }

  late final _remove25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove25 =
      _remove25Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename25(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename25(
      __old,
      __new,
    );
  }

  late final _rename25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename25 = _rename25Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat25(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat25(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameat25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat25 = _renameat25Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose25(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose25(
      __stream,
    );
  }

  late final _fclose25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose25 =
      _fclose25Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile25() {
    return _tmpfile25();
  }

  late final _tmpfile25Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile25 =
      _tmpfile25Ptr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam25(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam25(
      arg0,
    );
  }

  late final _tmpnam25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam25 = _tmpnam25Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r25(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r25(
      __s,
    );
  }

  late final _tmpnam_r25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r25 = _tmpnam_r25Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam25(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam25(
      __dir,
      __pfx,
    );
  }

  late final _tempnam25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam25 = _tempnam25Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush25(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush25(
      __stream,
    );
  }

  late final _fflush25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush25 =
      _fflush25Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked25(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked25(
      __stream,
    );
  }

  late final _fflush_unlocked25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked25 =
      _fflush_unlocked25Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen25(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen25(
      __filename,
      __modes,
    );
  }

  late final _fopen25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen25 = _fopen25Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen25(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen25(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopen25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen25 = _freopen25Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen25(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen25(
      __fd,
      __modes,
    );
  }

  late final _fdopen25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen25 = _fdopen25Ptr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen25(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen25(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopen25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen25 = _fmemopen25Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream25(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Int> __sizeloc,
  ) {
    return _open_memstream25(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstream25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('open_memstream');
  late final _open_memstream25 = _open_memstream25Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void setbuf25(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf25(
      __stream,
      __buf,
    );
  }

  late final _setbuf25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf25 = _setbuf25Ptr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf25(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf25(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbuf25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('setvbuf');
  late final _setvbuf25 = _setvbuf25Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer25(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer25(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbuffer25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer25 = _setbuffer25Ptr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf25(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf25(
      __stream,
    );
  }

  late final _setlinebuf25Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf25 =
      _setlinebuf25Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf25(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf25(
      __stream,
      __format,
    );
  }

  late final _fprintf25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf25 = _fprintf25Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf25(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf25(
      __format,
    );
  }

  late final _printf25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf25 =
      _printf25Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf25(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf25(
      __s,
      __format,
    );
  }

  late final _sprintf25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf25 = _sprintf25Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf25(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfprintf25(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintf25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfprintf');
  late final _vfprintf25 = _vfprintf25Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vprintf25(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vprintf25(
      __format,
      __arg,
    );
  }

  late final _vprintf25Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vprintf');
  late final _vprintf25 =
      _vprintf25Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsprintf25(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsprintf25(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintf25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsprintf');
  late final _vsprintf25 = _vsprintf25Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int snprintf25(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf25(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintf25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf25 = _snprintf25Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf25(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsnprintf25(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintf25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('vsnprintf');
  late final _vsnprintf25 = _vsnprintf25Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int vdprintf25(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    int __arg,
  ) {
    return _vdprintf25(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintf25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('vdprintf');
  late final _vdprintf25 = _vdprintf25Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int dprintf25(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf25(
      __fd,
      __fmt,
    );
  }

  late final _dprintf25Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf25 =
      _dprintf25Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf50(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf50(
      __stream,
      __format,
    );
  }

  late final _fscanf50Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf50 = _fscanf50Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf50(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf50(
      __format,
    );
  }

  late final _scanf50Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf50 =
      _scanf50Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf50(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf50(
      __s,
      __format,
    );
  }

  late final _sscanf50Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf50 = _sscanf50Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fscanf51(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf51(
      __stream,
      __format,
    );
  }

  late final _fscanf51Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf51 = _fscanf51Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf51(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf51(
      __format,
    );
  }

  late final _scanf51Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf51 =
      _scanf51Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf51(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf51(
      __s,
      __format,
    );
  }

  late final _sscanf51Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf51 = _sscanf51Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf50(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf50(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf50Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf50 = _vfscanf50Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf50(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf50(
      __format,
      __arg,
    );
  }

  late final _vscanf50Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf50 =
      _vscanf50Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf50(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf50(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf50Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf50 = _vsscanf50Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int vfscanf51(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf51(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf51Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf51 = _vfscanf51Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf51(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf51(
      __format,
      __arg,
    );
  }

  late final _vscanf51Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf51 =
      _vscanf51Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf51(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf51(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf51Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf51 = _vsscanf51Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fgetc25(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc25(
      __stream,
    );
  }

  late final _fgetc25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc25 =
      _fgetc25Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc25(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc25(
      __stream,
    );
  }

  late final _getc25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc25 = _getc25Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar25() {
    return _getchar25();
  }

  late final _getchar25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar25 = _getchar25Ptr.asFunction<int Function()>();

  int getc_unlocked25(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked25(
      __stream,
    );
  }

  late final _getc_unlocked25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked25 =
      _getc_unlocked25Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked25() {
    return _getchar_unlocked25();
  }

  late final _getchar_unlocked25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked25 =
      _getchar_unlocked25Ptr.asFunction<int Function()>();

  int fgetc_unlocked25(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked25(
      __stream,
    );
  }

  late final _fgetc_unlocked25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked25 =
      _fgetc_unlocked25Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc25(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc25(
      __c,
      __stream,
    );
  }

  late final _fputc25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc25 =
      _fputc25Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc25(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc25(
      __c,
      __stream,
    );
  }

  late final _putc25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc25 =
      _putc25Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar25(
    int __c,
  ) {
    return _putchar25(
      __c,
    );
  }

  late final _putchar25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar25 = _putchar25Ptr.asFunction<int Function(int)>();

  int fputc_unlocked25(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked25(
      __c,
      __stream,
    );
  }

  late final _fputc_unlocked25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked25 =
      _fputc_unlocked25Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked25(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked25(
      __c,
      __stream,
    );
  }

  late final _putc_unlocked25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked25 =
      _putc_unlocked25Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked25(
    int __c,
  ) {
    return _putchar_unlocked25(
      __c,
    );
  }

  late final _putchar_unlocked25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked25 =
      _putchar_unlocked25Ptr.asFunction<int Function(int)>();

  int getw25(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw25(
      __stream,
    );
  }

  late final _getw25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw25 = _getw25Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw25(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw25(
      __w,
      __stream,
    );
  }

  late final _putw25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw25 =
      _putw25Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets25(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets25(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgets25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets25 = _fgets25Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim25(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim25(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelim25Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim25 = ___getdelim25Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getdelim25(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim25(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelim25Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim25 = _getdelim25Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getline25(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline25(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getline25Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<FILE>)>>('getline');
  late final _getline25 = _getline25Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<FILE>)>();

  int fputs25(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs25(
      __s,
      __stream,
    );
  }

  late final _fputs25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs25 = _fputs25Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts25(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts25(
      __s,
    );
  }

  late final _puts25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts25 =
      _puts25Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc25(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc25(
      __c,
      __stream,
    );
  }

  late final _ungetc25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc25 =
      _ungetc25Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread25(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread25(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread25 = _fread25Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite25(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite25(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwrite25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite25 = _fwrite25Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked25(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked25(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlocked25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked25 = _fread_unlocked25Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked25(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked25(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlocked25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked25 = _fwrite_unlocked25Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek25(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek25(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseek25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek25 =
      _fseek25Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell25(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell25(
      __stream,
    );
  }

  late final _ftell25Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell25 =
      _ftell25Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind25(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind25(
      __stream,
    );
  }

  late final _rewind25Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind25 =
      _rewind25Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko25(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko25(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseeko25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko25 =
      _fseeko25Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello25(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello25(
      __stream,
    );
  }

  late final _ftello25Ptr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello25 =
      _ftello25Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos25(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos25(
      __stream,
      __pos,
    );
  }

  late final _fgetpos25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos25 = _fgetpos25Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos25(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos25(
      __stream,
      __pos,
    );
  }

  late final _fsetpos25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos25 = _fsetpos25Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr25(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr25(
      __stream,
    );
  }

  late final _clearerr25Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr25 =
      _clearerr25Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof25(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof25(
      __stream,
    );
  }

  late final _feof25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof25 = _feof25Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror25(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror25(
      __stream,
    );
  }

  late final _ferror25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror25 =
      _ferror25Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked25(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked25(
      __stream,
    );
  }

  late final _clearerr_unlocked25Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked25 =
      _clearerr_unlocked25Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked25(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked25(
      __stream,
    );
  }

  late final _feof_unlocked25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked25 =
      _feof_unlocked25Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked25(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked25(
      __stream,
    );
  }

  late final _ferror_unlocked25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked25 =
      _ferror_unlocked25Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror25(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror25(
      __s,
    );
  }

  late final _perror25Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror25 =
      _perror25Ptr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno25(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno25(
      __stream,
    );
  }

  late final _fileno25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno25 =
      _fileno25Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked25(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked25(
      __stream,
    );
  }

  late final _fileno_unlocked25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked25 =
      _fileno_unlocked25Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose25(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose25(
      __stream,
    );
  }

  late final _pclose25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose25 =
      _pclose25Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen25(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen25(
      __command,
      __modes,
    );
  }

  late final _popen25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen25 = _popen25Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid25(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid25(
      __s,
    );
  }

  late final _ctermid25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid25 = _ctermid25Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile25(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile25(
      __stream,
    );
  }

  late final _flockfile25Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile25 =
      _flockfile25Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile25(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile25(
      __stream,
    );
  }

  late final _ftrylockfile25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile25 =
      _ftrylockfile25Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile25(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile25(
      __stream,
    );
  }

  late final _funlockfile25Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile25 =
      _funlockfile25Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow25(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow25(
      arg0,
    );
  }

  late final ___uflow25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow25 =
      ___uflow25Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow25(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow25(
      arg0,
      arg1,
    );
  }

  late final ___overflow25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow25 =
      ___overflow25Ptr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __ctype_get_mb_cur_max25() {
    return ___ctype_get_mb_cur_max25();
  }

  late final ___ctype_get_mb_cur_max25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max25 =
      ___ctype_get_mb_cur_max25Ptr.asFunction<int Function()>();

  double atof25(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof25(
      __nptr,
    );
  }

  late final _atof25Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof25 =
      _atof25Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi25(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi25(
      __nptr,
    );
  }

  late final _atoi25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi25 =
      _atoi25Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol25(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol25(
      __nptr,
    );
  }

  late final _atol25Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol25 =
      _atol25Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll25(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll25(
      __nptr,
    );
  }

  late final _atoll25Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll25 =
      _atoll25Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod25(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod25(
      __nptr,
      __endptr,
    );
  }

  late final _strtod25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod25 = _strtod25Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof25(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof25(
      __nptr,
      __endptr,
    );
  }

  late final _strtof25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof25 = _strtof25Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol25(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol25(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol25 = _strtol25Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul25(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul25(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul25 = _strtoul25Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq25(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq25(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq25 = _strtoq25Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq25(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq25(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq25 = _strtouq25Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll25(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll25(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll25 = _strtoll25Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull25(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull25(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull25 = _strtoull25Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a25(
    int __n,
  ) {
    return _l64a25(
      __n,
    );
  }

  late final _l64a25Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a25 =
      _l64a25Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l25(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l25(
      __s,
    );
  }

  late final _a64l25Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l25 =
      _a64l25Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select25(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select25(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select25 = _select25Ptr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect25(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect25(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect25 = _pselect25Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random25() {
    return _random25();
  }

  late final _random25Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random25 = _random25Ptr.asFunction<int Function()>();

  void srandom25(
    int __seed,
  ) {
    return _srandom25(
      __seed,
    );
  }

  late final _srandom25Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom25 = _srandom25Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate25(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate25(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int)>>('initstate');
  late final _initstate25 = _initstate25Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate25(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate25(
      __statebuf,
    );
  }

  late final _setstate25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate25 = _setstate25Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r25(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r25(
      __buf,
      __result,
    );
  }

  late final _random_r25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r25 = _random_r25Ptr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r25(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r25(
      __seed,
      __buf,
    );
  }

  late final _srandom_r25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r25 =
      _srandom_r25Ptr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r25(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r25(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r25 = _initstate_r25Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r25(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r25(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r25 = _setstate_r25Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand25() {
    return _rand25();
  }

  late final _rand25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand25 = _rand25Ptr.asFunction<int Function()>();

  void srand25(
    int __seed,
  ) {
    return _srand25(
      __seed,
    );
  }

  late final _srand25Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand25 = _srand25Ptr.asFunction<void Function(int)>();

  int rand_r25(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r25(
      __seed,
    );
  }

  late final _rand_r25Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r25 =
      _rand_r25Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand4825() {
    return _drand4825();
  }

  late final _drand4825Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand4825 = _drand4825Ptr.asFunction<double Function()>();

  double erand4825(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand4825(
      __xsubi,
    );
  }

  late final _erand4825Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand4825 = _erand4825Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand4825() {
    return _lrand4825();
  }

  late final _lrand4825Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand4825 = _lrand4825Ptr.asFunction<int Function()>();

  int nrand4825(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand4825(
      __xsubi,
    );
  }

  late final _nrand4825Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand4825 =
      _nrand4825Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand4825() {
    return _mrand4825();
  }

  late final _mrand4825Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand4825 = _mrand4825Ptr.asFunction<int Function()>();

  int jrand4825(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand4825(
      __xsubi,
    );
  }

  late final _jrand4825Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand4825 =
      _jrand4825Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand4825(
    int __seedval,
  ) {
    return _srand4825(
      __seedval,
    );
  }

  late final _srand4825Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand4825 = _srand4825Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed4825(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed4825(
      __seed16v,
    );
  }

  late final _seed4825Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed4825 = _seed4825Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong4825(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong4825(
      __param,
    );
  }

  late final _lcong4825Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong4825 =
      _lcong4825Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r25(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r25(
      __buffer,
      __result,
    );
  }

  late final _drand48_r25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r25 = _drand48_r25Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r25(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r25(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r25 = _erand48_r25Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r25(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r25(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r25 = _lrand48_r25Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r25(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r25(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r25 = _nrand48_r25Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r25(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r25(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r25 = _mrand48_r25Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r25(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r25(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r25 = _jrand48_r25Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r25(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r25(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r25 = _srand48_r25Ptr
      .asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r25(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r25(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r25 = _seed48_r25Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r25(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r25(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r25 = _lcong48_r25Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int arc4random25() {
    return _arc4random25();
  }

  late final _arc4random25Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random25 = _arc4random25Ptr.asFunction<int Function()>();

  void arc4random_buf25(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf25(
      __buf,
      __size,
    );
  }

  late final _arc4random_buf25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('arc4random_buf');
  late final _arc4random_buf25 = _arc4random_buf25Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform25(
    int __upper_bound,
  ) {
    return _arc4random_uniform25(
      __upper_bound,
    );
  }

  late final _arc4random_uniform25Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
          'arc4random_uniform');
  late final _arc4random_uniform25 =
      _arc4random_uniform25Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc25(
    int __size,
  ) {
    return _malloc25(
      __size,
    );
  }

  late final _malloc25Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'malloc');
  late final _malloc25 =
      _malloc25Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc25(
    int __nmemb,
    int __size,
  ) {
    return _calloc25(
      __nmemb,
      __size,
    );
  }

  late final _calloc25Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'calloc');
  late final _calloc25 =
      _calloc25Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc25(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc25(
      __ptr,
      __size,
    );
  }

  late final _realloc25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('realloc');
  late final _realloc25 = _realloc25Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free25(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free25(
      __ptr,
    );
  }

  late final _free25Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free25 =
      _free25Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray50(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray50(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray50Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray50 = _reallocarray50Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray51(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray51(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray51Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray51 = _reallocarray51Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca25(
    int __size,
  ) {
    return _alloca25(
      __size,
    );
  }

  late final _alloca25Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'alloca');
  late final _alloca25 =
      _alloca25Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc25(
    int __size,
  ) {
    return _valloc25(
      __size,
    );
  }

  late final _valloc25Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'valloc');
  late final _valloc25 =
      _valloc25Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign25(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign25(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int,
              ffi.Int)>>('posix_memalign');
  late final _posix_memalign25 = _posix_memalign25Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc25(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc25(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc25Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'aligned_alloc');
  late final _aligned_alloc25 = _aligned_alloc25Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort25() {
    return _abort25();
  }

  late final _abort25Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort25 = _abort25Ptr.asFunction<void Function()>();

  int atexit25(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit25(
      __func,
    );
  }

  late final _atexit25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit25 = _atexit25Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit25(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit25(
      __func,
    );
  }

  late final _at_quick_exit25Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit25 = _at_quick_exit25Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit25(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit25(
      __func,
      __arg,
    );
  }

  late final _on_exit25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit25 = _on_exit25Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit25(
    int __status,
  ) {
    return _exit25(
      __status,
    );
  }

  late final _exit25Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit25 = _exit25Ptr.asFunction<void Function(int)>();

  void quick_exit25(
    int __status,
  ) {
    return _quick_exit25(
      __status,
    );
  }

  late final _quick_exit25Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit25 = _quick_exit25Ptr.asFunction<void Function(int)>();

  void _Exit25(
    int __status,
  ) {
    return __Exit25(
      __status,
    );
  }

  late final __Exit25Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit25 = __Exit25Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv25(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv25(
      __name,
    );
  }

  late final _getenv25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv25 = _getenv25Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv25(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv25(
      __string,
    );
  }

  late final _putenv25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv25 =
      _putenv25Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv25(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv25(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv25 = _setenv25Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv25(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv25(
      __name,
    );
  }

  late final _unsetenv25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv25 =
      _unsetenv25Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv25() {
    return _clearenv25();
  }

  late final _clearenv25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv25 = _clearenv25Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp25(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp25(
      __template,
    );
  }

  late final _mktemp25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp25 = _mktemp25Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp25(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp25(
      __template,
    );
  }

  late final _mkstemp25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp25 =
      _mkstemp25Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps25(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps25(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps25Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps25 =
      _mkstemps25Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp25(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp25(
      __template,
    );
  }

  late final _mkdtemp25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp25 = _mkdtemp25Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system25(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system25(
      __command,
    );
  }

  late final _system25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system25 =
      _system25Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath25(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath25(
      __name,
      __resolved,
    );
  }

  late final _realpath25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath25 = _realpath25Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch25(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch25(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              __compar_fn_t)>>('bsearch');
  late final _bsearch25 = _bsearch25Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort25(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort25(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              __compar_fn_t)>>('qsort');
  late final _qsort25 = _qsort25Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs25(
    int __x,
  ) {
    return _abs25(
      __x,
    );
  }

  late final _abs25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs25 = _abs25Ptr.asFunction<int Function(int)>();

  int labs25(
    int __x,
  ) {
    return _labs25(
      __x,
    );
  }

  late final _labs25Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs25 = _labs25Ptr.asFunction<int Function(int)>();

  int llabs25(
    int __x,
  ) {
    return _llabs25(
      __x,
    );
  }

  late final _llabs25Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs25 = _llabs25Ptr.asFunction<int Function(int)>();

  div_t div25(
    int __numer,
    int __denom,
  ) {
    return _div25(
      __numer,
      __denom,
    );
  }

  late final _div25Ptr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div25 = _div25Ptr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv25(
    int __numer,
    int __denom,
  ) {
    return _ldiv25(
      __numer,
      __denom,
    );
  }

  late final _ldiv25Ptr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv25 = _ldiv25Ptr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv25(
    int __numer,
    int __denom,
  ) {
    return _lldiv25(
      __numer,
      __denom,
    );
  }

  late final _lldiv25Ptr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv25 = _lldiv25Ptr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt25(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt25(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt25 = _ecvt25Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt25(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt25(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt25 = _fcvt25Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt25(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt25(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt25 = _gcvt25Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r25(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r25(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('ecvt_r');
  late final _ecvt_r25 = _ecvt_r25Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r25(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r25(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('fcvt_r');
  late final _fcvt_r25 = _fcvt_r25Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen25(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen25(
      __s,
      __n,
    );
  }

  late final _mblen25Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mblen');
  late final _mblen25 =
      _mblen25Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc25(
    ffi.Pointer<ffi.Int> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc25(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('mbtowc');
  late final _mbtowc25 = _mbtowc25Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb25(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb25(
      __s,
      __wchar,
    );
  }

  late final _wctomb25Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'wctomb');
  late final _wctomb25 =
      _wctomb25Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs25(
    ffi.Pointer<ffi.Int> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs25(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mbstowcs');
  late final _mbstowcs25 = _mbstowcs25Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs25(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Int> __pwcs,
    int __n,
  ) {
    return _wcstombs25(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('wcstombs');
  late final _wcstombs25 = _wcstombs25Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  int rpmatch25(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch25(
      __response,
    );
  }

  late final _rpmatch25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch25 =
      _rpmatch25Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt25(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt25(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt25 = _getsubopt25Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg25(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg25(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg25 =
      _getloadavg25Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Void> memcpy25(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy25(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpy25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memcpy');
  late final _memcpy25 = _memcpy25Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove25(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove25(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmove25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memmove');
  late final _memmove25 = _memmove25Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy25(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy25(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpy25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memccpy');
  late final _memccpy25 = _memccpy25Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset25(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset25(
      __s,
      __c,
      __n,
    );
  }

  late final _memset25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memset');
  late final _memset25 = _memset25Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp25(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp25(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmp25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('memcmp');
  late final _memcmp25 = _memcmp25Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq25(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq25(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeq25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__memcmpeq');
  late final ___memcmpeq25 = ___memcmpeq25Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr25(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr25(
      __s,
      __c,
      __n,
    );
  }

  late final _memchr25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memchr');
  late final _memchr25 = _memchr25Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy25(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy25(
      __dest,
      __src,
    );
  }

  late final _strcpy25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy25 = _strcpy25Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy25(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy25(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpy25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncpy');
  late final _strncpy25 = _strncpy25Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat25(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat25(
      __dest,
      __src,
    );
  }

  late final _strcat25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat25 = _strcat25Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat25(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat25(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncat25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncat');
  late final _strncat25 = _strncat25Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp25(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp25(
      __s1,
      __s2,
    );
  }

  late final _strcmp25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp25 = _strcmp25Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp25(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp25(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmp25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncmp');
  late final _strncmp25 = _strncmp25Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll25(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll25(
      __s1,
      __s2,
    );
  }

  late final _strcoll25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll25 = _strcoll25Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm25(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm25(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrm25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strxfrm');
  late final _strxfrm25 = _strxfrm25Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l25(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l25(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_l25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l25 = _strcoll_l25Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l25(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l25(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_l25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strxfrm_l');
  late final _strxfrm_l25 = _strxfrm_l25Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup25(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup25(
      __s,
    );
  }

  late final _strdup25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup25 = _strdup25Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup25(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup25(
      __string,
      __n,
    );
  }

  late final _strndup25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strndup');
  late final _strndup25 = _strndup25Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr25(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr25(
      __s,
      __c,
    );
  }

  late final _strchr25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr25 = _strchr25Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr25(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr25(
      __s,
      __c,
    );
  }

  late final _strrchr25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr25 = _strrchr25Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn25(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn25(
      __s,
      __reject,
    );
  }

  late final _strcspn25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn25 = _strcspn25Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn25(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn25(
      __s,
      __accept,
    );
  }

  late final _strspn25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn25 = _strspn25Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk25(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk25(
      __s,
      __accept,
    );
  }

  late final _strpbrk25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk25 = _strpbrk25Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr25(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr25(
      __haystack,
      __needle,
    );
  }

  late final _strstr25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr25 = _strstr25Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok25(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok25(
      __s,
      __delim,
    );
  }

  late final _strtok25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok25 = _strtok25Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r25(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r25(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_r25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r25 = ___strtok_r25Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r25(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r25(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_r25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r25 = _strtok_r25Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen25(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen25(
      __s,
    );
  }

  late final _strlen25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'strlen');
  late final _strlen25 =
      _strlen25Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen25(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen25(
      __string,
      __maxlen,
    );
  }

  late final _strnlen25Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'strnlen');
  late final _strnlen25 =
      _strnlen25Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror25(
    int __errnum,
  ) {
    return _strerror25(
      __errnum,
    );
  }

  late final _strerror25Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror25 =
      _strerror25Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r25(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r25(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_r25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('strerror_r');
  late final _strerror_r25 = _strerror_r25Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l25(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l25(
      __errnum,
      __l,
    );
  }

  late final _strerror_l25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l25 = _strerror_l25Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp25(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp25(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmp25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcmp');
  late final _bcmp25 = _bcmp25Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy25(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy25(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopy25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcopy');
  late final _bcopy25 = _bcopy25Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero25(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero25(
      __s,
      __n,
    );
  }

  late final _bzero25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('bzero');
  late final _bzero25 =
      _bzero25Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index25(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index25(
      __s,
      __c,
    );
  }

  late final _index25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index25 = _index25Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex25(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex25(
      __s,
      __c,
    );
  }

  late final _rindex25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex25 = _rindex25Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs25(
    int __i,
  ) {
    return _ffs25(
      __i,
    );
  }

  late final _ffs25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs25 = _ffs25Ptr.asFunction<int Function(int)>();

  int ffsl25(
    int __l,
  ) {
    return _ffsl25(
      __l,
    );
  }

  late final _ffsl25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl25 = _ffsl25Ptr.asFunction<int Function(int)>();

  int ffsll25(
    int __ll,
  ) {
    return _ffsll25(
      __ll,
    );
  }

  late final _ffsll25Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll25 = _ffsll25Ptr.asFunction<int Function(int)>();

  int strcasecmp25(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp25(
      __s1,
      __s2,
    );
  }

  late final _strcasecmp25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp25 = _strcasecmp25Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp25(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp25(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmp25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncasecmp');
  late final _strncasecmp25 = _strncasecmp25Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l25(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l25(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_l25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l25 = _strcasecmp_l25Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l25(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l25(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_l25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l25 = _strncasecmp_l25Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero25(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero25(
      __s,
      __n,
    );
  }

  late final _explicit_bzero25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('explicit_bzero');
  late final _explicit_bzero25 = _explicit_bzero25Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep25(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep25(
      __stringp,
      __delim,
    );
  }

  late final _strsep25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep25 = _strsep25Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal25(
    int __sig,
  ) {
    return _strsignal25(
      __sig,
    );
  }

  late final _strsignal25Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal25 =
      _strsignal25Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy25(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy25(
      __dest,
      __src,
    );
  }

  late final ___stpcpy25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy25 = ___stpcpy25Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy25(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy25(
      __dest,
      __src,
    );
  }

  late final _stpcpy25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy25 = _stpcpy25Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy25(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy25(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpy25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('__stpncpy');
  late final ___stpncpy25 = ___stpncpy25Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy25(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy25(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpy25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('stpncpy');
  late final _stpncpy25 = _stpncpy25Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int buffer_equal5(
    ffi.Pointer<ffi.Void> a,
    ffi.Pointer<ffi.Void> b,
  ) {
    return _buffer_equal5(
      a,
      b,
    );
  }

  late final _buffer_equal5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>('buffer_equal');
  late final _buffer_equal5 = _buffer_equal5Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  void buffer_free5(
    ffi.Pointer<ffi.Void> struct_buffer,
  ) {
    return _buffer_free5(
      struct_buffer,
    );
  }

  late final _buffer_free5Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'buffer_free');
  late final _buffer_free5 =
      _buffer_free5Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<buffer> buffer_copy5(
    ffi.Pointer<ffi.Void> data,
    int data_len,
  ) {
    return _buffer_copy5(
      data,
      data_len,
    );
  }

  late final _buffer_copy5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<buffer> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('buffer_copy');
  late final _buffer_copy5 = _buffer_copy5Ptr
      .asFunction<ffi.Pointer<buffer> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<dogecoin_chainparams> chain_from_b58_prefix7(
    ffi.Pointer<ffi.Char> address,
  ) {
    return _chain_from_b58_prefix7(
      address,
    );
  }

  late final _chain_from_b58_prefix7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<dogecoin_chainparams> Function(
              ffi.Pointer<ffi.Char>)>>('chain_from_b58_prefix');
  late final _chain_from_b58_prefix7 = _chain_from_b58_prefix7Ptr.asFunction<
      ffi.Pointer<dogecoin_chainparams> Function(ffi.Pointer<ffi.Char>)>();

  int chain_from_b58_prefix_bool7(
    ffi.Pointer<ffi.Char> address,
  ) {
    return _chain_from_b58_prefix_bool7(
      address,
    );
  }

  late final _chain_from_b58_prefix_bool7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'chain_from_b58_prefix_bool');
  late final _chain_from_b58_prefix_bool7 = _chain_from_b58_prefix_bool7Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<cstring> cstr_new7(
    ffi.Pointer<ffi.Char> init_str,
  ) {
    return _cstr_new7(
      init_str,
    );
  }

  late final _cstr_new7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cstring> Function(ffi.Pointer<ffi.Char>)>>('cstr_new');
  late final _cstr_new7 = _cstr_new7Ptr
      .asFunction<ffi.Pointer<cstring> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<cstring> cstr_new_sz7(
    int sz,
  ) {
    return _cstr_new_sz7(
      sz,
    );
  }

  late final _cstr_new_sz7Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<cstring> Function(ffi.Int)>>(
          'cstr_new_sz');
  late final _cstr_new_sz7 =
      _cstr_new_sz7Ptr.asFunction<ffi.Pointer<cstring> Function(int)>();

  ffi.Pointer<cstring> cstr_new_buf7(
    ffi.Pointer<ffi.Void> buf,
    int sz,
  ) {
    return _cstr_new_buf7(
      buf,
      sz,
    );
  }

  late final _cstr_new_buf7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cstring> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('cstr_new_buf');
  late final _cstr_new_buf7 = _cstr_new_buf7Ptr
      .asFunction<ffi.Pointer<cstring> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<cstring> cstr_new_cstr7(
    ffi.Pointer<cstring> copy_str,
  ) {
    return _cstr_new_cstr7(
      copy_str,
    );
  }

  late final _cstr_new_cstr7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cstring> Function(
              ffi.Pointer<cstring>)>>('cstr_new_cstr');
  late final _cstr_new_cstr7 = _cstr_new_cstr7Ptr
      .asFunction<ffi.Pointer<cstring> Function(ffi.Pointer<cstring>)>();

  void cstr_free7(
    ffi.Pointer<cstring> s,
    int free_buf,
  ) {
    return _cstr_free7(
      s,
      free_buf,
    );
  }

  late final _cstr_free7Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_free');
  late final _cstr_free7 =
      _cstr_free7Ptr.asFunction<void Function(ffi.Pointer<cstring>, int)>();

  int cstr_equal7(
    ffi.Pointer<cstring> a,
    ffi.Pointer<cstring> b,
  ) {
    return _cstr_equal7(
      a,
      b,
    );
  }

  late final _cstr_equal7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_equal');
  late final _cstr_equal7 = _cstr_equal7Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_compare7(
    ffi.Pointer<cstring> a,
    ffi.Pointer<cstring> b,
  ) {
    return _cstr_compare7(
      a,
      b,
    );
  }

  late final _cstr_compare7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_compare');
  late final _cstr_compare7 = _cstr_compare7Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_resize7(
    ffi.Pointer<cstring> s,
    int sz,
  ) {
    return _cstr_resize7(
      s,
      sz,
    );
  }

  late final _cstr_resize7Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_resize');
  late final _cstr_resize7 =
      _cstr_resize7Ptr.asFunction<int Function(ffi.Pointer<cstring>, int)>();

  int cstr_erase7(
    ffi.Pointer<cstring> s,
    int pos,
    int len,
  ) {
    return _cstr_erase7(
      s,
      pos,
      len,
    );
  }

  late final _cstr_erase7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Int, ssize_t)>>('cstr_erase');
  late final _cstr_erase7 = _cstr_erase7Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, int, int)>();

  int cstr_append_buf7(
    ffi.Pointer<cstring> s,
    ffi.Pointer<ffi.Void> buf,
    int sz,
  ) {
    return _cstr_append_buf7(
      s,
      buf,
      sz,
    );
  }

  late final _cstr_append_buf7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('cstr_append_buf');
  late final _cstr_append_buf7 = _cstr_append_buf7Ptr.asFunction<
      int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Void>, int)>();

  int cstr_append_cstr7(
    ffi.Pointer<cstring> s,
    ffi.Pointer<cstring> append,
  ) {
    return _cstr_append_cstr7(
      s,
      append,
    );
  }

  late final _cstr_append_cstr7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_append_cstr');
  late final _cstr_append_cstr7 = _cstr_append_cstr7Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_append_c7(
    ffi.Pointer<cstring> s,
    int ch,
  ) {
    return _cstr_append_c7(
      s,
      ch,
    );
  }

  late final _cstr_append_c7Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Char)>>(
      'cstr_append_c');
  late final _cstr_append_c7 =
      _cstr_append_c7Ptr.asFunction<int Function(ffi.Pointer<cstring>, int)>();

  int cstr_alloc_minsize7(
    ffi.Pointer<cstring> s,
    int sz,
  ) {
    return _cstr_alloc_minsize7(
      s,
      sz,
    );
  }

  late final _cstr_alloc_minsize7Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_alloc_minsize');
  late final _cstr_alloc_minsize7 = _cstr_alloc_minsize7Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, int)>();

  void dogecoin_mem_set_mapper4(
    dogecoin_mem_mapper mapper,
  ) {
    return _dogecoin_mem_set_mapper4(
      mapper,
    );
  }

  late final _dogecoin_mem_set_mapper4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dogecoin_mem_mapper)>>(
          'dogecoin_mem_set_mapper');
  late final _dogecoin_mem_set_mapper4 = _dogecoin_mem_set_mapper4Ptr
      .asFunction<void Function(dogecoin_mem_mapper)>();

  void dogecoin_mem_set_mapper_default4() {
    return _dogecoin_mem_set_mapper_default4();
  }

  late final _dogecoin_mem_set_mapper_default4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'dogecoin_mem_set_mapper_default');
  late final _dogecoin_mem_set_mapper_default4 =
      _dogecoin_mem_set_mapper_default4Ptr.asFunction<void Function()>();

  ffi.Pointer<ffi.Void> dogecoin_malloc4(
    int size,
  ) {
    return _dogecoin_malloc4(
      size,
    );
  }

  late final _dogecoin_malloc4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'dogecoin_malloc');
  late final _dogecoin_malloc4 =
      _dogecoin_malloc4Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> dogecoin_calloc4(
    int count,
    int size,
  ) {
    return _dogecoin_calloc4(
      count,
      size,
    );
  }

  late final _dogecoin_calloc4Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'dogecoin_calloc');
  late final _dogecoin_calloc4 = _dogecoin_calloc4Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> dogecoin_realloc4(
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _dogecoin_realloc4(
      ptr,
      size,
    );
  }

  late final _dogecoin_realloc4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('dogecoin_realloc');
  late final _dogecoin_realloc4 = _dogecoin_realloc4Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void dogecoin_free4(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _dogecoin_free4(
      ptr,
    );
  }

  late final _dogecoin_free4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'dogecoin_free');
  late final _dogecoin_free4 =
      _dogecoin_free4Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> memcpy_safe4(
    ffi.Pointer<ffi.Void> destination,
    ffi.Pointer<ffi.Void> source,
    int count,
  ) {
    return _memcpy_safe4(
      destination,
      source,
      count,
    );
  }

  late final _memcpy_safe4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.UnsignedInt)>>('memcpy_safe');
  late final _memcpy_safe4 = _memcpy_safe4Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void sha256_init4(
    ffi.Pointer<sha256_context> arg0,
  ) {
    return _sha256_init4(
      arg0,
    );
  }

  late final _sha256_init4Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sha256_context>)>>(
      'sha256_init');
  late final _sha256_init4 =
      _sha256_init4Ptr.asFunction<void Function(ffi.Pointer<sha256_context>)>();

  void sha256_write4(
    ffi.Pointer<sha256_context> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
    int size_t,
  ) {
    return _sha256_write4(
      arg0,
      arg1,
      size_t,
    );
  }

  late final _sha256_write4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sha256_context>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('sha256_write');
  late final _sha256_write4 = _sha256_write4Ptr.asFunction<
      void Function(
          ffi.Pointer<sha256_context>, ffi.Pointer<ffi.Uint8>, int)>();

  void sha256_finalize4(
    ffi.Pointer<sha256_context> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
  ) {
    return _sha256_finalize4(
      arg0,
      arg1,
    );
  }

  late final _sha256_finalize4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sha256_context>,
              ffi.Pointer<ffi.Uint8>)>>('sha256_finalize');
  late final _sha256_finalize4 = _sha256_finalize4Ptr.asFunction<
      void Function(ffi.Pointer<sha256_context>, ffi.Pointer<ffi.Uint8>)>();

  void sha256_raw4(
    ffi.Pointer<ffi.Uint8> arg0,
    int size_t,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return _sha256_raw4(
      arg0,
      size_t,
      arg2,
    );
  }

  late final _sha256_raw4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<ffi.Uint8>)>>('sha256_raw');
  late final _sha256_raw4 = _sha256_raw4Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  void sha512_init4(
    ffi.Pointer<sha512_context> arg0,
  ) {
    return _sha512_init4(
      arg0,
    );
  }

  late final _sha512_init4Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sha512_context>)>>(
      'sha512_init');
  late final _sha512_init4 =
      _sha512_init4Ptr.asFunction<void Function(ffi.Pointer<sha512_context>)>();

  void sha512_write4(
    ffi.Pointer<sha512_context> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
    int size_t,
  ) {
    return _sha512_write4(
      arg0,
      arg1,
      size_t,
    );
  }

  late final _sha512_write4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sha512_context>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('sha512_write');
  late final _sha512_write4 = _sha512_write4Ptr.asFunction<
      void Function(
          ffi.Pointer<sha512_context>, ffi.Pointer<ffi.Uint8>, int)>();

  void sha512_finalize4(
    ffi.Pointer<sha512_context> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
  ) {
    return _sha512_finalize4(
      arg0,
      arg1,
    );
  }

  late final _sha512_finalize4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sha512_context>,
              ffi.Pointer<ffi.Uint8>)>>('sha512_finalize');
  late final _sha512_finalize4 = _sha512_finalize4Ptr.asFunction<
      void Function(ffi.Pointer<sha512_context>, ffi.Pointer<ffi.Uint8>)>();

  void sha512_raw4(
    ffi.Pointer<ffi.Uint8> arg0,
    int size_t,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return _sha512_raw4(
      arg0,
      size_t,
      arg2,
    );
  }

  late final _sha512_raw4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<ffi.Uint8>)>>('sha512_raw');
  late final _sha512_raw4 = _sha512_raw4Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  void hmac_sha2564(
    ffi.Pointer<ffi.Uint8> key,
    int keylen,
    ffi.Pointer<ffi.Uint8> msg,
    int msglen,
    ffi.Pointer<ffi.Uint8> hmac,
  ) {
    return _hmac_sha2564(
      key,
      keylen,
      msg,
      msglen,
      hmac,
    );
  }

  late final _hmac_sha2564Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint8>)>>('hmac_sha256');
  late final _hmac_sha2564 = _hmac_sha2564Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>)>();

  void hmac_sha5124(
    ffi.Pointer<ffi.Uint8> key,
    int keylen,
    ffi.Pointer<ffi.Uint8> msg,
    int msglen,
    ffi.Pointer<ffi.Uint8> hmac,
  ) {
    return _hmac_sha5124(
      key,
      keylen,
      msg,
      msglen,
      hmac,
    );
  }

  late final _hmac_sha5124Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint8>)>>('hmac_sha512');
  late final _hmac_sha5124 = _hmac_sha5124Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<vector> vector_new5(
    int res,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        free_f,
  ) {
    return _vector_new5(
      res,
      free_f,
    );
  }

  late final _vector_new5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<vector> Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>)>>)>>('vector_new');
  late final _vector_new5 = _vector_new5Ptr.asFunction<
      ffi.Pointer<vector> Function(
          int,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  void vector_free5(
    ffi.Pointer<vector> vec,
    int free_array,
  ) {
    return _vector_free5(
      vec,
      free_array,
    );
  }

  late final _vector_free5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<vector>, dogecoin_bool)>>('vector_free');
  late final _vector_free5 =
      _vector_free5Ptr.asFunction<void Function(ffi.Pointer<vector>, int)>();

  int vector_add5(
    ffi.Pointer<vector> vec,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _vector_add5(
      vec,
      data,
    );
  }

  late final _vector_add5Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>>('vector_add');
  late final _vector_add5 = _vector_add5Ptr
      .asFunction<int Function(ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>();

  int vector_remove5(
    ffi.Pointer<vector> vec,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _vector_remove5(
      vec,
      data,
    );
  }

  late final _vector_remove5Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>>('vector_remove');
  late final _vector_remove5 = _vector_remove5Ptr
      .asFunction<int Function(ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>();

  void vector_remove_idx5(
    ffi.Pointer<vector> vec,
    int idx,
  ) {
    return _vector_remove_idx5(
      vec,
      idx,
    );
  }

  late final _vector_remove_idx5Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<vector>, ffi.Int)>>(
      'vector_remove_idx');
  late final _vector_remove_idx5 = _vector_remove_idx5Ptr
      .asFunction<void Function(ffi.Pointer<vector>, int)>();

  void vector_remove_range5(
    ffi.Pointer<vector> vec,
    int idx,
    int len,
  ) {
    return _vector_remove_range5(
      vec,
      idx,
      len,
    );
  }

  late final _vector_remove_range5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<vector>, ffi.Int, ffi.Int)>>('vector_remove_range');
  late final _vector_remove_range5 = _vector_remove_range5Ptr
      .asFunction<void Function(ffi.Pointer<vector>, int, int)>();

  int vector_resize5(
    ffi.Pointer<vector> vec,
    int newsz,
  ) {
    return _vector_resize5(
      vec,
      newsz,
    );
  }

  late final _vector_resize5Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<vector>, ffi.Int)>>('vector_resize');
  late final _vector_resize5 =
      _vector_resize5Ptr.asFunction<int Function(ffi.Pointer<vector>, int)>();

  int vector_find5(
    ffi.Pointer<vector> vec,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _vector_find5(
      vec,
      data,
    );
  }

  late final _vector_find5Ptr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>>('vector_find');
  late final _vector_find5 = _vector_find5Ptr
      .asFunction<int Function(ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>();

  void dogecoin_privkey_init4(
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_init4(
      privkey,
    );
  }

  late final _dogecoin_privkey_init4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_key>)>>(
          'dogecoin_privkey_init');
  late final _dogecoin_privkey_init4 = _dogecoin_privkey_init4Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_key>)>();

  int dogecoin_privkey_is_valid4(
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_is_valid4(
      privkey,
    );
  }

  late final _dogecoin_privkey_is_valid4Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_key>)>>('dogecoin_privkey_is_valid');
  late final _dogecoin_privkey_is_valid4 = _dogecoin_privkey_is_valid4Ptr
      .asFunction<int Function(ffi.Pointer<dogecoin_key>)>();

  void dogecoin_privkey_cleanse4(
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_cleanse4(
      privkey,
    );
  }

  late final _dogecoin_privkey_cleanse4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_key>)>>(
          'dogecoin_privkey_cleanse');
  late final _dogecoin_privkey_cleanse4 = _dogecoin_privkey_cleanse4Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_key>)>();

  int dogecoin_privkey_gen4(
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_gen4(
      privkey,
    );
  }

  late final _dogecoin_privkey_gen4Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_key>)>>('dogecoin_privkey_gen');
  late final _dogecoin_privkey_gen4 = _dogecoin_privkey_gen4Ptr
      .asFunction<int Function(ffi.Pointer<dogecoin_key>)>();

  int dogecoin_privkey_verify_pubkey4(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_privkey_verify_pubkey4(
      privkey,
      pubkey,
    );
  }

  late final _dogecoin_privkey_verify_pubkey4Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_key>,
              ffi.Pointer<dogecoin_pubkey>)>>('dogecoin_privkey_verify_pubkey');
  late final _dogecoin_privkey_verify_pubkey4 =
      _dogecoin_privkey_verify_pubkey4Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_key>, ffi.Pointer<dogecoin_pubkey>)>();

  void dogecoin_privkey_encode_wif4(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<dogecoin_chainparams> chain,
    ffi.Pointer<ffi.Char> privkey_wif,
    ffi.Pointer<ffi.Int> strsize_inout,
  ) {
    return _dogecoin_privkey_encode_wif4(
      privkey,
      chain,
      privkey_wif,
      strsize_inout,
    );
  }

  late final _dogecoin_privkey_encode_wif4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_privkey_encode_wif');
  late final _dogecoin_privkey_encode_wif4 =
      _dogecoin_privkey_encode_wif4Ptr.asFunction<
          void Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>();

  int dogecoin_privkey_decode_wif4(
    ffi.Pointer<ffi.Char> privkey_wif,
    ffi.Pointer<dogecoin_chainparams> chain,
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_decode_wif4(
      privkey_wif,
      chain,
      privkey,
    );
  }

  late final _dogecoin_privkey_decode_wif4Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<dogecoin_key>)>>('dogecoin_privkey_decode_wif');
  late final _dogecoin_privkey_decode_wif4 =
      _dogecoin_privkey_decode_wif4Ptr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<dogecoin_key>)>();

  void dogecoin_pubkey_init4(
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_pubkey_init4(
      pubkey,
    );
  }

  late final _dogecoin_pubkey_init4Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_pubkey>)>>(
      'dogecoin_pubkey_init');
  late final _dogecoin_pubkey_init4 = _dogecoin_pubkey_init4Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_pubkey>)>();

  int dogecoin_pubkey_get_length4(
    int ch_header,
  ) {
    return _dogecoin_pubkey_get_length4(
      ch_header,
    );
  }

  late final _dogecoin_pubkey_get_length4Ptr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedChar)>>(
          'dogecoin_pubkey_get_length');
  late final _dogecoin_pubkey_get_length4 =
      _dogecoin_pubkey_get_length4Ptr.asFunction<int Function(int)>();

  int dogecoin_pubkey_is_valid4(
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_pubkey_is_valid4(
      pubkey,
    );
  }

  late final _dogecoin_pubkey_is_valid4Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_pubkey>)>>('dogecoin_pubkey_is_valid');
  late final _dogecoin_pubkey_is_valid4 = _dogecoin_pubkey_is_valid4Ptr
      .asFunction<int Function(ffi.Pointer<dogecoin_pubkey>)>();

  void dogecoin_pubkey_cleanse4(
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_pubkey_cleanse4(
      pubkey,
    );
  }

  late final _dogecoin_pubkey_cleanse4Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_pubkey>)>>(
      'dogecoin_pubkey_cleanse');
  late final _dogecoin_pubkey_cleanse4 = _dogecoin_pubkey_cleanse4Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_pubkey>)>();

  void dogecoin_pubkey_from_key4(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<dogecoin_pubkey> pubkey_inout,
  ) {
    return _dogecoin_pubkey_from_key4(
      privkey,
      pubkey_inout,
    );
  }

  late final _dogecoin_pubkey_from_key4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_key>,
              ffi.Pointer<dogecoin_pubkey>)>>('dogecoin_pubkey_from_key');
  late final _dogecoin_pubkey_from_key4 =
      _dogecoin_pubkey_from_key4Ptr.asFunction<
          void Function(
              ffi.Pointer<dogecoin_key>, ffi.Pointer<dogecoin_pubkey>)>();

  void dogecoin_pubkey_get_hash1604(
    ffi.Pointer<dogecoin_pubkey> pubkey,
    ffi.Pointer<ffi.Uint8> hash160,
  ) {
    return _dogecoin_pubkey_get_hash1604(
      pubkey,
      hash160,
    );
  }

  late final _dogecoin_pubkey_get_hash1604Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_pubkey>,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_pubkey_get_hash160');
  late final _dogecoin_pubkey_get_hash1604 =
      _dogecoin_pubkey_get_hash1604Ptr.asFunction<
          void Function(
              ffi.Pointer<dogecoin_pubkey>, ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_pubkey_get_hex4(
    ffi.Pointer<dogecoin_pubkey> pubkey,
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.Int> strsize,
  ) {
    return _dogecoin_pubkey_get_hex4(
      pubkey,
      str,
      strsize,
    );
  }

  late final _dogecoin_pubkey_get_hex4Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_pubkey>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_pubkey_get_hex');
  late final _dogecoin_pubkey_get_hex4 =
      _dogecoin_pubkey_get_hex4Ptr.asFunction<
          int Function(ffi.Pointer<dogecoin_pubkey>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>();

  int dogecoin_key_sign_hash4(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<ffi.Uint8> hash,
    ffi.Pointer<ffi.UnsignedChar> sigout,
    ffi.Pointer<ffi.Int> outlen,
  ) {
    return _dogecoin_key_sign_hash4(
      privkey,
      hash,
      sigout,
      outlen,
    );
  }

  late final _dogecoin_key_sign_hash4Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_key_sign_hash');
  late final _dogecoin_key_sign_hash4 = _dogecoin_key_sign_hash4Ptr.asFunction<
      int Function(ffi.Pointer<dogecoin_key>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Int>)>();

  int dogecoin_key_sign_hash_compact4(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<ffi.Uint8> hash,
    ffi.Pointer<ffi.UnsignedChar> sigout,
    ffi.Pointer<ffi.Int> outlen,
  ) {
    return _dogecoin_key_sign_hash_compact4(
      privkey,
      hash,
      sigout,
      outlen,
    );
  }

  late final _dogecoin_key_sign_hash_compact4Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_key_sign_hash_compact');
  late final _dogecoin_key_sign_hash_compact4 =
      _dogecoin_key_sign_hash_compact4Ptr.asFunction<
          int Function(ffi.Pointer<dogecoin_key>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Int>)>();

  int dogecoin_key_sign_hash_compact_recoverable4(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<ffi.Uint8> hash,
    ffi.Pointer<ffi.UnsignedChar> sigout,
    ffi.Pointer<ffi.Int> outlen,
    ffi.Pointer<ffi.Int> recid,
  ) {
    return _dogecoin_key_sign_hash_compact_recoverable4(
      privkey,
      hash,
      sigout,
      outlen,
      recid,
    );
  }

  late final _dogecoin_key_sign_hash_compact_recoverable4Ptr = _lookup<
          ffi.NativeFunction<
              dogecoin_bool Function(
                  ffi.Pointer<dogecoin_key>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.UnsignedChar>,
                  ffi.Pointer<ffi.Int>,
                  ffi.Pointer<ffi.Int>)>>(
      'dogecoin_key_sign_hash_compact_recoverable');
  late final _dogecoin_key_sign_hash_compact_recoverable4 =
      _dogecoin_key_sign_hash_compact_recoverable4Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  int dogecoin_key_sign_recover_pubkey4(
    ffi.Pointer<ffi.UnsignedChar> sig,
    ffi.Pointer<ffi.Uint8> hash,
    int recid,
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_key_sign_recover_pubkey4(
      sig,
      hash,
      recid,
      pubkey,
    );
  }

  late final _dogecoin_key_sign_recover_pubkey4Ptr = _lookup<
          ffi.NativeFunction<
              dogecoin_bool Function(
                  ffi.Pointer<ffi.UnsignedChar>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Int,
                  ffi.Pointer<dogecoin_pubkey>)>>(
      'dogecoin_key_sign_recover_pubkey');
  late final _dogecoin_key_sign_recover_pubkey4 =
      _dogecoin_key_sign_recover_pubkey4Ptr.asFunction<
          int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Uint8>,
              int, ffi.Pointer<dogecoin_pubkey>)>();

  int dogecoin_pubkey_verify_sig4(
    ffi.Pointer<dogecoin_pubkey> pubkey,
    ffi.Pointer<ffi.Uint8> hash,
    ffi.Pointer<ffi.UnsignedChar> sigder,
    int len,
  ) {
    return _dogecoin_pubkey_verify_sig4(
      pubkey,
      hash,
      sigder,
      len,
    );
  }

  late final _dogecoin_pubkey_verify_sig4Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_pubkey>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('dogecoin_pubkey_verify_sig');
  late final _dogecoin_pubkey_verify_sig4 =
      _dogecoin_pubkey_verify_sig4Ptr.asFunction<
          int Function(ffi.Pointer<dogecoin_pubkey>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>, int)>();

  int dogecoin_pubkey_getaddr_p2pkh4(
    ffi.Pointer<dogecoin_pubkey> pubkey,
    ffi.Pointer<dogecoin_chainparams> chain,
    ffi.Pointer<ffi.Char> addrout,
  ) {
    return _dogecoin_pubkey_getaddr_p2pkh4(
      pubkey,
      chain,
      addrout,
    );
  }

  late final _dogecoin_pubkey_getaddr_p2pkh4Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_pubkey>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<ffi.Char>)>>('dogecoin_pubkey_getaddr_p2pkh');
  late final _dogecoin_pubkey_getaddr_p2pkh4 =
      _dogecoin_pubkey_getaddr_p2pkh4Ptr.asFunction<
          int Function(ffi.Pointer<dogecoin_pubkey>,
              ffi.Pointer<dogecoin_chainparams>, ffi.Pointer<ffi.Char>)>();

  int dogecoin_script_copy_without_op_codeseperator3(
    ffi.Pointer<cstring> scriptin,
    ffi.Pointer<cstring> scriptout,
  ) {
    return _dogecoin_script_copy_without_op_codeseperator3(
      scriptin,
      scriptout,
    );
  }

  late final _dogecoin_script_copy_without_op_codeseperator3Ptr = _lookup<
          ffi.NativeFunction<
              dogecoin_bool Function(
                  ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>(
      'dogecoin_script_copy_without_op_codeseperator');
  late final _dogecoin_script_copy_without_op_codeseperator3 =
      _dogecoin_script_copy_without_op_codeseperator3Ptr.asFunction<
          int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  ffi.Pointer<dogecoin_script_op> dogecoin_script_op_new3() {
    return _dogecoin_script_op_new3();
  }

  late final _dogecoin_script_op_new3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<dogecoin_script_op> Function()>>(
          'dogecoin_script_op_new');
  late final _dogecoin_script_op_new3 = _dogecoin_script_op_new3Ptr
      .asFunction<ffi.Pointer<dogecoin_script_op> Function()>();

  void dogecoin_script_op_free3(
    ffi.Pointer<dogecoin_script_op> script_op,
  ) {
    return _dogecoin_script_op_free3(
      script_op,
    );
  }

  late final _dogecoin_script_op_free3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<dogecoin_script_op>)>>('dogecoin_script_op_free');
  late final _dogecoin_script_op_free3 = _dogecoin_script_op_free3Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_script_op>)>();

  void dogecoin_script_op_free_cb3(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _dogecoin_script_op_free_cb3(
      data,
    );
  }

  late final _dogecoin_script_op_free_cb3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'dogecoin_script_op_free_cb');
  late final _dogecoin_script_op_free_cb3 = _dogecoin_script_op_free_cb3Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int dogecoin_script_get_ops3(
    ffi.Pointer<cstring> script_in,
    ffi.Pointer<vector> ops_out,
  ) {
    return _dogecoin_script_get_ops3(
      script_in,
      ops_out,
    );
  }

  late final _dogecoin_script_get_ops3Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<cstring>,
              ffi.Pointer<vector>)>>('dogecoin_script_get_ops');
  late final _dogecoin_script_get_ops3 = _dogecoin_script_get_ops3Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<vector>)>();

  int dogecoin_script_classify_ops3(
    ffi.Pointer<vector> ops,
  ) {
    return _dogecoin_script_classify_ops3(
      ops,
    );
  }

  late final _dogecoin_script_classify_ops3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<vector>)>>(
          'dogecoin_script_classify_ops');
  late final _dogecoin_script_classify_ops3 = _dogecoin_script_classify_ops3Ptr
      .asFunction<int Function(ffi.Pointer<vector>)>();

  int dogecoin_script_classify3(
    ffi.Pointer<cstring> script,
    ffi.Pointer<vector> data_out,
  ) {
    return _dogecoin_script_classify3(
      script,
      data_out,
    );
  }

  late final _dogecoin_script_classify3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<cstring>,
              ffi.Pointer<vector>)>>('dogecoin_script_classify');
  late final _dogecoin_script_classify3 = _dogecoin_script_classify3Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<vector>)>();

  int dogecoin_encode_op_n3(
    int n,
  ) {
    return _dogecoin_encode_op_n3(
      n,
    );
  }

  late final _dogecoin_encode_op_n3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int)>>(
          'dogecoin_encode_op_n');
  late final _dogecoin_encode_op_n3 =
      _dogecoin_encode_op_n3Ptr.asFunction<int Function(int)>();

  void dogecoin_script_append_op3(
    ffi.Pointer<cstring> script_in,
    int op,
  ) {
    return _dogecoin_script_append_op3(
      script_in,
      op,
    );
  }

  late final _dogecoin_script_append_op3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cstring>, ffi.Int32)>>('dogecoin_script_append_op');
  late final _dogecoin_script_append_op3 = _dogecoin_script_append_op3Ptr
      .asFunction<void Function(ffi.Pointer<cstring>, int)>();

  void dogecoin_script_append_pushdata3(
    ffi.Pointer<cstring> script_in,
    ffi.Pointer<ffi.UnsignedChar> data,
    int datalen,
  ) {
    return _dogecoin_script_append_pushdata3(
      script_in,
      data,
      datalen,
    );
  }

  late final _dogecoin_script_append_pushdata3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('dogecoin_script_append_pushdata');
  late final _dogecoin_script_append_pushdata3 =
      _dogecoin_script_append_pushdata3Ptr.asFunction<
          void Function(
              ffi.Pointer<cstring>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int dogecoin_script_build_multisig3(
    ffi.Pointer<cstring> script_in,
    int required_signatures,
    ffi.Pointer<vector> pubkeys_chars,
  ) {
    return _dogecoin_script_build_multisig3(
      script_in,
      required_signatures,
      pubkeys_chars,
    );
  }

  late final _dogecoin_script_build_multisig3Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<cstring>, ffi.UnsignedInt,
              ffi.Pointer<vector>)>>('dogecoin_script_build_multisig');
  late final _dogecoin_script_build_multisig3 =
      _dogecoin_script_build_multisig3Ptr.asFunction<
          int Function(ffi.Pointer<cstring>, int, ffi.Pointer<vector>)>();

  int dogecoin_script_build_p2pkh3(
    ffi.Pointer<cstring> script,
    ffi.Pointer<ffi.Uint8> hash160,
  ) {
    return _dogecoin_script_build_p2pkh3(
      script,
      hash160,
    );
  }

  late final _dogecoin_script_build_p2pkh3Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<cstring>,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_script_build_p2pkh');
  late final _dogecoin_script_build_p2pkh3 = _dogecoin_script_build_p2pkh3Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_script_build_p2sh3(
    ffi.Pointer<cstring> script_in,
    ffi.Pointer<ffi.Uint8> hash160,
  ) {
    return _dogecoin_script_build_p2sh3(
      script_in,
      hash160,
    );
  }

  late final _dogecoin_script_build_p2sh3Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<cstring>,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_script_build_p2sh');
  late final _dogecoin_script_build_p2sh3 = _dogecoin_script_build_p2sh3Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_script_get_scripthash3(
    ffi.Pointer<cstring> script_in,
    ffi.Pointer<ffi.Uint8> scripthash,
  ) {
    return _dogecoin_script_get_scripthash3(
      script_in,
      scripthash,
    );
  }

  late final _dogecoin_script_get_scripthash3Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<cstring>,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_script_get_scripthash');
  late final _dogecoin_script_get_scripthash3 =
      _dogecoin_script_get_scripthash3Ptr.asFunction<
          int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<ffi.Char> dogecoin_tx_out_type_to_str3(
    int type,
  ) {
    return _dogecoin_tx_out_type_to_str3(
      type,
    );
  }

  late final _dogecoin_tx_out_type_to_str3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'dogecoin_tx_out_type_to_str');
  late final _dogecoin_tx_out_type_to_str3 = _dogecoin_tx_out_type_to_str3Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  /// !p2pkh utilities
  int dogecoin_script_hash_to_p2pkh2(
    ffi.Pointer<dogecoin_tx_out> txout,
    ffi.Pointer<ffi.Char> p2pkh,
    int is_testnet,
  ) {
    return _dogecoin_script_hash_to_p2pkh2(
      txout,
      p2pkh,
      is_testnet,
    );
  }

  late final _dogecoin_script_hash_to_p2pkh2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<dogecoin_tx_out>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('dogecoin_script_hash_to_p2pkh');
  late final _dogecoin_script_hash_to_p2pkh2 =
      _dogecoin_script_hash_to_p2pkh2Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx_out>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> dogecoin_p2pkh_to_script_hash2(
    ffi.Pointer<ffi.Char> p2pkh,
  ) {
    return _dogecoin_p2pkh_to_script_hash2(
      p2pkh,
    );
  }

  late final _dogecoin_p2pkh_to_script_hash2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('dogecoin_p2pkh_to_script_hash');
  late final _dogecoin_p2pkh_to_script_hash2 =
      _dogecoin_p2pkh_to_script_hash2Ptr
          .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> dogecoin_private_key_wif_to_script_hash2(
    ffi.Pointer<ffi.Char> private_key_wif,
  ) {
    return _dogecoin_private_key_wif_to_script_hash2(
      private_key_wif,
    );
  }

  late final _dogecoin_private_key_wif_to_script_hash2Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>(
      'dogecoin_private_key_wif_to_script_hash');
  late final _dogecoin_private_key_wif_to_script_hash2 =
      _dogecoin_private_key_wif_to_script_hash2Ptr
          .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  /// !create a new tx input
  ffi.Pointer<dogecoin_tx_in> dogecoin_tx_in_new2() {
    return _dogecoin_tx_in_new2();
  }

  late final _dogecoin_tx_in_new2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<dogecoin_tx_in> Function()>>(
          'dogecoin_tx_in_new');
  late final _dogecoin_tx_in_new2 = _dogecoin_tx_in_new2Ptr
      .asFunction<ffi.Pointer<dogecoin_tx_in> Function()>();

  void dogecoin_tx_in_free2(
    ffi.Pointer<dogecoin_tx_in> tx_in,
  ) {
    return _dogecoin_tx_in_free2(
      tx_in,
    );
  }

  late final _dogecoin_tx_in_free2Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_tx_in>)>>(
      'dogecoin_tx_in_free');
  late final _dogecoin_tx_in_free2 = _dogecoin_tx_in_free2Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_tx_in>)>();

  void dogecoin_tx_in_copy2(
    ffi.Pointer<dogecoin_tx_in> dest,
    ffi.Pointer<dogecoin_tx_in> src,
  ) {
    return _dogecoin_tx_in_copy2(
      dest,
      src,
    );
  }

  late final _dogecoin_tx_in_copy2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_tx_in>,
              ffi.Pointer<dogecoin_tx_in>)>>('dogecoin_tx_in_copy');
  late final _dogecoin_tx_in_copy2 = _dogecoin_tx_in_copy2Ptr.asFunction<
      void Function(
          ffi.Pointer<dogecoin_tx_in>, ffi.Pointer<dogecoin_tx_in>)>();

  int dogecoin_tx_in_deserialize2(
    ffi.Pointer<dogecoin_tx_in> tx_in,
    ffi.Pointer<const_buffer> buf,
  ) {
    return _dogecoin_tx_in_deserialize2(
      tx_in,
      buf,
    );
  }

  late final _dogecoin_tx_in_deserialize2Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_tx_in>,
              ffi.Pointer<const_buffer>)>>('dogecoin_tx_in_deserialize');
  late final _dogecoin_tx_in_deserialize2 =
      _dogecoin_tx_in_deserialize2Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx_in>, ffi.Pointer<const_buffer>)>();

  void dogecoin_tx_in_serialize2(
    ffi.Pointer<cstring> s,
    ffi.Pointer<dogecoin_tx_in> tx_in,
  ) {
    return _dogecoin_tx_in_serialize2(
      s,
      tx_in,
    );
  }

  late final _dogecoin_tx_in_serialize2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cstring>,
              ffi.Pointer<dogecoin_tx_in>)>>('dogecoin_tx_in_serialize');
  late final _dogecoin_tx_in_serialize2 =
      _dogecoin_tx_in_serialize2Ptr.asFunction<
          void Function(ffi.Pointer<cstring>, ffi.Pointer<dogecoin_tx_in>)>();

  /// !create a new tx output
  ffi.Pointer<dogecoin_tx_out> dogecoin_tx_out_new2() {
    return _dogecoin_tx_out_new2();
  }

  late final _dogecoin_tx_out_new2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<dogecoin_tx_out> Function()>>(
          'dogecoin_tx_out_new');
  late final _dogecoin_tx_out_new2 = _dogecoin_tx_out_new2Ptr
      .asFunction<ffi.Pointer<dogecoin_tx_out> Function()>();

  void dogecoin_tx_out_free2(
    ffi.Pointer<dogecoin_tx_out> tx_out,
  ) {
    return _dogecoin_tx_out_free2(
      tx_out,
    );
  }

  late final _dogecoin_tx_out_free2Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_tx_out>)>>(
      'dogecoin_tx_out_free');
  late final _dogecoin_tx_out_free2 = _dogecoin_tx_out_free2Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_tx_out>)>();

  void dogecoin_tx_out_copy2(
    ffi.Pointer<dogecoin_tx_out> dest,
    ffi.Pointer<dogecoin_tx_out> src,
  ) {
    return _dogecoin_tx_out_copy2(
      dest,
      src,
    );
  }

  late final _dogecoin_tx_out_copy2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_tx_out>,
              ffi.Pointer<dogecoin_tx_out>)>>('dogecoin_tx_out_copy');
  late final _dogecoin_tx_out_copy2 = _dogecoin_tx_out_copy2Ptr.asFunction<
      void Function(
          ffi.Pointer<dogecoin_tx_out>, ffi.Pointer<dogecoin_tx_out>)>();

  int dogecoin_tx_out_deserialize2(
    ffi.Pointer<dogecoin_tx_out> tx_out,
    ffi.Pointer<const_buffer> buf,
  ) {
    return _dogecoin_tx_out_deserialize2(
      tx_out,
      buf,
    );
  }

  late final _dogecoin_tx_out_deserialize2Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_tx_out>,
              ffi.Pointer<const_buffer>)>>('dogecoin_tx_out_deserialize');
  late final _dogecoin_tx_out_deserialize2 =
      _dogecoin_tx_out_deserialize2Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx_out>, ffi.Pointer<const_buffer>)>();

  void dogecoin_tx_out_serialize2(
    ffi.Pointer<cstring> s,
    ffi.Pointer<dogecoin_tx_out> tx_out,
  ) {
    return _dogecoin_tx_out_serialize2(
      s,
      tx_out,
    );
  }

  late final _dogecoin_tx_out_serialize2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cstring>,
              ffi.Pointer<dogecoin_tx_out>)>>('dogecoin_tx_out_serialize');
  late final _dogecoin_tx_out_serialize2 =
      _dogecoin_tx_out_serialize2Ptr.asFunction<
          void Function(ffi.Pointer<cstring>, ffi.Pointer<dogecoin_tx_out>)>();

  /// !create a new tx input
  ffi.Pointer<dogecoin_tx> dogecoin_tx_new2() {
    return _dogecoin_tx_new2();
  }

  late final _dogecoin_tx_new2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<dogecoin_tx> Function()>>(
          'dogecoin_tx_new');
  late final _dogecoin_tx_new2 =
      _dogecoin_tx_new2Ptr.asFunction<ffi.Pointer<dogecoin_tx> Function()>();

  void dogecoin_tx_free2(
    ffi.Pointer<dogecoin_tx> tx,
  ) {
    return _dogecoin_tx_free2(
      tx,
    );
  }

  late final _dogecoin_tx_free2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_tx>)>>(
          'dogecoin_tx_free');
  late final _dogecoin_tx_free2 = _dogecoin_tx_free2Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_tx>)>();

  void dogecoin_tx_copy2(
    ffi.Pointer<dogecoin_tx> dest,
    ffi.Pointer<dogecoin_tx> src,
  ) {
    return _dogecoin_tx_copy2(
      dest,
      src,
    );
  }

  late final _dogecoin_tx_copy2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<dogecoin_tx>)>>('dogecoin_tx_copy');
  late final _dogecoin_tx_copy2 = _dogecoin_tx_copy2Ptr.asFunction<
      void Function(ffi.Pointer<dogecoin_tx>, ffi.Pointer<dogecoin_tx>)>();

  /// !deserialize/parse a p2p serialized dogecoin transaction
  int dogecoin_tx_deserialize2(
    ffi.Pointer<ffi.UnsignedChar> tx_serialized,
    int inlen,
    ffi.Pointer<dogecoin_tx> tx,
    ffi.Pointer<ffi.Int> consumed_length,
  ) {
    return _dogecoin_tx_deserialize2(
      tx_serialized,
      inlen,
      tx,
      consumed_length,
    );
  }

  late final _dogecoin_tx_deserialize2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_tx_deserialize');
  late final _dogecoin_tx_deserialize2 =
      _dogecoin_tx_deserialize2Ptr.asFunction<
          int Function(ffi.Pointer<ffi.UnsignedChar>, int,
              ffi.Pointer<dogecoin_tx>, ffi.Pointer<ffi.Int>)>();

  /// !serialize a dogecoin data structure into a p2p serialized buffer
  void dogecoin_tx_serialize2(
    ffi.Pointer<cstring> s,
    ffi.Pointer<dogecoin_tx> tx,
  ) {
    return _dogecoin_tx_serialize2(
      s,
      tx,
    );
  }

  late final _dogecoin_tx_serialize2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cstring>,
              ffi.Pointer<dogecoin_tx>)>>('dogecoin_tx_serialize');
  late final _dogecoin_tx_serialize2 = _dogecoin_tx_serialize2Ptr.asFunction<
      void Function(ffi.Pointer<cstring>, ffi.Pointer<dogecoin_tx>)>();

  void dogecoin_tx_hash2(
    ffi.Pointer<dogecoin_tx> tx,
    ffi.Pointer<ffi.Uint8> hashout,
  ) {
    return _dogecoin_tx_hash2(
      tx,
      hashout,
    );
  }

  late final _dogecoin_tx_hash2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_tx_hash');
  late final _dogecoin_tx_hash2 = _dogecoin_tx_hash2Ptr.asFunction<
      void Function(ffi.Pointer<dogecoin_tx>, ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_tx_sighash2(
    ffi.Pointer<dogecoin_tx> tx_to,
    ffi.Pointer<cstring> fromPubKey,
    int in_num,
    int hashtype,
    ffi.Pointer<ffi.Uint8> hash,
  ) {
    return _dogecoin_tx_sighash2(
      tx_to,
      fromPubKey,
      in_num,
      hashtype,
      hash,
    );
  }

  late final _dogecoin_tx_sighash2Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<cstring>,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_tx_sighash');
  late final _dogecoin_tx_sighash2 = _dogecoin_tx_sighash2Ptr.asFunction<
      int Function(ffi.Pointer<dogecoin_tx>, ffi.Pointer<cstring>, int, int,
          ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_tx_add_address_out2(
    ffi.Pointer<dogecoin_tx> tx,
    ffi.Pointer<dogecoin_chainparams> chain,
    int amount,
    ffi.Pointer<ffi.Char> address,
  ) {
    return _dogecoin_tx_add_address_out2(
      tx,
      chain,
      amount,
      address,
    );
  }

  late final _dogecoin_tx_add_address_out2Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Int64,
              ffi.Pointer<ffi.Char>)>>('dogecoin_tx_add_address_out');
  late final _dogecoin_tx_add_address_out2 =
      _dogecoin_tx_add_address_out2Ptr.asFunction<
          int Function(ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<dogecoin_chainparams>, int, ffi.Pointer<ffi.Char>)>();

  int dogecoin_tx_add_p2sh_hash160_out2(
    ffi.Pointer<dogecoin_tx> tx,
    int amount,
    ffi.Pointer<ffi.Uint8> hash160,
  ) {
    return _dogecoin_tx_add_p2sh_hash160_out2(
      tx,
      amount,
      hash160,
    );
  }

  late final _dogecoin_tx_add_p2sh_hash160_out2Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_tx>, ffi.Int64,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_tx_add_p2sh_hash160_out');
  late final _dogecoin_tx_add_p2sh_hash160_out2 =
      _dogecoin_tx_add_p2sh_hash160_out2Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx>, int, ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_tx_add_p2pkh_hash160_out2(
    ffi.Pointer<dogecoin_tx> tx,
    int amount,
    ffi.Pointer<ffi.Uint8> hash160,
  ) {
    return _dogecoin_tx_add_p2pkh_hash160_out2(
      tx,
      amount,
      hash160,
    );
  }

  late final _dogecoin_tx_add_p2pkh_hash160_out2Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_tx>, ffi.Int64,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_tx_add_p2pkh_hash160_out');
  late final _dogecoin_tx_add_p2pkh_hash160_out2 =
      _dogecoin_tx_add_p2pkh_hash160_out2Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx>, int, ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_tx_add_p2pkh_out2(
    ffi.Pointer<dogecoin_tx> tx,
    int amount,
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_tx_add_p2pkh_out2(
      tx,
      amount,
      pubkey,
    );
  }

  late final _dogecoin_tx_add_p2pkh_out2Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_tx>, ffi.Int64,
              ffi.Pointer<dogecoin_pubkey>)>>('dogecoin_tx_add_p2pkh_out');
  late final _dogecoin_tx_add_p2pkh_out2 =
      _dogecoin_tx_add_p2pkh_out2Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx>, int, ffi.Pointer<dogecoin_pubkey>)>();

  int dogecoin_tx_add_data_out2(
    ffi.Pointer<dogecoin_tx> tx,
    int amount,
    ffi.Pointer<ffi.Uint8> data,
    int datalen,
  ) {
    return _dogecoin_tx_add_data_out2(
      tx,
      amount,
      data,
      datalen,
    );
  }

  late final _dogecoin_tx_add_data_out2Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_tx>, ffi.Int64,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('dogecoin_tx_add_data_out');
  late final _dogecoin_tx_add_data_out2 =
      _dogecoin_tx_add_data_out2Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx>, int, ffi.Pointer<ffi.Uint8>, int)>();

  int dogecoin_tx_add_puzzle_out2(
    ffi.Pointer<dogecoin_tx> tx,
    int amount,
    ffi.Pointer<ffi.Uint8> puzzle,
    int puzzlelen,
  ) {
    return _dogecoin_tx_add_puzzle_out2(
      tx,
      amount,
      puzzle,
      puzzlelen,
    );
  }

  late final _dogecoin_tx_add_puzzle_out2Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_tx>, ffi.Int64,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('dogecoin_tx_add_puzzle_out');
  late final _dogecoin_tx_add_puzzle_out2 =
      _dogecoin_tx_add_puzzle_out2Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx>, int, ffi.Pointer<ffi.Uint8>, int)>();

  int dogecoin_tx_outpoint_is_null2(
    ffi.Pointer<dogecoin_tx_outpoint> tx,
  ) {
    return _dogecoin_tx_outpoint_is_null2(
      tx,
    );
  }

  late final _dogecoin_tx_outpoint_is_null2Ptr = _lookup<
          ffi.NativeFunction<
              dogecoin_bool Function(ffi.Pointer<dogecoin_tx_outpoint>)>>(
      'dogecoin_tx_outpoint_is_null');
  late final _dogecoin_tx_outpoint_is_null2 = _dogecoin_tx_outpoint_is_null2Ptr
      .asFunction<int Function(ffi.Pointer<dogecoin_tx_outpoint>)>();

  int dogecoin_tx_is_coinbase2(
    ffi.Pointer<dogecoin_tx> tx,
  ) {
    return _dogecoin_tx_is_coinbase2(
      tx,
    );
  }

  late final _dogecoin_tx_is_coinbase2Ptr = _lookup<
          ffi.NativeFunction<dogecoin_bool Function(ffi.Pointer<dogecoin_tx>)>>(
      'dogecoin_tx_is_coinbase');
  late final _dogecoin_tx_is_coinbase2 = _dogecoin_tx_is_coinbase2Ptr
      .asFunction<int Function(ffi.Pointer<dogecoin_tx>)>();

  ffi.Pointer<ffi.Char> dogecoin_tx_sign_result_to_str2(
    int result,
  ) {
    return _dogecoin_tx_sign_result_to_str2(
      result,
    );
  }

  late final _dogecoin_tx_sign_result_to_str2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'dogecoin_tx_sign_result_to_str');
  late final _dogecoin_tx_sign_result_to_str2 =
      _dogecoin_tx_sign_result_to_str2Ptr
          .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int dogecoin_tx_sign_input2(
    ffi.Pointer<dogecoin_tx> tx_in_out,
    ffi.Pointer<cstring> script,
    ffi.Pointer<dogecoin_key> privkey,
    int inputindex,
    int sighashtype,
    ffi.Pointer<ffi.Uint8> sigcompact_out,
    ffi.Pointer<ffi.Uint8> sigder_out,
    ffi.Pointer<ffi.Int> sigder_len,
  ) {
    return _dogecoin_tx_sign_input2(
      tx_in_out,
      script,
      privkey,
      inputindex,
      sighashtype,
      sigcompact_out,
      sigder_out,
      sigder_len,
    );
  }

  late final _dogecoin_tx_sign_input2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<cstring>,
              ffi.Pointer<dogecoin_key>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_tx_sign_input');
  late final _dogecoin_tx_sign_input2 = _dogecoin_tx_sign_input2Ptr.asFunction<
      int Function(
          ffi.Pointer<dogecoin_tx>,
          ffi.Pointer<cstring>,
          ffi.Pointer<dogecoin_key>,
          int,
          int,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Int>)>();

  int addresses_from_pubkey(
    ffi.Pointer<dogecoin_chainparams> chain,
    ffi.Pointer<ffi.Char> pubkey_hex,
    ffi.Pointer<ffi.Char> p2pkh_address,
  ) {
    return _addresses_from_pubkey(
      chain,
      pubkey_hex,
      p2pkh_address,
    );
  }

  late final _addresses_from_pubkeyPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('addresses_from_pubkey');
  late final _addresses_from_pubkey = _addresses_from_pubkeyPtr.asFunction<
      int Function(ffi.Pointer<dogecoin_chainparams>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int pubkey_from_privatekey(
    ffi.Pointer<dogecoin_chainparams> chain,
    ffi.Pointer<ffi.Char> privkey_hex,
    ffi.Pointer<ffi.Char> pubkey_hex,
    ffi.Pointer<ffi.Int> sizeout,
  ) {
    return _pubkey_from_privatekey(
      chain,
      privkey_hex,
      pubkey_hex,
      sizeout,
    );
  }

  late final _pubkey_from_privatekeyPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('pubkey_from_privatekey');
  late final _pubkey_from_privatekey = _pubkey_from_privatekeyPtr.asFunction<
      int Function(ffi.Pointer<dogecoin_chainparams>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  int gen_privatekey(
    ffi.Pointer<dogecoin_chainparams> chain,
    ffi.Pointer<ffi.Char> privkey_wif,
    int strsize_wif,
    ffi.Pointer<ffi.Char> privkey_hex,
  ) {
    return _gen_privatekey(
      chain,
      privkey_wif,
      strsize_wif,
      privkey_hex,
    );
  }

  late final _gen_privatekeyPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>)>>('gen_privatekey');
  late final _gen_privatekey = _gen_privatekeyPtr.asFunction<
      int Function(ffi.Pointer<dogecoin_chainparams>, ffi.Pointer<ffi.Char>,
          int, ffi.Pointer<ffi.Char>)>();

  int hd_gen_master(
    ffi.Pointer<dogecoin_chainparams> chain,
    ffi.Pointer<ffi.Char> masterkeyhex,
    int strsize,
  ) {
    return _hd_gen_master(
      chain,
      masterkeyhex,
      strsize,
    );
  }

  late final _hd_gen_masterPtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('hd_gen_master');
  late final _hd_gen_master = _hd_gen_masterPtr.asFunction<
      int Function(
          ffi.Pointer<dogecoin_chainparams>, ffi.Pointer<ffi.Char>, int)>();

  int hd_print_node(
    ffi.Pointer<dogecoin_chainparams> chain,
    ffi.Pointer<ffi.Char> nodeser,
  ) {
    return _hd_print_node(
      chain,
      nodeser,
    );
  }

  late final _hd_print_nodePtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<ffi.Char>)>>('hd_print_node');
  late final _hd_print_node = _hd_print_nodePtr.asFunction<
      int Function(ffi.Pointer<dogecoin_chainparams>, ffi.Pointer<ffi.Char>)>();

  int hd_derive(
    ffi.Pointer<dogecoin_chainparams> chain,
    ffi.Pointer<ffi.Char> masterkey,
    ffi.Pointer<ffi.Char> keypath,
    ffi.Pointer<ffi.Char> extkeyout,
    int extkeyout_size,
  ) {
    return _hd_derive(
      chain,
      masterkey,
      keypath,
      extkeyout,
      extkeyout_size,
    );
  }

  late final _hd_derivePtr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('hd_derive');
  late final _hd_derive = _hd_derivePtr.asFunction<
      int Function(ffi.Pointer<dogecoin_chainparams>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int __ctype_get_mb_cur_max26() {
    return ___ctype_get_mb_cur_max26();
  }

  late final ___ctype_get_mb_cur_max26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max26 =
      ___ctype_get_mb_cur_max26Ptr.asFunction<int Function()>();

  double atof26(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof26(
      __nptr,
    );
  }

  late final _atof26Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof26 =
      _atof26Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi26(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi26(
      __nptr,
    );
  }

  late final _atoi26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi26 =
      _atoi26Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol26(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol26(
      __nptr,
    );
  }

  late final _atol26Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol26 =
      _atol26Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll26(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll26(
      __nptr,
    );
  }

  late final _atoll26Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll26 =
      _atoll26Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod26(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod26(
      __nptr,
      __endptr,
    );
  }

  late final _strtod26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod26 = _strtod26Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof26(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof26(
      __nptr,
      __endptr,
    );
  }

  late final _strtof26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof26 = _strtof26Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol26(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol26(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol26 = _strtol26Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul26(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul26(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul26 = _strtoul26Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq26(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq26(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq26 = _strtoq26Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq26(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq26(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq26 = _strtouq26Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll26(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll26(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll26 = _strtoll26Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull26(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull26(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull26 = _strtoull26Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a26(
    int __n,
  ) {
    return _l64a26(
      __n,
    );
  }

  late final _l64a26Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a26 =
      _l64a26Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l26(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l26(
      __s,
    );
  }

  late final _a64l26Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l26 =
      _a64l26Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select26(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select26(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select26 = _select26Ptr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect26(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect26(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect26 = _pselect26Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random26() {
    return _random26();
  }

  late final _random26Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random26 = _random26Ptr.asFunction<int Function()>();

  void srandom26(
    int __seed,
  ) {
    return _srandom26(
      __seed,
    );
  }

  late final _srandom26Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom26 = _srandom26Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate26(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate26(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int)>>('initstate');
  late final _initstate26 = _initstate26Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate26(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate26(
      __statebuf,
    );
  }

  late final _setstate26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate26 = _setstate26Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r26(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r26(
      __buf,
      __result,
    );
  }

  late final _random_r26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r26 = _random_r26Ptr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r26(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r26(
      __seed,
      __buf,
    );
  }

  late final _srandom_r26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r26 =
      _srandom_r26Ptr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r26(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r26(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r26 = _initstate_r26Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r26(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r26(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r26 = _setstate_r26Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand26() {
    return _rand26();
  }

  late final _rand26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand26 = _rand26Ptr.asFunction<int Function()>();

  void srand26(
    int __seed,
  ) {
    return _srand26(
      __seed,
    );
  }

  late final _srand26Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand26 = _srand26Ptr.asFunction<void Function(int)>();

  int rand_r26(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r26(
      __seed,
    );
  }

  late final _rand_r26Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r26 =
      _rand_r26Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand4826() {
    return _drand4826();
  }

  late final _drand4826Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand4826 = _drand4826Ptr.asFunction<double Function()>();

  double erand4826(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand4826(
      __xsubi,
    );
  }

  late final _erand4826Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand4826 = _erand4826Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand4826() {
    return _lrand4826();
  }

  late final _lrand4826Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand4826 = _lrand4826Ptr.asFunction<int Function()>();

  int nrand4826(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand4826(
      __xsubi,
    );
  }

  late final _nrand4826Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand4826 =
      _nrand4826Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand4826() {
    return _mrand4826();
  }

  late final _mrand4826Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand4826 = _mrand4826Ptr.asFunction<int Function()>();

  int jrand4826(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand4826(
      __xsubi,
    );
  }

  late final _jrand4826Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand4826 =
      _jrand4826Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand4826(
    int __seedval,
  ) {
    return _srand4826(
      __seedval,
    );
  }

  late final _srand4826Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand4826 = _srand4826Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed4826(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed4826(
      __seed16v,
    );
  }

  late final _seed4826Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed4826 = _seed4826Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong4826(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong4826(
      __param,
    );
  }

  late final _lcong4826Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong4826 =
      _lcong4826Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r26(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r26(
      __buffer,
      __result,
    );
  }

  late final _drand48_r26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r26 = _drand48_r26Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r26(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r26(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r26 = _erand48_r26Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r26(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r26(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r26 = _lrand48_r26Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r26(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r26(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r26 = _nrand48_r26Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r26(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r26(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r26 = _mrand48_r26Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r26(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r26(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r26 = _jrand48_r26Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r26(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r26(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r26 = _srand48_r26Ptr
      .asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r26(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r26(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r26 = _seed48_r26Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r26(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r26(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r26 = _lcong48_r26Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int arc4random26() {
    return _arc4random26();
  }

  late final _arc4random26Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random26 = _arc4random26Ptr.asFunction<int Function()>();

  void arc4random_buf26(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf26(
      __buf,
      __size,
    );
  }

  late final _arc4random_buf26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('arc4random_buf');
  late final _arc4random_buf26 = _arc4random_buf26Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform26(
    int __upper_bound,
  ) {
    return _arc4random_uniform26(
      __upper_bound,
    );
  }

  late final _arc4random_uniform26Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
          'arc4random_uniform');
  late final _arc4random_uniform26 =
      _arc4random_uniform26Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc26(
    int __size,
  ) {
    return _malloc26(
      __size,
    );
  }

  late final _malloc26Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'malloc');
  late final _malloc26 =
      _malloc26Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc26(
    int __nmemb,
    int __size,
  ) {
    return _calloc26(
      __nmemb,
      __size,
    );
  }

  late final _calloc26Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'calloc');
  late final _calloc26 =
      _calloc26Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc26(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc26(
      __ptr,
      __size,
    );
  }

  late final _realloc26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('realloc');
  late final _realloc26 = _realloc26Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free26(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free26(
      __ptr,
    );
  }

  late final _free26Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free26 =
      _free26Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray52(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray52(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray52Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray52 = _reallocarray52Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray53(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray53(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray53Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray53 = _reallocarray53Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca26(
    int __size,
  ) {
    return _alloca26(
      __size,
    );
  }

  late final _alloca26Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'alloca');
  late final _alloca26 =
      _alloca26Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc26(
    int __size,
  ) {
    return _valloc26(
      __size,
    );
  }

  late final _valloc26Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'valloc');
  late final _valloc26 =
      _valloc26Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign26(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign26(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int,
              ffi.Int)>>('posix_memalign');
  late final _posix_memalign26 = _posix_memalign26Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc26(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc26(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc26Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'aligned_alloc');
  late final _aligned_alloc26 = _aligned_alloc26Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort26() {
    return _abort26();
  }

  late final _abort26Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort26 = _abort26Ptr.asFunction<void Function()>();

  int atexit26(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit26(
      __func,
    );
  }

  late final _atexit26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit26 = _atexit26Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit26(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit26(
      __func,
    );
  }

  late final _at_quick_exit26Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit26 = _at_quick_exit26Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit26(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit26(
      __func,
      __arg,
    );
  }

  late final _on_exit26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit26 = _on_exit26Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit26(
    int __status,
  ) {
    return _exit26(
      __status,
    );
  }

  late final _exit26Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit26 = _exit26Ptr.asFunction<void Function(int)>();

  void quick_exit26(
    int __status,
  ) {
    return _quick_exit26(
      __status,
    );
  }

  late final _quick_exit26Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit26 = _quick_exit26Ptr.asFunction<void Function(int)>();

  void _Exit26(
    int __status,
  ) {
    return __Exit26(
      __status,
    );
  }

  late final __Exit26Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit26 = __Exit26Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv26(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv26(
      __name,
    );
  }

  late final _getenv26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv26 = _getenv26Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv26(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv26(
      __string,
    );
  }

  late final _putenv26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv26 =
      _putenv26Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv26(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv26(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv26 = _setenv26Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv26(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv26(
      __name,
    );
  }

  late final _unsetenv26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv26 =
      _unsetenv26Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv26() {
    return _clearenv26();
  }

  late final _clearenv26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv26 = _clearenv26Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp26(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp26(
      __template,
    );
  }

  late final _mktemp26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp26 = _mktemp26Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp26(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp26(
      __template,
    );
  }

  late final _mkstemp26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp26 =
      _mkstemp26Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps26(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps26(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps26Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps26 =
      _mkstemps26Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp26(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp26(
      __template,
    );
  }

  late final _mkdtemp26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp26 = _mkdtemp26Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system26(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system26(
      __command,
    );
  }

  late final _system26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system26 =
      _system26Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath26(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath26(
      __name,
      __resolved,
    );
  }

  late final _realpath26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath26 = _realpath26Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch26(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch26(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              __compar_fn_t)>>('bsearch');
  late final _bsearch26 = _bsearch26Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort26(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort26(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              __compar_fn_t)>>('qsort');
  late final _qsort26 = _qsort26Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs26(
    int __x,
  ) {
    return _abs26(
      __x,
    );
  }

  late final _abs26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs26 = _abs26Ptr.asFunction<int Function(int)>();

  int labs26(
    int __x,
  ) {
    return _labs26(
      __x,
    );
  }

  late final _labs26Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs26 = _labs26Ptr.asFunction<int Function(int)>();

  int llabs26(
    int __x,
  ) {
    return _llabs26(
      __x,
    );
  }

  late final _llabs26Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs26 = _llabs26Ptr.asFunction<int Function(int)>();

  div_t div26(
    int __numer,
    int __denom,
  ) {
    return _div26(
      __numer,
      __denom,
    );
  }

  late final _div26Ptr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div26 = _div26Ptr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv26(
    int __numer,
    int __denom,
  ) {
    return _ldiv26(
      __numer,
      __denom,
    );
  }

  late final _ldiv26Ptr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv26 = _ldiv26Ptr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv26(
    int __numer,
    int __denom,
  ) {
    return _lldiv26(
      __numer,
      __denom,
    );
  }

  late final _lldiv26Ptr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv26 = _lldiv26Ptr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt26(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt26(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt26 = _ecvt26Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt26(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt26(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt26 = _fcvt26Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt26(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt26(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt26 = _gcvt26Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r26(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r26(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('ecvt_r');
  late final _ecvt_r26 = _ecvt_r26Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r26(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r26(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('fcvt_r');
  late final _fcvt_r26 = _fcvt_r26Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen26(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen26(
      __s,
      __n,
    );
  }

  late final _mblen26Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mblen');
  late final _mblen26 =
      _mblen26Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc26(
    ffi.Pointer<ffi.Int> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc26(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('mbtowc');
  late final _mbtowc26 = _mbtowc26Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb26(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb26(
      __s,
      __wchar,
    );
  }

  late final _wctomb26Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'wctomb');
  late final _wctomb26 =
      _wctomb26Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs26(
    ffi.Pointer<ffi.Int> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs26(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mbstowcs');
  late final _mbstowcs26 = _mbstowcs26Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs26(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Int> __pwcs,
    int __n,
  ) {
    return _wcstombs26(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('wcstombs');
  late final _wcstombs26 = _wcstombs26Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  int rpmatch26(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch26(
      __response,
    );
  }

  late final _rpmatch26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch26 =
      _rpmatch26Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt26(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt26(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt26 = _getsubopt26Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg26(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg26(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg26 =
      _getloadavg26Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  int remove26(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove26(
      __filename,
    );
  }

  late final _remove26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove26 =
      _remove26Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename26(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename26(
      __old,
      __new,
    );
  }

  late final _rename26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename26 = _rename26Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat26(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat26(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameat26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat26 = _renameat26Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose26(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose26(
      __stream,
    );
  }

  late final _fclose26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose26 =
      _fclose26Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile26() {
    return _tmpfile26();
  }

  late final _tmpfile26Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile26 =
      _tmpfile26Ptr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam26(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam26(
      arg0,
    );
  }

  late final _tmpnam26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam26 = _tmpnam26Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r26(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r26(
      __s,
    );
  }

  late final _tmpnam_r26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r26 = _tmpnam_r26Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam26(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam26(
      __dir,
      __pfx,
    );
  }

  late final _tempnam26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam26 = _tempnam26Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush26(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush26(
      __stream,
    );
  }

  late final _fflush26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush26 =
      _fflush26Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked26(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked26(
      __stream,
    );
  }

  late final _fflush_unlocked26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked26 =
      _fflush_unlocked26Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen26(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen26(
      __filename,
      __modes,
    );
  }

  late final _fopen26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen26 = _fopen26Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen26(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen26(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopen26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen26 = _freopen26Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen26(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen26(
      __fd,
      __modes,
    );
  }

  late final _fdopen26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen26 = _fdopen26Ptr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen26(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen26(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopen26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen26 = _fmemopen26Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream26(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Int> __sizeloc,
  ) {
    return _open_memstream26(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstream26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('open_memstream');
  late final _open_memstream26 = _open_memstream26Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void setbuf26(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf26(
      __stream,
      __buf,
    );
  }

  late final _setbuf26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf26 = _setbuf26Ptr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf26(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf26(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbuf26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('setvbuf');
  late final _setvbuf26 = _setvbuf26Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer26(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer26(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbuffer26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer26 = _setbuffer26Ptr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf26(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf26(
      __stream,
    );
  }

  late final _setlinebuf26Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf26 =
      _setlinebuf26Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf26(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf26(
      __stream,
      __format,
    );
  }

  late final _fprintf26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf26 = _fprintf26Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf26(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf26(
      __format,
    );
  }

  late final _printf26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf26 =
      _printf26Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf26(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf26(
      __s,
      __format,
    );
  }

  late final _sprintf26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf26 = _sprintf26Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf26(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfprintf26(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintf26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfprintf');
  late final _vfprintf26 = _vfprintf26Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vprintf26(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vprintf26(
      __format,
      __arg,
    );
  }

  late final _vprintf26Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vprintf');
  late final _vprintf26 =
      _vprintf26Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsprintf26(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsprintf26(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintf26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsprintf');
  late final _vsprintf26 = _vsprintf26Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int snprintf26(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf26(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintf26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf26 = _snprintf26Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf26(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsnprintf26(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintf26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('vsnprintf');
  late final _vsnprintf26 = _vsnprintf26Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int vdprintf26(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    int __arg,
  ) {
    return _vdprintf26(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintf26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('vdprintf');
  late final _vdprintf26 = _vdprintf26Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int dprintf26(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf26(
      __fd,
      __fmt,
    );
  }

  late final _dprintf26Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf26 =
      _dprintf26Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf52(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf52(
      __stream,
      __format,
    );
  }

  late final _fscanf52Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf52 = _fscanf52Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf52(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf52(
      __format,
    );
  }

  late final _scanf52Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf52 =
      _scanf52Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf52(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf52(
      __s,
      __format,
    );
  }

  late final _sscanf52Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf52 = _sscanf52Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fscanf53(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf53(
      __stream,
      __format,
    );
  }

  late final _fscanf53Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf53 = _fscanf53Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf53(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf53(
      __format,
    );
  }

  late final _scanf53Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf53 =
      _scanf53Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf53(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf53(
      __s,
      __format,
    );
  }

  late final _sscanf53Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf53 = _sscanf53Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf52(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf52(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf52Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf52 = _vfscanf52Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf52(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf52(
      __format,
      __arg,
    );
  }

  late final _vscanf52Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf52 =
      _vscanf52Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf52(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf52(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf52Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf52 = _vsscanf52Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int vfscanf53(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf53(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf53Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf53 = _vfscanf53Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf53(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf53(
      __format,
      __arg,
    );
  }

  late final _vscanf53Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf53 =
      _vscanf53Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf53(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf53(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf53Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf53 = _vsscanf53Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fgetc26(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc26(
      __stream,
    );
  }

  late final _fgetc26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc26 =
      _fgetc26Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc26(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc26(
      __stream,
    );
  }

  late final _getc26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc26 = _getc26Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar26() {
    return _getchar26();
  }

  late final _getchar26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar26 = _getchar26Ptr.asFunction<int Function()>();

  int getc_unlocked26(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked26(
      __stream,
    );
  }

  late final _getc_unlocked26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked26 =
      _getc_unlocked26Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked26() {
    return _getchar_unlocked26();
  }

  late final _getchar_unlocked26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked26 =
      _getchar_unlocked26Ptr.asFunction<int Function()>();

  int fgetc_unlocked26(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked26(
      __stream,
    );
  }

  late final _fgetc_unlocked26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked26 =
      _fgetc_unlocked26Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc26(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc26(
      __c,
      __stream,
    );
  }

  late final _fputc26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc26 =
      _fputc26Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc26(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc26(
      __c,
      __stream,
    );
  }

  late final _putc26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc26 =
      _putc26Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar26(
    int __c,
  ) {
    return _putchar26(
      __c,
    );
  }

  late final _putchar26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar26 = _putchar26Ptr.asFunction<int Function(int)>();

  int fputc_unlocked26(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked26(
      __c,
      __stream,
    );
  }

  late final _fputc_unlocked26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked26 =
      _fputc_unlocked26Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked26(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked26(
      __c,
      __stream,
    );
  }

  late final _putc_unlocked26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked26 =
      _putc_unlocked26Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked26(
    int __c,
  ) {
    return _putchar_unlocked26(
      __c,
    );
  }

  late final _putchar_unlocked26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked26 =
      _putchar_unlocked26Ptr.asFunction<int Function(int)>();

  int getw26(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw26(
      __stream,
    );
  }

  late final _getw26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw26 = _getw26Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw26(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw26(
      __w,
      __stream,
    );
  }

  late final _putw26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw26 =
      _putw26Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets26(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets26(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgets26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets26 = _fgets26Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim26(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim26(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelim26Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim26 = ___getdelim26Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getdelim26(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim26(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelim26Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim26 = _getdelim26Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getline26(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline26(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getline26Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<FILE>)>>('getline');
  late final _getline26 = _getline26Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<FILE>)>();

  int fputs26(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs26(
      __s,
      __stream,
    );
  }

  late final _fputs26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs26 = _fputs26Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts26(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts26(
      __s,
    );
  }

  late final _puts26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts26 =
      _puts26Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc26(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc26(
      __c,
      __stream,
    );
  }

  late final _ungetc26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc26 =
      _ungetc26Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread26(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread26(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread26 = _fread26Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite26(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite26(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwrite26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite26 = _fwrite26Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked26(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked26(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlocked26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked26 = _fread_unlocked26Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked26(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked26(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlocked26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked26 = _fwrite_unlocked26Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek26(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek26(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseek26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek26 =
      _fseek26Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell26(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell26(
      __stream,
    );
  }

  late final _ftell26Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell26 =
      _ftell26Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind26(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind26(
      __stream,
    );
  }

  late final _rewind26Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind26 =
      _rewind26Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko26(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko26(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseeko26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko26 =
      _fseeko26Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello26(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello26(
      __stream,
    );
  }

  late final _ftello26Ptr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello26 =
      _ftello26Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos26(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos26(
      __stream,
      __pos,
    );
  }

  late final _fgetpos26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos26 = _fgetpos26Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos26(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos26(
      __stream,
      __pos,
    );
  }

  late final _fsetpos26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos26 = _fsetpos26Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr26(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr26(
      __stream,
    );
  }

  late final _clearerr26Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr26 =
      _clearerr26Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof26(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof26(
      __stream,
    );
  }

  late final _feof26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof26 = _feof26Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror26(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror26(
      __stream,
    );
  }

  late final _ferror26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror26 =
      _ferror26Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked26(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked26(
      __stream,
    );
  }

  late final _clearerr_unlocked26Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked26 =
      _clearerr_unlocked26Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked26(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked26(
      __stream,
    );
  }

  late final _feof_unlocked26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked26 =
      _feof_unlocked26Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked26(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked26(
      __stream,
    );
  }

  late final _ferror_unlocked26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked26 =
      _ferror_unlocked26Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror26(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror26(
      __s,
    );
  }

  late final _perror26Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror26 =
      _perror26Ptr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno26(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno26(
      __stream,
    );
  }

  late final _fileno26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno26 =
      _fileno26Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked26(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked26(
      __stream,
    );
  }

  late final _fileno_unlocked26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked26 =
      _fileno_unlocked26Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose26(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose26(
      __stream,
    );
  }

  late final _pclose26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose26 =
      _pclose26Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen26(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen26(
      __command,
      __modes,
    );
  }

  late final _popen26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen26 = _popen26Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid26(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid26(
      __s,
    );
  }

  late final _ctermid26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid26 = _ctermid26Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile26(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile26(
      __stream,
    );
  }

  late final _flockfile26Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile26 =
      _flockfile26Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile26(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile26(
      __stream,
    );
  }

  late final _ftrylockfile26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile26 =
      _ftrylockfile26Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile26(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile26(
      __stream,
    );
  }

  late final _funlockfile26Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile26 =
      _funlockfile26Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow26(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow26(
      arg0,
    );
  }

  late final ___uflow26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow26 =
      ___uflow26Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow26(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow26(
      arg0,
      arg1,
    );
  }

  late final ___overflow26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow26 =
      ___overflow26Ptr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  ffi.Pointer<ffi.Void> memcpy26(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy26(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpy26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memcpy');
  late final _memcpy26 = _memcpy26Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove26(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove26(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmove26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memmove');
  late final _memmove26 = _memmove26Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy26(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy26(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpy26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memccpy');
  late final _memccpy26 = _memccpy26Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset26(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset26(
      __s,
      __c,
      __n,
    );
  }

  late final _memset26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memset');
  late final _memset26 = _memset26Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp26(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp26(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmp26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('memcmp');
  late final _memcmp26 = _memcmp26Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq26(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq26(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeq26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__memcmpeq');
  late final ___memcmpeq26 = ___memcmpeq26Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr26(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr26(
      __s,
      __c,
      __n,
    );
  }

  late final _memchr26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memchr');
  late final _memchr26 = _memchr26Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy26(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy26(
      __dest,
      __src,
    );
  }

  late final _strcpy26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy26 = _strcpy26Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy26(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy26(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpy26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncpy');
  late final _strncpy26 = _strncpy26Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat26(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat26(
      __dest,
      __src,
    );
  }

  late final _strcat26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat26 = _strcat26Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat26(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat26(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncat26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncat');
  late final _strncat26 = _strncat26Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp26(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp26(
      __s1,
      __s2,
    );
  }

  late final _strcmp26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp26 = _strcmp26Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp26(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp26(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmp26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncmp');
  late final _strncmp26 = _strncmp26Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll26(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll26(
      __s1,
      __s2,
    );
  }

  late final _strcoll26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll26 = _strcoll26Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm26(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm26(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrm26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strxfrm');
  late final _strxfrm26 = _strxfrm26Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l26(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l26(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_l26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l26 = _strcoll_l26Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l26(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l26(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_l26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strxfrm_l');
  late final _strxfrm_l26 = _strxfrm_l26Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup26(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup26(
      __s,
    );
  }

  late final _strdup26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup26 = _strdup26Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup26(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup26(
      __string,
      __n,
    );
  }

  late final _strndup26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strndup');
  late final _strndup26 = _strndup26Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr26(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr26(
      __s,
      __c,
    );
  }

  late final _strchr26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr26 = _strchr26Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr26(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr26(
      __s,
      __c,
    );
  }

  late final _strrchr26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr26 = _strrchr26Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn26(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn26(
      __s,
      __reject,
    );
  }

  late final _strcspn26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn26 = _strcspn26Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn26(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn26(
      __s,
      __accept,
    );
  }

  late final _strspn26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn26 = _strspn26Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk26(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk26(
      __s,
      __accept,
    );
  }

  late final _strpbrk26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk26 = _strpbrk26Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr26(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr26(
      __haystack,
      __needle,
    );
  }

  late final _strstr26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr26 = _strstr26Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok26(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok26(
      __s,
      __delim,
    );
  }

  late final _strtok26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok26 = _strtok26Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r26(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r26(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_r26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r26 = ___strtok_r26Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r26(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r26(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_r26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r26 = _strtok_r26Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen26(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen26(
      __s,
    );
  }

  late final _strlen26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'strlen');
  late final _strlen26 =
      _strlen26Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen26(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen26(
      __string,
      __maxlen,
    );
  }

  late final _strnlen26Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'strnlen');
  late final _strnlen26 =
      _strnlen26Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror26(
    int __errnum,
  ) {
    return _strerror26(
      __errnum,
    );
  }

  late final _strerror26Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror26 =
      _strerror26Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r26(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r26(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_r26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('strerror_r');
  late final _strerror_r26 = _strerror_r26Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l26(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l26(
      __errnum,
      __l,
    );
  }

  late final _strerror_l26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l26 = _strerror_l26Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp26(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp26(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmp26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcmp');
  late final _bcmp26 = _bcmp26Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy26(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy26(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopy26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcopy');
  late final _bcopy26 = _bcopy26Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero26(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero26(
      __s,
      __n,
    );
  }

  late final _bzero26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('bzero');
  late final _bzero26 =
      _bzero26Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index26(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index26(
      __s,
      __c,
    );
  }

  late final _index26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index26 = _index26Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex26(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex26(
      __s,
      __c,
    );
  }

  late final _rindex26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex26 = _rindex26Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs26(
    int __i,
  ) {
    return _ffs26(
      __i,
    );
  }

  late final _ffs26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs26 = _ffs26Ptr.asFunction<int Function(int)>();

  int ffsl26(
    int __l,
  ) {
    return _ffsl26(
      __l,
    );
  }

  late final _ffsl26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl26 = _ffsl26Ptr.asFunction<int Function(int)>();

  int ffsll26(
    int __ll,
  ) {
    return _ffsll26(
      __ll,
    );
  }

  late final _ffsll26Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll26 = _ffsll26Ptr.asFunction<int Function(int)>();

  int strcasecmp26(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp26(
      __s1,
      __s2,
    );
  }

  late final _strcasecmp26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp26 = _strcasecmp26Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp26(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp26(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmp26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncasecmp');
  late final _strncasecmp26 = _strncasecmp26Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l26(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l26(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_l26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l26 = _strcasecmp_l26Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l26(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l26(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_l26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l26 = _strncasecmp_l26Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero26(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero26(
      __s,
      __n,
    );
  }

  late final _explicit_bzero26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('explicit_bzero');
  late final _explicit_bzero26 = _explicit_bzero26Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep26(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep26(
      __stringp,
      __delim,
    );
  }

  late final _strsep26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep26 = _strsep26Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal26(
    int __sig,
  ) {
    return _strsignal26(
      __sig,
    );
  }

  late final _strsignal26Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal26 =
      _strsignal26Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy26(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy26(
      __dest,
      __src,
    );
  }

  late final ___stpcpy26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy26 = ___stpcpy26Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy26(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy26(
      __dest,
      __src,
    );
  }

  late final _stpcpy26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy26 = _stpcpy26Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy26(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy26(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpy26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('__stpncpy');
  late final ___stpncpy26 = ___stpncpy26Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy26(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy26(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpy26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('stpncpy');
  late final _stpncpy26 = _stpncpy26Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int buffer_equal6(
    ffi.Pointer<ffi.Void> a,
    ffi.Pointer<ffi.Void> b,
  ) {
    return _buffer_equal6(
      a,
      b,
    );
  }

  late final _buffer_equal6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>('buffer_equal');
  late final _buffer_equal6 = _buffer_equal6Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  void buffer_free6(
    ffi.Pointer<ffi.Void> struct_buffer,
  ) {
    return _buffer_free6(
      struct_buffer,
    );
  }

  late final _buffer_free6Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'buffer_free');
  late final _buffer_free6 =
      _buffer_free6Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<buffer> buffer_copy6(
    ffi.Pointer<ffi.Void> data,
    int data_len,
  ) {
    return _buffer_copy6(
      data,
      data_len,
    );
  }

  late final _buffer_copy6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<buffer> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('buffer_copy');
  late final _buffer_copy6 = _buffer_copy6Ptr
      .asFunction<ffi.Pointer<buffer> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<dogecoin_chainparams> chain_from_b58_prefix8(
    ffi.Pointer<ffi.Char> address,
  ) {
    return _chain_from_b58_prefix8(
      address,
    );
  }

  late final _chain_from_b58_prefix8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<dogecoin_chainparams> Function(
              ffi.Pointer<ffi.Char>)>>('chain_from_b58_prefix');
  late final _chain_from_b58_prefix8 = _chain_from_b58_prefix8Ptr.asFunction<
      ffi.Pointer<dogecoin_chainparams> Function(ffi.Pointer<ffi.Char>)>();

  int chain_from_b58_prefix_bool8(
    ffi.Pointer<ffi.Char> address,
  ) {
    return _chain_from_b58_prefix_bool8(
      address,
    );
  }

  late final _chain_from_b58_prefix_bool8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'chain_from_b58_prefix_bool');
  late final _chain_from_b58_prefix_bool8 = _chain_from_b58_prefix_bool8Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<cstring> cstr_new8(
    ffi.Pointer<ffi.Char> init_str,
  ) {
    return _cstr_new8(
      init_str,
    );
  }

  late final _cstr_new8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cstring> Function(ffi.Pointer<ffi.Char>)>>('cstr_new');
  late final _cstr_new8 = _cstr_new8Ptr
      .asFunction<ffi.Pointer<cstring> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<cstring> cstr_new_sz8(
    int sz,
  ) {
    return _cstr_new_sz8(
      sz,
    );
  }

  late final _cstr_new_sz8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<cstring> Function(ffi.Int)>>(
          'cstr_new_sz');
  late final _cstr_new_sz8 =
      _cstr_new_sz8Ptr.asFunction<ffi.Pointer<cstring> Function(int)>();

  ffi.Pointer<cstring> cstr_new_buf8(
    ffi.Pointer<ffi.Void> buf,
    int sz,
  ) {
    return _cstr_new_buf8(
      buf,
      sz,
    );
  }

  late final _cstr_new_buf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cstring> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('cstr_new_buf');
  late final _cstr_new_buf8 = _cstr_new_buf8Ptr
      .asFunction<ffi.Pointer<cstring> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<cstring> cstr_new_cstr8(
    ffi.Pointer<cstring> copy_str,
  ) {
    return _cstr_new_cstr8(
      copy_str,
    );
  }

  late final _cstr_new_cstr8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cstring> Function(
              ffi.Pointer<cstring>)>>('cstr_new_cstr');
  late final _cstr_new_cstr8 = _cstr_new_cstr8Ptr
      .asFunction<ffi.Pointer<cstring> Function(ffi.Pointer<cstring>)>();

  void cstr_free8(
    ffi.Pointer<cstring> s,
    int free_buf,
  ) {
    return _cstr_free8(
      s,
      free_buf,
    );
  }

  late final _cstr_free8Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_free');
  late final _cstr_free8 =
      _cstr_free8Ptr.asFunction<void Function(ffi.Pointer<cstring>, int)>();

  int cstr_equal8(
    ffi.Pointer<cstring> a,
    ffi.Pointer<cstring> b,
  ) {
    return _cstr_equal8(
      a,
      b,
    );
  }

  late final _cstr_equal8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_equal');
  late final _cstr_equal8 = _cstr_equal8Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_compare8(
    ffi.Pointer<cstring> a,
    ffi.Pointer<cstring> b,
  ) {
    return _cstr_compare8(
      a,
      b,
    );
  }

  late final _cstr_compare8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_compare');
  late final _cstr_compare8 = _cstr_compare8Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_resize8(
    ffi.Pointer<cstring> s,
    int sz,
  ) {
    return _cstr_resize8(
      s,
      sz,
    );
  }

  late final _cstr_resize8Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_resize');
  late final _cstr_resize8 =
      _cstr_resize8Ptr.asFunction<int Function(ffi.Pointer<cstring>, int)>();

  int cstr_erase8(
    ffi.Pointer<cstring> s,
    int pos,
    int len,
  ) {
    return _cstr_erase8(
      s,
      pos,
      len,
    );
  }

  late final _cstr_erase8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Int, ssize_t)>>('cstr_erase');
  late final _cstr_erase8 = _cstr_erase8Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, int, int)>();

  int cstr_append_buf8(
    ffi.Pointer<cstring> s,
    ffi.Pointer<ffi.Void> buf,
    int sz,
  ) {
    return _cstr_append_buf8(
      s,
      buf,
      sz,
    );
  }

  late final _cstr_append_buf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('cstr_append_buf');
  late final _cstr_append_buf8 = _cstr_append_buf8Ptr.asFunction<
      int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Void>, int)>();

  int cstr_append_cstr8(
    ffi.Pointer<cstring> s,
    ffi.Pointer<cstring> append,
  ) {
    return _cstr_append_cstr8(
      s,
      append,
    );
  }

  late final _cstr_append_cstr8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_append_cstr');
  late final _cstr_append_cstr8 = _cstr_append_cstr8Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_append_c8(
    ffi.Pointer<cstring> s,
    int ch,
  ) {
    return _cstr_append_c8(
      s,
      ch,
    );
  }

  late final _cstr_append_c8Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Char)>>(
      'cstr_append_c');
  late final _cstr_append_c8 =
      _cstr_append_c8Ptr.asFunction<int Function(ffi.Pointer<cstring>, int)>();

  int cstr_alloc_minsize8(
    ffi.Pointer<cstring> s,
    int sz,
  ) {
    return _cstr_alloc_minsize8(
      s,
      sz,
    );
  }

  late final _cstr_alloc_minsize8Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_alloc_minsize');
  late final _cstr_alloc_minsize8 = _cstr_alloc_minsize8Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, int)>();

  void dogecoin_mem_set_mapper5(
    dogecoin_mem_mapper mapper,
  ) {
    return _dogecoin_mem_set_mapper5(
      mapper,
    );
  }

  late final _dogecoin_mem_set_mapper5Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dogecoin_mem_mapper)>>(
          'dogecoin_mem_set_mapper');
  late final _dogecoin_mem_set_mapper5 = _dogecoin_mem_set_mapper5Ptr
      .asFunction<void Function(dogecoin_mem_mapper)>();

  void dogecoin_mem_set_mapper_default5() {
    return _dogecoin_mem_set_mapper_default5();
  }

  late final _dogecoin_mem_set_mapper_default5Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'dogecoin_mem_set_mapper_default');
  late final _dogecoin_mem_set_mapper_default5 =
      _dogecoin_mem_set_mapper_default5Ptr.asFunction<void Function()>();

  ffi.Pointer<ffi.Void> dogecoin_malloc5(
    int size,
  ) {
    return _dogecoin_malloc5(
      size,
    );
  }

  late final _dogecoin_malloc5Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'dogecoin_malloc');
  late final _dogecoin_malloc5 =
      _dogecoin_malloc5Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> dogecoin_calloc5(
    int count,
    int size,
  ) {
    return _dogecoin_calloc5(
      count,
      size,
    );
  }

  late final _dogecoin_calloc5Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'dogecoin_calloc');
  late final _dogecoin_calloc5 = _dogecoin_calloc5Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> dogecoin_realloc5(
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _dogecoin_realloc5(
      ptr,
      size,
    );
  }

  late final _dogecoin_realloc5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('dogecoin_realloc');
  late final _dogecoin_realloc5 = _dogecoin_realloc5Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void dogecoin_free5(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _dogecoin_free5(
      ptr,
    );
  }

  late final _dogecoin_free5Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'dogecoin_free');
  late final _dogecoin_free5 =
      _dogecoin_free5Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> memcpy_safe5(
    ffi.Pointer<ffi.Void> destination,
    ffi.Pointer<ffi.Void> source,
    int count,
  ) {
    return _memcpy_safe5(
      destination,
      source,
      count,
    );
  }

  late final _memcpy_safe5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.UnsignedInt)>>('memcpy_safe');
  late final _memcpy_safe5 = _memcpy_safe5Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void sha256_init5(
    ffi.Pointer<sha256_context> arg0,
  ) {
    return _sha256_init5(
      arg0,
    );
  }

  late final _sha256_init5Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sha256_context>)>>(
      'sha256_init');
  late final _sha256_init5 =
      _sha256_init5Ptr.asFunction<void Function(ffi.Pointer<sha256_context>)>();

  void sha256_write5(
    ffi.Pointer<sha256_context> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
    int size_t,
  ) {
    return _sha256_write5(
      arg0,
      arg1,
      size_t,
    );
  }

  late final _sha256_write5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sha256_context>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('sha256_write');
  late final _sha256_write5 = _sha256_write5Ptr.asFunction<
      void Function(
          ffi.Pointer<sha256_context>, ffi.Pointer<ffi.Uint8>, int)>();

  void sha256_finalize5(
    ffi.Pointer<sha256_context> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
  ) {
    return _sha256_finalize5(
      arg0,
      arg1,
    );
  }

  late final _sha256_finalize5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sha256_context>,
              ffi.Pointer<ffi.Uint8>)>>('sha256_finalize');
  late final _sha256_finalize5 = _sha256_finalize5Ptr.asFunction<
      void Function(ffi.Pointer<sha256_context>, ffi.Pointer<ffi.Uint8>)>();

  void sha256_raw5(
    ffi.Pointer<ffi.Uint8> arg0,
    int size_t,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return _sha256_raw5(
      arg0,
      size_t,
      arg2,
    );
  }

  late final _sha256_raw5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<ffi.Uint8>)>>('sha256_raw');
  late final _sha256_raw5 = _sha256_raw5Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  void sha512_init5(
    ffi.Pointer<sha512_context> arg0,
  ) {
    return _sha512_init5(
      arg0,
    );
  }

  late final _sha512_init5Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sha512_context>)>>(
      'sha512_init');
  late final _sha512_init5 =
      _sha512_init5Ptr.asFunction<void Function(ffi.Pointer<sha512_context>)>();

  void sha512_write5(
    ffi.Pointer<sha512_context> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
    int size_t,
  ) {
    return _sha512_write5(
      arg0,
      arg1,
      size_t,
    );
  }

  late final _sha512_write5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sha512_context>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('sha512_write');
  late final _sha512_write5 = _sha512_write5Ptr.asFunction<
      void Function(
          ffi.Pointer<sha512_context>, ffi.Pointer<ffi.Uint8>, int)>();

  void sha512_finalize5(
    ffi.Pointer<sha512_context> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
  ) {
    return _sha512_finalize5(
      arg0,
      arg1,
    );
  }

  late final _sha512_finalize5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sha512_context>,
              ffi.Pointer<ffi.Uint8>)>>('sha512_finalize');
  late final _sha512_finalize5 = _sha512_finalize5Ptr.asFunction<
      void Function(ffi.Pointer<sha512_context>, ffi.Pointer<ffi.Uint8>)>();

  void sha512_raw5(
    ffi.Pointer<ffi.Uint8> arg0,
    int size_t,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return _sha512_raw5(
      arg0,
      size_t,
      arg2,
    );
  }

  late final _sha512_raw5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<ffi.Uint8>)>>('sha512_raw');
  late final _sha512_raw5 = _sha512_raw5Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  void hmac_sha2565(
    ffi.Pointer<ffi.Uint8> key,
    int keylen,
    ffi.Pointer<ffi.Uint8> msg,
    int msglen,
    ffi.Pointer<ffi.Uint8> hmac,
  ) {
    return _hmac_sha2565(
      key,
      keylen,
      msg,
      msglen,
      hmac,
    );
  }

  late final _hmac_sha2565Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint8>)>>('hmac_sha256');
  late final _hmac_sha2565 = _hmac_sha2565Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>)>();

  void hmac_sha5125(
    ffi.Pointer<ffi.Uint8> key,
    int keylen,
    ffi.Pointer<ffi.Uint8> msg,
    int msglen,
    ffi.Pointer<ffi.Uint8> hmac,
  ) {
    return _hmac_sha5125(
      key,
      keylen,
      msg,
      msglen,
      hmac,
    );
  }

  late final _hmac_sha5125Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint8>)>>('hmac_sha512');
  late final _hmac_sha5125 = _hmac_sha5125Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<vector> vector_new6(
    int res,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        free_f,
  ) {
    return _vector_new6(
      res,
      free_f,
    );
  }

  late final _vector_new6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<vector> Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>)>>)>>('vector_new');
  late final _vector_new6 = _vector_new6Ptr.asFunction<
      ffi.Pointer<vector> Function(
          int,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  void vector_free6(
    ffi.Pointer<vector> vec,
    int free_array,
  ) {
    return _vector_free6(
      vec,
      free_array,
    );
  }

  late final _vector_free6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<vector>, dogecoin_bool)>>('vector_free');
  late final _vector_free6 =
      _vector_free6Ptr.asFunction<void Function(ffi.Pointer<vector>, int)>();

  int vector_add6(
    ffi.Pointer<vector> vec,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _vector_add6(
      vec,
      data,
    );
  }

  late final _vector_add6Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>>('vector_add');
  late final _vector_add6 = _vector_add6Ptr
      .asFunction<int Function(ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>();

  int vector_remove6(
    ffi.Pointer<vector> vec,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _vector_remove6(
      vec,
      data,
    );
  }

  late final _vector_remove6Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>>('vector_remove');
  late final _vector_remove6 = _vector_remove6Ptr
      .asFunction<int Function(ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>();

  void vector_remove_idx6(
    ffi.Pointer<vector> vec,
    int idx,
  ) {
    return _vector_remove_idx6(
      vec,
      idx,
    );
  }

  late final _vector_remove_idx6Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<vector>, ffi.Int)>>(
      'vector_remove_idx');
  late final _vector_remove_idx6 = _vector_remove_idx6Ptr
      .asFunction<void Function(ffi.Pointer<vector>, int)>();

  void vector_remove_range6(
    ffi.Pointer<vector> vec,
    int idx,
    int len,
  ) {
    return _vector_remove_range6(
      vec,
      idx,
      len,
    );
  }

  late final _vector_remove_range6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<vector>, ffi.Int, ffi.Int)>>('vector_remove_range');
  late final _vector_remove_range6 = _vector_remove_range6Ptr
      .asFunction<void Function(ffi.Pointer<vector>, int, int)>();

  int vector_resize6(
    ffi.Pointer<vector> vec,
    int newsz,
  ) {
    return _vector_resize6(
      vec,
      newsz,
    );
  }

  late final _vector_resize6Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<vector>, ffi.Int)>>('vector_resize');
  late final _vector_resize6 =
      _vector_resize6Ptr.asFunction<int Function(ffi.Pointer<vector>, int)>();

  int vector_find6(
    ffi.Pointer<vector> vec,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _vector_find6(
      vec,
      data,
    );
  }

  late final _vector_find6Ptr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>>('vector_find');
  late final _vector_find6 = _vector_find6Ptr
      .asFunction<int Function(ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>();

  void dogecoin_privkey_init5(
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_init5(
      privkey,
    );
  }

  late final _dogecoin_privkey_init5Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_key>)>>(
          'dogecoin_privkey_init');
  late final _dogecoin_privkey_init5 = _dogecoin_privkey_init5Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_key>)>();

  int dogecoin_privkey_is_valid5(
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_is_valid5(
      privkey,
    );
  }

  late final _dogecoin_privkey_is_valid5Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_key>)>>('dogecoin_privkey_is_valid');
  late final _dogecoin_privkey_is_valid5 = _dogecoin_privkey_is_valid5Ptr
      .asFunction<int Function(ffi.Pointer<dogecoin_key>)>();

  void dogecoin_privkey_cleanse5(
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_cleanse5(
      privkey,
    );
  }

  late final _dogecoin_privkey_cleanse5Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_key>)>>(
          'dogecoin_privkey_cleanse');
  late final _dogecoin_privkey_cleanse5 = _dogecoin_privkey_cleanse5Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_key>)>();

  int dogecoin_privkey_gen5(
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_gen5(
      privkey,
    );
  }

  late final _dogecoin_privkey_gen5Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_key>)>>('dogecoin_privkey_gen');
  late final _dogecoin_privkey_gen5 = _dogecoin_privkey_gen5Ptr
      .asFunction<int Function(ffi.Pointer<dogecoin_key>)>();

  int dogecoin_privkey_verify_pubkey5(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_privkey_verify_pubkey5(
      privkey,
      pubkey,
    );
  }

  late final _dogecoin_privkey_verify_pubkey5Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_key>,
              ffi.Pointer<dogecoin_pubkey>)>>('dogecoin_privkey_verify_pubkey');
  late final _dogecoin_privkey_verify_pubkey5 =
      _dogecoin_privkey_verify_pubkey5Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_key>, ffi.Pointer<dogecoin_pubkey>)>();

  void dogecoin_privkey_encode_wif5(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<dogecoin_chainparams> chain,
    ffi.Pointer<ffi.Char> privkey_wif,
    ffi.Pointer<ffi.Int> strsize_inout,
  ) {
    return _dogecoin_privkey_encode_wif5(
      privkey,
      chain,
      privkey_wif,
      strsize_inout,
    );
  }

  late final _dogecoin_privkey_encode_wif5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_privkey_encode_wif');
  late final _dogecoin_privkey_encode_wif5 =
      _dogecoin_privkey_encode_wif5Ptr.asFunction<
          void Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>();

  int dogecoin_privkey_decode_wif5(
    ffi.Pointer<ffi.Char> privkey_wif,
    ffi.Pointer<dogecoin_chainparams> chain,
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_decode_wif5(
      privkey_wif,
      chain,
      privkey,
    );
  }

  late final _dogecoin_privkey_decode_wif5Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<dogecoin_key>)>>('dogecoin_privkey_decode_wif');
  late final _dogecoin_privkey_decode_wif5 =
      _dogecoin_privkey_decode_wif5Ptr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<dogecoin_key>)>();

  void dogecoin_pubkey_init5(
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_pubkey_init5(
      pubkey,
    );
  }

  late final _dogecoin_pubkey_init5Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_pubkey>)>>(
      'dogecoin_pubkey_init');
  late final _dogecoin_pubkey_init5 = _dogecoin_pubkey_init5Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_pubkey>)>();

  int dogecoin_pubkey_get_length5(
    int ch_header,
  ) {
    return _dogecoin_pubkey_get_length5(
      ch_header,
    );
  }

  late final _dogecoin_pubkey_get_length5Ptr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedChar)>>(
          'dogecoin_pubkey_get_length');
  late final _dogecoin_pubkey_get_length5 =
      _dogecoin_pubkey_get_length5Ptr.asFunction<int Function(int)>();

  int dogecoin_pubkey_is_valid5(
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_pubkey_is_valid5(
      pubkey,
    );
  }

  late final _dogecoin_pubkey_is_valid5Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_pubkey>)>>('dogecoin_pubkey_is_valid');
  late final _dogecoin_pubkey_is_valid5 = _dogecoin_pubkey_is_valid5Ptr
      .asFunction<int Function(ffi.Pointer<dogecoin_pubkey>)>();

  void dogecoin_pubkey_cleanse5(
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_pubkey_cleanse5(
      pubkey,
    );
  }

  late final _dogecoin_pubkey_cleanse5Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_pubkey>)>>(
      'dogecoin_pubkey_cleanse');
  late final _dogecoin_pubkey_cleanse5 = _dogecoin_pubkey_cleanse5Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_pubkey>)>();

  void dogecoin_pubkey_from_key5(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<dogecoin_pubkey> pubkey_inout,
  ) {
    return _dogecoin_pubkey_from_key5(
      privkey,
      pubkey_inout,
    );
  }

  late final _dogecoin_pubkey_from_key5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_key>,
              ffi.Pointer<dogecoin_pubkey>)>>('dogecoin_pubkey_from_key');
  late final _dogecoin_pubkey_from_key5 =
      _dogecoin_pubkey_from_key5Ptr.asFunction<
          void Function(
              ffi.Pointer<dogecoin_key>, ffi.Pointer<dogecoin_pubkey>)>();

  void dogecoin_pubkey_get_hash1605(
    ffi.Pointer<dogecoin_pubkey> pubkey,
    ffi.Pointer<ffi.Uint8> hash160,
  ) {
    return _dogecoin_pubkey_get_hash1605(
      pubkey,
      hash160,
    );
  }

  late final _dogecoin_pubkey_get_hash1605Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_pubkey>,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_pubkey_get_hash160');
  late final _dogecoin_pubkey_get_hash1605 =
      _dogecoin_pubkey_get_hash1605Ptr.asFunction<
          void Function(
              ffi.Pointer<dogecoin_pubkey>, ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_pubkey_get_hex5(
    ffi.Pointer<dogecoin_pubkey> pubkey,
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.Int> strsize,
  ) {
    return _dogecoin_pubkey_get_hex5(
      pubkey,
      str,
      strsize,
    );
  }

  late final _dogecoin_pubkey_get_hex5Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_pubkey>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_pubkey_get_hex');
  late final _dogecoin_pubkey_get_hex5 =
      _dogecoin_pubkey_get_hex5Ptr.asFunction<
          int Function(ffi.Pointer<dogecoin_pubkey>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>();

  int dogecoin_key_sign_hash5(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<ffi.Uint8> hash,
    ffi.Pointer<ffi.UnsignedChar> sigout,
    ffi.Pointer<ffi.Int> outlen,
  ) {
    return _dogecoin_key_sign_hash5(
      privkey,
      hash,
      sigout,
      outlen,
    );
  }

  late final _dogecoin_key_sign_hash5Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_key_sign_hash');
  late final _dogecoin_key_sign_hash5 = _dogecoin_key_sign_hash5Ptr.asFunction<
      int Function(ffi.Pointer<dogecoin_key>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Int>)>();

  int dogecoin_key_sign_hash_compact5(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<ffi.Uint8> hash,
    ffi.Pointer<ffi.UnsignedChar> sigout,
    ffi.Pointer<ffi.Int> outlen,
  ) {
    return _dogecoin_key_sign_hash_compact5(
      privkey,
      hash,
      sigout,
      outlen,
    );
  }

  late final _dogecoin_key_sign_hash_compact5Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_key_sign_hash_compact');
  late final _dogecoin_key_sign_hash_compact5 =
      _dogecoin_key_sign_hash_compact5Ptr.asFunction<
          int Function(ffi.Pointer<dogecoin_key>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Int>)>();

  int dogecoin_key_sign_hash_compact_recoverable5(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<ffi.Uint8> hash,
    ffi.Pointer<ffi.UnsignedChar> sigout,
    ffi.Pointer<ffi.Int> outlen,
    ffi.Pointer<ffi.Int> recid,
  ) {
    return _dogecoin_key_sign_hash_compact_recoverable5(
      privkey,
      hash,
      sigout,
      outlen,
      recid,
    );
  }

  late final _dogecoin_key_sign_hash_compact_recoverable5Ptr = _lookup<
          ffi.NativeFunction<
              dogecoin_bool Function(
                  ffi.Pointer<dogecoin_key>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.UnsignedChar>,
                  ffi.Pointer<ffi.Int>,
                  ffi.Pointer<ffi.Int>)>>(
      'dogecoin_key_sign_hash_compact_recoverable');
  late final _dogecoin_key_sign_hash_compact_recoverable5 =
      _dogecoin_key_sign_hash_compact_recoverable5Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  int dogecoin_key_sign_recover_pubkey5(
    ffi.Pointer<ffi.UnsignedChar> sig,
    ffi.Pointer<ffi.Uint8> hash,
    int recid,
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_key_sign_recover_pubkey5(
      sig,
      hash,
      recid,
      pubkey,
    );
  }

  late final _dogecoin_key_sign_recover_pubkey5Ptr = _lookup<
          ffi.NativeFunction<
              dogecoin_bool Function(
                  ffi.Pointer<ffi.UnsignedChar>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Int,
                  ffi.Pointer<dogecoin_pubkey>)>>(
      'dogecoin_key_sign_recover_pubkey');
  late final _dogecoin_key_sign_recover_pubkey5 =
      _dogecoin_key_sign_recover_pubkey5Ptr.asFunction<
          int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Uint8>,
              int, ffi.Pointer<dogecoin_pubkey>)>();

  int dogecoin_pubkey_verify_sig5(
    ffi.Pointer<dogecoin_pubkey> pubkey,
    ffi.Pointer<ffi.Uint8> hash,
    ffi.Pointer<ffi.UnsignedChar> sigder,
    int len,
  ) {
    return _dogecoin_pubkey_verify_sig5(
      pubkey,
      hash,
      sigder,
      len,
    );
  }

  late final _dogecoin_pubkey_verify_sig5Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_pubkey>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('dogecoin_pubkey_verify_sig');
  late final _dogecoin_pubkey_verify_sig5 =
      _dogecoin_pubkey_verify_sig5Ptr.asFunction<
          int Function(ffi.Pointer<dogecoin_pubkey>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>, int)>();

  int dogecoin_pubkey_getaddr_p2pkh5(
    ffi.Pointer<dogecoin_pubkey> pubkey,
    ffi.Pointer<dogecoin_chainparams> chain,
    ffi.Pointer<ffi.Char> addrout,
  ) {
    return _dogecoin_pubkey_getaddr_p2pkh5(
      pubkey,
      chain,
      addrout,
    );
  }

  late final _dogecoin_pubkey_getaddr_p2pkh5Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_pubkey>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<ffi.Char>)>>('dogecoin_pubkey_getaddr_p2pkh');
  late final _dogecoin_pubkey_getaddr_p2pkh5 =
      _dogecoin_pubkey_getaddr_p2pkh5Ptr.asFunction<
          int Function(ffi.Pointer<dogecoin_pubkey>,
              ffi.Pointer<dogecoin_chainparams>, ffi.Pointer<ffi.Char>)>();

  int dogecoin_script_copy_without_op_codeseperator4(
    ffi.Pointer<cstring> scriptin,
    ffi.Pointer<cstring> scriptout,
  ) {
    return _dogecoin_script_copy_without_op_codeseperator4(
      scriptin,
      scriptout,
    );
  }

  late final _dogecoin_script_copy_without_op_codeseperator4Ptr = _lookup<
          ffi.NativeFunction<
              dogecoin_bool Function(
                  ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>(
      'dogecoin_script_copy_without_op_codeseperator');
  late final _dogecoin_script_copy_without_op_codeseperator4 =
      _dogecoin_script_copy_without_op_codeseperator4Ptr.asFunction<
          int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  ffi.Pointer<dogecoin_script_op> dogecoin_script_op_new4() {
    return _dogecoin_script_op_new4();
  }

  late final _dogecoin_script_op_new4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<dogecoin_script_op> Function()>>(
          'dogecoin_script_op_new');
  late final _dogecoin_script_op_new4 = _dogecoin_script_op_new4Ptr
      .asFunction<ffi.Pointer<dogecoin_script_op> Function()>();

  void dogecoin_script_op_free4(
    ffi.Pointer<dogecoin_script_op> script_op,
  ) {
    return _dogecoin_script_op_free4(
      script_op,
    );
  }

  late final _dogecoin_script_op_free4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<dogecoin_script_op>)>>('dogecoin_script_op_free');
  late final _dogecoin_script_op_free4 = _dogecoin_script_op_free4Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_script_op>)>();

  void dogecoin_script_op_free_cb4(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _dogecoin_script_op_free_cb4(
      data,
    );
  }

  late final _dogecoin_script_op_free_cb4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'dogecoin_script_op_free_cb');
  late final _dogecoin_script_op_free_cb4 = _dogecoin_script_op_free_cb4Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int dogecoin_script_get_ops4(
    ffi.Pointer<cstring> script_in,
    ffi.Pointer<vector> ops_out,
  ) {
    return _dogecoin_script_get_ops4(
      script_in,
      ops_out,
    );
  }

  late final _dogecoin_script_get_ops4Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<cstring>,
              ffi.Pointer<vector>)>>('dogecoin_script_get_ops');
  late final _dogecoin_script_get_ops4 = _dogecoin_script_get_ops4Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<vector>)>();

  int dogecoin_script_classify_ops4(
    ffi.Pointer<vector> ops,
  ) {
    return _dogecoin_script_classify_ops4(
      ops,
    );
  }

  late final _dogecoin_script_classify_ops4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<vector>)>>(
          'dogecoin_script_classify_ops');
  late final _dogecoin_script_classify_ops4 = _dogecoin_script_classify_ops4Ptr
      .asFunction<int Function(ffi.Pointer<vector>)>();

  int dogecoin_script_classify4(
    ffi.Pointer<cstring> script,
    ffi.Pointer<vector> data_out,
  ) {
    return _dogecoin_script_classify4(
      script,
      data_out,
    );
  }

  late final _dogecoin_script_classify4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<cstring>,
              ffi.Pointer<vector>)>>('dogecoin_script_classify');
  late final _dogecoin_script_classify4 = _dogecoin_script_classify4Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<vector>)>();

  int dogecoin_encode_op_n4(
    int n,
  ) {
    return _dogecoin_encode_op_n4(
      n,
    );
  }

  late final _dogecoin_encode_op_n4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int)>>(
          'dogecoin_encode_op_n');
  late final _dogecoin_encode_op_n4 =
      _dogecoin_encode_op_n4Ptr.asFunction<int Function(int)>();

  void dogecoin_script_append_op4(
    ffi.Pointer<cstring> script_in,
    int op,
  ) {
    return _dogecoin_script_append_op4(
      script_in,
      op,
    );
  }

  late final _dogecoin_script_append_op4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cstring>, ffi.Int32)>>('dogecoin_script_append_op');
  late final _dogecoin_script_append_op4 = _dogecoin_script_append_op4Ptr
      .asFunction<void Function(ffi.Pointer<cstring>, int)>();

  void dogecoin_script_append_pushdata4(
    ffi.Pointer<cstring> script_in,
    ffi.Pointer<ffi.UnsignedChar> data,
    int datalen,
  ) {
    return _dogecoin_script_append_pushdata4(
      script_in,
      data,
      datalen,
    );
  }

  late final _dogecoin_script_append_pushdata4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('dogecoin_script_append_pushdata');
  late final _dogecoin_script_append_pushdata4 =
      _dogecoin_script_append_pushdata4Ptr.asFunction<
          void Function(
              ffi.Pointer<cstring>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int dogecoin_script_build_multisig4(
    ffi.Pointer<cstring> script_in,
    int required_signatures,
    ffi.Pointer<vector> pubkeys_chars,
  ) {
    return _dogecoin_script_build_multisig4(
      script_in,
      required_signatures,
      pubkeys_chars,
    );
  }

  late final _dogecoin_script_build_multisig4Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<cstring>, ffi.UnsignedInt,
              ffi.Pointer<vector>)>>('dogecoin_script_build_multisig');
  late final _dogecoin_script_build_multisig4 =
      _dogecoin_script_build_multisig4Ptr.asFunction<
          int Function(ffi.Pointer<cstring>, int, ffi.Pointer<vector>)>();

  int dogecoin_script_build_p2pkh4(
    ffi.Pointer<cstring> script,
    ffi.Pointer<ffi.Uint8> hash160,
  ) {
    return _dogecoin_script_build_p2pkh4(
      script,
      hash160,
    );
  }

  late final _dogecoin_script_build_p2pkh4Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<cstring>,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_script_build_p2pkh');
  late final _dogecoin_script_build_p2pkh4 = _dogecoin_script_build_p2pkh4Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_script_build_p2sh4(
    ffi.Pointer<cstring> script_in,
    ffi.Pointer<ffi.Uint8> hash160,
  ) {
    return _dogecoin_script_build_p2sh4(
      script_in,
      hash160,
    );
  }

  late final _dogecoin_script_build_p2sh4Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<cstring>,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_script_build_p2sh');
  late final _dogecoin_script_build_p2sh4 = _dogecoin_script_build_p2sh4Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_script_get_scripthash4(
    ffi.Pointer<cstring> script_in,
    ffi.Pointer<ffi.Uint8> scripthash,
  ) {
    return _dogecoin_script_get_scripthash4(
      script_in,
      scripthash,
    );
  }

  late final _dogecoin_script_get_scripthash4Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<cstring>,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_script_get_scripthash');
  late final _dogecoin_script_get_scripthash4 =
      _dogecoin_script_get_scripthash4Ptr.asFunction<
          int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<ffi.Char> dogecoin_tx_out_type_to_str4(
    int type,
  ) {
    return _dogecoin_tx_out_type_to_str4(
      type,
    );
  }

  late final _dogecoin_tx_out_type_to_str4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'dogecoin_tx_out_type_to_str');
  late final _dogecoin_tx_out_type_to_str4 = _dogecoin_tx_out_type_to_str4Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  /// !p2pkh utilities
  int dogecoin_script_hash_to_p2pkh3(
    ffi.Pointer<dogecoin_tx_out> txout,
    ffi.Pointer<ffi.Char> p2pkh,
    int is_testnet,
  ) {
    return _dogecoin_script_hash_to_p2pkh3(
      txout,
      p2pkh,
      is_testnet,
    );
  }

  late final _dogecoin_script_hash_to_p2pkh3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<dogecoin_tx_out>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('dogecoin_script_hash_to_p2pkh');
  late final _dogecoin_script_hash_to_p2pkh3 =
      _dogecoin_script_hash_to_p2pkh3Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx_out>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> dogecoin_p2pkh_to_script_hash3(
    ffi.Pointer<ffi.Char> p2pkh,
  ) {
    return _dogecoin_p2pkh_to_script_hash3(
      p2pkh,
    );
  }

  late final _dogecoin_p2pkh_to_script_hash3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('dogecoin_p2pkh_to_script_hash');
  late final _dogecoin_p2pkh_to_script_hash3 =
      _dogecoin_p2pkh_to_script_hash3Ptr
          .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> dogecoin_private_key_wif_to_script_hash3(
    ffi.Pointer<ffi.Char> private_key_wif,
  ) {
    return _dogecoin_private_key_wif_to_script_hash3(
      private_key_wif,
    );
  }

  late final _dogecoin_private_key_wif_to_script_hash3Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>(
      'dogecoin_private_key_wif_to_script_hash');
  late final _dogecoin_private_key_wif_to_script_hash3 =
      _dogecoin_private_key_wif_to_script_hash3Ptr
          .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  /// !create a new tx input
  ffi.Pointer<dogecoin_tx_in> dogecoin_tx_in_new3() {
    return _dogecoin_tx_in_new3();
  }

  late final _dogecoin_tx_in_new3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<dogecoin_tx_in> Function()>>(
          'dogecoin_tx_in_new');
  late final _dogecoin_tx_in_new3 = _dogecoin_tx_in_new3Ptr
      .asFunction<ffi.Pointer<dogecoin_tx_in> Function()>();

  void dogecoin_tx_in_free3(
    ffi.Pointer<dogecoin_tx_in> tx_in,
  ) {
    return _dogecoin_tx_in_free3(
      tx_in,
    );
  }

  late final _dogecoin_tx_in_free3Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_tx_in>)>>(
      'dogecoin_tx_in_free');
  late final _dogecoin_tx_in_free3 = _dogecoin_tx_in_free3Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_tx_in>)>();

  void dogecoin_tx_in_copy3(
    ffi.Pointer<dogecoin_tx_in> dest,
    ffi.Pointer<dogecoin_tx_in> src,
  ) {
    return _dogecoin_tx_in_copy3(
      dest,
      src,
    );
  }

  late final _dogecoin_tx_in_copy3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_tx_in>,
              ffi.Pointer<dogecoin_tx_in>)>>('dogecoin_tx_in_copy');
  late final _dogecoin_tx_in_copy3 = _dogecoin_tx_in_copy3Ptr.asFunction<
      void Function(
          ffi.Pointer<dogecoin_tx_in>, ffi.Pointer<dogecoin_tx_in>)>();

  int dogecoin_tx_in_deserialize3(
    ffi.Pointer<dogecoin_tx_in> tx_in,
    ffi.Pointer<const_buffer> buf,
  ) {
    return _dogecoin_tx_in_deserialize3(
      tx_in,
      buf,
    );
  }

  late final _dogecoin_tx_in_deserialize3Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_tx_in>,
              ffi.Pointer<const_buffer>)>>('dogecoin_tx_in_deserialize');
  late final _dogecoin_tx_in_deserialize3 =
      _dogecoin_tx_in_deserialize3Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx_in>, ffi.Pointer<const_buffer>)>();

  void dogecoin_tx_in_serialize3(
    ffi.Pointer<cstring> s,
    ffi.Pointer<dogecoin_tx_in> tx_in,
  ) {
    return _dogecoin_tx_in_serialize3(
      s,
      tx_in,
    );
  }

  late final _dogecoin_tx_in_serialize3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cstring>,
              ffi.Pointer<dogecoin_tx_in>)>>('dogecoin_tx_in_serialize');
  late final _dogecoin_tx_in_serialize3 =
      _dogecoin_tx_in_serialize3Ptr.asFunction<
          void Function(ffi.Pointer<cstring>, ffi.Pointer<dogecoin_tx_in>)>();

  /// !create a new tx output
  ffi.Pointer<dogecoin_tx_out> dogecoin_tx_out_new3() {
    return _dogecoin_tx_out_new3();
  }

  late final _dogecoin_tx_out_new3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<dogecoin_tx_out> Function()>>(
          'dogecoin_tx_out_new');
  late final _dogecoin_tx_out_new3 = _dogecoin_tx_out_new3Ptr
      .asFunction<ffi.Pointer<dogecoin_tx_out> Function()>();

  void dogecoin_tx_out_free3(
    ffi.Pointer<dogecoin_tx_out> tx_out,
  ) {
    return _dogecoin_tx_out_free3(
      tx_out,
    );
  }

  late final _dogecoin_tx_out_free3Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_tx_out>)>>(
      'dogecoin_tx_out_free');
  late final _dogecoin_tx_out_free3 = _dogecoin_tx_out_free3Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_tx_out>)>();

  void dogecoin_tx_out_copy3(
    ffi.Pointer<dogecoin_tx_out> dest,
    ffi.Pointer<dogecoin_tx_out> src,
  ) {
    return _dogecoin_tx_out_copy3(
      dest,
      src,
    );
  }

  late final _dogecoin_tx_out_copy3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_tx_out>,
              ffi.Pointer<dogecoin_tx_out>)>>('dogecoin_tx_out_copy');
  late final _dogecoin_tx_out_copy3 = _dogecoin_tx_out_copy3Ptr.asFunction<
      void Function(
          ffi.Pointer<dogecoin_tx_out>, ffi.Pointer<dogecoin_tx_out>)>();

  int dogecoin_tx_out_deserialize3(
    ffi.Pointer<dogecoin_tx_out> tx_out,
    ffi.Pointer<const_buffer> buf,
  ) {
    return _dogecoin_tx_out_deserialize3(
      tx_out,
      buf,
    );
  }

  late final _dogecoin_tx_out_deserialize3Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_tx_out>,
              ffi.Pointer<const_buffer>)>>('dogecoin_tx_out_deserialize');
  late final _dogecoin_tx_out_deserialize3 =
      _dogecoin_tx_out_deserialize3Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx_out>, ffi.Pointer<const_buffer>)>();

  void dogecoin_tx_out_serialize3(
    ffi.Pointer<cstring> s,
    ffi.Pointer<dogecoin_tx_out> tx_out,
  ) {
    return _dogecoin_tx_out_serialize3(
      s,
      tx_out,
    );
  }

  late final _dogecoin_tx_out_serialize3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cstring>,
              ffi.Pointer<dogecoin_tx_out>)>>('dogecoin_tx_out_serialize');
  late final _dogecoin_tx_out_serialize3 =
      _dogecoin_tx_out_serialize3Ptr.asFunction<
          void Function(ffi.Pointer<cstring>, ffi.Pointer<dogecoin_tx_out>)>();

  /// !create a new tx input
  ffi.Pointer<dogecoin_tx> dogecoin_tx_new3() {
    return _dogecoin_tx_new3();
  }

  late final _dogecoin_tx_new3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<dogecoin_tx> Function()>>(
          'dogecoin_tx_new');
  late final _dogecoin_tx_new3 =
      _dogecoin_tx_new3Ptr.asFunction<ffi.Pointer<dogecoin_tx> Function()>();

  void dogecoin_tx_free3(
    ffi.Pointer<dogecoin_tx> tx,
  ) {
    return _dogecoin_tx_free3(
      tx,
    );
  }

  late final _dogecoin_tx_free3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_tx>)>>(
          'dogecoin_tx_free');
  late final _dogecoin_tx_free3 = _dogecoin_tx_free3Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_tx>)>();

  void dogecoin_tx_copy3(
    ffi.Pointer<dogecoin_tx> dest,
    ffi.Pointer<dogecoin_tx> src,
  ) {
    return _dogecoin_tx_copy3(
      dest,
      src,
    );
  }

  late final _dogecoin_tx_copy3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<dogecoin_tx>)>>('dogecoin_tx_copy');
  late final _dogecoin_tx_copy3 = _dogecoin_tx_copy3Ptr.asFunction<
      void Function(ffi.Pointer<dogecoin_tx>, ffi.Pointer<dogecoin_tx>)>();

  /// !deserialize/parse a p2p serialized dogecoin transaction
  int dogecoin_tx_deserialize3(
    ffi.Pointer<ffi.UnsignedChar> tx_serialized,
    int inlen,
    ffi.Pointer<dogecoin_tx> tx,
    ffi.Pointer<ffi.Int> consumed_length,
  ) {
    return _dogecoin_tx_deserialize3(
      tx_serialized,
      inlen,
      tx,
      consumed_length,
    );
  }

  late final _dogecoin_tx_deserialize3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_tx_deserialize');
  late final _dogecoin_tx_deserialize3 =
      _dogecoin_tx_deserialize3Ptr.asFunction<
          int Function(ffi.Pointer<ffi.UnsignedChar>, int,
              ffi.Pointer<dogecoin_tx>, ffi.Pointer<ffi.Int>)>();

  /// !serialize a dogecoin data structure into a p2p serialized buffer
  void dogecoin_tx_serialize3(
    ffi.Pointer<cstring> s,
    ffi.Pointer<dogecoin_tx> tx,
  ) {
    return _dogecoin_tx_serialize3(
      s,
      tx,
    );
  }

  late final _dogecoin_tx_serialize3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cstring>,
              ffi.Pointer<dogecoin_tx>)>>('dogecoin_tx_serialize');
  late final _dogecoin_tx_serialize3 = _dogecoin_tx_serialize3Ptr.asFunction<
      void Function(ffi.Pointer<cstring>, ffi.Pointer<dogecoin_tx>)>();

  void dogecoin_tx_hash3(
    ffi.Pointer<dogecoin_tx> tx,
    ffi.Pointer<ffi.Uint8> hashout,
  ) {
    return _dogecoin_tx_hash3(
      tx,
      hashout,
    );
  }

  late final _dogecoin_tx_hash3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_tx_hash');
  late final _dogecoin_tx_hash3 = _dogecoin_tx_hash3Ptr.asFunction<
      void Function(ffi.Pointer<dogecoin_tx>, ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_tx_sighash3(
    ffi.Pointer<dogecoin_tx> tx_to,
    ffi.Pointer<cstring> fromPubKey,
    int in_num,
    int hashtype,
    ffi.Pointer<ffi.Uint8> hash,
  ) {
    return _dogecoin_tx_sighash3(
      tx_to,
      fromPubKey,
      in_num,
      hashtype,
      hash,
    );
  }

  late final _dogecoin_tx_sighash3Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<cstring>,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_tx_sighash');
  late final _dogecoin_tx_sighash3 = _dogecoin_tx_sighash3Ptr.asFunction<
      int Function(ffi.Pointer<dogecoin_tx>, ffi.Pointer<cstring>, int, int,
          ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_tx_add_address_out3(
    ffi.Pointer<dogecoin_tx> tx,
    ffi.Pointer<dogecoin_chainparams> chain,
    int amount,
    ffi.Pointer<ffi.Char> address,
  ) {
    return _dogecoin_tx_add_address_out3(
      tx,
      chain,
      amount,
      address,
    );
  }

  late final _dogecoin_tx_add_address_out3Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Int64,
              ffi.Pointer<ffi.Char>)>>('dogecoin_tx_add_address_out');
  late final _dogecoin_tx_add_address_out3 =
      _dogecoin_tx_add_address_out3Ptr.asFunction<
          int Function(ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<dogecoin_chainparams>, int, ffi.Pointer<ffi.Char>)>();

  int dogecoin_tx_add_p2sh_hash160_out3(
    ffi.Pointer<dogecoin_tx> tx,
    int amount,
    ffi.Pointer<ffi.Uint8> hash160,
  ) {
    return _dogecoin_tx_add_p2sh_hash160_out3(
      tx,
      amount,
      hash160,
    );
  }

  late final _dogecoin_tx_add_p2sh_hash160_out3Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_tx>, ffi.Int64,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_tx_add_p2sh_hash160_out');
  late final _dogecoin_tx_add_p2sh_hash160_out3 =
      _dogecoin_tx_add_p2sh_hash160_out3Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx>, int, ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_tx_add_p2pkh_hash160_out3(
    ffi.Pointer<dogecoin_tx> tx,
    int amount,
    ffi.Pointer<ffi.Uint8> hash160,
  ) {
    return _dogecoin_tx_add_p2pkh_hash160_out3(
      tx,
      amount,
      hash160,
    );
  }

  late final _dogecoin_tx_add_p2pkh_hash160_out3Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_tx>, ffi.Int64,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_tx_add_p2pkh_hash160_out');
  late final _dogecoin_tx_add_p2pkh_hash160_out3 =
      _dogecoin_tx_add_p2pkh_hash160_out3Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx>, int, ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_tx_add_p2pkh_out3(
    ffi.Pointer<dogecoin_tx> tx,
    int amount,
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_tx_add_p2pkh_out3(
      tx,
      amount,
      pubkey,
    );
  }

  late final _dogecoin_tx_add_p2pkh_out3Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_tx>, ffi.Int64,
              ffi.Pointer<dogecoin_pubkey>)>>('dogecoin_tx_add_p2pkh_out');
  late final _dogecoin_tx_add_p2pkh_out3 =
      _dogecoin_tx_add_p2pkh_out3Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx>, int, ffi.Pointer<dogecoin_pubkey>)>();

  int dogecoin_tx_add_data_out3(
    ffi.Pointer<dogecoin_tx> tx,
    int amount,
    ffi.Pointer<ffi.Uint8> data,
    int datalen,
  ) {
    return _dogecoin_tx_add_data_out3(
      tx,
      amount,
      data,
      datalen,
    );
  }

  late final _dogecoin_tx_add_data_out3Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_tx>, ffi.Int64,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('dogecoin_tx_add_data_out');
  late final _dogecoin_tx_add_data_out3 =
      _dogecoin_tx_add_data_out3Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx>, int, ffi.Pointer<ffi.Uint8>, int)>();

  int dogecoin_tx_add_puzzle_out3(
    ffi.Pointer<dogecoin_tx> tx,
    int amount,
    ffi.Pointer<ffi.Uint8> puzzle,
    int puzzlelen,
  ) {
    return _dogecoin_tx_add_puzzle_out3(
      tx,
      amount,
      puzzle,
      puzzlelen,
    );
  }

  late final _dogecoin_tx_add_puzzle_out3Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_tx>, ffi.Int64,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('dogecoin_tx_add_puzzle_out');
  late final _dogecoin_tx_add_puzzle_out3 =
      _dogecoin_tx_add_puzzle_out3Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx>, int, ffi.Pointer<ffi.Uint8>, int)>();

  int dogecoin_tx_outpoint_is_null3(
    ffi.Pointer<dogecoin_tx_outpoint> tx,
  ) {
    return _dogecoin_tx_outpoint_is_null3(
      tx,
    );
  }

  late final _dogecoin_tx_outpoint_is_null3Ptr = _lookup<
          ffi.NativeFunction<
              dogecoin_bool Function(ffi.Pointer<dogecoin_tx_outpoint>)>>(
      'dogecoin_tx_outpoint_is_null');
  late final _dogecoin_tx_outpoint_is_null3 = _dogecoin_tx_outpoint_is_null3Ptr
      .asFunction<int Function(ffi.Pointer<dogecoin_tx_outpoint>)>();

  int dogecoin_tx_is_coinbase3(
    ffi.Pointer<dogecoin_tx> tx,
  ) {
    return _dogecoin_tx_is_coinbase3(
      tx,
    );
  }

  late final _dogecoin_tx_is_coinbase3Ptr = _lookup<
          ffi.NativeFunction<dogecoin_bool Function(ffi.Pointer<dogecoin_tx>)>>(
      'dogecoin_tx_is_coinbase');
  late final _dogecoin_tx_is_coinbase3 = _dogecoin_tx_is_coinbase3Ptr
      .asFunction<int Function(ffi.Pointer<dogecoin_tx>)>();

  ffi.Pointer<ffi.Char> dogecoin_tx_sign_result_to_str3(
    int result,
  ) {
    return _dogecoin_tx_sign_result_to_str3(
      result,
    );
  }

  late final _dogecoin_tx_sign_result_to_str3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'dogecoin_tx_sign_result_to_str');
  late final _dogecoin_tx_sign_result_to_str3 =
      _dogecoin_tx_sign_result_to_str3Ptr
          .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int dogecoin_tx_sign_input3(
    ffi.Pointer<dogecoin_tx> tx_in_out,
    ffi.Pointer<cstring> script,
    ffi.Pointer<dogecoin_key> privkey,
    int inputindex,
    int sighashtype,
    ffi.Pointer<ffi.Uint8> sigcompact_out,
    ffi.Pointer<ffi.Uint8> sigder_out,
    ffi.Pointer<ffi.Int> sigder_len,
  ) {
    return _dogecoin_tx_sign_input3(
      tx_in_out,
      script,
      privkey,
      inputindex,
      sighashtype,
      sigcompact_out,
      sigder_out,
      sigder_len,
    );
  }

  late final _dogecoin_tx_sign_input3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<cstring>,
              ffi.Pointer<dogecoin_key>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_tx_sign_input');
  late final _dogecoin_tx_sign_input3 = _dogecoin_tx_sign_input3Ptr.asFunction<
      int Function(
          ffi.Pointer<dogecoin_tx>,
          ffi.Pointer<cstring>,
          ffi.Pointer<dogecoin_key>,
          int,
          int,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Int>)>();

  late final ffi.Pointer<ffi.Pointer<working_transaction>> _transactions =
      _lookup<ffi.Pointer<working_transaction>>('transactions');

  ffi.Pointer<working_transaction> get transactions => _transactions.value;

  set transactions(ffi.Pointer<working_transaction> value) =>
      _transactions.value = value;

  ffi.Pointer<working_transaction> new_transaction() {
    return _new_transaction();
  }

  late final _new_transactionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<working_transaction> Function()>>(
          'new_transaction');
  late final _new_transaction = _new_transactionPtr
      .asFunction<ffi.Pointer<working_transaction> Function()>();

  void add_transaction(
    ffi.Pointer<working_transaction> working_tx,
  ) {
    return _add_transaction(
      working_tx,
    );
  }

  late final _add_transactionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<working_transaction>)>>('add_transaction');
  late final _add_transaction = _add_transactionPtr
      .asFunction<void Function(ffi.Pointer<working_transaction>)>();

  ffi.Pointer<working_transaction> find_transaction(
    int idx,
  ) {
    return _find_transaction(
      idx,
    );
  }

  late final _find_transactionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<working_transaction> Function(
              ffi.Int)>>('find_transaction');
  late final _find_transaction = _find_transactionPtr
      .asFunction<ffi.Pointer<working_transaction> Function(int)>();

  void remove_transaction(
    ffi.Pointer<working_transaction> working_tx,
  ) {
    return _remove_transaction(
      working_tx,
    );
  }

  late final _remove_transactionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<working_transaction>)>>('remove_transaction');
  late final _remove_transaction = _remove_transactionPtr
      .asFunction<void Function(ffi.Pointer<working_transaction>)>();

  void remove_all1() {
    return _remove_all1();
  }

  late final _remove_all1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('remove_all');
  late final _remove_all1 = _remove_all1Ptr.asFunction<void Function()>();

  void print_transactions() {
    return _print_transactions();
  }

  late final _print_transactionsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('print_transactions');
  late final _print_transactions =
      _print_transactionsPtr.asFunction<void Function()>();

  void count_transactions() {
    return _count_transactions();
  }

  late final _count_transactionsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('count_transactions');
  late final _count_transactions =
      _count_transactionsPtr.asFunction<void Function()>();

  int by_id() {
    return _by_id();
  }

  late final _by_idPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('by_id');
  late final _by_id = _by_idPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> getl(
    ffi.Pointer<ffi.Char> prompt,
  ) {
    return _getl(
      prompt,
    );
  }

  late final _getlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getl');
  late final _getl = _getlPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> get_raw_tx(
    ffi.Pointer<ffi.Char> prompt_tx,
  ) {
    return _get_raw_tx(
      prompt_tx,
    );
  }

  late final _get_raw_txPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('get_raw_tx');
  late final _get_raw_tx = _get_raw_txPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> get_private_key(
    ffi.Pointer<ffi.Char> prompt_key,
  ) {
    return _get_private_key(
      prompt_key,
    );
  }

  late final _get_private_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('get_private_key');
  late final _get_private_key = _get_private_keyPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int start_transaction1() {
    return _start_transaction1();
  }

  late final _start_transaction1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('start_transaction');
  late final _start_transaction1 =
      _start_transaction1Ptr.asFunction<int Function()>();

  int save_raw_transaction(
    int txindex,
    ffi.Pointer<ffi.Char> hexadecimal_transaction,
  ) {
    return _save_raw_transaction(
      txindex,
      hexadecimal_transaction,
    );
  }

  late final _save_raw_transactionPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'save_raw_transaction');
  late final _save_raw_transaction = _save_raw_transactionPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int add_utxo1(
    int txindex,
    ffi.Pointer<ffi.Char> hex_utxo_txid,
    int vout,
  ) {
    return _add_utxo1(
      txindex,
      hex_utxo_txid,
      vout,
    );
  }

  late final _add_utxo1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('add_utxo');
  late final _add_utxo1 =
      _add_utxo1Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int add_output1(
    int txindex,
    ffi.Pointer<ffi.Char> destinationaddress,
    ffi.Pointer<ffi.Char> amount,
  ) {
    return _add_output1(
      txindex,
      destinationaddress,
      amount,
    );
  }

  late final _add_output1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('add_output');
  late final _add_output1 = _add_output1Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> finalize_transaction1(
    int txindex,
    ffi.Pointer<ffi.Char> destinationaddress,
    ffi.Pointer<ffi.Char> subtractedfee,
    ffi.Pointer<ffi.Char> out_dogeamount_for_verification,
    ffi.Pointer<ffi.Char> public_key,
  ) {
    return _finalize_transaction1(
      txindex,
      destinationaddress,
      subtractedfee,
      out_dogeamount_for_verification,
      public_key,
    );
  }

  late final _finalize_transaction1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('finalize_transaction');
  late final _finalize_transaction1 = _finalize_transaction1Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> get_raw_transaction1(
    int txindex,
  ) {
    return _get_raw_transaction1(
      txindex,
    );
  }

  late final _get_raw_transaction1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'get_raw_transaction');
  late final _get_raw_transaction1 = _get_raw_transaction1Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void clear_transaction1(
    int txindex,
  ) {
    return _clear_transaction1(
      txindex,
    );
  }

  late final _clear_transaction1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'clear_transaction');
  late final _clear_transaction1 =
      _clear_transaction1Ptr.asFunction<void Function(int)>();

  int sign_raw_transaction1(
    int inputindex,
    ffi.Pointer<ffi.Char> incomingrawtx,
    ffi.Pointer<ffi.Char> scripthex,
    int sighashtype,
    ffi.Pointer<ffi.Char> privkey,
  ) {
    return _sign_raw_transaction1(
      inputindex,
      incomingrawtx,
      scripthex,
      sighashtype,
      privkey,
    );
  }

  late final _sign_raw_transaction1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>)>>('sign_raw_transaction');
  late final _sign_raw_transaction1 = _sign_raw_transaction1Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>)>();

  int sign_indexed_raw_transaction(
    int txindex,
    int inputindex,
    ffi.Pointer<ffi.Char> incomingrawtx,
    ffi.Pointer<ffi.Char> scripthex,
    int sighashtype,
    ffi.Pointer<ffi.Char> privkey,
  ) {
    return _sign_indexed_raw_transaction(
      txindex,
      inputindex,
      incomingrawtx,
      scripthex,
      sighashtype,
      privkey,
    );
  }

  late final _sign_indexed_raw_transactionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>)>>('sign_indexed_raw_transaction');
  late final _sign_indexed_raw_transaction =
      _sign_indexed_raw_transactionPtr.asFunction<
          int Function(int, int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              int, ffi.Pointer<ffi.Char>)>();

  int sign_transaction1(
    int txindex,
    ffi.Pointer<ffi.Char> script_pubkey,
    ffi.Pointer<ffi.Char> privkey,
  ) {
    return _sign_transaction1(
      txindex,
      script_pubkey,
      privkey,
    );
  }

  late final _sign_transaction1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('sign_transaction');
  late final _sign_transaction1 = _sign_transaction1Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int store_raw_transaction1(
    ffi.Pointer<ffi.Char> incomingrawtx,
  ) {
    return _store_raw_transaction1(
      incomingrawtx,
    );
  }

  late final _store_raw_transaction1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'store_raw_transaction');
  late final _store_raw_transaction1 = _store_raw_transaction1Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int remove27(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove27(
      __filename,
    );
  }

  late final _remove27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove27 =
      _remove27Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename27(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename27(
      __old,
      __new,
    );
  }

  late final _rename27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename27 = _rename27Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat27(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat27(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameat27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat27 = _renameat27Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose27(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose27(
      __stream,
    );
  }

  late final _fclose27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose27 =
      _fclose27Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile27() {
    return _tmpfile27();
  }

  late final _tmpfile27Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile27 =
      _tmpfile27Ptr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam27(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam27(
      arg0,
    );
  }

  late final _tmpnam27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam27 = _tmpnam27Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r27(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r27(
      __s,
    );
  }

  late final _tmpnam_r27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r27 = _tmpnam_r27Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam27(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam27(
      __dir,
      __pfx,
    );
  }

  late final _tempnam27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam27 = _tempnam27Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush27(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush27(
      __stream,
    );
  }

  late final _fflush27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush27 =
      _fflush27Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked27(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked27(
      __stream,
    );
  }

  late final _fflush_unlocked27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked27 =
      _fflush_unlocked27Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen27(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen27(
      __filename,
      __modes,
    );
  }

  late final _fopen27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen27 = _fopen27Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen27(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen27(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopen27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen27 = _freopen27Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen27(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen27(
      __fd,
      __modes,
    );
  }

  late final _fdopen27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen27 = _fdopen27Ptr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen27(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen27(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopen27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen27 = _fmemopen27Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream27(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Int> __sizeloc,
  ) {
    return _open_memstream27(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstream27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('open_memstream');
  late final _open_memstream27 = _open_memstream27Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void setbuf27(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf27(
      __stream,
      __buf,
    );
  }

  late final _setbuf27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf27 = _setbuf27Ptr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf27(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf27(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbuf27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('setvbuf');
  late final _setvbuf27 = _setvbuf27Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer27(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer27(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbuffer27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer27 = _setbuffer27Ptr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf27(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf27(
      __stream,
    );
  }

  late final _setlinebuf27Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf27 =
      _setlinebuf27Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf27(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf27(
      __stream,
      __format,
    );
  }

  late final _fprintf27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf27 = _fprintf27Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf27(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf27(
      __format,
    );
  }

  late final _printf27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf27 =
      _printf27Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf27(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf27(
      __s,
      __format,
    );
  }

  late final _sprintf27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf27 = _sprintf27Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf27(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfprintf27(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintf27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfprintf');
  late final _vfprintf27 = _vfprintf27Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vprintf27(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vprintf27(
      __format,
      __arg,
    );
  }

  late final _vprintf27Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vprintf');
  late final _vprintf27 =
      _vprintf27Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsprintf27(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsprintf27(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintf27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsprintf');
  late final _vsprintf27 = _vsprintf27Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int snprintf27(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf27(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintf27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf27 = _snprintf27Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf27(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsnprintf27(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintf27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('vsnprintf');
  late final _vsnprintf27 = _vsnprintf27Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int vdprintf27(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    int __arg,
  ) {
    return _vdprintf27(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintf27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('vdprintf');
  late final _vdprintf27 = _vdprintf27Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int dprintf27(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf27(
      __fd,
      __fmt,
    );
  }

  late final _dprintf27Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf27 =
      _dprintf27Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf54(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf54(
      __stream,
      __format,
    );
  }

  late final _fscanf54Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf54 = _fscanf54Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf54(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf54(
      __format,
    );
  }

  late final _scanf54Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf54 =
      _scanf54Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf54(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf54(
      __s,
      __format,
    );
  }

  late final _sscanf54Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf54 = _sscanf54Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fscanf55(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf55(
      __stream,
      __format,
    );
  }

  late final _fscanf55Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf55 = _fscanf55Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf55(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf55(
      __format,
    );
  }

  late final _scanf55Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf55 =
      _scanf55Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf55(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf55(
      __s,
      __format,
    );
  }

  late final _sscanf55Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf55 = _sscanf55Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf54(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf54(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf54Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf54 = _vfscanf54Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf54(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf54(
      __format,
      __arg,
    );
  }

  late final _vscanf54Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf54 =
      _vscanf54Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf54(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf54(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf54Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf54 = _vsscanf54Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int vfscanf55(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf55(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf55Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf55 = _vfscanf55Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf55(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf55(
      __format,
      __arg,
    );
  }

  late final _vscanf55Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf55 =
      _vscanf55Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf55(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf55(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf55Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf55 = _vsscanf55Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fgetc27(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc27(
      __stream,
    );
  }

  late final _fgetc27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc27 =
      _fgetc27Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc27(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc27(
      __stream,
    );
  }

  late final _getc27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc27 = _getc27Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar27() {
    return _getchar27();
  }

  late final _getchar27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar27 = _getchar27Ptr.asFunction<int Function()>();

  int getc_unlocked27(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked27(
      __stream,
    );
  }

  late final _getc_unlocked27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked27 =
      _getc_unlocked27Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked27() {
    return _getchar_unlocked27();
  }

  late final _getchar_unlocked27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked27 =
      _getchar_unlocked27Ptr.asFunction<int Function()>();

  int fgetc_unlocked27(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked27(
      __stream,
    );
  }

  late final _fgetc_unlocked27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked27 =
      _fgetc_unlocked27Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc27(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc27(
      __c,
      __stream,
    );
  }

  late final _fputc27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc27 =
      _fputc27Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc27(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc27(
      __c,
      __stream,
    );
  }

  late final _putc27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc27 =
      _putc27Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar27(
    int __c,
  ) {
    return _putchar27(
      __c,
    );
  }

  late final _putchar27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar27 = _putchar27Ptr.asFunction<int Function(int)>();

  int fputc_unlocked27(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked27(
      __c,
      __stream,
    );
  }

  late final _fputc_unlocked27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked27 =
      _fputc_unlocked27Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked27(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked27(
      __c,
      __stream,
    );
  }

  late final _putc_unlocked27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked27 =
      _putc_unlocked27Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked27(
    int __c,
  ) {
    return _putchar_unlocked27(
      __c,
    );
  }

  late final _putchar_unlocked27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked27 =
      _putchar_unlocked27Ptr.asFunction<int Function(int)>();

  int getw27(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw27(
      __stream,
    );
  }

  late final _getw27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw27 = _getw27Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw27(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw27(
      __w,
      __stream,
    );
  }

  late final _putw27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw27 =
      _putw27Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets27(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets27(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgets27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets27 = _fgets27Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim27(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim27(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelim27Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim27 = ___getdelim27Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getdelim27(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim27(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelim27Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim27 = _getdelim27Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getline27(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline27(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getline27Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<FILE>)>>('getline');
  late final _getline27 = _getline27Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<FILE>)>();

  int fputs27(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs27(
      __s,
      __stream,
    );
  }

  late final _fputs27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs27 = _fputs27Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts27(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts27(
      __s,
    );
  }

  late final _puts27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts27 =
      _puts27Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc27(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc27(
      __c,
      __stream,
    );
  }

  late final _ungetc27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc27 =
      _ungetc27Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread27(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread27(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread27 = _fread27Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite27(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite27(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwrite27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite27 = _fwrite27Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked27(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked27(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlocked27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked27 = _fread_unlocked27Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked27(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked27(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlocked27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked27 = _fwrite_unlocked27Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek27(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek27(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseek27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek27 =
      _fseek27Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell27(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell27(
      __stream,
    );
  }

  late final _ftell27Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell27 =
      _ftell27Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind27(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind27(
      __stream,
    );
  }

  late final _rewind27Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind27 =
      _rewind27Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko27(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko27(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseeko27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko27 =
      _fseeko27Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello27(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello27(
      __stream,
    );
  }

  late final _ftello27Ptr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello27 =
      _ftello27Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos27(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos27(
      __stream,
      __pos,
    );
  }

  late final _fgetpos27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos27 = _fgetpos27Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos27(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos27(
      __stream,
      __pos,
    );
  }

  late final _fsetpos27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos27 = _fsetpos27Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr27(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr27(
      __stream,
    );
  }

  late final _clearerr27Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr27 =
      _clearerr27Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof27(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof27(
      __stream,
    );
  }

  late final _feof27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof27 = _feof27Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror27(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror27(
      __stream,
    );
  }

  late final _ferror27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror27 =
      _ferror27Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked27(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked27(
      __stream,
    );
  }

  late final _clearerr_unlocked27Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked27 =
      _clearerr_unlocked27Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked27(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked27(
      __stream,
    );
  }

  late final _feof_unlocked27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked27 =
      _feof_unlocked27Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked27(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked27(
      __stream,
    );
  }

  late final _ferror_unlocked27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked27 =
      _ferror_unlocked27Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror27(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror27(
      __s,
    );
  }

  late final _perror27Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror27 =
      _perror27Ptr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno27(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno27(
      __stream,
    );
  }

  late final _fileno27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno27 =
      _fileno27Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked27(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked27(
      __stream,
    );
  }

  late final _fileno_unlocked27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked27 =
      _fileno_unlocked27Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose27(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose27(
      __stream,
    );
  }

  late final _pclose27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose27 =
      _pclose27Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen27(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen27(
      __command,
      __modes,
    );
  }

  late final _popen27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen27 = _popen27Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid27(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid27(
      __s,
    );
  }

  late final _ctermid27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid27 = _ctermid27Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile27(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile27(
      __stream,
    );
  }

  late final _flockfile27Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile27 =
      _flockfile27Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile27(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile27(
      __stream,
    );
  }

  late final _ftrylockfile27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile27 =
      _ftrylockfile27Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile27(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile27(
      __stream,
    );
  }

  late final _funlockfile27Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile27 =
      _funlockfile27Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow27(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow27(
      arg0,
    );
  }

  late final ___uflow27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow27 =
      ___uflow27Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow27(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow27(
      arg0,
      arg1,
    );
  }

  late final ___overflow27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow27 =
      ___overflow27Ptr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __ctype_get_mb_cur_max27() {
    return ___ctype_get_mb_cur_max27();
  }

  late final ___ctype_get_mb_cur_max27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max27 =
      ___ctype_get_mb_cur_max27Ptr.asFunction<int Function()>();

  double atof27(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof27(
      __nptr,
    );
  }

  late final _atof27Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof27 =
      _atof27Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi27(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi27(
      __nptr,
    );
  }

  late final _atoi27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi27 =
      _atoi27Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol27(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol27(
      __nptr,
    );
  }

  late final _atol27Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol27 =
      _atol27Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll27(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll27(
      __nptr,
    );
  }

  late final _atoll27Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll27 =
      _atoll27Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod27(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod27(
      __nptr,
      __endptr,
    );
  }

  late final _strtod27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod27 = _strtod27Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof27(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof27(
      __nptr,
      __endptr,
    );
  }

  late final _strtof27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof27 = _strtof27Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol27(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol27(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol27 = _strtol27Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul27(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul27(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul27 = _strtoul27Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq27(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq27(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq27 = _strtoq27Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq27(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq27(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq27 = _strtouq27Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll27(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll27(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll27 = _strtoll27Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull27(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull27(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull27 = _strtoull27Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a27(
    int __n,
  ) {
    return _l64a27(
      __n,
    );
  }

  late final _l64a27Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a27 =
      _l64a27Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l27(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l27(
      __s,
    );
  }

  late final _a64l27Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l27 =
      _a64l27Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select27(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select27(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select27 = _select27Ptr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect27(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect27(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect27 = _pselect27Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random27() {
    return _random27();
  }

  late final _random27Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random27 = _random27Ptr.asFunction<int Function()>();

  void srandom27(
    int __seed,
  ) {
    return _srandom27(
      __seed,
    );
  }

  late final _srandom27Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom27 = _srandom27Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate27(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate27(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int)>>('initstate');
  late final _initstate27 = _initstate27Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate27(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate27(
      __statebuf,
    );
  }

  late final _setstate27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate27 = _setstate27Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r27(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r27(
      __buf,
      __result,
    );
  }

  late final _random_r27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r27 = _random_r27Ptr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r27(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r27(
      __seed,
      __buf,
    );
  }

  late final _srandom_r27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r27 =
      _srandom_r27Ptr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r27(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r27(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r27 = _initstate_r27Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r27(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r27(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r27 = _setstate_r27Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand27() {
    return _rand27();
  }

  late final _rand27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand27 = _rand27Ptr.asFunction<int Function()>();

  void srand27(
    int __seed,
  ) {
    return _srand27(
      __seed,
    );
  }

  late final _srand27Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand27 = _srand27Ptr.asFunction<void Function(int)>();

  int rand_r27(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r27(
      __seed,
    );
  }

  late final _rand_r27Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r27 =
      _rand_r27Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand4827() {
    return _drand4827();
  }

  late final _drand4827Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand4827 = _drand4827Ptr.asFunction<double Function()>();

  double erand4827(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand4827(
      __xsubi,
    );
  }

  late final _erand4827Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand4827 = _erand4827Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand4827() {
    return _lrand4827();
  }

  late final _lrand4827Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand4827 = _lrand4827Ptr.asFunction<int Function()>();

  int nrand4827(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand4827(
      __xsubi,
    );
  }

  late final _nrand4827Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand4827 =
      _nrand4827Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand4827() {
    return _mrand4827();
  }

  late final _mrand4827Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand4827 = _mrand4827Ptr.asFunction<int Function()>();

  int jrand4827(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand4827(
      __xsubi,
    );
  }

  late final _jrand4827Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand4827 =
      _jrand4827Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand4827(
    int __seedval,
  ) {
    return _srand4827(
      __seedval,
    );
  }

  late final _srand4827Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand4827 = _srand4827Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed4827(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed4827(
      __seed16v,
    );
  }

  late final _seed4827Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed4827 = _seed4827Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong4827(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong4827(
      __param,
    );
  }

  late final _lcong4827Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong4827 =
      _lcong4827Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r27(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r27(
      __buffer,
      __result,
    );
  }

  late final _drand48_r27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r27 = _drand48_r27Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r27(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r27(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r27 = _erand48_r27Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r27(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r27(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r27 = _lrand48_r27Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r27(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r27(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r27 = _nrand48_r27Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r27(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r27(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r27 = _mrand48_r27Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r27(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r27(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r27 = _jrand48_r27Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r27(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r27(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r27 = _srand48_r27Ptr
      .asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r27(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r27(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r27 = _seed48_r27Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r27(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r27(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r27 = _lcong48_r27Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int arc4random27() {
    return _arc4random27();
  }

  late final _arc4random27Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random27 = _arc4random27Ptr.asFunction<int Function()>();

  void arc4random_buf27(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf27(
      __buf,
      __size,
    );
  }

  late final _arc4random_buf27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('arc4random_buf');
  late final _arc4random_buf27 = _arc4random_buf27Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform27(
    int __upper_bound,
  ) {
    return _arc4random_uniform27(
      __upper_bound,
    );
  }

  late final _arc4random_uniform27Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
          'arc4random_uniform');
  late final _arc4random_uniform27 =
      _arc4random_uniform27Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc27(
    int __size,
  ) {
    return _malloc27(
      __size,
    );
  }

  late final _malloc27Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'malloc');
  late final _malloc27 =
      _malloc27Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc27(
    int __nmemb,
    int __size,
  ) {
    return _calloc27(
      __nmemb,
      __size,
    );
  }

  late final _calloc27Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'calloc');
  late final _calloc27 =
      _calloc27Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc27(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc27(
      __ptr,
      __size,
    );
  }

  late final _realloc27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('realloc');
  late final _realloc27 = _realloc27Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free27(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free27(
      __ptr,
    );
  }

  late final _free27Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free27 =
      _free27Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray54(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray54(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray54Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray54 = _reallocarray54Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray55(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray55(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray55Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray55 = _reallocarray55Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca27(
    int __size,
  ) {
    return _alloca27(
      __size,
    );
  }

  late final _alloca27Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'alloca');
  late final _alloca27 =
      _alloca27Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc27(
    int __size,
  ) {
    return _valloc27(
      __size,
    );
  }

  late final _valloc27Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'valloc');
  late final _valloc27 =
      _valloc27Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign27(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign27(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int,
              ffi.Int)>>('posix_memalign');
  late final _posix_memalign27 = _posix_memalign27Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc27(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc27(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc27Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'aligned_alloc');
  late final _aligned_alloc27 = _aligned_alloc27Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort27() {
    return _abort27();
  }

  late final _abort27Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort27 = _abort27Ptr.asFunction<void Function()>();

  int atexit27(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit27(
      __func,
    );
  }

  late final _atexit27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit27 = _atexit27Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit27(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit27(
      __func,
    );
  }

  late final _at_quick_exit27Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit27 = _at_quick_exit27Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit27(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit27(
      __func,
      __arg,
    );
  }

  late final _on_exit27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit27 = _on_exit27Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit27(
    int __status,
  ) {
    return _exit27(
      __status,
    );
  }

  late final _exit27Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit27 = _exit27Ptr.asFunction<void Function(int)>();

  void quick_exit27(
    int __status,
  ) {
    return _quick_exit27(
      __status,
    );
  }

  late final _quick_exit27Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit27 = _quick_exit27Ptr.asFunction<void Function(int)>();

  void _Exit27(
    int __status,
  ) {
    return __Exit27(
      __status,
    );
  }

  late final __Exit27Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit27 = __Exit27Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv27(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv27(
      __name,
    );
  }

  late final _getenv27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv27 = _getenv27Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv27(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv27(
      __string,
    );
  }

  late final _putenv27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv27 =
      _putenv27Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv27(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv27(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv27 = _setenv27Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv27(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv27(
      __name,
    );
  }

  late final _unsetenv27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv27 =
      _unsetenv27Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv27() {
    return _clearenv27();
  }

  late final _clearenv27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv27 = _clearenv27Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp27(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp27(
      __template,
    );
  }

  late final _mktemp27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp27 = _mktemp27Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp27(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp27(
      __template,
    );
  }

  late final _mkstemp27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp27 =
      _mkstemp27Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps27(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps27(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps27Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps27 =
      _mkstemps27Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp27(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp27(
      __template,
    );
  }

  late final _mkdtemp27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp27 = _mkdtemp27Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system27(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system27(
      __command,
    );
  }

  late final _system27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system27 =
      _system27Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath27(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath27(
      __name,
      __resolved,
    );
  }

  late final _realpath27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath27 = _realpath27Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch27(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch27(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              __compar_fn_t)>>('bsearch');
  late final _bsearch27 = _bsearch27Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort27(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort27(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              __compar_fn_t)>>('qsort');
  late final _qsort27 = _qsort27Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs27(
    int __x,
  ) {
    return _abs27(
      __x,
    );
  }

  late final _abs27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs27 = _abs27Ptr.asFunction<int Function(int)>();

  int labs27(
    int __x,
  ) {
    return _labs27(
      __x,
    );
  }

  late final _labs27Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs27 = _labs27Ptr.asFunction<int Function(int)>();

  int llabs27(
    int __x,
  ) {
    return _llabs27(
      __x,
    );
  }

  late final _llabs27Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs27 = _llabs27Ptr.asFunction<int Function(int)>();

  div_t div27(
    int __numer,
    int __denom,
  ) {
    return _div27(
      __numer,
      __denom,
    );
  }

  late final _div27Ptr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div27 = _div27Ptr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv27(
    int __numer,
    int __denom,
  ) {
    return _ldiv27(
      __numer,
      __denom,
    );
  }

  late final _ldiv27Ptr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv27 = _ldiv27Ptr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv27(
    int __numer,
    int __denom,
  ) {
    return _lldiv27(
      __numer,
      __denom,
    );
  }

  late final _lldiv27Ptr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv27 = _lldiv27Ptr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt27(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt27(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt27 = _ecvt27Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt27(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt27(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt27 = _fcvt27Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt27(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt27(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt27 = _gcvt27Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r27(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r27(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('ecvt_r');
  late final _ecvt_r27 = _ecvt_r27Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r27(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r27(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('fcvt_r');
  late final _fcvt_r27 = _fcvt_r27Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen27(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen27(
      __s,
      __n,
    );
  }

  late final _mblen27Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mblen');
  late final _mblen27 =
      _mblen27Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc27(
    ffi.Pointer<ffi.Int> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc27(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('mbtowc');
  late final _mbtowc27 = _mbtowc27Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb27(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb27(
      __s,
      __wchar,
    );
  }

  late final _wctomb27Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'wctomb');
  late final _wctomb27 =
      _wctomb27Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs27(
    ffi.Pointer<ffi.Int> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs27(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mbstowcs');
  late final _mbstowcs27 = _mbstowcs27Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs27(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Int> __pwcs,
    int __n,
  ) {
    return _wcstombs27(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('wcstombs');
  late final _wcstombs27 = _wcstombs27Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  int rpmatch27(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch27(
      __response,
    );
  }

  late final _rpmatch27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch27 =
      _rpmatch27Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt27(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt27(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt27 = _getsubopt27Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg27(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg27(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg27 =
      _getloadavg27Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Void> memcpy27(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy27(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpy27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memcpy');
  late final _memcpy27 = _memcpy27Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove27(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove27(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmove27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memmove');
  late final _memmove27 = _memmove27Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy27(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy27(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpy27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memccpy');
  late final _memccpy27 = _memccpy27Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset27(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset27(
      __s,
      __c,
      __n,
    );
  }

  late final _memset27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memset');
  late final _memset27 = _memset27Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp27(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp27(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmp27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('memcmp');
  late final _memcmp27 = _memcmp27Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq27(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq27(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeq27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__memcmpeq');
  late final ___memcmpeq27 = ___memcmpeq27Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr27(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr27(
      __s,
      __c,
      __n,
    );
  }

  late final _memchr27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memchr');
  late final _memchr27 = _memchr27Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy27(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy27(
      __dest,
      __src,
    );
  }

  late final _strcpy27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy27 = _strcpy27Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy27(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy27(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpy27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncpy');
  late final _strncpy27 = _strncpy27Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat27(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat27(
      __dest,
      __src,
    );
  }

  late final _strcat27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat27 = _strcat27Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat27(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat27(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncat27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncat');
  late final _strncat27 = _strncat27Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp27(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp27(
      __s1,
      __s2,
    );
  }

  late final _strcmp27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp27 = _strcmp27Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp27(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp27(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmp27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncmp');
  late final _strncmp27 = _strncmp27Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll27(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll27(
      __s1,
      __s2,
    );
  }

  late final _strcoll27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll27 = _strcoll27Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm27(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm27(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrm27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strxfrm');
  late final _strxfrm27 = _strxfrm27Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l27(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l27(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_l27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l27 = _strcoll_l27Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l27(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l27(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_l27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strxfrm_l');
  late final _strxfrm_l27 = _strxfrm_l27Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup27(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup27(
      __s,
    );
  }

  late final _strdup27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup27 = _strdup27Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup27(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup27(
      __string,
      __n,
    );
  }

  late final _strndup27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strndup');
  late final _strndup27 = _strndup27Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr27(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr27(
      __s,
      __c,
    );
  }

  late final _strchr27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr27 = _strchr27Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr27(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr27(
      __s,
      __c,
    );
  }

  late final _strrchr27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr27 = _strrchr27Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn27(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn27(
      __s,
      __reject,
    );
  }

  late final _strcspn27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn27 = _strcspn27Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn27(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn27(
      __s,
      __accept,
    );
  }

  late final _strspn27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn27 = _strspn27Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk27(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk27(
      __s,
      __accept,
    );
  }

  late final _strpbrk27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk27 = _strpbrk27Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr27(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr27(
      __haystack,
      __needle,
    );
  }

  late final _strstr27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr27 = _strstr27Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok27(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok27(
      __s,
      __delim,
    );
  }

  late final _strtok27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok27 = _strtok27Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r27(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r27(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_r27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r27 = ___strtok_r27Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r27(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r27(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_r27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r27 = _strtok_r27Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen27(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen27(
      __s,
    );
  }

  late final _strlen27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'strlen');
  late final _strlen27 =
      _strlen27Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen27(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen27(
      __string,
      __maxlen,
    );
  }

  late final _strnlen27Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'strnlen');
  late final _strnlen27 =
      _strnlen27Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror27(
    int __errnum,
  ) {
    return _strerror27(
      __errnum,
    );
  }

  late final _strerror27Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror27 =
      _strerror27Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r27(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r27(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_r27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('strerror_r');
  late final _strerror_r27 = _strerror_r27Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l27(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l27(
      __errnum,
      __l,
    );
  }

  late final _strerror_l27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l27 = _strerror_l27Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp27(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp27(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmp27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcmp');
  late final _bcmp27 = _bcmp27Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy27(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy27(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopy27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcopy');
  late final _bcopy27 = _bcopy27Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero27(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero27(
      __s,
      __n,
    );
  }

  late final _bzero27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('bzero');
  late final _bzero27 =
      _bzero27Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index27(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index27(
      __s,
      __c,
    );
  }

  late final _index27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index27 = _index27Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex27(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex27(
      __s,
      __c,
    );
  }

  late final _rindex27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex27 = _rindex27Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs27(
    int __i,
  ) {
    return _ffs27(
      __i,
    );
  }

  late final _ffs27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs27 = _ffs27Ptr.asFunction<int Function(int)>();

  int ffsl27(
    int __l,
  ) {
    return _ffsl27(
      __l,
    );
  }

  late final _ffsl27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl27 = _ffsl27Ptr.asFunction<int Function(int)>();

  int ffsll27(
    int __ll,
  ) {
    return _ffsll27(
      __ll,
    );
  }

  late final _ffsll27Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll27 = _ffsll27Ptr.asFunction<int Function(int)>();

  int strcasecmp27(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp27(
      __s1,
      __s2,
    );
  }

  late final _strcasecmp27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp27 = _strcasecmp27Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp27(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp27(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmp27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncasecmp');
  late final _strncasecmp27 = _strncasecmp27Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l27(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l27(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_l27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l27 = _strcasecmp_l27Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l27(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l27(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_l27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l27 = _strncasecmp_l27Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero27(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero27(
      __s,
      __n,
    );
  }

  late final _explicit_bzero27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('explicit_bzero');
  late final _explicit_bzero27 = _explicit_bzero27Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep27(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep27(
      __stringp,
      __delim,
    );
  }

  late final _strsep27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep27 = _strsep27Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal27(
    int __sig,
  ) {
    return _strsignal27(
      __sig,
    );
  }

  late final _strsignal27Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal27 =
      _strsignal27Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy27(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy27(
      __dest,
      __src,
    );
  }

  late final ___stpcpy27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy27 = ___stpcpy27Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy27(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy27(
      __dest,
      __src,
    );
  }

  late final _stpcpy27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy27 = _stpcpy27Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy27(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy27(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpy27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('__stpncpy');
  late final ___stpncpy27 = ___stpncpy27Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy27(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy27(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpy27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('stpncpy');
  late final _stpncpy27 = _stpncpy27Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int buffer_equal7(
    ffi.Pointer<ffi.Void> a,
    ffi.Pointer<ffi.Void> b,
  ) {
    return _buffer_equal7(
      a,
      b,
    );
  }

  late final _buffer_equal7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>('buffer_equal');
  late final _buffer_equal7 = _buffer_equal7Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  void buffer_free7(
    ffi.Pointer<ffi.Void> struct_buffer,
  ) {
    return _buffer_free7(
      struct_buffer,
    );
  }

  late final _buffer_free7Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'buffer_free');
  late final _buffer_free7 =
      _buffer_free7Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<buffer> buffer_copy7(
    ffi.Pointer<ffi.Void> data,
    int data_len,
  ) {
    return _buffer_copy7(
      data,
      data_len,
    );
  }

  late final _buffer_copy7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<buffer> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('buffer_copy');
  late final _buffer_copy7 = _buffer_copy7Ptr
      .asFunction<ffi.Pointer<buffer> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<dogecoin_chainparams> chain_from_b58_prefix9(
    ffi.Pointer<ffi.Char> address,
  ) {
    return _chain_from_b58_prefix9(
      address,
    );
  }

  late final _chain_from_b58_prefix9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<dogecoin_chainparams> Function(
              ffi.Pointer<ffi.Char>)>>('chain_from_b58_prefix');
  late final _chain_from_b58_prefix9 = _chain_from_b58_prefix9Ptr.asFunction<
      ffi.Pointer<dogecoin_chainparams> Function(ffi.Pointer<ffi.Char>)>();

  int chain_from_b58_prefix_bool9(
    ffi.Pointer<ffi.Char> address,
  ) {
    return _chain_from_b58_prefix_bool9(
      address,
    );
  }

  late final _chain_from_b58_prefix_bool9Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'chain_from_b58_prefix_bool');
  late final _chain_from_b58_prefix_bool9 = _chain_from_b58_prefix_bool9Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<cstring> cstr_new9(
    ffi.Pointer<ffi.Char> init_str,
  ) {
    return _cstr_new9(
      init_str,
    );
  }

  late final _cstr_new9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cstring> Function(ffi.Pointer<ffi.Char>)>>('cstr_new');
  late final _cstr_new9 = _cstr_new9Ptr
      .asFunction<ffi.Pointer<cstring> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<cstring> cstr_new_sz9(
    int sz,
  ) {
    return _cstr_new_sz9(
      sz,
    );
  }

  late final _cstr_new_sz9Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<cstring> Function(ffi.Int)>>(
          'cstr_new_sz');
  late final _cstr_new_sz9 =
      _cstr_new_sz9Ptr.asFunction<ffi.Pointer<cstring> Function(int)>();

  ffi.Pointer<cstring> cstr_new_buf9(
    ffi.Pointer<ffi.Void> buf,
    int sz,
  ) {
    return _cstr_new_buf9(
      buf,
      sz,
    );
  }

  late final _cstr_new_buf9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cstring> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('cstr_new_buf');
  late final _cstr_new_buf9 = _cstr_new_buf9Ptr
      .asFunction<ffi.Pointer<cstring> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<cstring> cstr_new_cstr9(
    ffi.Pointer<cstring> copy_str,
  ) {
    return _cstr_new_cstr9(
      copy_str,
    );
  }

  late final _cstr_new_cstr9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cstring> Function(
              ffi.Pointer<cstring>)>>('cstr_new_cstr');
  late final _cstr_new_cstr9 = _cstr_new_cstr9Ptr
      .asFunction<ffi.Pointer<cstring> Function(ffi.Pointer<cstring>)>();

  void cstr_free9(
    ffi.Pointer<cstring> s,
    int free_buf,
  ) {
    return _cstr_free9(
      s,
      free_buf,
    );
  }

  late final _cstr_free9Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_free');
  late final _cstr_free9 =
      _cstr_free9Ptr.asFunction<void Function(ffi.Pointer<cstring>, int)>();

  int cstr_equal9(
    ffi.Pointer<cstring> a,
    ffi.Pointer<cstring> b,
  ) {
    return _cstr_equal9(
      a,
      b,
    );
  }

  late final _cstr_equal9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_equal');
  late final _cstr_equal9 = _cstr_equal9Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_compare9(
    ffi.Pointer<cstring> a,
    ffi.Pointer<cstring> b,
  ) {
    return _cstr_compare9(
      a,
      b,
    );
  }

  late final _cstr_compare9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_compare');
  late final _cstr_compare9 = _cstr_compare9Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_resize9(
    ffi.Pointer<cstring> s,
    int sz,
  ) {
    return _cstr_resize9(
      s,
      sz,
    );
  }

  late final _cstr_resize9Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_resize');
  late final _cstr_resize9 =
      _cstr_resize9Ptr.asFunction<int Function(ffi.Pointer<cstring>, int)>();

  int cstr_erase9(
    ffi.Pointer<cstring> s,
    int pos,
    int len,
  ) {
    return _cstr_erase9(
      s,
      pos,
      len,
    );
  }

  late final _cstr_erase9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Int, ssize_t)>>('cstr_erase');
  late final _cstr_erase9 = _cstr_erase9Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, int, int)>();

  int cstr_append_buf9(
    ffi.Pointer<cstring> s,
    ffi.Pointer<ffi.Void> buf,
    int sz,
  ) {
    return _cstr_append_buf9(
      s,
      buf,
      sz,
    );
  }

  late final _cstr_append_buf9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('cstr_append_buf');
  late final _cstr_append_buf9 = _cstr_append_buf9Ptr.asFunction<
      int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Void>, int)>();

  int cstr_append_cstr9(
    ffi.Pointer<cstring> s,
    ffi.Pointer<cstring> append,
  ) {
    return _cstr_append_cstr9(
      s,
      append,
    );
  }

  late final _cstr_append_cstr9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_append_cstr');
  late final _cstr_append_cstr9 = _cstr_append_cstr9Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_append_c9(
    ffi.Pointer<cstring> s,
    int ch,
  ) {
    return _cstr_append_c9(
      s,
      ch,
    );
  }

  late final _cstr_append_c9Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Char)>>(
      'cstr_append_c');
  late final _cstr_append_c9 =
      _cstr_append_c9Ptr.asFunction<int Function(ffi.Pointer<cstring>, int)>();

  int cstr_alloc_minsize9(
    ffi.Pointer<cstring> s,
    int sz,
  ) {
    return _cstr_alloc_minsize9(
      s,
      sz,
    );
  }

  late final _cstr_alloc_minsize9Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_alloc_minsize');
  late final _cstr_alloc_minsize9 = _cstr_alloc_minsize9Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, int)>();

  void dogecoin_mem_set_mapper6(
    dogecoin_mem_mapper mapper,
  ) {
    return _dogecoin_mem_set_mapper6(
      mapper,
    );
  }

  late final _dogecoin_mem_set_mapper6Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dogecoin_mem_mapper)>>(
          'dogecoin_mem_set_mapper');
  late final _dogecoin_mem_set_mapper6 = _dogecoin_mem_set_mapper6Ptr
      .asFunction<void Function(dogecoin_mem_mapper)>();

  void dogecoin_mem_set_mapper_default6() {
    return _dogecoin_mem_set_mapper_default6();
  }

  late final _dogecoin_mem_set_mapper_default6Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'dogecoin_mem_set_mapper_default');
  late final _dogecoin_mem_set_mapper_default6 =
      _dogecoin_mem_set_mapper_default6Ptr.asFunction<void Function()>();

  ffi.Pointer<ffi.Void> dogecoin_malloc6(
    int size,
  ) {
    return _dogecoin_malloc6(
      size,
    );
  }

  late final _dogecoin_malloc6Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'dogecoin_malloc');
  late final _dogecoin_malloc6 =
      _dogecoin_malloc6Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> dogecoin_calloc6(
    int count,
    int size,
  ) {
    return _dogecoin_calloc6(
      count,
      size,
    );
  }

  late final _dogecoin_calloc6Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'dogecoin_calloc');
  late final _dogecoin_calloc6 = _dogecoin_calloc6Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> dogecoin_realloc6(
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _dogecoin_realloc6(
      ptr,
      size,
    );
  }

  late final _dogecoin_realloc6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('dogecoin_realloc');
  late final _dogecoin_realloc6 = _dogecoin_realloc6Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void dogecoin_free6(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _dogecoin_free6(
      ptr,
    );
  }

  late final _dogecoin_free6Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'dogecoin_free');
  late final _dogecoin_free6 =
      _dogecoin_free6Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> memcpy_safe6(
    ffi.Pointer<ffi.Void> destination,
    ffi.Pointer<ffi.Void> source,
    int count,
  ) {
    return _memcpy_safe6(
      destination,
      source,
      count,
    );
  }

  late final _memcpy_safe6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.UnsignedInt)>>('memcpy_safe');
  late final _memcpy_safe6 = _memcpy_safe6Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void sha256_init6(
    ffi.Pointer<sha256_context> arg0,
  ) {
    return _sha256_init6(
      arg0,
    );
  }

  late final _sha256_init6Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sha256_context>)>>(
      'sha256_init');
  late final _sha256_init6 =
      _sha256_init6Ptr.asFunction<void Function(ffi.Pointer<sha256_context>)>();

  void sha256_write6(
    ffi.Pointer<sha256_context> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
    int size_t,
  ) {
    return _sha256_write6(
      arg0,
      arg1,
      size_t,
    );
  }

  late final _sha256_write6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sha256_context>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('sha256_write');
  late final _sha256_write6 = _sha256_write6Ptr.asFunction<
      void Function(
          ffi.Pointer<sha256_context>, ffi.Pointer<ffi.Uint8>, int)>();

  void sha256_finalize6(
    ffi.Pointer<sha256_context> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
  ) {
    return _sha256_finalize6(
      arg0,
      arg1,
    );
  }

  late final _sha256_finalize6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sha256_context>,
              ffi.Pointer<ffi.Uint8>)>>('sha256_finalize');
  late final _sha256_finalize6 = _sha256_finalize6Ptr.asFunction<
      void Function(ffi.Pointer<sha256_context>, ffi.Pointer<ffi.Uint8>)>();

  void sha256_raw6(
    ffi.Pointer<ffi.Uint8> arg0,
    int size_t,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return _sha256_raw6(
      arg0,
      size_t,
      arg2,
    );
  }

  late final _sha256_raw6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<ffi.Uint8>)>>('sha256_raw');
  late final _sha256_raw6 = _sha256_raw6Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  void sha512_init6(
    ffi.Pointer<sha512_context> arg0,
  ) {
    return _sha512_init6(
      arg0,
    );
  }

  late final _sha512_init6Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sha512_context>)>>(
      'sha512_init');
  late final _sha512_init6 =
      _sha512_init6Ptr.asFunction<void Function(ffi.Pointer<sha512_context>)>();

  void sha512_write6(
    ffi.Pointer<sha512_context> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
    int size_t,
  ) {
    return _sha512_write6(
      arg0,
      arg1,
      size_t,
    );
  }

  late final _sha512_write6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sha512_context>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('sha512_write');
  late final _sha512_write6 = _sha512_write6Ptr.asFunction<
      void Function(
          ffi.Pointer<sha512_context>, ffi.Pointer<ffi.Uint8>, int)>();

  void sha512_finalize6(
    ffi.Pointer<sha512_context> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
  ) {
    return _sha512_finalize6(
      arg0,
      arg1,
    );
  }

  late final _sha512_finalize6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sha512_context>,
              ffi.Pointer<ffi.Uint8>)>>('sha512_finalize');
  late final _sha512_finalize6 = _sha512_finalize6Ptr.asFunction<
      void Function(ffi.Pointer<sha512_context>, ffi.Pointer<ffi.Uint8>)>();

  void sha512_raw6(
    ffi.Pointer<ffi.Uint8> arg0,
    int size_t,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return _sha512_raw6(
      arg0,
      size_t,
      arg2,
    );
  }

  late final _sha512_raw6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<ffi.Uint8>)>>('sha512_raw');
  late final _sha512_raw6 = _sha512_raw6Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  void hmac_sha2566(
    ffi.Pointer<ffi.Uint8> key,
    int keylen,
    ffi.Pointer<ffi.Uint8> msg,
    int msglen,
    ffi.Pointer<ffi.Uint8> hmac,
  ) {
    return _hmac_sha2566(
      key,
      keylen,
      msg,
      msglen,
      hmac,
    );
  }

  late final _hmac_sha2566Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint8>)>>('hmac_sha256');
  late final _hmac_sha2566 = _hmac_sha2566Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>)>();

  void hmac_sha5126(
    ffi.Pointer<ffi.Uint8> key,
    int keylen,
    ffi.Pointer<ffi.Uint8> msg,
    int msglen,
    ffi.Pointer<ffi.Uint8> hmac,
  ) {
    return _hmac_sha5126(
      key,
      keylen,
      msg,
      msglen,
      hmac,
    );
  }

  late final _hmac_sha5126Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint8>)>>('hmac_sha512');
  late final _hmac_sha5126 = _hmac_sha5126Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<vector> vector_new7(
    int res,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        free_f,
  ) {
    return _vector_new7(
      res,
      free_f,
    );
  }

  late final _vector_new7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<vector> Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>)>>)>>('vector_new');
  late final _vector_new7 = _vector_new7Ptr.asFunction<
      ffi.Pointer<vector> Function(
          int,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  void vector_free7(
    ffi.Pointer<vector> vec,
    int free_array,
  ) {
    return _vector_free7(
      vec,
      free_array,
    );
  }

  late final _vector_free7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<vector>, dogecoin_bool)>>('vector_free');
  late final _vector_free7 =
      _vector_free7Ptr.asFunction<void Function(ffi.Pointer<vector>, int)>();

  int vector_add7(
    ffi.Pointer<vector> vec,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _vector_add7(
      vec,
      data,
    );
  }

  late final _vector_add7Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>>('vector_add');
  late final _vector_add7 = _vector_add7Ptr
      .asFunction<int Function(ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>();

  int vector_remove7(
    ffi.Pointer<vector> vec,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _vector_remove7(
      vec,
      data,
    );
  }

  late final _vector_remove7Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>>('vector_remove');
  late final _vector_remove7 = _vector_remove7Ptr
      .asFunction<int Function(ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>();

  void vector_remove_idx7(
    ffi.Pointer<vector> vec,
    int idx,
  ) {
    return _vector_remove_idx7(
      vec,
      idx,
    );
  }

  late final _vector_remove_idx7Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<vector>, ffi.Int)>>(
      'vector_remove_idx');
  late final _vector_remove_idx7 = _vector_remove_idx7Ptr
      .asFunction<void Function(ffi.Pointer<vector>, int)>();

  void vector_remove_range7(
    ffi.Pointer<vector> vec,
    int idx,
    int len,
  ) {
    return _vector_remove_range7(
      vec,
      idx,
      len,
    );
  }

  late final _vector_remove_range7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<vector>, ffi.Int, ffi.Int)>>('vector_remove_range');
  late final _vector_remove_range7 = _vector_remove_range7Ptr
      .asFunction<void Function(ffi.Pointer<vector>, int, int)>();

  int vector_resize7(
    ffi.Pointer<vector> vec,
    int newsz,
  ) {
    return _vector_resize7(
      vec,
      newsz,
    );
  }

  late final _vector_resize7Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<vector>, ffi.Int)>>('vector_resize');
  late final _vector_resize7 =
      _vector_resize7Ptr.asFunction<int Function(ffi.Pointer<vector>, int)>();

  int vector_find7(
    ffi.Pointer<vector> vec,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _vector_find7(
      vec,
      data,
    );
  }

  late final _vector_find7Ptr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>>('vector_find');
  late final _vector_find7 = _vector_find7Ptr
      .asFunction<int Function(ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>();

  void dogecoin_privkey_init6(
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_init6(
      privkey,
    );
  }

  late final _dogecoin_privkey_init6Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_key>)>>(
          'dogecoin_privkey_init');
  late final _dogecoin_privkey_init6 = _dogecoin_privkey_init6Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_key>)>();

  int dogecoin_privkey_is_valid6(
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_is_valid6(
      privkey,
    );
  }

  late final _dogecoin_privkey_is_valid6Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_key>)>>('dogecoin_privkey_is_valid');
  late final _dogecoin_privkey_is_valid6 = _dogecoin_privkey_is_valid6Ptr
      .asFunction<int Function(ffi.Pointer<dogecoin_key>)>();

  void dogecoin_privkey_cleanse6(
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_cleanse6(
      privkey,
    );
  }

  late final _dogecoin_privkey_cleanse6Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_key>)>>(
          'dogecoin_privkey_cleanse');
  late final _dogecoin_privkey_cleanse6 = _dogecoin_privkey_cleanse6Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_key>)>();

  int dogecoin_privkey_gen6(
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_gen6(
      privkey,
    );
  }

  late final _dogecoin_privkey_gen6Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_key>)>>('dogecoin_privkey_gen');
  late final _dogecoin_privkey_gen6 = _dogecoin_privkey_gen6Ptr
      .asFunction<int Function(ffi.Pointer<dogecoin_key>)>();

  int dogecoin_privkey_verify_pubkey6(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_privkey_verify_pubkey6(
      privkey,
      pubkey,
    );
  }

  late final _dogecoin_privkey_verify_pubkey6Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_key>,
              ffi.Pointer<dogecoin_pubkey>)>>('dogecoin_privkey_verify_pubkey');
  late final _dogecoin_privkey_verify_pubkey6 =
      _dogecoin_privkey_verify_pubkey6Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_key>, ffi.Pointer<dogecoin_pubkey>)>();

  void dogecoin_privkey_encode_wif6(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<dogecoin_chainparams> chain,
    ffi.Pointer<ffi.Char> privkey_wif,
    ffi.Pointer<ffi.Int> strsize_inout,
  ) {
    return _dogecoin_privkey_encode_wif6(
      privkey,
      chain,
      privkey_wif,
      strsize_inout,
    );
  }

  late final _dogecoin_privkey_encode_wif6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_privkey_encode_wif');
  late final _dogecoin_privkey_encode_wif6 =
      _dogecoin_privkey_encode_wif6Ptr.asFunction<
          void Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>();

  int dogecoin_privkey_decode_wif6(
    ffi.Pointer<ffi.Char> privkey_wif,
    ffi.Pointer<dogecoin_chainparams> chain,
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_decode_wif6(
      privkey_wif,
      chain,
      privkey,
    );
  }

  late final _dogecoin_privkey_decode_wif6Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<dogecoin_key>)>>('dogecoin_privkey_decode_wif');
  late final _dogecoin_privkey_decode_wif6 =
      _dogecoin_privkey_decode_wif6Ptr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<dogecoin_key>)>();

  void dogecoin_pubkey_init6(
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_pubkey_init6(
      pubkey,
    );
  }

  late final _dogecoin_pubkey_init6Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_pubkey>)>>(
      'dogecoin_pubkey_init');
  late final _dogecoin_pubkey_init6 = _dogecoin_pubkey_init6Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_pubkey>)>();

  int dogecoin_pubkey_get_length6(
    int ch_header,
  ) {
    return _dogecoin_pubkey_get_length6(
      ch_header,
    );
  }

  late final _dogecoin_pubkey_get_length6Ptr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedChar)>>(
          'dogecoin_pubkey_get_length');
  late final _dogecoin_pubkey_get_length6 =
      _dogecoin_pubkey_get_length6Ptr.asFunction<int Function(int)>();

  int dogecoin_pubkey_is_valid6(
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_pubkey_is_valid6(
      pubkey,
    );
  }

  late final _dogecoin_pubkey_is_valid6Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_pubkey>)>>('dogecoin_pubkey_is_valid');
  late final _dogecoin_pubkey_is_valid6 = _dogecoin_pubkey_is_valid6Ptr
      .asFunction<int Function(ffi.Pointer<dogecoin_pubkey>)>();

  void dogecoin_pubkey_cleanse6(
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_pubkey_cleanse6(
      pubkey,
    );
  }

  late final _dogecoin_pubkey_cleanse6Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_pubkey>)>>(
      'dogecoin_pubkey_cleanse');
  late final _dogecoin_pubkey_cleanse6 = _dogecoin_pubkey_cleanse6Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_pubkey>)>();

  void dogecoin_pubkey_from_key6(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<dogecoin_pubkey> pubkey_inout,
  ) {
    return _dogecoin_pubkey_from_key6(
      privkey,
      pubkey_inout,
    );
  }

  late final _dogecoin_pubkey_from_key6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_key>,
              ffi.Pointer<dogecoin_pubkey>)>>('dogecoin_pubkey_from_key');
  late final _dogecoin_pubkey_from_key6 =
      _dogecoin_pubkey_from_key6Ptr.asFunction<
          void Function(
              ffi.Pointer<dogecoin_key>, ffi.Pointer<dogecoin_pubkey>)>();

  void dogecoin_pubkey_get_hash1606(
    ffi.Pointer<dogecoin_pubkey> pubkey,
    ffi.Pointer<ffi.Uint8> hash160,
  ) {
    return _dogecoin_pubkey_get_hash1606(
      pubkey,
      hash160,
    );
  }

  late final _dogecoin_pubkey_get_hash1606Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_pubkey>,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_pubkey_get_hash160');
  late final _dogecoin_pubkey_get_hash1606 =
      _dogecoin_pubkey_get_hash1606Ptr.asFunction<
          void Function(
              ffi.Pointer<dogecoin_pubkey>, ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_pubkey_get_hex6(
    ffi.Pointer<dogecoin_pubkey> pubkey,
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.Int> strsize,
  ) {
    return _dogecoin_pubkey_get_hex6(
      pubkey,
      str,
      strsize,
    );
  }

  late final _dogecoin_pubkey_get_hex6Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_pubkey>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_pubkey_get_hex');
  late final _dogecoin_pubkey_get_hex6 =
      _dogecoin_pubkey_get_hex6Ptr.asFunction<
          int Function(ffi.Pointer<dogecoin_pubkey>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>();

  int dogecoin_key_sign_hash6(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<ffi.Uint8> hash,
    ffi.Pointer<ffi.UnsignedChar> sigout,
    ffi.Pointer<ffi.Int> outlen,
  ) {
    return _dogecoin_key_sign_hash6(
      privkey,
      hash,
      sigout,
      outlen,
    );
  }

  late final _dogecoin_key_sign_hash6Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_key_sign_hash');
  late final _dogecoin_key_sign_hash6 = _dogecoin_key_sign_hash6Ptr.asFunction<
      int Function(ffi.Pointer<dogecoin_key>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Int>)>();

  int dogecoin_key_sign_hash_compact6(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<ffi.Uint8> hash,
    ffi.Pointer<ffi.UnsignedChar> sigout,
    ffi.Pointer<ffi.Int> outlen,
  ) {
    return _dogecoin_key_sign_hash_compact6(
      privkey,
      hash,
      sigout,
      outlen,
    );
  }

  late final _dogecoin_key_sign_hash_compact6Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_key_sign_hash_compact');
  late final _dogecoin_key_sign_hash_compact6 =
      _dogecoin_key_sign_hash_compact6Ptr.asFunction<
          int Function(ffi.Pointer<dogecoin_key>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Int>)>();

  int dogecoin_key_sign_hash_compact_recoverable6(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<ffi.Uint8> hash,
    ffi.Pointer<ffi.UnsignedChar> sigout,
    ffi.Pointer<ffi.Int> outlen,
    ffi.Pointer<ffi.Int> recid,
  ) {
    return _dogecoin_key_sign_hash_compact_recoverable6(
      privkey,
      hash,
      sigout,
      outlen,
      recid,
    );
  }

  late final _dogecoin_key_sign_hash_compact_recoverable6Ptr = _lookup<
          ffi.NativeFunction<
              dogecoin_bool Function(
                  ffi.Pointer<dogecoin_key>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.UnsignedChar>,
                  ffi.Pointer<ffi.Int>,
                  ffi.Pointer<ffi.Int>)>>(
      'dogecoin_key_sign_hash_compact_recoverable');
  late final _dogecoin_key_sign_hash_compact_recoverable6 =
      _dogecoin_key_sign_hash_compact_recoverable6Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  int dogecoin_key_sign_recover_pubkey6(
    ffi.Pointer<ffi.UnsignedChar> sig,
    ffi.Pointer<ffi.Uint8> hash,
    int recid,
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_key_sign_recover_pubkey6(
      sig,
      hash,
      recid,
      pubkey,
    );
  }

  late final _dogecoin_key_sign_recover_pubkey6Ptr = _lookup<
          ffi.NativeFunction<
              dogecoin_bool Function(
                  ffi.Pointer<ffi.UnsignedChar>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Int,
                  ffi.Pointer<dogecoin_pubkey>)>>(
      'dogecoin_key_sign_recover_pubkey');
  late final _dogecoin_key_sign_recover_pubkey6 =
      _dogecoin_key_sign_recover_pubkey6Ptr.asFunction<
          int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Uint8>,
              int, ffi.Pointer<dogecoin_pubkey>)>();

  int dogecoin_pubkey_verify_sig6(
    ffi.Pointer<dogecoin_pubkey> pubkey,
    ffi.Pointer<ffi.Uint8> hash,
    ffi.Pointer<ffi.UnsignedChar> sigder,
    int len,
  ) {
    return _dogecoin_pubkey_verify_sig6(
      pubkey,
      hash,
      sigder,
      len,
    );
  }

  late final _dogecoin_pubkey_verify_sig6Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_pubkey>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('dogecoin_pubkey_verify_sig');
  late final _dogecoin_pubkey_verify_sig6 =
      _dogecoin_pubkey_verify_sig6Ptr.asFunction<
          int Function(ffi.Pointer<dogecoin_pubkey>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedChar>, int)>();

  int dogecoin_pubkey_getaddr_p2pkh6(
    ffi.Pointer<dogecoin_pubkey> pubkey,
    ffi.Pointer<dogecoin_chainparams> chain,
    ffi.Pointer<ffi.Char> addrout,
  ) {
    return _dogecoin_pubkey_getaddr_p2pkh6(
      pubkey,
      chain,
      addrout,
    );
  }

  late final _dogecoin_pubkey_getaddr_p2pkh6Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_pubkey>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Pointer<ffi.Char>)>>('dogecoin_pubkey_getaddr_p2pkh');
  late final _dogecoin_pubkey_getaddr_p2pkh6 =
      _dogecoin_pubkey_getaddr_p2pkh6Ptr.asFunction<
          int Function(ffi.Pointer<dogecoin_pubkey>,
              ffi.Pointer<dogecoin_chainparams>, ffi.Pointer<ffi.Char>)>();

  int dogecoin_script_copy_without_op_codeseperator5(
    ffi.Pointer<cstring> scriptin,
    ffi.Pointer<cstring> scriptout,
  ) {
    return _dogecoin_script_copy_without_op_codeseperator5(
      scriptin,
      scriptout,
    );
  }

  late final _dogecoin_script_copy_without_op_codeseperator5Ptr = _lookup<
          ffi.NativeFunction<
              dogecoin_bool Function(
                  ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>(
      'dogecoin_script_copy_without_op_codeseperator');
  late final _dogecoin_script_copy_without_op_codeseperator5 =
      _dogecoin_script_copy_without_op_codeseperator5Ptr.asFunction<
          int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  ffi.Pointer<dogecoin_script_op> dogecoin_script_op_new5() {
    return _dogecoin_script_op_new5();
  }

  late final _dogecoin_script_op_new5Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<dogecoin_script_op> Function()>>(
          'dogecoin_script_op_new');
  late final _dogecoin_script_op_new5 = _dogecoin_script_op_new5Ptr
      .asFunction<ffi.Pointer<dogecoin_script_op> Function()>();

  void dogecoin_script_op_free5(
    ffi.Pointer<dogecoin_script_op> script_op,
  ) {
    return _dogecoin_script_op_free5(
      script_op,
    );
  }

  late final _dogecoin_script_op_free5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<dogecoin_script_op>)>>('dogecoin_script_op_free');
  late final _dogecoin_script_op_free5 = _dogecoin_script_op_free5Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_script_op>)>();

  void dogecoin_script_op_free_cb5(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _dogecoin_script_op_free_cb5(
      data,
    );
  }

  late final _dogecoin_script_op_free_cb5Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'dogecoin_script_op_free_cb');
  late final _dogecoin_script_op_free_cb5 = _dogecoin_script_op_free_cb5Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int dogecoin_script_get_ops5(
    ffi.Pointer<cstring> script_in,
    ffi.Pointer<vector> ops_out,
  ) {
    return _dogecoin_script_get_ops5(
      script_in,
      ops_out,
    );
  }

  late final _dogecoin_script_get_ops5Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<cstring>,
              ffi.Pointer<vector>)>>('dogecoin_script_get_ops');
  late final _dogecoin_script_get_ops5 = _dogecoin_script_get_ops5Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<vector>)>();

  int dogecoin_script_classify_ops5(
    ffi.Pointer<vector> ops,
  ) {
    return _dogecoin_script_classify_ops5(
      ops,
    );
  }

  late final _dogecoin_script_classify_ops5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<vector>)>>(
          'dogecoin_script_classify_ops');
  late final _dogecoin_script_classify_ops5 = _dogecoin_script_classify_ops5Ptr
      .asFunction<int Function(ffi.Pointer<vector>)>();

  int dogecoin_script_classify5(
    ffi.Pointer<cstring> script,
    ffi.Pointer<vector> data_out,
  ) {
    return _dogecoin_script_classify5(
      script,
      data_out,
    );
  }

  late final _dogecoin_script_classify5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<cstring>,
              ffi.Pointer<vector>)>>('dogecoin_script_classify');
  late final _dogecoin_script_classify5 = _dogecoin_script_classify5Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<vector>)>();

  int dogecoin_encode_op_n5(
    int n,
  ) {
    return _dogecoin_encode_op_n5(
      n,
    );
  }

  late final _dogecoin_encode_op_n5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int)>>(
          'dogecoin_encode_op_n');
  late final _dogecoin_encode_op_n5 =
      _dogecoin_encode_op_n5Ptr.asFunction<int Function(int)>();

  void dogecoin_script_append_op5(
    ffi.Pointer<cstring> script_in,
    int op,
  ) {
    return _dogecoin_script_append_op5(
      script_in,
      op,
    );
  }

  late final _dogecoin_script_append_op5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cstring>, ffi.Int32)>>('dogecoin_script_append_op');
  late final _dogecoin_script_append_op5 = _dogecoin_script_append_op5Ptr
      .asFunction<void Function(ffi.Pointer<cstring>, int)>();

  void dogecoin_script_append_pushdata5(
    ffi.Pointer<cstring> script_in,
    ffi.Pointer<ffi.UnsignedChar> data,
    int datalen,
  ) {
    return _dogecoin_script_append_pushdata5(
      script_in,
      data,
      datalen,
    );
  }

  late final _dogecoin_script_append_pushdata5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('dogecoin_script_append_pushdata');
  late final _dogecoin_script_append_pushdata5 =
      _dogecoin_script_append_pushdata5Ptr.asFunction<
          void Function(
              ffi.Pointer<cstring>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int dogecoin_script_build_multisig5(
    ffi.Pointer<cstring> script_in,
    int required_signatures,
    ffi.Pointer<vector> pubkeys_chars,
  ) {
    return _dogecoin_script_build_multisig5(
      script_in,
      required_signatures,
      pubkeys_chars,
    );
  }

  late final _dogecoin_script_build_multisig5Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<cstring>, ffi.UnsignedInt,
              ffi.Pointer<vector>)>>('dogecoin_script_build_multisig');
  late final _dogecoin_script_build_multisig5 =
      _dogecoin_script_build_multisig5Ptr.asFunction<
          int Function(ffi.Pointer<cstring>, int, ffi.Pointer<vector>)>();

  int dogecoin_script_build_p2pkh5(
    ffi.Pointer<cstring> script,
    ffi.Pointer<ffi.Uint8> hash160,
  ) {
    return _dogecoin_script_build_p2pkh5(
      script,
      hash160,
    );
  }

  late final _dogecoin_script_build_p2pkh5Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<cstring>,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_script_build_p2pkh');
  late final _dogecoin_script_build_p2pkh5 = _dogecoin_script_build_p2pkh5Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_script_build_p2sh5(
    ffi.Pointer<cstring> script_in,
    ffi.Pointer<ffi.Uint8> hash160,
  ) {
    return _dogecoin_script_build_p2sh5(
      script_in,
      hash160,
    );
  }

  late final _dogecoin_script_build_p2sh5Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<cstring>,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_script_build_p2sh');
  late final _dogecoin_script_build_p2sh5 = _dogecoin_script_build_p2sh5Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_script_get_scripthash5(
    ffi.Pointer<cstring> script_in,
    ffi.Pointer<ffi.Uint8> scripthash,
  ) {
    return _dogecoin_script_get_scripthash5(
      script_in,
      scripthash,
    );
  }

  late final _dogecoin_script_get_scripthash5Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<cstring>,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_script_get_scripthash');
  late final _dogecoin_script_get_scripthash5 =
      _dogecoin_script_get_scripthash5Ptr.asFunction<
          int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<ffi.Char> dogecoin_tx_out_type_to_str5(
    int type,
  ) {
    return _dogecoin_tx_out_type_to_str5(
      type,
    );
  }

  late final _dogecoin_tx_out_type_to_str5Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'dogecoin_tx_out_type_to_str');
  late final _dogecoin_tx_out_type_to_str5 = _dogecoin_tx_out_type_to_str5Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  /// !p2pkh utilities
  int dogecoin_script_hash_to_p2pkh4(
    ffi.Pointer<dogecoin_tx_out> txout,
    ffi.Pointer<ffi.Char> p2pkh,
    int is_testnet,
  ) {
    return _dogecoin_script_hash_to_p2pkh4(
      txout,
      p2pkh,
      is_testnet,
    );
  }

  late final _dogecoin_script_hash_to_p2pkh4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<dogecoin_tx_out>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('dogecoin_script_hash_to_p2pkh');
  late final _dogecoin_script_hash_to_p2pkh4 =
      _dogecoin_script_hash_to_p2pkh4Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx_out>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> dogecoin_p2pkh_to_script_hash4(
    ffi.Pointer<ffi.Char> p2pkh,
  ) {
    return _dogecoin_p2pkh_to_script_hash4(
      p2pkh,
    );
  }

  late final _dogecoin_p2pkh_to_script_hash4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('dogecoin_p2pkh_to_script_hash');
  late final _dogecoin_p2pkh_to_script_hash4 =
      _dogecoin_p2pkh_to_script_hash4Ptr
          .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> dogecoin_private_key_wif_to_script_hash4(
    ffi.Pointer<ffi.Char> private_key_wif,
  ) {
    return _dogecoin_private_key_wif_to_script_hash4(
      private_key_wif,
    );
  }

  late final _dogecoin_private_key_wif_to_script_hash4Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>(
      'dogecoin_private_key_wif_to_script_hash');
  late final _dogecoin_private_key_wif_to_script_hash4 =
      _dogecoin_private_key_wif_to_script_hash4Ptr
          .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  /// !create a new tx input
  ffi.Pointer<dogecoin_tx_in> dogecoin_tx_in_new4() {
    return _dogecoin_tx_in_new4();
  }

  late final _dogecoin_tx_in_new4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<dogecoin_tx_in> Function()>>(
          'dogecoin_tx_in_new');
  late final _dogecoin_tx_in_new4 = _dogecoin_tx_in_new4Ptr
      .asFunction<ffi.Pointer<dogecoin_tx_in> Function()>();

  void dogecoin_tx_in_free4(
    ffi.Pointer<dogecoin_tx_in> tx_in,
  ) {
    return _dogecoin_tx_in_free4(
      tx_in,
    );
  }

  late final _dogecoin_tx_in_free4Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_tx_in>)>>(
      'dogecoin_tx_in_free');
  late final _dogecoin_tx_in_free4 = _dogecoin_tx_in_free4Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_tx_in>)>();

  void dogecoin_tx_in_copy4(
    ffi.Pointer<dogecoin_tx_in> dest,
    ffi.Pointer<dogecoin_tx_in> src,
  ) {
    return _dogecoin_tx_in_copy4(
      dest,
      src,
    );
  }

  late final _dogecoin_tx_in_copy4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_tx_in>,
              ffi.Pointer<dogecoin_tx_in>)>>('dogecoin_tx_in_copy');
  late final _dogecoin_tx_in_copy4 = _dogecoin_tx_in_copy4Ptr.asFunction<
      void Function(
          ffi.Pointer<dogecoin_tx_in>, ffi.Pointer<dogecoin_tx_in>)>();

  int dogecoin_tx_in_deserialize4(
    ffi.Pointer<dogecoin_tx_in> tx_in,
    ffi.Pointer<const_buffer> buf,
  ) {
    return _dogecoin_tx_in_deserialize4(
      tx_in,
      buf,
    );
  }

  late final _dogecoin_tx_in_deserialize4Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_tx_in>,
              ffi.Pointer<const_buffer>)>>('dogecoin_tx_in_deserialize');
  late final _dogecoin_tx_in_deserialize4 =
      _dogecoin_tx_in_deserialize4Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx_in>, ffi.Pointer<const_buffer>)>();

  void dogecoin_tx_in_serialize4(
    ffi.Pointer<cstring> s,
    ffi.Pointer<dogecoin_tx_in> tx_in,
  ) {
    return _dogecoin_tx_in_serialize4(
      s,
      tx_in,
    );
  }

  late final _dogecoin_tx_in_serialize4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cstring>,
              ffi.Pointer<dogecoin_tx_in>)>>('dogecoin_tx_in_serialize');
  late final _dogecoin_tx_in_serialize4 =
      _dogecoin_tx_in_serialize4Ptr.asFunction<
          void Function(ffi.Pointer<cstring>, ffi.Pointer<dogecoin_tx_in>)>();

  /// !create a new tx output
  ffi.Pointer<dogecoin_tx_out> dogecoin_tx_out_new4() {
    return _dogecoin_tx_out_new4();
  }

  late final _dogecoin_tx_out_new4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<dogecoin_tx_out> Function()>>(
          'dogecoin_tx_out_new');
  late final _dogecoin_tx_out_new4 = _dogecoin_tx_out_new4Ptr
      .asFunction<ffi.Pointer<dogecoin_tx_out> Function()>();

  void dogecoin_tx_out_free4(
    ffi.Pointer<dogecoin_tx_out> tx_out,
  ) {
    return _dogecoin_tx_out_free4(
      tx_out,
    );
  }

  late final _dogecoin_tx_out_free4Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_tx_out>)>>(
      'dogecoin_tx_out_free');
  late final _dogecoin_tx_out_free4 = _dogecoin_tx_out_free4Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_tx_out>)>();

  void dogecoin_tx_out_copy4(
    ffi.Pointer<dogecoin_tx_out> dest,
    ffi.Pointer<dogecoin_tx_out> src,
  ) {
    return _dogecoin_tx_out_copy4(
      dest,
      src,
    );
  }

  late final _dogecoin_tx_out_copy4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_tx_out>,
              ffi.Pointer<dogecoin_tx_out>)>>('dogecoin_tx_out_copy');
  late final _dogecoin_tx_out_copy4 = _dogecoin_tx_out_copy4Ptr.asFunction<
      void Function(
          ffi.Pointer<dogecoin_tx_out>, ffi.Pointer<dogecoin_tx_out>)>();

  int dogecoin_tx_out_deserialize4(
    ffi.Pointer<dogecoin_tx_out> tx_out,
    ffi.Pointer<const_buffer> buf,
  ) {
    return _dogecoin_tx_out_deserialize4(
      tx_out,
      buf,
    );
  }

  late final _dogecoin_tx_out_deserialize4Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_tx_out>,
              ffi.Pointer<const_buffer>)>>('dogecoin_tx_out_deserialize');
  late final _dogecoin_tx_out_deserialize4 =
      _dogecoin_tx_out_deserialize4Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx_out>, ffi.Pointer<const_buffer>)>();

  void dogecoin_tx_out_serialize4(
    ffi.Pointer<cstring> s,
    ffi.Pointer<dogecoin_tx_out> tx_out,
  ) {
    return _dogecoin_tx_out_serialize4(
      s,
      tx_out,
    );
  }

  late final _dogecoin_tx_out_serialize4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cstring>,
              ffi.Pointer<dogecoin_tx_out>)>>('dogecoin_tx_out_serialize');
  late final _dogecoin_tx_out_serialize4 =
      _dogecoin_tx_out_serialize4Ptr.asFunction<
          void Function(ffi.Pointer<cstring>, ffi.Pointer<dogecoin_tx_out>)>();

  /// !create a new tx input
  ffi.Pointer<dogecoin_tx> dogecoin_tx_new4() {
    return _dogecoin_tx_new4();
  }

  late final _dogecoin_tx_new4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<dogecoin_tx> Function()>>(
          'dogecoin_tx_new');
  late final _dogecoin_tx_new4 =
      _dogecoin_tx_new4Ptr.asFunction<ffi.Pointer<dogecoin_tx> Function()>();

  void dogecoin_tx_free4(
    ffi.Pointer<dogecoin_tx> tx,
  ) {
    return _dogecoin_tx_free4(
      tx,
    );
  }

  late final _dogecoin_tx_free4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_tx>)>>(
          'dogecoin_tx_free');
  late final _dogecoin_tx_free4 = _dogecoin_tx_free4Ptr
      .asFunction<void Function(ffi.Pointer<dogecoin_tx>)>();

  void dogecoin_tx_copy4(
    ffi.Pointer<dogecoin_tx> dest,
    ffi.Pointer<dogecoin_tx> src,
  ) {
    return _dogecoin_tx_copy4(
      dest,
      src,
    );
  }

  late final _dogecoin_tx_copy4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<dogecoin_tx>)>>('dogecoin_tx_copy');
  late final _dogecoin_tx_copy4 = _dogecoin_tx_copy4Ptr.asFunction<
      void Function(ffi.Pointer<dogecoin_tx>, ffi.Pointer<dogecoin_tx>)>();

  /// !deserialize/parse a p2p serialized dogecoin transaction
  int dogecoin_tx_deserialize4(
    ffi.Pointer<ffi.UnsignedChar> tx_serialized,
    int inlen,
    ffi.Pointer<dogecoin_tx> tx,
    ffi.Pointer<ffi.Int> consumed_length,
  ) {
    return _dogecoin_tx_deserialize4(
      tx_serialized,
      inlen,
      tx,
      consumed_length,
    );
  }

  late final _dogecoin_tx_deserialize4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_tx_deserialize');
  late final _dogecoin_tx_deserialize4 =
      _dogecoin_tx_deserialize4Ptr.asFunction<
          int Function(ffi.Pointer<ffi.UnsignedChar>, int,
              ffi.Pointer<dogecoin_tx>, ffi.Pointer<ffi.Int>)>();

  /// !serialize a dogecoin data structure into a p2p serialized buffer
  void dogecoin_tx_serialize4(
    ffi.Pointer<cstring> s,
    ffi.Pointer<dogecoin_tx> tx,
  ) {
    return _dogecoin_tx_serialize4(
      s,
      tx,
    );
  }

  late final _dogecoin_tx_serialize4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cstring>,
              ffi.Pointer<dogecoin_tx>)>>('dogecoin_tx_serialize');
  late final _dogecoin_tx_serialize4 = _dogecoin_tx_serialize4Ptr.asFunction<
      void Function(ffi.Pointer<cstring>, ffi.Pointer<dogecoin_tx>)>();

  void dogecoin_tx_hash4(
    ffi.Pointer<dogecoin_tx> tx,
    ffi.Pointer<ffi.Uint8> hashout,
  ) {
    return _dogecoin_tx_hash4(
      tx,
      hashout,
    );
  }

  late final _dogecoin_tx_hash4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_tx_hash');
  late final _dogecoin_tx_hash4 = _dogecoin_tx_hash4Ptr.asFunction<
      void Function(ffi.Pointer<dogecoin_tx>, ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_tx_sighash4(
    ffi.Pointer<dogecoin_tx> tx_to,
    ffi.Pointer<cstring> fromPubKey,
    int in_num,
    int hashtype,
    ffi.Pointer<ffi.Uint8> hash,
  ) {
    return _dogecoin_tx_sighash4(
      tx_to,
      fromPubKey,
      in_num,
      hashtype,
      hash,
    );
  }

  late final _dogecoin_tx_sighash4Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<cstring>,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_tx_sighash');
  late final _dogecoin_tx_sighash4 = _dogecoin_tx_sighash4Ptr.asFunction<
      int Function(ffi.Pointer<dogecoin_tx>, ffi.Pointer<cstring>, int, int,
          ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_tx_add_address_out4(
    ffi.Pointer<dogecoin_tx> tx,
    ffi.Pointer<dogecoin_chainparams> chain,
    int amount,
    ffi.Pointer<ffi.Char> address,
  ) {
    return _dogecoin_tx_add_address_out4(
      tx,
      chain,
      amount,
      address,
    );
  }

  late final _dogecoin_tx_add_address_out4Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<dogecoin_chainparams>,
              ffi.Int64,
              ffi.Pointer<ffi.Char>)>>('dogecoin_tx_add_address_out');
  late final _dogecoin_tx_add_address_out4 =
      _dogecoin_tx_add_address_out4Ptr.asFunction<
          int Function(ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<dogecoin_chainparams>, int, ffi.Pointer<ffi.Char>)>();

  int dogecoin_tx_add_p2sh_hash160_out4(
    ffi.Pointer<dogecoin_tx> tx,
    int amount,
    ffi.Pointer<ffi.Uint8> hash160,
  ) {
    return _dogecoin_tx_add_p2sh_hash160_out4(
      tx,
      amount,
      hash160,
    );
  }

  late final _dogecoin_tx_add_p2sh_hash160_out4Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_tx>, ffi.Int64,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_tx_add_p2sh_hash160_out');
  late final _dogecoin_tx_add_p2sh_hash160_out4 =
      _dogecoin_tx_add_p2sh_hash160_out4Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx>, int, ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_tx_add_p2pkh_hash160_out4(
    ffi.Pointer<dogecoin_tx> tx,
    int amount,
    ffi.Pointer<ffi.Uint8> hash160,
  ) {
    return _dogecoin_tx_add_p2pkh_hash160_out4(
      tx,
      amount,
      hash160,
    );
  }

  late final _dogecoin_tx_add_p2pkh_hash160_out4Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_tx>, ffi.Int64,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_tx_add_p2pkh_hash160_out');
  late final _dogecoin_tx_add_p2pkh_hash160_out4 =
      _dogecoin_tx_add_p2pkh_hash160_out4Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx>, int, ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_tx_add_p2pkh_out4(
    ffi.Pointer<dogecoin_tx> tx,
    int amount,
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_tx_add_p2pkh_out4(
      tx,
      amount,
      pubkey,
    );
  }

  late final _dogecoin_tx_add_p2pkh_out4Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_tx>, ffi.Int64,
              ffi.Pointer<dogecoin_pubkey>)>>('dogecoin_tx_add_p2pkh_out');
  late final _dogecoin_tx_add_p2pkh_out4 =
      _dogecoin_tx_add_p2pkh_out4Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx>, int, ffi.Pointer<dogecoin_pubkey>)>();

  int dogecoin_tx_add_data_out4(
    ffi.Pointer<dogecoin_tx> tx,
    int amount,
    ffi.Pointer<ffi.Uint8> data,
    int datalen,
  ) {
    return _dogecoin_tx_add_data_out4(
      tx,
      amount,
      data,
      datalen,
    );
  }

  late final _dogecoin_tx_add_data_out4Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_tx>, ffi.Int64,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('dogecoin_tx_add_data_out');
  late final _dogecoin_tx_add_data_out4 =
      _dogecoin_tx_add_data_out4Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx>, int, ffi.Pointer<ffi.Uint8>, int)>();

  int dogecoin_tx_add_puzzle_out4(
    ffi.Pointer<dogecoin_tx> tx,
    int amount,
    ffi.Pointer<ffi.Uint8> puzzle,
    int puzzlelen,
  ) {
    return _dogecoin_tx_add_puzzle_out4(
      tx,
      amount,
      puzzle,
      puzzlelen,
    );
  }

  late final _dogecoin_tx_add_puzzle_out4Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(ffi.Pointer<dogecoin_tx>, ffi.Int64,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('dogecoin_tx_add_puzzle_out');
  late final _dogecoin_tx_add_puzzle_out4 =
      _dogecoin_tx_add_puzzle_out4Ptr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx>, int, ffi.Pointer<ffi.Uint8>, int)>();

  int dogecoin_tx_outpoint_is_null4(
    ffi.Pointer<dogecoin_tx_outpoint> tx,
  ) {
    return _dogecoin_tx_outpoint_is_null4(
      tx,
    );
  }

  late final _dogecoin_tx_outpoint_is_null4Ptr = _lookup<
          ffi.NativeFunction<
              dogecoin_bool Function(ffi.Pointer<dogecoin_tx_outpoint>)>>(
      'dogecoin_tx_outpoint_is_null');
  late final _dogecoin_tx_outpoint_is_null4 = _dogecoin_tx_outpoint_is_null4Ptr
      .asFunction<int Function(ffi.Pointer<dogecoin_tx_outpoint>)>();

  int dogecoin_tx_is_coinbase4(
    ffi.Pointer<dogecoin_tx> tx,
  ) {
    return _dogecoin_tx_is_coinbase4(
      tx,
    );
  }

  late final _dogecoin_tx_is_coinbase4Ptr = _lookup<
          ffi.NativeFunction<dogecoin_bool Function(ffi.Pointer<dogecoin_tx>)>>(
      'dogecoin_tx_is_coinbase');
  late final _dogecoin_tx_is_coinbase4 = _dogecoin_tx_is_coinbase4Ptr
      .asFunction<int Function(ffi.Pointer<dogecoin_tx>)>();

  ffi.Pointer<ffi.Char> dogecoin_tx_sign_result_to_str4(
    int result,
  ) {
    return _dogecoin_tx_sign_result_to_str4(
      result,
    );
  }

  late final _dogecoin_tx_sign_result_to_str4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'dogecoin_tx_sign_result_to_str');
  late final _dogecoin_tx_sign_result_to_str4 =
      _dogecoin_tx_sign_result_to_str4Ptr
          .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int dogecoin_tx_sign_input4(
    ffi.Pointer<dogecoin_tx> tx_in_out,
    ffi.Pointer<cstring> script,
    ffi.Pointer<dogecoin_key> privkey,
    int inputindex,
    int sighashtype,
    ffi.Pointer<ffi.Uint8> sigcompact_out,
    ffi.Pointer<ffi.Uint8> sigder_out,
    ffi.Pointer<ffi.Int> sigder_len,
  ) {
    return _dogecoin_tx_sign_input4(
      tx_in_out,
      script,
      privkey,
      inputindex,
      sighashtype,
      sigcompact_out,
      sigder_out,
      sigder_len,
    );
  }

  late final _dogecoin_tx_sign_input4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<dogecoin_tx>,
              ffi.Pointer<cstring>,
              ffi.Pointer<dogecoin_key>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_tx_sign_input');
  late final _dogecoin_tx_sign_input4 = _dogecoin_tx_sign_input4Ptr.asFunction<
      int Function(
          ffi.Pointer<dogecoin_tx>,
          ffi.Pointer<cstring>,
          ffi.Pointer<dogecoin_key>,
          int,
          int,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Int>)>();

  int remove28(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove28(
      __filename,
    );
  }

  late final _remove28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove28 =
      _remove28Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename28(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename28(
      __old,
      __new,
    );
  }

  late final _rename28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename28 = _rename28Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat28(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat28(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameat28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat28 = _renameat28Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose28(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose28(
      __stream,
    );
  }

  late final _fclose28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose28 =
      _fclose28Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile28() {
    return _tmpfile28();
  }

  late final _tmpfile28Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile28 =
      _tmpfile28Ptr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam28(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam28(
      arg0,
    );
  }

  late final _tmpnam28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam28 = _tmpnam28Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r28(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r28(
      __s,
    );
  }

  late final _tmpnam_r28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r28 = _tmpnam_r28Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam28(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam28(
      __dir,
      __pfx,
    );
  }

  late final _tempnam28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam28 = _tempnam28Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush28(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush28(
      __stream,
    );
  }

  late final _fflush28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush28 =
      _fflush28Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked28(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked28(
      __stream,
    );
  }

  late final _fflush_unlocked28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked28 =
      _fflush_unlocked28Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen28(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen28(
      __filename,
      __modes,
    );
  }

  late final _fopen28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen28 = _fopen28Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen28(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen28(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopen28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen28 = _freopen28Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen28(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen28(
      __fd,
      __modes,
    );
  }

  late final _fdopen28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen28 = _fdopen28Ptr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen28(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen28(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopen28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen28 = _fmemopen28Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream28(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Int> __sizeloc,
  ) {
    return _open_memstream28(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstream28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('open_memstream');
  late final _open_memstream28 = _open_memstream28Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void setbuf28(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf28(
      __stream,
      __buf,
    );
  }

  late final _setbuf28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf28 = _setbuf28Ptr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf28(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf28(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbuf28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('setvbuf');
  late final _setvbuf28 = _setvbuf28Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer28(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer28(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbuffer28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer28 = _setbuffer28Ptr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf28(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf28(
      __stream,
    );
  }

  late final _setlinebuf28Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf28 =
      _setlinebuf28Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf28(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf28(
      __stream,
      __format,
    );
  }

  late final _fprintf28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf28 = _fprintf28Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf28(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf28(
      __format,
    );
  }

  late final _printf28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf28 =
      _printf28Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf28(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf28(
      __s,
      __format,
    );
  }

  late final _sprintf28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf28 = _sprintf28Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf28(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfprintf28(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintf28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfprintf');
  late final _vfprintf28 = _vfprintf28Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vprintf28(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vprintf28(
      __format,
      __arg,
    );
  }

  late final _vprintf28Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vprintf');
  late final _vprintf28 =
      _vprintf28Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsprintf28(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsprintf28(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintf28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsprintf');
  late final _vsprintf28 = _vsprintf28Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int snprintf28(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf28(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintf28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf28 = _snprintf28Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf28(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsnprintf28(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintf28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('vsnprintf');
  late final _vsnprintf28 = _vsnprintf28Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int vdprintf28(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    int __arg,
  ) {
    return _vdprintf28(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintf28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('vdprintf');
  late final _vdprintf28 = _vdprintf28Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int dprintf28(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf28(
      __fd,
      __fmt,
    );
  }

  late final _dprintf28Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf28 =
      _dprintf28Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf56(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf56(
      __stream,
      __format,
    );
  }

  late final _fscanf56Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf56 = _fscanf56Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf56(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf56(
      __format,
    );
  }

  late final _scanf56Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf56 =
      _scanf56Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf56(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf56(
      __s,
      __format,
    );
  }

  late final _sscanf56Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf56 = _sscanf56Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fscanf57(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf57(
      __stream,
      __format,
    );
  }

  late final _fscanf57Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf57 = _fscanf57Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf57(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf57(
      __format,
    );
  }

  late final _scanf57Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf57 =
      _scanf57Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf57(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf57(
      __s,
      __format,
    );
  }

  late final _sscanf57Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf57 = _sscanf57Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf56(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf56(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf56Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf56 = _vfscanf56Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf56(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf56(
      __format,
      __arg,
    );
  }

  late final _vscanf56Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf56 =
      _vscanf56Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf56(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf56(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf56Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf56 = _vsscanf56Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int vfscanf57(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf57(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf57Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf57 = _vfscanf57Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf57(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf57(
      __format,
      __arg,
    );
  }

  late final _vscanf57Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf57 =
      _vscanf57Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf57(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf57(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf57Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf57 = _vsscanf57Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fgetc28(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc28(
      __stream,
    );
  }

  late final _fgetc28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc28 =
      _fgetc28Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc28(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc28(
      __stream,
    );
  }

  late final _getc28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc28 = _getc28Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar28() {
    return _getchar28();
  }

  late final _getchar28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar28 = _getchar28Ptr.asFunction<int Function()>();

  int getc_unlocked28(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked28(
      __stream,
    );
  }

  late final _getc_unlocked28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked28 =
      _getc_unlocked28Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked28() {
    return _getchar_unlocked28();
  }

  late final _getchar_unlocked28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked28 =
      _getchar_unlocked28Ptr.asFunction<int Function()>();

  int fgetc_unlocked28(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked28(
      __stream,
    );
  }

  late final _fgetc_unlocked28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked28 =
      _fgetc_unlocked28Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc28(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc28(
      __c,
      __stream,
    );
  }

  late final _fputc28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc28 =
      _fputc28Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc28(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc28(
      __c,
      __stream,
    );
  }

  late final _putc28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc28 =
      _putc28Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar28(
    int __c,
  ) {
    return _putchar28(
      __c,
    );
  }

  late final _putchar28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar28 = _putchar28Ptr.asFunction<int Function(int)>();

  int fputc_unlocked28(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked28(
      __c,
      __stream,
    );
  }

  late final _fputc_unlocked28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked28 =
      _fputc_unlocked28Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked28(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked28(
      __c,
      __stream,
    );
  }

  late final _putc_unlocked28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked28 =
      _putc_unlocked28Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked28(
    int __c,
  ) {
    return _putchar_unlocked28(
      __c,
    );
  }

  late final _putchar_unlocked28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked28 =
      _putchar_unlocked28Ptr.asFunction<int Function(int)>();

  int getw28(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw28(
      __stream,
    );
  }

  late final _getw28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw28 = _getw28Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw28(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw28(
      __w,
      __stream,
    );
  }

  late final _putw28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw28 =
      _putw28Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets28(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets28(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgets28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets28 = _fgets28Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim28(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim28(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelim28Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim28 = ___getdelim28Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getdelim28(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim28(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelim28Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim28 = _getdelim28Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getline28(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline28(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getline28Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<FILE>)>>('getline');
  late final _getline28 = _getline28Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<FILE>)>();

  int fputs28(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs28(
      __s,
      __stream,
    );
  }

  late final _fputs28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs28 = _fputs28Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts28(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts28(
      __s,
    );
  }

  late final _puts28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts28 =
      _puts28Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc28(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc28(
      __c,
      __stream,
    );
  }

  late final _ungetc28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc28 =
      _ungetc28Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread28(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread28(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread28 = _fread28Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite28(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite28(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwrite28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite28 = _fwrite28Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked28(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked28(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlocked28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked28 = _fread_unlocked28Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked28(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked28(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlocked28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked28 = _fwrite_unlocked28Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek28(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek28(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseek28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek28 =
      _fseek28Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell28(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell28(
      __stream,
    );
  }

  late final _ftell28Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell28 =
      _ftell28Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind28(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind28(
      __stream,
    );
  }

  late final _rewind28Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind28 =
      _rewind28Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko28(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko28(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseeko28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko28 =
      _fseeko28Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello28(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello28(
      __stream,
    );
  }

  late final _ftello28Ptr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello28 =
      _ftello28Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos28(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos28(
      __stream,
      __pos,
    );
  }

  late final _fgetpos28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos28 = _fgetpos28Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos28(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos28(
      __stream,
      __pos,
    );
  }

  late final _fsetpos28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos28 = _fsetpos28Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr28(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr28(
      __stream,
    );
  }

  late final _clearerr28Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr28 =
      _clearerr28Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof28(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof28(
      __stream,
    );
  }

  late final _feof28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof28 = _feof28Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror28(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror28(
      __stream,
    );
  }

  late final _ferror28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror28 =
      _ferror28Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked28(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked28(
      __stream,
    );
  }

  late final _clearerr_unlocked28Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked28 =
      _clearerr_unlocked28Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked28(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked28(
      __stream,
    );
  }

  late final _feof_unlocked28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked28 =
      _feof_unlocked28Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked28(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked28(
      __stream,
    );
  }

  late final _ferror_unlocked28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked28 =
      _ferror_unlocked28Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror28(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror28(
      __s,
    );
  }

  late final _perror28Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror28 =
      _perror28Ptr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno28(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno28(
      __stream,
    );
  }

  late final _fileno28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno28 =
      _fileno28Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked28(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked28(
      __stream,
    );
  }

  late final _fileno_unlocked28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked28 =
      _fileno_unlocked28Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose28(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose28(
      __stream,
    );
  }

  late final _pclose28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose28 =
      _pclose28Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen28(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen28(
      __command,
      __modes,
    );
  }

  late final _popen28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen28 = _popen28Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid28(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid28(
      __s,
    );
  }

  late final _ctermid28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid28 = _ctermid28Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile28(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile28(
      __stream,
    );
  }

  late final _flockfile28Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile28 =
      _flockfile28Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile28(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile28(
      __stream,
    );
  }

  late final _ftrylockfile28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile28 =
      _ftrylockfile28Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile28(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile28(
      __stream,
    );
  }

  late final _funlockfile28Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile28 =
      _funlockfile28Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow28(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow28(
      arg0,
    );
  }

  late final ___uflow28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow28 =
      ___uflow28Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow28(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow28(
      arg0,
      arg1,
    );
  }

  late final ___overflow28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow28 =
      ___overflow28Ptr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __ctype_get_mb_cur_max28() {
    return ___ctype_get_mb_cur_max28();
  }

  late final ___ctype_get_mb_cur_max28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max28 =
      ___ctype_get_mb_cur_max28Ptr.asFunction<int Function()>();

  double atof28(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof28(
      __nptr,
    );
  }

  late final _atof28Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof28 =
      _atof28Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi28(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi28(
      __nptr,
    );
  }

  late final _atoi28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi28 =
      _atoi28Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol28(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol28(
      __nptr,
    );
  }

  late final _atol28Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol28 =
      _atol28Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll28(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll28(
      __nptr,
    );
  }

  late final _atoll28Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll28 =
      _atoll28Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod28(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod28(
      __nptr,
      __endptr,
    );
  }

  late final _strtod28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod28 = _strtod28Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof28(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof28(
      __nptr,
      __endptr,
    );
  }

  late final _strtof28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof28 = _strtof28Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol28(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol28(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol28 = _strtol28Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul28(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul28(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul28 = _strtoul28Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq28(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq28(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq28 = _strtoq28Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq28(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq28(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq28 = _strtouq28Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll28(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll28(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll28 = _strtoll28Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull28(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull28(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull28 = _strtoull28Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a28(
    int __n,
  ) {
    return _l64a28(
      __n,
    );
  }

  late final _l64a28Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a28 =
      _l64a28Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l28(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l28(
      __s,
    );
  }

  late final _a64l28Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l28 =
      _a64l28Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select28(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select28(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select28 = _select28Ptr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect28(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect28(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect28 = _pselect28Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random28() {
    return _random28();
  }

  late final _random28Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random28 = _random28Ptr.asFunction<int Function()>();

  void srandom28(
    int __seed,
  ) {
    return _srandom28(
      __seed,
    );
  }

  late final _srandom28Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom28 = _srandom28Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate28(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate28(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int)>>('initstate');
  late final _initstate28 = _initstate28Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate28(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate28(
      __statebuf,
    );
  }

  late final _setstate28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate28 = _setstate28Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r28(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r28(
      __buf,
      __result,
    );
  }

  late final _random_r28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r28 = _random_r28Ptr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r28(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r28(
      __seed,
      __buf,
    );
  }

  late final _srandom_r28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r28 =
      _srandom_r28Ptr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r28(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r28(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r28 = _initstate_r28Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r28(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r28(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r28 = _setstate_r28Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand28() {
    return _rand28();
  }

  late final _rand28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand28 = _rand28Ptr.asFunction<int Function()>();

  void srand28(
    int __seed,
  ) {
    return _srand28(
      __seed,
    );
  }

  late final _srand28Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand28 = _srand28Ptr.asFunction<void Function(int)>();

  int rand_r28(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r28(
      __seed,
    );
  }

  late final _rand_r28Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r28 =
      _rand_r28Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand4828() {
    return _drand4828();
  }

  late final _drand4828Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand4828 = _drand4828Ptr.asFunction<double Function()>();

  double erand4828(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand4828(
      __xsubi,
    );
  }

  late final _erand4828Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand4828 = _erand4828Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand4828() {
    return _lrand4828();
  }

  late final _lrand4828Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand4828 = _lrand4828Ptr.asFunction<int Function()>();

  int nrand4828(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand4828(
      __xsubi,
    );
  }

  late final _nrand4828Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand4828 =
      _nrand4828Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand4828() {
    return _mrand4828();
  }

  late final _mrand4828Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand4828 = _mrand4828Ptr.asFunction<int Function()>();

  int jrand4828(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand4828(
      __xsubi,
    );
  }

  late final _jrand4828Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand4828 =
      _jrand4828Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand4828(
    int __seedval,
  ) {
    return _srand4828(
      __seedval,
    );
  }

  late final _srand4828Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand4828 = _srand4828Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed4828(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed4828(
      __seed16v,
    );
  }

  late final _seed4828Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed4828 = _seed4828Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong4828(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong4828(
      __param,
    );
  }

  late final _lcong4828Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong4828 =
      _lcong4828Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r28(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r28(
      __buffer,
      __result,
    );
  }

  late final _drand48_r28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r28 = _drand48_r28Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r28(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r28(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r28 = _erand48_r28Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r28(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r28(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r28 = _lrand48_r28Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r28(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r28(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r28 = _nrand48_r28Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r28(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r28(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r28 = _mrand48_r28Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r28(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r28(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r28 = _jrand48_r28Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r28(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r28(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r28 = _srand48_r28Ptr
      .asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r28(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r28(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r28 = _seed48_r28Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r28(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r28(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r28 = _lcong48_r28Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int arc4random28() {
    return _arc4random28();
  }

  late final _arc4random28Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random28 = _arc4random28Ptr.asFunction<int Function()>();

  void arc4random_buf28(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf28(
      __buf,
      __size,
    );
  }

  late final _arc4random_buf28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('arc4random_buf');
  late final _arc4random_buf28 = _arc4random_buf28Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform28(
    int __upper_bound,
  ) {
    return _arc4random_uniform28(
      __upper_bound,
    );
  }

  late final _arc4random_uniform28Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
          'arc4random_uniform');
  late final _arc4random_uniform28 =
      _arc4random_uniform28Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc28(
    int __size,
  ) {
    return _malloc28(
      __size,
    );
  }

  late final _malloc28Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'malloc');
  late final _malloc28 =
      _malloc28Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc28(
    int __nmemb,
    int __size,
  ) {
    return _calloc28(
      __nmemb,
      __size,
    );
  }

  late final _calloc28Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'calloc');
  late final _calloc28 =
      _calloc28Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc28(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc28(
      __ptr,
      __size,
    );
  }

  late final _realloc28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('realloc');
  late final _realloc28 = _realloc28Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free28(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free28(
      __ptr,
    );
  }

  late final _free28Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free28 =
      _free28Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray56(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray56(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray56Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray56 = _reallocarray56Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray57(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray57(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray57Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray57 = _reallocarray57Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca28(
    int __size,
  ) {
    return _alloca28(
      __size,
    );
  }

  late final _alloca28Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'alloca');
  late final _alloca28 =
      _alloca28Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc28(
    int __size,
  ) {
    return _valloc28(
      __size,
    );
  }

  late final _valloc28Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'valloc');
  late final _valloc28 =
      _valloc28Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign28(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign28(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int,
              ffi.Int)>>('posix_memalign');
  late final _posix_memalign28 = _posix_memalign28Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc28(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc28(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc28Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'aligned_alloc');
  late final _aligned_alloc28 = _aligned_alloc28Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort28() {
    return _abort28();
  }

  late final _abort28Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort28 = _abort28Ptr.asFunction<void Function()>();

  int atexit28(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit28(
      __func,
    );
  }

  late final _atexit28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit28 = _atexit28Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit28(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit28(
      __func,
    );
  }

  late final _at_quick_exit28Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit28 = _at_quick_exit28Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit28(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit28(
      __func,
      __arg,
    );
  }

  late final _on_exit28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit28 = _on_exit28Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit28(
    int __status,
  ) {
    return _exit28(
      __status,
    );
  }

  late final _exit28Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit28 = _exit28Ptr.asFunction<void Function(int)>();

  void quick_exit28(
    int __status,
  ) {
    return _quick_exit28(
      __status,
    );
  }

  late final _quick_exit28Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit28 = _quick_exit28Ptr.asFunction<void Function(int)>();

  void _Exit28(
    int __status,
  ) {
    return __Exit28(
      __status,
    );
  }

  late final __Exit28Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit28 = __Exit28Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv28(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv28(
      __name,
    );
  }

  late final _getenv28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv28 = _getenv28Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv28(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv28(
      __string,
    );
  }

  late final _putenv28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv28 =
      _putenv28Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv28(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv28(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv28 = _setenv28Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv28(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv28(
      __name,
    );
  }

  late final _unsetenv28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv28 =
      _unsetenv28Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv28() {
    return _clearenv28();
  }

  late final _clearenv28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv28 = _clearenv28Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp28(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp28(
      __template,
    );
  }

  late final _mktemp28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp28 = _mktemp28Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp28(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp28(
      __template,
    );
  }

  late final _mkstemp28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp28 =
      _mkstemp28Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps28(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps28(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps28Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps28 =
      _mkstemps28Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp28(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp28(
      __template,
    );
  }

  late final _mkdtemp28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp28 = _mkdtemp28Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system28(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system28(
      __command,
    );
  }

  late final _system28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system28 =
      _system28Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath28(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath28(
      __name,
      __resolved,
    );
  }

  late final _realpath28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath28 = _realpath28Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch28(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch28(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              __compar_fn_t)>>('bsearch');
  late final _bsearch28 = _bsearch28Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort28(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort28(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              __compar_fn_t)>>('qsort');
  late final _qsort28 = _qsort28Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs28(
    int __x,
  ) {
    return _abs28(
      __x,
    );
  }

  late final _abs28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs28 = _abs28Ptr.asFunction<int Function(int)>();

  int labs28(
    int __x,
  ) {
    return _labs28(
      __x,
    );
  }

  late final _labs28Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs28 = _labs28Ptr.asFunction<int Function(int)>();

  int llabs28(
    int __x,
  ) {
    return _llabs28(
      __x,
    );
  }

  late final _llabs28Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs28 = _llabs28Ptr.asFunction<int Function(int)>();

  div_t div28(
    int __numer,
    int __denom,
  ) {
    return _div28(
      __numer,
      __denom,
    );
  }

  late final _div28Ptr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div28 = _div28Ptr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv28(
    int __numer,
    int __denom,
  ) {
    return _ldiv28(
      __numer,
      __denom,
    );
  }

  late final _ldiv28Ptr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv28 = _ldiv28Ptr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv28(
    int __numer,
    int __denom,
  ) {
    return _lldiv28(
      __numer,
      __denom,
    );
  }

  late final _lldiv28Ptr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv28 = _lldiv28Ptr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt28(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt28(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt28 = _ecvt28Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt28(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt28(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt28 = _fcvt28Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt28(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt28(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt28 = _gcvt28Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r28(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r28(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('ecvt_r');
  late final _ecvt_r28 = _ecvt_r28Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r28(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r28(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('fcvt_r');
  late final _fcvt_r28 = _fcvt_r28Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen28(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen28(
      __s,
      __n,
    );
  }

  late final _mblen28Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mblen');
  late final _mblen28 =
      _mblen28Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc28(
    ffi.Pointer<ffi.Int> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc28(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('mbtowc');
  late final _mbtowc28 = _mbtowc28Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb28(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb28(
      __s,
      __wchar,
    );
  }

  late final _wctomb28Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'wctomb');
  late final _wctomb28 =
      _wctomb28Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs28(
    ffi.Pointer<ffi.Int> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs28(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mbstowcs');
  late final _mbstowcs28 = _mbstowcs28Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs28(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Int> __pwcs,
    int __n,
  ) {
    return _wcstombs28(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('wcstombs');
  late final _wcstombs28 = _wcstombs28Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  int rpmatch28(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch28(
      __response,
    );
  }

  late final _rpmatch28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch28 =
      _rpmatch28Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt28(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt28(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt28 = _getsubopt28Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg28(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg28(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg28 =
      _getloadavg28Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Void> memcpy28(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy28(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpy28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memcpy');
  late final _memcpy28 = _memcpy28Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove28(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove28(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmove28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memmove');
  late final _memmove28 = _memmove28Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy28(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy28(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpy28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memccpy');
  late final _memccpy28 = _memccpy28Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset28(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset28(
      __s,
      __c,
      __n,
    );
  }

  late final _memset28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memset');
  late final _memset28 = _memset28Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp28(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp28(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmp28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('memcmp');
  late final _memcmp28 = _memcmp28Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq28(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq28(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeq28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__memcmpeq');
  late final ___memcmpeq28 = ___memcmpeq28Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr28(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr28(
      __s,
      __c,
      __n,
    );
  }

  late final _memchr28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memchr');
  late final _memchr28 = _memchr28Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy28(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy28(
      __dest,
      __src,
    );
  }

  late final _strcpy28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy28 = _strcpy28Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy28(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy28(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpy28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncpy');
  late final _strncpy28 = _strncpy28Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat28(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat28(
      __dest,
      __src,
    );
  }

  late final _strcat28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat28 = _strcat28Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat28(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat28(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncat28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncat');
  late final _strncat28 = _strncat28Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp28(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp28(
      __s1,
      __s2,
    );
  }

  late final _strcmp28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp28 = _strcmp28Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp28(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp28(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmp28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncmp');
  late final _strncmp28 = _strncmp28Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll28(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll28(
      __s1,
      __s2,
    );
  }

  late final _strcoll28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll28 = _strcoll28Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm28(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm28(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrm28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strxfrm');
  late final _strxfrm28 = _strxfrm28Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l28(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l28(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_l28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l28 = _strcoll_l28Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l28(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l28(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_l28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strxfrm_l');
  late final _strxfrm_l28 = _strxfrm_l28Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup28(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup28(
      __s,
    );
  }

  late final _strdup28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup28 = _strdup28Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup28(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup28(
      __string,
      __n,
    );
  }

  late final _strndup28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strndup');
  late final _strndup28 = _strndup28Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr28(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr28(
      __s,
      __c,
    );
  }

  late final _strchr28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr28 = _strchr28Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr28(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr28(
      __s,
      __c,
    );
  }

  late final _strrchr28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr28 = _strrchr28Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn28(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn28(
      __s,
      __reject,
    );
  }

  late final _strcspn28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn28 = _strcspn28Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn28(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn28(
      __s,
      __accept,
    );
  }

  late final _strspn28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn28 = _strspn28Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk28(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk28(
      __s,
      __accept,
    );
  }

  late final _strpbrk28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk28 = _strpbrk28Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr28(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr28(
      __haystack,
      __needle,
    );
  }

  late final _strstr28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr28 = _strstr28Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok28(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok28(
      __s,
      __delim,
    );
  }

  late final _strtok28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok28 = _strtok28Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r28(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r28(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_r28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r28 = ___strtok_r28Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r28(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r28(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_r28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r28 = _strtok_r28Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen28(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen28(
      __s,
    );
  }

  late final _strlen28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'strlen');
  late final _strlen28 =
      _strlen28Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen28(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen28(
      __string,
      __maxlen,
    );
  }

  late final _strnlen28Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'strnlen');
  late final _strnlen28 =
      _strnlen28Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror28(
    int __errnum,
  ) {
    return _strerror28(
      __errnum,
    );
  }

  late final _strerror28Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror28 =
      _strerror28Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r28(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r28(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_r28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('strerror_r');
  late final _strerror_r28 = _strerror_r28Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l28(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l28(
      __errnum,
      __l,
    );
  }

  late final _strerror_l28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l28 = _strerror_l28Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp28(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp28(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmp28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcmp');
  late final _bcmp28 = _bcmp28Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy28(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy28(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopy28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcopy');
  late final _bcopy28 = _bcopy28Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero28(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero28(
      __s,
      __n,
    );
  }

  late final _bzero28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('bzero');
  late final _bzero28 =
      _bzero28Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index28(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index28(
      __s,
      __c,
    );
  }

  late final _index28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index28 = _index28Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex28(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex28(
      __s,
      __c,
    );
  }

  late final _rindex28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex28 = _rindex28Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs28(
    int __i,
  ) {
    return _ffs28(
      __i,
    );
  }

  late final _ffs28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs28 = _ffs28Ptr.asFunction<int Function(int)>();

  int ffsl28(
    int __l,
  ) {
    return _ffsl28(
      __l,
    );
  }

  late final _ffsl28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl28 = _ffsl28Ptr.asFunction<int Function(int)>();

  int ffsll28(
    int __ll,
  ) {
    return _ffsll28(
      __ll,
    );
  }

  late final _ffsll28Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll28 = _ffsll28Ptr.asFunction<int Function(int)>();

  int strcasecmp28(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp28(
      __s1,
      __s2,
    );
  }

  late final _strcasecmp28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp28 = _strcasecmp28Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp28(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp28(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmp28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncasecmp');
  late final _strncasecmp28 = _strncasecmp28Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l28(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l28(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_l28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l28 = _strcasecmp_l28Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l28(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l28(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_l28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l28 = _strncasecmp_l28Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero28(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero28(
      __s,
      __n,
    );
  }

  late final _explicit_bzero28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('explicit_bzero');
  late final _explicit_bzero28 = _explicit_bzero28Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep28(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep28(
      __stringp,
      __delim,
    );
  }

  late final _strsep28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep28 = _strsep28Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal28(
    int __sig,
  ) {
    return _strsignal28(
      __sig,
    );
  }

  late final _strsignal28Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal28 =
      _strsignal28Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy28(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy28(
      __dest,
      __src,
    );
  }

  late final ___stpcpy28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy28 = ___stpcpy28Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy28(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy28(
      __dest,
      __src,
    );
  }

  late final _stpcpy28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy28 = _stpcpy28Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy28(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy28(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpy28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('__stpncpy');
  late final ___stpncpy28 = ___stpncpy28Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy28(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy28(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpy28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('stpncpy');
  late final _stpncpy28 = _stpncpy28Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<cstring> cstr_new10(
    ffi.Pointer<ffi.Char> init_str,
  ) {
    return _cstr_new10(
      init_str,
    );
  }

  late final _cstr_new10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cstring> Function(ffi.Pointer<ffi.Char>)>>('cstr_new');
  late final _cstr_new10 = _cstr_new10Ptr
      .asFunction<ffi.Pointer<cstring> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<cstring> cstr_new_sz10(
    int sz,
  ) {
    return _cstr_new_sz10(
      sz,
    );
  }

  late final _cstr_new_sz10Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<cstring> Function(ffi.Int)>>(
          'cstr_new_sz');
  late final _cstr_new_sz10 =
      _cstr_new_sz10Ptr.asFunction<ffi.Pointer<cstring> Function(int)>();

  ffi.Pointer<cstring> cstr_new_buf10(
    ffi.Pointer<ffi.Void> buf,
    int sz,
  ) {
    return _cstr_new_buf10(
      buf,
      sz,
    );
  }

  late final _cstr_new_buf10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cstring> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('cstr_new_buf');
  late final _cstr_new_buf10 = _cstr_new_buf10Ptr
      .asFunction<ffi.Pointer<cstring> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<cstring> cstr_new_cstr10(
    ffi.Pointer<cstring> copy_str,
  ) {
    return _cstr_new_cstr10(
      copy_str,
    );
  }

  late final _cstr_new_cstr10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cstring> Function(
              ffi.Pointer<cstring>)>>('cstr_new_cstr');
  late final _cstr_new_cstr10 = _cstr_new_cstr10Ptr
      .asFunction<ffi.Pointer<cstring> Function(ffi.Pointer<cstring>)>();

  void cstr_free10(
    ffi.Pointer<cstring> s,
    int free_buf,
  ) {
    return _cstr_free10(
      s,
      free_buf,
    );
  }

  late final _cstr_free10Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_free');
  late final _cstr_free10 =
      _cstr_free10Ptr.asFunction<void Function(ffi.Pointer<cstring>, int)>();

  int cstr_equal10(
    ffi.Pointer<cstring> a,
    ffi.Pointer<cstring> b,
  ) {
    return _cstr_equal10(
      a,
      b,
    );
  }

  late final _cstr_equal10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_equal');
  late final _cstr_equal10 = _cstr_equal10Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_compare10(
    ffi.Pointer<cstring> a,
    ffi.Pointer<cstring> b,
  ) {
    return _cstr_compare10(
      a,
      b,
    );
  }

  late final _cstr_compare10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_compare');
  late final _cstr_compare10 = _cstr_compare10Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_resize10(
    ffi.Pointer<cstring> s,
    int sz,
  ) {
    return _cstr_resize10(
      s,
      sz,
    );
  }

  late final _cstr_resize10Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_resize');
  late final _cstr_resize10 =
      _cstr_resize10Ptr.asFunction<int Function(ffi.Pointer<cstring>, int)>();

  int cstr_erase10(
    ffi.Pointer<cstring> s,
    int pos,
    int len,
  ) {
    return _cstr_erase10(
      s,
      pos,
      len,
    );
  }

  late final _cstr_erase10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Int, ssize_t)>>('cstr_erase');
  late final _cstr_erase10 = _cstr_erase10Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, int, int)>();

  int cstr_append_buf10(
    ffi.Pointer<cstring> s,
    ffi.Pointer<ffi.Void> buf,
    int sz,
  ) {
    return _cstr_append_buf10(
      s,
      buf,
      sz,
    );
  }

  late final _cstr_append_buf10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('cstr_append_buf');
  late final _cstr_append_buf10 = _cstr_append_buf10Ptr.asFunction<
      int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Void>, int)>();

  int cstr_append_cstr10(
    ffi.Pointer<cstring> s,
    ffi.Pointer<cstring> append,
  ) {
    return _cstr_append_cstr10(
      s,
      append,
    );
  }

  late final _cstr_append_cstr10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_append_cstr');
  late final _cstr_append_cstr10 = _cstr_append_cstr10Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_append_c10(
    ffi.Pointer<cstring> s,
    int ch,
  ) {
    return _cstr_append_c10(
      s,
      ch,
    );
  }

  late final _cstr_append_c10Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Char)>>(
      'cstr_append_c');
  late final _cstr_append_c10 =
      _cstr_append_c10Ptr.asFunction<int Function(ffi.Pointer<cstring>, int)>();

  int cstr_alloc_minsize10(
    ffi.Pointer<cstring> s,
    int sz,
  ) {
    return _cstr_alloc_minsize10(
      s,
      sz,
    );
  }

  late final _cstr_alloc_minsize10Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_alloc_minsize');
  late final _cstr_alloc_minsize10 = _cstr_alloc_minsize10Ptr
      .asFunction<int Function(ffi.Pointer<cstring>, int)>();

  void dogecoin_mem_set_mapper7(
    dogecoin_mem_mapper mapper,
  ) {
    return _dogecoin_mem_set_mapper7(
      mapper,
    );
  }

  late final _dogecoin_mem_set_mapper7Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dogecoin_mem_mapper)>>(
          'dogecoin_mem_set_mapper');
  late final _dogecoin_mem_set_mapper7 = _dogecoin_mem_set_mapper7Ptr
      .asFunction<void Function(dogecoin_mem_mapper)>();

  void dogecoin_mem_set_mapper_default7() {
    return _dogecoin_mem_set_mapper_default7();
  }

  late final _dogecoin_mem_set_mapper_default7Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'dogecoin_mem_set_mapper_default');
  late final _dogecoin_mem_set_mapper_default7 =
      _dogecoin_mem_set_mapper_default7Ptr.asFunction<void Function()>();

  ffi.Pointer<ffi.Void> dogecoin_malloc7(
    int size,
  ) {
    return _dogecoin_malloc7(
      size,
    );
  }

  late final _dogecoin_malloc7Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'dogecoin_malloc');
  late final _dogecoin_malloc7 =
      _dogecoin_malloc7Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> dogecoin_calloc7(
    int count,
    int size,
  ) {
    return _dogecoin_calloc7(
      count,
      size,
    );
  }

  late final _dogecoin_calloc7Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'dogecoin_calloc');
  late final _dogecoin_calloc7 = _dogecoin_calloc7Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> dogecoin_realloc7(
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _dogecoin_realloc7(
      ptr,
      size,
    );
  }

  late final _dogecoin_realloc7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('dogecoin_realloc');
  late final _dogecoin_realloc7 = _dogecoin_realloc7Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void dogecoin_free7(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _dogecoin_free7(
      ptr,
    );
  }

  late final _dogecoin_free7Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'dogecoin_free');
  late final _dogecoin_free7 =
      _dogecoin_free7Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> memcpy_safe7(
    ffi.Pointer<ffi.Void> destination,
    ffi.Pointer<ffi.Void> source,
    int count,
  ) {
    return _memcpy_safe7(
      destination,
      source,
      count,
    );
  }

  late final _memcpy_safe7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.UnsignedInt)>>('memcpy_safe');
  late final _memcpy_safe7 = _memcpy_safe7Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void utils_clear_buffers() {
    return _utils_clear_buffers();
  }

  late final _utils_clear_buffersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('utils_clear_buffers');
  late final _utils_clear_buffers =
      _utils_clear_buffersPtr.asFunction<void Function()>();

  void utils_hex_to_bin(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.UnsignedChar> out,
    int inLen,
    ffi.Pointer<ffi.Int> outLen,
  ) {
    return _utils_hex_to_bin(
      str,
      out,
      inLen,
      outLen,
    );
  }

  late final _utils_hex_to_binPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.Int>)>>('utils_hex_to_bin');
  late final _utils_hex_to_bin = _utils_hex_to_binPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>, int,
          ffi.Pointer<ffi.Int>)>();

  void utils_bin_to_hex(
    ffi.Pointer<ffi.UnsignedChar> bin_in,
    int inlen,
    ffi.Pointer<ffi.Char> hex_out,
  ) {
    return _utils_bin_to_hex(
      bin_in,
      inlen,
      hex_out,
    );
  }

  late final _utils_bin_to_hexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('utils_bin_to_hex');
  late final _utils_bin_to_hex = _utils_bin_to_hexPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Uint8> utils_hex_to_uint8(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _utils_hex_to_uint8(
      str,
    );
  }

  late final _utils_hex_to_uint8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<ffi.Char>)>>('utils_hex_to_uint8');
  late final _utils_hex_to_uint8 = _utils_hex_to_uint8Ptr
      .asFunction<ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> utils_uint8_to_hex(
    ffi.Pointer<ffi.Uint8> bin,
    int l,
  ) {
    return _utils_uint8_to_hex(
      bin,
      l,
    );
  }

  late final _utils_uint8_to_hexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('utils_uint8_to_hex');
  late final _utils_uint8_to_hex = _utils_uint8_to_hexPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Uint8>, int)>();

  void utils_reverse_hex(
    ffi.Pointer<ffi.Char> h,
    int len,
  ) {
    return _utils_reverse_hex(
      h,
      len,
    );
  }

  late final _utils_reverse_hexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('utils_reverse_hex');
  late final _utils_reverse_hex = _utils_reverse_hexPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>, int)>();

  void utils_uint256_sethex(
    ffi.Pointer<ffi.Char> psz,
    ffi.Pointer<ffi.Uint8> out,
  ) {
    return _utils_uint256_sethex(
      psz,
      out,
    );
  }

  late final _utils_uint256_sethexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>)>>('utils_uint256_sethex');
  late final _utils_uint256_sethex = _utils_uint256_sethexPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<ffi.Void> safe_malloc(
    int size,
  ) {
    return _safe_malloc(
      size,
    );
  }

  late final _safe_mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'safe_malloc');
  late final _safe_malloc =
      _safe_mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  void dogecoin_cheap_random_bytes(
    ffi.Pointer<ffi.Uint8> buf,
    int len,
  ) {
    return _dogecoin_cheap_random_bytes(
      buf,
      len,
    );
  }

  late final _dogecoin_cheap_random_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>,
              ffi.Uint32)>>('dogecoin_cheap_random_bytes');
  late final _dogecoin_cheap_random_bytes = _dogecoin_cheap_random_bytesPtr
      .asFunction<void Function(ffi.Pointer<ffi.Uint8>, int)>();

  void dogecoin_get_default_datadir(
    ffi.Pointer<cstring> path_out,
  ) {
    return _dogecoin_get_default_datadir(
      path_out,
    );
  }

  late final _dogecoin_get_default_datadirPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cstring>)>>(
          'dogecoin_get_default_datadir');
  late final _dogecoin_get_default_datadir = _dogecoin_get_default_datadirPtr
      .asFunction<void Function(ffi.Pointer<cstring>)>();

  void dogecoin_file_commit(
    ffi.Pointer<FILE> file,
  ) {
    return _dogecoin_file_commit(
      file,
    );
  }

  late final _dogecoin_file_commitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'dogecoin_file_commit');
  late final _dogecoin_file_commit =
      _dogecoin_file_commitPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  void print_image(
    ffi.Pointer<FILE> fptr,
  ) {
    return _print_image(
      fptr,
    );
  }

  late final _print_imagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'print_image');
  late final _print_image =
      _print_imagePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  void print_header(
    ffi.Pointer<ffi.Char> filepath,
  ) {
    return _print_header(
      filepath,
    );
  }

  late final _print_headerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'print_header');
  late final _print_header =
      _print_headerPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Uint8> bytearray_concatenate(
    ffi.Pointer<ffi.Uint8> input1,
    ffi.Pointer<ffi.Uint8> input2,
  ) {
    return _bytearray_concatenate(
      input1,
      input2,
    );
  }

  late final _bytearray_concatenatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('bytearray_concatenate');
  late final _bytearray_concatenate = _bytearray_concatenatePtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  void print_bits(
    int size,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _print_bits(
      size,
      ptr,
    );
  }

  late final _print_bitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>('print_bits');
  late final _print_bits =
      _print_bitsPtr.asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void prepend(
    ffi.Pointer<ffi.Char> s,
    ffi.Pointer<ffi.Char> t,
  ) {
    return _prepend(
      s,
      t,
    );
  }

  late final _prependPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('prepend');
  late final _prepend = _prependPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void append(
    ffi.Pointer<ffi.Char> s,
    ffi.Pointer<ffi.Char> t,
  ) {
    return _append(
      s,
      t,
    );
  }

  late final _appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('append');
  late final _append = _appendPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void text_to_hex(
    ffi.Pointer<ffi.Char> in1,
    ffi.Pointer<ffi.Char> out,
  ) {
    return _text_to_hex(
      in1,
      out,
    );
  }

  late final _text_to_hexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('text_to_hex');
  late final _text_to_hex = _text_to_hexPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> get_build() {
    return _get_build();
  }

  late final _get_buildPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'get_build');
  late final _get_build =
      _get_buildPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int remove29(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove29(
      __filename,
    );
  }

  late final _remove29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove29 =
      _remove29Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename29(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename29(
      __old,
      __new,
    );
  }

  late final _rename29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename29 = _rename29Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat29(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat29(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameat29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat29 = _renameat29Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose29(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose29(
      __stream,
    );
  }

  late final _fclose29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose29 =
      _fclose29Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile29() {
    return _tmpfile29();
  }

  late final _tmpfile29Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile29 =
      _tmpfile29Ptr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam29(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam29(
      arg0,
    );
  }

  late final _tmpnam29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam29 = _tmpnam29Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r29(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r29(
      __s,
    );
  }

  late final _tmpnam_r29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r29 = _tmpnam_r29Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam29(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam29(
      __dir,
      __pfx,
    );
  }

  late final _tempnam29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam29 = _tempnam29Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush29(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush29(
      __stream,
    );
  }

  late final _fflush29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush29 =
      _fflush29Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked29(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked29(
      __stream,
    );
  }

  late final _fflush_unlocked29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked29 =
      _fflush_unlocked29Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen29(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen29(
      __filename,
      __modes,
    );
  }

  late final _fopen29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen29 = _fopen29Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen29(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen29(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopen29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen29 = _freopen29Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen29(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen29(
      __fd,
      __modes,
    );
  }

  late final _fdopen29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen29 = _fdopen29Ptr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen29(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen29(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopen29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen29 = _fmemopen29Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream29(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Int> __sizeloc,
  ) {
    return _open_memstream29(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstream29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('open_memstream');
  late final _open_memstream29 = _open_memstream29Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void setbuf29(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf29(
      __stream,
      __buf,
    );
  }

  late final _setbuf29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf29 = _setbuf29Ptr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf29(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf29(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbuf29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('setvbuf');
  late final _setvbuf29 = _setvbuf29Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer29(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer29(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbuffer29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer29 = _setbuffer29Ptr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf29(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf29(
      __stream,
    );
  }

  late final _setlinebuf29Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf29 =
      _setlinebuf29Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf29(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf29(
      __stream,
      __format,
    );
  }

  late final _fprintf29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf29 = _fprintf29Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf29(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf29(
      __format,
    );
  }

  late final _printf29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf29 =
      _printf29Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf29(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf29(
      __s,
      __format,
    );
  }

  late final _sprintf29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf29 = _sprintf29Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf29(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfprintf29(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintf29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfprintf');
  late final _vfprintf29 = _vfprintf29Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vprintf29(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vprintf29(
      __format,
      __arg,
    );
  }

  late final _vprintf29Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vprintf');
  late final _vprintf29 =
      _vprintf29Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsprintf29(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsprintf29(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintf29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsprintf');
  late final _vsprintf29 = _vsprintf29Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int snprintf29(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf29(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintf29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf29 = _snprintf29Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf29(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsnprintf29(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintf29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('vsnprintf');
  late final _vsnprintf29 = _vsnprintf29Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int vdprintf29(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    int __arg,
  ) {
    return _vdprintf29(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintf29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('vdprintf');
  late final _vdprintf29 = _vdprintf29Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int dprintf29(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf29(
      __fd,
      __fmt,
    );
  }

  late final _dprintf29Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf29 =
      _dprintf29Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf58(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf58(
      __stream,
      __format,
    );
  }

  late final _fscanf58Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf58 = _fscanf58Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf58(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf58(
      __format,
    );
  }

  late final _scanf58Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf58 =
      _scanf58Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf58(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf58(
      __s,
      __format,
    );
  }

  late final _sscanf58Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf58 = _sscanf58Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fscanf59(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf59(
      __stream,
      __format,
    );
  }

  late final _fscanf59Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf59 = _fscanf59Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf59(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf59(
      __format,
    );
  }

  late final _scanf59Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf59 =
      _scanf59Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf59(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf59(
      __s,
      __format,
    );
  }

  late final _sscanf59Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf59 = _sscanf59Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf58(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf58(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf58Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf58 = _vfscanf58Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf58(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf58(
      __format,
      __arg,
    );
  }

  late final _vscanf58Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf58 =
      _vscanf58Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf58(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf58(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf58Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf58 = _vsscanf58Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int vfscanf59(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf59(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf59Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf59 = _vfscanf59Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf59(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf59(
      __format,
      __arg,
    );
  }

  late final _vscanf59Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf59 =
      _vscanf59Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf59(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf59(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf59Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf59 = _vsscanf59Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fgetc29(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc29(
      __stream,
    );
  }

  late final _fgetc29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc29 =
      _fgetc29Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc29(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc29(
      __stream,
    );
  }

  late final _getc29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc29 = _getc29Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar29() {
    return _getchar29();
  }

  late final _getchar29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar29 = _getchar29Ptr.asFunction<int Function()>();

  int getc_unlocked29(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked29(
      __stream,
    );
  }

  late final _getc_unlocked29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked29 =
      _getc_unlocked29Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked29() {
    return _getchar_unlocked29();
  }

  late final _getchar_unlocked29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked29 =
      _getchar_unlocked29Ptr.asFunction<int Function()>();

  int fgetc_unlocked29(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked29(
      __stream,
    );
  }

  late final _fgetc_unlocked29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked29 =
      _fgetc_unlocked29Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc29(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc29(
      __c,
      __stream,
    );
  }

  late final _fputc29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc29 =
      _fputc29Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc29(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc29(
      __c,
      __stream,
    );
  }

  late final _putc29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc29 =
      _putc29Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar29(
    int __c,
  ) {
    return _putchar29(
      __c,
    );
  }

  late final _putchar29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar29 = _putchar29Ptr.asFunction<int Function(int)>();

  int fputc_unlocked29(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked29(
      __c,
      __stream,
    );
  }

  late final _fputc_unlocked29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked29 =
      _fputc_unlocked29Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked29(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked29(
      __c,
      __stream,
    );
  }

  late final _putc_unlocked29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked29 =
      _putc_unlocked29Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked29(
    int __c,
  ) {
    return _putchar_unlocked29(
      __c,
    );
  }

  late final _putchar_unlocked29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked29 =
      _putchar_unlocked29Ptr.asFunction<int Function(int)>();

  int getw29(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw29(
      __stream,
    );
  }

  late final _getw29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw29 = _getw29Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw29(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw29(
      __w,
      __stream,
    );
  }

  late final _putw29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw29 =
      _putw29Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets29(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets29(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgets29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets29 = _fgets29Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim29(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim29(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelim29Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim29 = ___getdelim29Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getdelim29(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim29(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelim29Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim29 = _getdelim29Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getline29(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline29(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getline29Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<FILE>)>>('getline');
  late final _getline29 = _getline29Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<FILE>)>();

  int fputs29(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs29(
      __s,
      __stream,
    );
  }

  late final _fputs29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs29 = _fputs29Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts29(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts29(
      __s,
    );
  }

  late final _puts29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts29 =
      _puts29Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc29(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc29(
      __c,
      __stream,
    );
  }

  late final _ungetc29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc29 =
      _ungetc29Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread29(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread29(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread29 = _fread29Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite29(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite29(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwrite29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite29 = _fwrite29Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked29(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked29(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlocked29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked29 = _fread_unlocked29Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked29(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked29(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlocked29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked29 = _fwrite_unlocked29Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek29(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek29(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseek29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek29 =
      _fseek29Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell29(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell29(
      __stream,
    );
  }

  late final _ftell29Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell29 =
      _ftell29Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind29(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind29(
      __stream,
    );
  }

  late final _rewind29Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind29 =
      _rewind29Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko29(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko29(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseeko29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko29 =
      _fseeko29Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello29(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello29(
      __stream,
    );
  }

  late final _ftello29Ptr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello29 =
      _ftello29Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos29(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos29(
      __stream,
      __pos,
    );
  }

  late final _fgetpos29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos29 = _fgetpos29Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos29(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos29(
      __stream,
      __pos,
    );
  }

  late final _fsetpos29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos29 = _fsetpos29Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr29(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr29(
      __stream,
    );
  }

  late final _clearerr29Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr29 =
      _clearerr29Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof29(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof29(
      __stream,
    );
  }

  late final _feof29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof29 = _feof29Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror29(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror29(
      __stream,
    );
  }

  late final _ferror29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror29 =
      _ferror29Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked29(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked29(
      __stream,
    );
  }

  late final _clearerr_unlocked29Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked29 =
      _clearerr_unlocked29Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked29(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked29(
      __stream,
    );
  }

  late final _feof_unlocked29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked29 =
      _feof_unlocked29Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked29(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked29(
      __stream,
    );
  }

  late final _ferror_unlocked29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked29 =
      _ferror_unlocked29Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror29(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror29(
      __s,
    );
  }

  late final _perror29Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror29 =
      _perror29Ptr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno29(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno29(
      __stream,
    );
  }

  late final _fileno29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno29 =
      _fileno29Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked29(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked29(
      __stream,
    );
  }

  late final _fileno_unlocked29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked29 =
      _fileno_unlocked29Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose29(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose29(
      __stream,
    );
  }

  late final _pclose29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose29 =
      _pclose29Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen29(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen29(
      __command,
      __modes,
    );
  }

  late final _popen29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen29 = _popen29Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid29(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid29(
      __s,
    );
  }

  late final _ctermid29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid29 = _ctermid29Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile29(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile29(
      __stream,
    );
  }

  late final _flockfile29Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile29 =
      _flockfile29Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile29(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile29(
      __stream,
    );
  }

  late final _ftrylockfile29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile29 =
      _ftrylockfile29Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile29(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile29(
      __stream,
    );
  }

  late final _funlockfile29Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile29 =
      _funlockfile29Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow29(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow29(
      arg0,
    );
  }

  late final ___uflow29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow29 =
      ___uflow29Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow29(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow29(
      arg0,
      arg1,
    );
  }

  late final ___overflow29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow29 =
      ___overflow29Ptr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __ctype_get_mb_cur_max29() {
    return ___ctype_get_mb_cur_max29();
  }

  late final ___ctype_get_mb_cur_max29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max29 =
      ___ctype_get_mb_cur_max29Ptr.asFunction<int Function()>();

  double atof29(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof29(
      __nptr,
    );
  }

  late final _atof29Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof29 =
      _atof29Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi29(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi29(
      __nptr,
    );
  }

  late final _atoi29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi29 =
      _atoi29Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol29(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol29(
      __nptr,
    );
  }

  late final _atol29Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol29 =
      _atol29Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll29(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll29(
      __nptr,
    );
  }

  late final _atoll29Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll29 =
      _atoll29Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod29(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod29(
      __nptr,
      __endptr,
    );
  }

  late final _strtod29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod29 = _strtod29Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof29(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof29(
      __nptr,
      __endptr,
    );
  }

  late final _strtof29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof29 = _strtof29Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol29(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol29(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol29 = _strtol29Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul29(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul29(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul29 = _strtoul29Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq29(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq29(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq29 = _strtoq29Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq29(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq29(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq29 = _strtouq29Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll29(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll29(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll29 = _strtoll29Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull29(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull29(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull29 = _strtoull29Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a29(
    int __n,
  ) {
    return _l64a29(
      __n,
    );
  }

  late final _l64a29Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a29 =
      _l64a29Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l29(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l29(
      __s,
    );
  }

  late final _a64l29Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l29 =
      _a64l29Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select29(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select29(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select29 = _select29Ptr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect29(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect29(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect29 = _pselect29Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random29() {
    return _random29();
  }

  late final _random29Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random29 = _random29Ptr.asFunction<int Function()>();

  void srandom29(
    int __seed,
  ) {
    return _srandom29(
      __seed,
    );
  }

  late final _srandom29Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom29 = _srandom29Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate29(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate29(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int)>>('initstate');
  late final _initstate29 = _initstate29Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate29(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate29(
      __statebuf,
    );
  }

  late final _setstate29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate29 = _setstate29Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r29(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r29(
      __buf,
      __result,
    );
  }

  late final _random_r29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r29 = _random_r29Ptr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r29(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r29(
      __seed,
      __buf,
    );
  }

  late final _srandom_r29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r29 =
      _srandom_r29Ptr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r29(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r29(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r29 = _initstate_r29Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r29(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r29(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r29 = _setstate_r29Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand29() {
    return _rand29();
  }

  late final _rand29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand29 = _rand29Ptr.asFunction<int Function()>();

  void srand29(
    int __seed,
  ) {
    return _srand29(
      __seed,
    );
  }

  late final _srand29Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand29 = _srand29Ptr.asFunction<void Function(int)>();

  int rand_r29(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r29(
      __seed,
    );
  }

  late final _rand_r29Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r29 =
      _rand_r29Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand4829() {
    return _drand4829();
  }

  late final _drand4829Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand4829 = _drand4829Ptr.asFunction<double Function()>();

  double erand4829(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand4829(
      __xsubi,
    );
  }

  late final _erand4829Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand4829 = _erand4829Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand4829() {
    return _lrand4829();
  }

  late final _lrand4829Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand4829 = _lrand4829Ptr.asFunction<int Function()>();

  int nrand4829(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand4829(
      __xsubi,
    );
  }

  late final _nrand4829Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand4829 =
      _nrand4829Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand4829() {
    return _mrand4829();
  }

  late final _mrand4829Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand4829 = _mrand4829Ptr.asFunction<int Function()>();

  int jrand4829(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand4829(
      __xsubi,
    );
  }

  late final _jrand4829Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand4829 =
      _jrand4829Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand4829(
    int __seedval,
  ) {
    return _srand4829(
      __seedval,
    );
  }

  late final _srand4829Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand4829 = _srand4829Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed4829(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed4829(
      __seed16v,
    );
  }

  late final _seed4829Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed4829 = _seed4829Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong4829(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong4829(
      __param,
    );
  }

  late final _lcong4829Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong4829 =
      _lcong4829Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r29(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r29(
      __buffer,
      __result,
    );
  }

  late final _drand48_r29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r29 = _drand48_r29Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r29(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r29(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r29 = _erand48_r29Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r29(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r29(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r29 = _lrand48_r29Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r29(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r29(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r29 = _nrand48_r29Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r29(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r29(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r29 = _mrand48_r29Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r29(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r29(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r29 = _jrand48_r29Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r29(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r29(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r29 = _srand48_r29Ptr
      .asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r29(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r29(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r29 = _seed48_r29Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r29(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r29(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r29 = _lcong48_r29Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int arc4random29() {
    return _arc4random29();
  }

  late final _arc4random29Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random29 = _arc4random29Ptr.asFunction<int Function()>();

  void arc4random_buf29(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf29(
      __buf,
      __size,
    );
  }

  late final _arc4random_buf29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('arc4random_buf');
  late final _arc4random_buf29 = _arc4random_buf29Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform29(
    int __upper_bound,
  ) {
    return _arc4random_uniform29(
      __upper_bound,
    );
  }

  late final _arc4random_uniform29Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
          'arc4random_uniform');
  late final _arc4random_uniform29 =
      _arc4random_uniform29Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc29(
    int __size,
  ) {
    return _malloc29(
      __size,
    );
  }

  late final _malloc29Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'malloc');
  late final _malloc29 =
      _malloc29Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc29(
    int __nmemb,
    int __size,
  ) {
    return _calloc29(
      __nmemb,
      __size,
    );
  }

  late final _calloc29Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'calloc');
  late final _calloc29 =
      _calloc29Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc29(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc29(
      __ptr,
      __size,
    );
  }

  late final _realloc29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('realloc');
  late final _realloc29 = _realloc29Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free29(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free29(
      __ptr,
    );
  }

  late final _free29Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free29 =
      _free29Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray58(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray58(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray58Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray58 = _reallocarray58Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray59(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray59(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray59Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray59 = _reallocarray59Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca29(
    int __size,
  ) {
    return _alloca29(
      __size,
    );
  }

  late final _alloca29Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'alloca');
  late final _alloca29 =
      _alloca29Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc29(
    int __size,
  ) {
    return _valloc29(
      __size,
    );
  }

  late final _valloc29Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'valloc');
  late final _valloc29 =
      _valloc29Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign29(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign29(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int,
              ffi.Int)>>('posix_memalign');
  late final _posix_memalign29 = _posix_memalign29Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc29(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc29(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc29Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'aligned_alloc');
  late final _aligned_alloc29 = _aligned_alloc29Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort29() {
    return _abort29();
  }

  late final _abort29Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort29 = _abort29Ptr.asFunction<void Function()>();

  int atexit29(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit29(
      __func,
    );
  }

  late final _atexit29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit29 = _atexit29Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit29(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit29(
      __func,
    );
  }

  late final _at_quick_exit29Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit29 = _at_quick_exit29Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit29(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit29(
      __func,
      __arg,
    );
  }

  late final _on_exit29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit29 = _on_exit29Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit29(
    int __status,
  ) {
    return _exit29(
      __status,
    );
  }

  late final _exit29Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit29 = _exit29Ptr.asFunction<void Function(int)>();

  void quick_exit29(
    int __status,
  ) {
    return _quick_exit29(
      __status,
    );
  }

  late final _quick_exit29Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit29 = _quick_exit29Ptr.asFunction<void Function(int)>();

  void _Exit29(
    int __status,
  ) {
    return __Exit29(
      __status,
    );
  }

  late final __Exit29Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit29 = __Exit29Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv29(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv29(
      __name,
    );
  }

  late final _getenv29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv29 = _getenv29Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv29(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv29(
      __string,
    );
  }

  late final _putenv29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv29 =
      _putenv29Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv29(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv29(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv29 = _setenv29Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv29(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv29(
      __name,
    );
  }

  late final _unsetenv29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv29 =
      _unsetenv29Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv29() {
    return _clearenv29();
  }

  late final _clearenv29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv29 = _clearenv29Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp29(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp29(
      __template,
    );
  }

  late final _mktemp29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp29 = _mktemp29Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp29(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp29(
      __template,
    );
  }

  late final _mkstemp29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp29 =
      _mkstemp29Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps29(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps29(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps29Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps29 =
      _mkstemps29Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp29(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp29(
      __template,
    );
  }

  late final _mkdtemp29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp29 = _mkdtemp29Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system29(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system29(
      __command,
    );
  }

  late final _system29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system29 =
      _system29Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath29(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath29(
      __name,
      __resolved,
    );
  }

  late final _realpath29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath29 = _realpath29Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch29(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch29(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              __compar_fn_t)>>('bsearch');
  late final _bsearch29 = _bsearch29Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort29(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort29(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              __compar_fn_t)>>('qsort');
  late final _qsort29 = _qsort29Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs29(
    int __x,
  ) {
    return _abs29(
      __x,
    );
  }

  late final _abs29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs29 = _abs29Ptr.asFunction<int Function(int)>();

  int labs29(
    int __x,
  ) {
    return _labs29(
      __x,
    );
  }

  late final _labs29Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs29 = _labs29Ptr.asFunction<int Function(int)>();

  int llabs29(
    int __x,
  ) {
    return _llabs29(
      __x,
    );
  }

  late final _llabs29Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs29 = _llabs29Ptr.asFunction<int Function(int)>();

  div_t div29(
    int __numer,
    int __denom,
  ) {
    return _div29(
      __numer,
      __denom,
    );
  }

  late final _div29Ptr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div29 = _div29Ptr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv29(
    int __numer,
    int __denom,
  ) {
    return _ldiv29(
      __numer,
      __denom,
    );
  }

  late final _ldiv29Ptr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv29 = _ldiv29Ptr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv29(
    int __numer,
    int __denom,
  ) {
    return _lldiv29(
      __numer,
      __denom,
    );
  }

  late final _lldiv29Ptr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv29 = _lldiv29Ptr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt29(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt29(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt29 = _ecvt29Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt29(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt29(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt29 = _fcvt29Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt29(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt29(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt29 = _gcvt29Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r29(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r29(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('ecvt_r');
  late final _ecvt_r29 = _ecvt_r29Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r29(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r29(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('fcvt_r');
  late final _fcvt_r29 = _fcvt_r29Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen29(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen29(
      __s,
      __n,
    );
  }

  late final _mblen29Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mblen');
  late final _mblen29 =
      _mblen29Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc29(
    ffi.Pointer<ffi.Int> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc29(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('mbtowc');
  late final _mbtowc29 = _mbtowc29Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb29(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb29(
      __s,
      __wchar,
    );
  }

  late final _wctomb29Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'wctomb');
  late final _wctomb29 =
      _wctomb29Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs29(
    ffi.Pointer<ffi.Int> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs29(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mbstowcs');
  late final _mbstowcs29 = _mbstowcs29Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs29(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Int> __pwcs,
    int __n,
  ) {
    return _wcstombs29(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('wcstombs');
  late final _wcstombs29 = _wcstombs29Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  int rpmatch29(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch29(
      __response,
    );
  }

  late final _rpmatch29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch29 =
      _rpmatch29Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt29(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt29(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt29 = _getsubopt29Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg29(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg29(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg29 =
      _getloadavg29Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Void> memcpy29(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy29(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpy29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memcpy');
  late final _memcpy29 = _memcpy29Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove29(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove29(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmove29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memmove');
  late final _memmove29 = _memmove29Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy29(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy29(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpy29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memccpy');
  late final _memccpy29 = _memccpy29Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset29(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset29(
      __s,
      __c,
      __n,
    );
  }

  late final _memset29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memset');
  late final _memset29 = _memset29Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp29(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp29(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmp29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('memcmp');
  late final _memcmp29 = _memcmp29Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq29(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq29(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeq29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__memcmpeq');
  late final ___memcmpeq29 = ___memcmpeq29Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr29(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr29(
      __s,
      __c,
      __n,
    );
  }

  late final _memchr29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memchr');
  late final _memchr29 = _memchr29Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy29(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy29(
      __dest,
      __src,
    );
  }

  late final _strcpy29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy29 = _strcpy29Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy29(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy29(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpy29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncpy');
  late final _strncpy29 = _strncpy29Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat29(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat29(
      __dest,
      __src,
    );
  }

  late final _strcat29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat29 = _strcat29Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat29(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat29(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncat29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncat');
  late final _strncat29 = _strncat29Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp29(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp29(
      __s1,
      __s2,
    );
  }

  late final _strcmp29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp29 = _strcmp29Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp29(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp29(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmp29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncmp');
  late final _strncmp29 = _strncmp29Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll29(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll29(
      __s1,
      __s2,
    );
  }

  late final _strcoll29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll29 = _strcoll29Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm29(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm29(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrm29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strxfrm');
  late final _strxfrm29 = _strxfrm29Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l29(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l29(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_l29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l29 = _strcoll_l29Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l29(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l29(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_l29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strxfrm_l');
  late final _strxfrm_l29 = _strxfrm_l29Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup29(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup29(
      __s,
    );
  }

  late final _strdup29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup29 = _strdup29Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup29(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup29(
      __string,
      __n,
    );
  }

  late final _strndup29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strndup');
  late final _strndup29 = _strndup29Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr29(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr29(
      __s,
      __c,
    );
  }

  late final _strchr29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr29 = _strchr29Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr29(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr29(
      __s,
      __c,
    );
  }

  late final _strrchr29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr29 = _strrchr29Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn29(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn29(
      __s,
      __reject,
    );
  }

  late final _strcspn29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn29 = _strcspn29Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn29(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn29(
      __s,
      __accept,
    );
  }

  late final _strspn29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn29 = _strspn29Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk29(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk29(
      __s,
      __accept,
    );
  }

  late final _strpbrk29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk29 = _strpbrk29Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr29(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr29(
      __haystack,
      __needle,
    );
  }

  late final _strstr29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr29 = _strstr29Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok29(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok29(
      __s,
      __delim,
    );
  }

  late final _strtok29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok29 = _strtok29Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r29(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r29(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_r29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r29 = ___strtok_r29Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r29(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r29(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_r29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r29 = _strtok_r29Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen29(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen29(
      __s,
    );
  }

  late final _strlen29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'strlen');
  late final _strlen29 =
      _strlen29Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen29(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen29(
      __string,
      __maxlen,
    );
  }

  late final _strnlen29Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'strnlen');
  late final _strnlen29 =
      _strnlen29Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror29(
    int __errnum,
  ) {
    return _strerror29(
      __errnum,
    );
  }

  late final _strerror29Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror29 =
      _strerror29Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r29(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r29(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_r29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('strerror_r');
  late final _strerror_r29 = _strerror_r29Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l29(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l29(
      __errnum,
      __l,
    );
  }

  late final _strerror_l29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l29 = _strerror_l29Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp29(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp29(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmp29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcmp');
  late final _bcmp29 = _bcmp29Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy29(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy29(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopy29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcopy');
  late final _bcopy29 = _bcopy29Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero29(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero29(
      __s,
      __n,
    );
  }

  late final _bzero29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('bzero');
  late final _bzero29 =
      _bzero29Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index29(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index29(
      __s,
      __c,
    );
  }

  late final _index29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index29 = _index29Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex29(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex29(
      __s,
      __c,
    );
  }

  late final _rindex29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex29 = _rindex29Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs29(
    int __i,
  ) {
    return _ffs29(
      __i,
    );
  }

  late final _ffs29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs29 = _ffs29Ptr.asFunction<int Function(int)>();

  int ffsl29(
    int __l,
  ) {
    return _ffsl29(
      __l,
    );
  }

  late final _ffsl29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl29 = _ffsl29Ptr.asFunction<int Function(int)>();

  int ffsll29(
    int __ll,
  ) {
    return _ffsll29(
      __ll,
    );
  }

  late final _ffsll29Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll29 = _ffsll29Ptr.asFunction<int Function(int)>();

  int strcasecmp29(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp29(
      __s1,
      __s2,
    );
  }

  late final _strcasecmp29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp29 = _strcasecmp29Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp29(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp29(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmp29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncasecmp');
  late final _strncasecmp29 = _strncasecmp29Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l29(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l29(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_l29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l29 = _strcasecmp_l29Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l29(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l29(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_l29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l29 = _strncasecmp_l29Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero29(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero29(
      __s,
      __n,
    );
  }

  late final _explicit_bzero29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('explicit_bzero');
  late final _explicit_bzero29 = _explicit_bzero29Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep29(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep29(
      __stringp,
      __delim,
    );
  }

  late final _strsep29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep29 = _strsep29Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal29(
    int __sig,
  ) {
    return _strsignal29(
      __sig,
    );
  }

  late final _strsignal29Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal29 =
      _strsignal29Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy29(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy29(
      __dest,
      __src,
    );
  }

  late final ___stpcpy29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy29 = ___stpcpy29Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy29(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy29(
      __dest,
      __src,
    );
  }

  late final _stpcpy29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy29 = _stpcpy29Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy29(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy29(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpy29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('__stpncpy');
  late final ___stpncpy29 = ___stpncpy29Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy29(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy29(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpy29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('stpncpy');
  late final _stpncpy29 = _stpncpy29Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<vector> vector_new8(
    int res,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        free_f,
  ) {
    return _vector_new8(
      res,
      free_f,
    );
  }

  late final _vector_new8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<vector> Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>)>>)>>('vector_new');
  late final _vector_new8 = _vector_new8Ptr.asFunction<
      ffi.Pointer<vector> Function(
          int,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  void vector_free8(
    ffi.Pointer<vector> vec,
    int free_array,
  ) {
    return _vector_free8(
      vec,
      free_array,
    );
  }

  late final _vector_free8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<vector>, dogecoin_bool)>>('vector_free');
  late final _vector_free8 =
      _vector_free8Ptr.asFunction<void Function(ffi.Pointer<vector>, int)>();

  int vector_add8(
    ffi.Pointer<vector> vec,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _vector_add8(
      vec,
      data,
    );
  }

  late final _vector_add8Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>>('vector_add');
  late final _vector_add8 = _vector_add8Ptr
      .asFunction<int Function(ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>();

  int vector_remove8(
    ffi.Pointer<vector> vec,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _vector_remove8(
      vec,
      data,
    );
  }

  late final _vector_remove8Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>>('vector_remove');
  late final _vector_remove8 = _vector_remove8Ptr
      .asFunction<int Function(ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>();

  void vector_remove_idx8(
    ffi.Pointer<vector> vec,
    int idx,
  ) {
    return _vector_remove_idx8(
      vec,
      idx,
    );
  }

  late final _vector_remove_idx8Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<vector>, ffi.Int)>>(
      'vector_remove_idx');
  late final _vector_remove_idx8 = _vector_remove_idx8Ptr
      .asFunction<void Function(ffi.Pointer<vector>, int)>();

  void vector_remove_range8(
    ffi.Pointer<vector> vec,
    int idx,
    int len,
  ) {
    return _vector_remove_range8(
      vec,
      idx,
      len,
    );
  }

  late final _vector_remove_range8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<vector>, ffi.Int, ffi.Int)>>('vector_remove_range');
  late final _vector_remove_range8 = _vector_remove_range8Ptr
      .asFunction<void Function(ffi.Pointer<vector>, int, int)>();

  int vector_resize8(
    ffi.Pointer<vector> vec,
    int newsz,
  ) {
    return _vector_resize8(
      vec,
      newsz,
    );
  }

  late final _vector_resize8Ptr = _lookup<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<vector>, ffi.Int)>>('vector_resize');
  late final _vector_resize8 =
      _vector_resize8Ptr.asFunction<int Function(ffi.Pointer<vector>, int)>();

  int vector_find8(
    ffi.Pointer<vector> vec,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _vector_find8(
      vec,
      data,
    );
  }

  late final _vector_find8Ptr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>>('vector_find');
  late final _vector_find8 = _vector_find8Ptr
      .asFunction<int Function(ffi.Pointer<vector>, ffi.Pointer<ffi.Void>)>();

  int remove30(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove30(
      __filename,
    );
  }

  late final _remove30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove30 =
      _remove30Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename30(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename30(
      __old,
      __new,
    );
  }

  late final _rename30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename30 = _rename30Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat30(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat30(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameat30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat30 = _renameat30Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose30(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose30(
      __stream,
    );
  }

  late final _fclose30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose30 =
      _fclose30Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile30() {
    return _tmpfile30();
  }

  late final _tmpfile30Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile30 =
      _tmpfile30Ptr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam30(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam30(
      arg0,
    );
  }

  late final _tmpnam30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam30 = _tmpnam30Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r30(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r30(
      __s,
    );
  }

  late final _tmpnam_r30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r30 = _tmpnam_r30Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam30(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam30(
      __dir,
      __pfx,
    );
  }

  late final _tempnam30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam30 = _tempnam30Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush30(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush30(
      __stream,
    );
  }

  late final _fflush30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush30 =
      _fflush30Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked30(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked30(
      __stream,
    );
  }

  late final _fflush_unlocked30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked30 =
      _fflush_unlocked30Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen30(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen30(
      __filename,
      __modes,
    );
  }

  late final _fopen30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen30 = _fopen30Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen30(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen30(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopen30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen30 = _freopen30Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen30(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen30(
      __fd,
      __modes,
    );
  }

  late final _fdopen30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen30 = _fdopen30Ptr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen30(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen30(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopen30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen30 = _fmemopen30Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream30(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Int> __sizeloc,
  ) {
    return _open_memstream30(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstream30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('open_memstream');
  late final _open_memstream30 = _open_memstream30Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void setbuf30(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf30(
      __stream,
      __buf,
    );
  }

  late final _setbuf30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf30 = _setbuf30Ptr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf30(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf30(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbuf30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('setvbuf');
  late final _setvbuf30 = _setvbuf30Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer30(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer30(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbuffer30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer30 = _setbuffer30Ptr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf30(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf30(
      __stream,
    );
  }

  late final _setlinebuf30Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf30 =
      _setlinebuf30Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf30(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf30(
      __stream,
      __format,
    );
  }

  late final _fprintf30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf30 = _fprintf30Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf30(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf30(
      __format,
    );
  }

  late final _printf30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf30 =
      _printf30Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf30(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf30(
      __s,
      __format,
    );
  }

  late final _sprintf30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf30 = _sprintf30Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf30(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfprintf30(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintf30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfprintf');
  late final _vfprintf30 = _vfprintf30Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vprintf30(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vprintf30(
      __format,
      __arg,
    );
  }

  late final _vprintf30Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vprintf');
  late final _vprintf30 =
      _vprintf30Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsprintf30(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsprintf30(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintf30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsprintf');
  late final _vsprintf30 = _vsprintf30Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int snprintf30(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf30(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintf30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf30 = _snprintf30Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf30(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsnprintf30(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintf30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('vsnprintf');
  late final _vsnprintf30 = _vsnprintf30Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int vdprintf30(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    int __arg,
  ) {
    return _vdprintf30(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintf30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('vdprintf');
  late final _vdprintf30 = _vdprintf30Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int dprintf30(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf30(
      __fd,
      __fmt,
    );
  }

  late final _dprintf30Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf30 =
      _dprintf30Ptr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf60(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf60(
      __stream,
      __format,
    );
  }

  late final _fscanf60Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf60 = _fscanf60Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf60(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf60(
      __format,
    );
  }

  late final _scanf60Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf60 =
      _scanf60Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf60(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf60(
      __s,
      __format,
    );
  }

  late final _sscanf60Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf60 = _sscanf60Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fscanf61(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf61(
      __stream,
      __format,
    );
  }

  late final _fscanf61Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf61 = _fscanf61Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf61(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf61(
      __format,
    );
  }

  late final _scanf61Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf61 =
      _scanf61Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf61(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf61(
      __s,
      __format,
    );
  }

  late final _sscanf61Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf61 = _sscanf61Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf60(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf60(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf60Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf60 = _vfscanf60Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf60(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf60(
      __format,
      __arg,
    );
  }

  late final _vscanf60Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf60 =
      _vscanf60Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf60(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf60(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf60Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf60 = _vsscanf60Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int vfscanf61(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf61(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf61Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf61 = _vfscanf61Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf61(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf61(
      __format,
      __arg,
    );
  }

  late final _vscanf61Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf61 =
      _vscanf61Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf61(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf61(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf61Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf61 = _vsscanf61Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fgetc30(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc30(
      __stream,
    );
  }

  late final _fgetc30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc30 =
      _fgetc30Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc30(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc30(
      __stream,
    );
  }

  late final _getc30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc30 = _getc30Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar30() {
    return _getchar30();
  }

  late final _getchar30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar30 = _getchar30Ptr.asFunction<int Function()>();

  int getc_unlocked30(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked30(
      __stream,
    );
  }

  late final _getc_unlocked30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked30 =
      _getc_unlocked30Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked30() {
    return _getchar_unlocked30();
  }

  late final _getchar_unlocked30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked30 =
      _getchar_unlocked30Ptr.asFunction<int Function()>();

  int fgetc_unlocked30(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked30(
      __stream,
    );
  }

  late final _fgetc_unlocked30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked30 =
      _fgetc_unlocked30Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc30(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc30(
      __c,
      __stream,
    );
  }

  late final _fputc30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc30 =
      _fputc30Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc30(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc30(
      __c,
      __stream,
    );
  }

  late final _putc30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc30 =
      _putc30Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar30(
    int __c,
  ) {
    return _putchar30(
      __c,
    );
  }

  late final _putchar30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar30 = _putchar30Ptr.asFunction<int Function(int)>();

  int fputc_unlocked30(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked30(
      __c,
      __stream,
    );
  }

  late final _fputc_unlocked30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked30 =
      _fputc_unlocked30Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked30(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked30(
      __c,
      __stream,
    );
  }

  late final _putc_unlocked30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked30 =
      _putc_unlocked30Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked30(
    int __c,
  ) {
    return _putchar_unlocked30(
      __c,
    );
  }

  late final _putchar_unlocked30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked30 =
      _putchar_unlocked30Ptr.asFunction<int Function(int)>();

  int getw30(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw30(
      __stream,
    );
  }

  late final _getw30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw30 = _getw30Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw30(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw30(
      __w,
      __stream,
    );
  }

  late final _putw30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw30 =
      _putw30Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets30(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets30(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgets30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets30 = _fgets30Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim30(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim30(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelim30Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim30 = ___getdelim30Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getdelim30(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim30(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelim30Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim30 = _getdelim30Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getline30(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline30(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getline30Ptr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<FILE>)>>('getline');
  late final _getline30 = _getline30Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<FILE>)>();

  int fputs30(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs30(
      __s,
      __stream,
    );
  }

  late final _fputs30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs30 = _fputs30Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts30(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts30(
      __s,
    );
  }

  late final _puts30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts30 =
      _puts30Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc30(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc30(
      __c,
      __stream,
    );
  }

  late final _ungetc30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc30 =
      _ungetc30Ptr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread30(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread30(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread30 = _fread30Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite30(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite30(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwrite30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite30 = _fwrite30Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked30(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked30(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlocked30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked30 = _fread_unlocked30Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked30(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked30(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlocked30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked30 = _fwrite_unlocked30Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek30(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek30(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseek30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek30 =
      _fseek30Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell30(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell30(
      __stream,
    );
  }

  late final _ftell30Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell30 =
      _ftell30Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind30(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind30(
      __stream,
    );
  }

  late final _rewind30Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind30 =
      _rewind30Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko30(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko30(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseeko30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko30 =
      _fseeko30Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello30(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello30(
      __stream,
    );
  }

  late final _ftello30Ptr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello30 =
      _ftello30Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos30(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos30(
      __stream,
      __pos,
    );
  }

  late final _fgetpos30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos30 = _fgetpos30Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos30(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos30(
      __stream,
      __pos,
    );
  }

  late final _fsetpos30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos30 = _fsetpos30Ptr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr30(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr30(
      __stream,
    );
  }

  late final _clearerr30Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr30 =
      _clearerr30Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof30(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof30(
      __stream,
    );
  }

  late final _feof30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof30 = _feof30Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror30(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror30(
      __stream,
    );
  }

  late final _ferror30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror30 =
      _ferror30Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked30(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked30(
      __stream,
    );
  }

  late final _clearerr_unlocked30Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked30 =
      _clearerr_unlocked30Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked30(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked30(
      __stream,
    );
  }

  late final _feof_unlocked30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked30 =
      _feof_unlocked30Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked30(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked30(
      __stream,
    );
  }

  late final _ferror_unlocked30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked30 =
      _ferror_unlocked30Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror30(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror30(
      __s,
    );
  }

  late final _perror30Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror30 =
      _perror30Ptr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno30(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno30(
      __stream,
    );
  }

  late final _fileno30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno30 =
      _fileno30Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked30(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked30(
      __stream,
    );
  }

  late final _fileno_unlocked30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked30 =
      _fileno_unlocked30Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose30(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose30(
      __stream,
    );
  }

  late final _pclose30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose30 =
      _pclose30Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen30(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen30(
      __command,
      __modes,
    );
  }

  late final _popen30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen30 = _popen30Ptr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid30(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid30(
      __s,
    );
  }

  late final _ctermid30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid30 = _ctermid30Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile30(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile30(
      __stream,
    );
  }

  late final _flockfile30Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile30 =
      _flockfile30Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile30(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile30(
      __stream,
    );
  }

  late final _ftrylockfile30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile30 =
      _ftrylockfile30Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile30(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile30(
      __stream,
    );
  }

  late final _funlockfile30Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile30 =
      _funlockfile30Ptr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow30(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow30(
      arg0,
    );
  }

  late final ___uflow30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow30 =
      ___uflow30Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow30(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow30(
      arg0,
      arg1,
    );
  }

  late final ___overflow30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow30 =
      ___overflow30Ptr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __ctype_get_mb_cur_max30() {
    return ___ctype_get_mb_cur_max30();
  }

  late final ___ctype_get_mb_cur_max30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max30 =
      ___ctype_get_mb_cur_max30Ptr.asFunction<int Function()>();

  double atof30(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof30(
      __nptr,
    );
  }

  late final _atof30Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof30 =
      _atof30Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi30(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi30(
      __nptr,
    );
  }

  late final _atoi30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi30 =
      _atoi30Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol30(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol30(
      __nptr,
    );
  }

  late final _atol30Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol30 =
      _atol30Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll30(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll30(
      __nptr,
    );
  }

  late final _atoll30Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll30 =
      _atoll30Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod30(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod30(
      __nptr,
      __endptr,
    );
  }

  late final _strtod30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod30 = _strtod30Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof30(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof30(
      __nptr,
      __endptr,
    );
  }

  late final _strtof30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof30 = _strtof30Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol30(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol30(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol30 = _strtol30Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul30(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul30(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul30 = _strtoul30Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq30(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq30(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq30 = _strtoq30Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq30(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq30(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq30 = _strtouq30Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll30(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll30(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll30 = _strtoll30Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull30(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull30(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull30 = _strtoull30Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a30(
    int __n,
  ) {
    return _l64a30(
      __n,
    );
  }

  late final _l64a30Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a30 =
      _l64a30Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l30(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l30(
      __s,
    );
  }

  late final _a64l30Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l30 =
      _a64l30Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select30(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select30(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select30 = _select30Ptr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect30(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect30(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect30 = _pselect30Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random30() {
    return _random30();
  }

  late final _random30Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random30 = _random30Ptr.asFunction<int Function()>();

  void srandom30(
    int __seed,
  ) {
    return _srandom30(
      __seed,
    );
  }

  late final _srandom30Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom30 = _srandom30Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate30(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate30(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int)>>('initstate');
  late final _initstate30 = _initstate30Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate30(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate30(
      __statebuf,
    );
  }

  late final _setstate30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate30 = _setstate30Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r30(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r30(
      __buf,
      __result,
    );
  }

  late final _random_r30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r30 = _random_r30Ptr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r30(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r30(
      __seed,
      __buf,
    );
  }

  late final _srandom_r30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r30 =
      _srandom_r30Ptr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r30(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r30(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r30 = _initstate_r30Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r30(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r30(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r30 = _setstate_r30Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand30() {
    return _rand30();
  }

  late final _rand30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand30 = _rand30Ptr.asFunction<int Function()>();

  void srand30(
    int __seed,
  ) {
    return _srand30(
      __seed,
    );
  }

  late final _srand30Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand30 = _srand30Ptr.asFunction<void Function(int)>();

  int rand_r30(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r30(
      __seed,
    );
  }

  late final _rand_r30Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r30 =
      _rand_r30Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand4830() {
    return _drand4830();
  }

  late final _drand4830Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand4830 = _drand4830Ptr.asFunction<double Function()>();

  double erand4830(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand4830(
      __xsubi,
    );
  }

  late final _erand4830Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand4830 = _erand4830Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand4830() {
    return _lrand4830();
  }

  late final _lrand4830Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand4830 = _lrand4830Ptr.asFunction<int Function()>();

  int nrand4830(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand4830(
      __xsubi,
    );
  }

  late final _nrand4830Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand4830 =
      _nrand4830Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand4830() {
    return _mrand4830();
  }

  late final _mrand4830Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand4830 = _mrand4830Ptr.asFunction<int Function()>();

  int jrand4830(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand4830(
      __xsubi,
    );
  }

  late final _jrand4830Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand4830 =
      _jrand4830Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand4830(
    int __seedval,
  ) {
    return _srand4830(
      __seedval,
    );
  }

  late final _srand4830Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand4830 = _srand4830Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed4830(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed4830(
      __seed16v,
    );
  }

  late final _seed4830Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed4830 = _seed4830Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong4830(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong4830(
      __param,
    );
  }

  late final _lcong4830Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong4830 =
      _lcong4830Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r30(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r30(
      __buffer,
      __result,
    );
  }

  late final _drand48_r30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r30 = _drand48_r30Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r30(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r30(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r30 = _erand48_r30Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r30(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r30(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r30 = _lrand48_r30Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r30(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r30(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r30 = _nrand48_r30Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r30(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r30(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r30 = _mrand48_r30Ptr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r30(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r30(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r30 = _jrand48_r30Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r30(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r30(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r30 = _srand48_r30Ptr
      .asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r30(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r30(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r30 = _seed48_r30Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r30(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r30(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r30 = _lcong48_r30Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int arc4random30() {
    return _arc4random30();
  }

  late final _arc4random30Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random30 = _arc4random30Ptr.asFunction<int Function()>();

  void arc4random_buf30(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf30(
      __buf,
      __size,
    );
  }

  late final _arc4random_buf30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('arc4random_buf');
  late final _arc4random_buf30 = _arc4random_buf30Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform30(
    int __upper_bound,
  ) {
    return _arc4random_uniform30(
      __upper_bound,
    );
  }

  late final _arc4random_uniform30Ptr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
          'arc4random_uniform');
  late final _arc4random_uniform30 =
      _arc4random_uniform30Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc30(
    int __size,
  ) {
    return _malloc30(
      __size,
    );
  }

  late final _malloc30Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'malloc');
  late final _malloc30 =
      _malloc30Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc30(
    int __nmemb,
    int __size,
  ) {
    return _calloc30(
      __nmemb,
      __size,
    );
  }

  late final _calloc30Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'calloc');
  late final _calloc30 =
      _calloc30Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc30(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc30(
      __ptr,
      __size,
    );
  }

  late final _realloc30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('realloc');
  late final _realloc30 = _realloc30Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free30(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free30(
      __ptr,
    );
  }

  late final _free30Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free30 =
      _free30Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray60(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray60(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray60Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray60 = _reallocarray60Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray61(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray61(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray61Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray61 = _reallocarray61Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca30(
    int __size,
  ) {
    return _alloca30(
      __size,
    );
  }

  late final _alloca30Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'alloca');
  late final _alloca30 =
      _alloca30Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc30(
    int __size,
  ) {
    return _valloc30(
      __size,
    );
  }

  late final _valloc30Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'valloc');
  late final _valloc30 =
      _valloc30Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign30(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign30(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int,
              ffi.Int)>>('posix_memalign');
  late final _posix_memalign30 = _posix_memalign30Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc30(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc30(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc30Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'aligned_alloc');
  late final _aligned_alloc30 = _aligned_alloc30Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort30() {
    return _abort30();
  }

  late final _abort30Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort30 = _abort30Ptr.asFunction<void Function()>();

  int atexit30(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit30(
      __func,
    );
  }

  late final _atexit30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit30 = _atexit30Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit30(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit30(
      __func,
    );
  }

  late final _at_quick_exit30Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit30 = _at_quick_exit30Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit30(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit30(
      __func,
      __arg,
    );
  }

  late final _on_exit30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit30 = _on_exit30Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit30(
    int __status,
  ) {
    return _exit30(
      __status,
    );
  }

  late final _exit30Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit30 = _exit30Ptr.asFunction<void Function(int)>();

  void quick_exit30(
    int __status,
  ) {
    return _quick_exit30(
      __status,
    );
  }

  late final _quick_exit30Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit30 = _quick_exit30Ptr.asFunction<void Function(int)>();

  void _Exit30(
    int __status,
  ) {
    return __Exit30(
      __status,
    );
  }

  late final __Exit30Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit30 = __Exit30Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv30(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv30(
      __name,
    );
  }

  late final _getenv30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv30 = _getenv30Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv30(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv30(
      __string,
    );
  }

  late final _putenv30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv30 =
      _putenv30Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv30(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv30(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv30 = _setenv30Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv30(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv30(
      __name,
    );
  }

  late final _unsetenv30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv30 =
      _unsetenv30Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv30() {
    return _clearenv30();
  }

  late final _clearenv30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv30 = _clearenv30Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp30(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp30(
      __template,
    );
  }

  late final _mktemp30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp30 = _mktemp30Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp30(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp30(
      __template,
    );
  }

  late final _mkstemp30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp30 =
      _mkstemp30Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps30(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps30(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps30Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps30 =
      _mkstemps30Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp30(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp30(
      __template,
    );
  }

  late final _mkdtemp30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp30 = _mkdtemp30Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system30(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system30(
      __command,
    );
  }

  late final _system30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system30 =
      _system30Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath30(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath30(
      __name,
      __resolved,
    );
  }

  late final _realpath30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath30 = _realpath30Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch30(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch30(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              __compar_fn_t)>>('bsearch');
  late final _bsearch30 = _bsearch30Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort30(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort30(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              __compar_fn_t)>>('qsort');
  late final _qsort30 = _qsort30Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs30(
    int __x,
  ) {
    return _abs30(
      __x,
    );
  }

  late final _abs30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs30 = _abs30Ptr.asFunction<int Function(int)>();

  int labs30(
    int __x,
  ) {
    return _labs30(
      __x,
    );
  }

  late final _labs30Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs30 = _labs30Ptr.asFunction<int Function(int)>();

  int llabs30(
    int __x,
  ) {
    return _llabs30(
      __x,
    );
  }

  late final _llabs30Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs30 = _llabs30Ptr.asFunction<int Function(int)>();

  div_t div30(
    int __numer,
    int __denom,
  ) {
    return _div30(
      __numer,
      __denom,
    );
  }

  late final _div30Ptr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div30 = _div30Ptr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv30(
    int __numer,
    int __denom,
  ) {
    return _ldiv30(
      __numer,
      __denom,
    );
  }

  late final _ldiv30Ptr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv30 = _ldiv30Ptr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv30(
    int __numer,
    int __denom,
  ) {
    return _lldiv30(
      __numer,
      __denom,
    );
  }

  late final _lldiv30Ptr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv30 = _lldiv30Ptr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt30(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt30(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt30 = _ecvt30Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt30(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt30(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt30 = _fcvt30Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt30(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt30(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt30 = _gcvt30Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r30(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r30(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('ecvt_r');
  late final _ecvt_r30 = _ecvt_r30Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r30(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r30(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('fcvt_r');
  late final _fcvt_r30 = _fcvt_r30Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen30(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen30(
      __s,
      __n,
    );
  }

  late final _mblen30Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mblen');
  late final _mblen30 =
      _mblen30Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc30(
    ffi.Pointer<ffi.Int> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc30(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('mbtowc');
  late final _mbtowc30 = _mbtowc30Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb30(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb30(
      __s,
      __wchar,
    );
  }

  late final _wctomb30Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'wctomb');
  late final _wctomb30 =
      _wctomb30Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs30(
    ffi.Pointer<ffi.Int> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs30(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mbstowcs');
  late final _mbstowcs30 = _mbstowcs30Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs30(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Int> __pwcs,
    int __n,
  ) {
    return _wcstombs30(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('wcstombs');
  late final _wcstombs30 = _wcstombs30Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  int rpmatch30(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch30(
      __response,
    );
  }

  late final _rpmatch30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch30 =
      _rpmatch30Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt30(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt30(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt30 = _getsubopt30Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg30(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg30(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg30 =
      _getloadavg30Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Void> memcpy30(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy30(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpy30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memcpy');
  late final _memcpy30 = _memcpy30Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove30(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove30(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmove30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memmove');
  late final _memmove30 = _memmove30Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy30(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy30(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpy30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memccpy');
  late final _memccpy30 = _memccpy30Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset30(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset30(
      __s,
      __c,
      __n,
    );
  }

  late final _memset30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memset');
  late final _memset30 = _memset30Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp30(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp30(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmp30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('memcmp');
  late final _memcmp30 = _memcmp30Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq30(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq30(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeq30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__memcmpeq');
  late final ___memcmpeq30 = ___memcmpeq30Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr30(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr30(
      __s,
      __c,
      __n,
    );
  }

  late final _memchr30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memchr');
  late final _memchr30 = _memchr30Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy30(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy30(
      __dest,
      __src,
    );
  }

  late final _strcpy30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy30 = _strcpy30Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy30(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy30(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpy30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncpy');
  late final _strncpy30 = _strncpy30Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat30(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat30(
      __dest,
      __src,
    );
  }

  late final _strcat30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat30 = _strcat30Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat30(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat30(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncat30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncat');
  late final _strncat30 = _strncat30Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp30(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp30(
      __s1,
      __s2,
    );
  }

  late final _strcmp30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp30 = _strcmp30Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp30(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp30(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmp30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncmp');
  late final _strncmp30 = _strncmp30Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll30(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll30(
      __s1,
      __s2,
    );
  }

  late final _strcoll30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll30 = _strcoll30Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm30(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm30(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrm30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strxfrm');
  late final _strxfrm30 = _strxfrm30Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l30(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l30(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_l30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l30 = _strcoll_l30Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l30(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l30(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_l30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strxfrm_l');
  late final _strxfrm_l30 = _strxfrm_l30Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup30(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup30(
      __s,
    );
  }

  late final _strdup30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup30 = _strdup30Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup30(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup30(
      __string,
      __n,
    );
  }

  late final _strndup30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strndup');
  late final _strndup30 = _strndup30Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr30(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr30(
      __s,
      __c,
    );
  }

  late final _strchr30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr30 = _strchr30Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr30(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr30(
      __s,
      __c,
    );
  }

  late final _strrchr30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr30 = _strrchr30Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn30(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn30(
      __s,
      __reject,
    );
  }

  late final _strcspn30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn30 = _strcspn30Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn30(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn30(
      __s,
      __accept,
    );
  }

  late final _strspn30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn30 = _strspn30Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk30(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk30(
      __s,
      __accept,
    );
  }

  late final _strpbrk30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk30 = _strpbrk30Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr30(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr30(
      __haystack,
      __needle,
    );
  }

  late final _strstr30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr30 = _strstr30Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok30(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok30(
      __s,
      __delim,
    );
  }

  late final _strtok30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok30 = _strtok30Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r30(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r30(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_r30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r30 = ___strtok_r30Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r30(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r30(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_r30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r30 = _strtok_r30Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen30(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen30(
      __s,
    );
  }

  late final _strlen30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'strlen');
  late final _strlen30 =
      _strlen30Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen30(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen30(
      __string,
      __maxlen,
    );
  }

  late final _strnlen30Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'strnlen');
  late final _strnlen30 =
      _strnlen30Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror30(
    int __errnum,
  ) {
    return _strerror30(
      __errnum,
    );
  }

  late final _strerror30Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror30 =
      _strerror30Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r30(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r30(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_r30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('strerror_r');
  late final _strerror_r30 = _strerror_r30Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l30(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l30(
      __errnum,
      __l,
    );
  }

  late final _strerror_l30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l30 = _strerror_l30Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp30(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp30(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmp30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcmp');
  late final _bcmp30 = _bcmp30Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy30(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy30(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopy30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcopy');
  late final _bcopy30 = _bcopy30Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero30(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero30(
      __s,
      __n,
    );
  }

  late final _bzero30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('bzero');
  late final _bzero30 =
      _bzero30Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index30(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index30(
      __s,
      __c,
    );
  }

  late final _index30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index30 = _index30Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex30(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex30(
      __s,
      __c,
    );
  }

  late final _rindex30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex30 = _rindex30Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs30(
    int __i,
  ) {
    return _ffs30(
      __i,
    );
  }

  late final _ffs30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs30 = _ffs30Ptr.asFunction<int Function(int)>();

  int ffsl30(
    int __l,
  ) {
    return _ffsl30(
      __l,
    );
  }

  late final _ffsl30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl30 = _ffsl30Ptr.asFunction<int Function(int)>();

  int ffsll30(
    int __ll,
  ) {
    return _ffsll30(
      __ll,
    );
  }

  late final _ffsll30Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll30 = _ffsll30Ptr.asFunction<int Function(int)>();

  int strcasecmp30(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp30(
      __s1,
      __s2,
    );
  }

  late final _strcasecmp30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp30 = _strcasecmp30Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp30(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp30(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmp30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncasecmp');
  late final _strncasecmp30 = _strncasecmp30Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l30(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l30(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_l30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l30 = _strcasecmp_l30Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l30(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l30(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_l30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l30 = _strncasecmp_l30Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero30(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero30(
      __s,
      __n,
    );
  }

  late final _explicit_bzero30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('explicit_bzero');
  late final _explicit_bzero30 = _explicit_bzero30Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep30(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep30(
      __stringp,
      __delim,
    );
  }

  late final _strsep30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep30 = _strsep30Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal30(
    int __sig,
  ) {
    return _strsignal30(
      __sig,
    );
  }

  late final _strsignal30Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal30 =
      _strsignal30Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy30(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy30(
      __dest,
      __src,
    );
  }

  late final ___stpcpy30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy30 = ___stpcpy30Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy30(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy30(
      __dest,
      __src,
    );
  }

  late final _stpcpy30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy30 = _stpcpy30Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy30(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy30(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpy30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('__stpncpy');
  late final ___stpncpy30 = ___stpncpy30Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy30(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy30(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpy30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('stpncpy');
  late final _stpncpy30 = _stpncpy30Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  late final ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> _wow_txt =
      _lookup<ffi.Pointer<ffi.UnsignedChar>>('wow_txt');

  ffi.Pointer<ffi.UnsignedChar> get wow_txt => _wow_txt.value;

  set wow_txt(ffi.Pointer<ffi.UnsignedChar> value) => _wow_txt.value = value;

  void wow() {
    return _wow();
  }

  late final _wowPtr = _lookup<ffi.NativeFunction<ffi.Void Function()>>('wow');
  late final _wow = _wowPtr.asFunction<void Function()>();
}

class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

class __mbstate_t extends ffi.Struct {
  @ffi.Int()
  external int __count;

  external UnnamedUnion1 __value;
}

class UnnamedUnion1 extends ffi.Union {
  @ffi.UnsignedInt()
  external int __wch;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __wchb;
}

class _G_fpos_t extends ffi.Struct {
  @__off_t()
  external int __pos;

  external __mbstate_t __state;
}

typedef __off_t = ffi.Long;

class _G_fpos64_t extends ffi.Struct {
  @__off64_t()
  external int __pos;

  external __mbstate_t __state;
}

typedef __off64_t = ffi.Long;

class _IO_FILE extends ffi.Struct {
  @ffi.Int()
  external int _flags;

  external ffi.Pointer<ffi.Char> _IO_read_ptr;

  external ffi.Pointer<ffi.Char> _IO_read_end;

  external ffi.Pointer<ffi.Char> _IO_read_base;

  external ffi.Pointer<ffi.Char> _IO_write_base;

  external ffi.Pointer<ffi.Char> _IO_write_ptr;

  external ffi.Pointer<ffi.Char> _IO_write_end;

  external ffi.Pointer<ffi.Char> _IO_buf_base;

  external ffi.Pointer<ffi.Char> _IO_buf_end;

  external ffi.Pointer<ffi.Char> _IO_save_base;

  external ffi.Pointer<ffi.Char> _IO_backup_base;

  external ffi.Pointer<ffi.Char> _IO_save_end;

  external ffi.Pointer<_IO_marker> _markers;

  external ffi.Pointer<_IO_FILE> _chain;

  @ffi.Int()
  external int _fileno;

  @ffi.Int()
  external int _flags2;

  @__off_t()
  external int _old_offset;

  @ffi.UnsignedShort()
  external int _cur_column;

  @ffi.SignedChar()
  external int _vtable_offset;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Char> _shortbuf;

  external ffi.Pointer<_IO_lock_t> _lock;

  @__off64_t()
  external int _offset;

  external ffi.Pointer<_IO_codecvt> _codecvt;

  external ffi.Pointer<_IO_wide_data> _wide_data;

  external ffi.Pointer<_IO_FILE> _freeres_list;

  external ffi.Pointer<ffi.Void> _freeres_buf;

  @ffi.Int()
  external int __pad5;

  @ffi.Int()
  external int _mode;

  @ffi.Char()
  external int _unused2;
}

class _IO_marker extends ffi.Opaque {}

typedef _IO_lock_t = ffi.Void;

class _IO_codecvt extends ffi.Opaque {}

class _IO_wide_data extends ffi.Opaque {}

typedef FILE = _IO_FILE;
typedef __ssize_t = ffi.Long;
typedef fpos_t = __fpos_t;
typedef __fpos_t = _G_fpos_t;

class div_t extends ffi.Struct {
  @ffi.Int()
  external int quot;

  @ffi.Int()
  external int rem;
}

class ldiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

class lldiv_t extends ffi.Struct {
  @ffi.LongLong()
  external int quot;

  @ffi.LongLong()
  external int rem;
}

class __sigset_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedLong> __val;
}

class timeval extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__suseconds_t()
  external int tv_usec;
}

typedef __time_t = ffi.Long;
typedef __suseconds_t = ffi.Long;

class timespec extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__syscall_slong_t()
  external int tv_nsec;
}

typedef __syscall_slong_t = ffi.Long;

class fd_set extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__fd_mask> __fds_bits;
}

typedef __fd_mask = ffi.Long;

class __atomic_wide_counter extends ffi.Union {
  @ffi.UnsignedLongLong()
  external int __value64;

  external UnnamedStruct1 __value32;
}

class UnnamedStruct1 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __low;

  @ffi.UnsignedInt()
  external int __high;
}

class __pthread_internal_list extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_list> __prev;

  external ffi.Pointer<__pthread_internal_list> __next;
}

class __pthread_internal_slist extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_slist> __next;
}

class __pthread_mutex_s extends ffi.Struct {
  @ffi.Int()
  external int __lock;

  @ffi.UnsignedInt()
  external int __count;

  @ffi.Int()
  external int __owner;

  @ffi.UnsignedInt()
  external int __nusers;

  @ffi.Int()
  external int __kind;

  @ffi.Short()
  external int __spins;

  @ffi.Short()
  external int __elision;

  external __pthread_list_t __list;
}

typedef __pthread_list_t = __pthread_internal_list;

class __pthread_rwlock_arch_t extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __readers;

  @ffi.UnsignedInt()
  external int __writers;

  @ffi.UnsignedInt()
  external int __wrphase_futex;

  @ffi.UnsignedInt()
  external int __writers_futex;

  @ffi.UnsignedInt()
  external int __pad3;

  @ffi.UnsignedInt()
  external int __pad4;

  @ffi.Int()
  external int __cur_writer;

  @ffi.Int()
  external int __shared;

  @ffi.SignedChar()
  external int __rwelision;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedChar> __pad1;

  @ffi.UnsignedLong()
  external int __pad2;

  @ffi.UnsignedInt()
  external int __flags;
}

class __pthread_cond_s extends ffi.Struct {
  external __atomic_wide_counter __wseq;

  external __atomic_wide_counter __g1_start;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_refs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_size;

  @ffi.UnsignedInt()
  external int __g1_orig_size;

  @ffi.UnsignedInt()
  external int __wrefs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_signals;
}

class __once_flag extends ffi.Struct {
  @ffi.Int()
  external int __data;
}

class pthread_mutexattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

class pthread_condattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

class pthread_attr_t extends ffi.Union {
  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

class pthread_mutex_t extends ffi.Union {
  external __pthread_mutex_s __data;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

class pthread_cond_t extends ffi.Union {
  external __pthread_cond_s __data;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Char> __size;

  @ffi.LongLong()
  external int __align;
}

class pthread_rwlock_t extends ffi.Union {
  external __pthread_rwlock_arch_t __data;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

class pthread_rwlockattr_t extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

class pthread_barrier_t extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

class pthread_barrierattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

class random_data extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> fptr;

  external ffi.Pointer<ffi.Int32> rptr;

  external ffi.Pointer<ffi.Int32> state;

  @ffi.Int()
  external int rand_type;

  @ffi.Int()
  external int rand_deg;

  @ffi.Int()
  external int rand_sep;

  external ffi.Pointer<ffi.Int32> end_ptr;
}

class drand48_data extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __x;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __old_x;

  @ffi.UnsignedShort()
  external int __c;

  @ffi.UnsignedShort()
  external int __init;

  @ffi.UnsignedLongLong()
  external int __a;
}

typedef __uint32_t = ffi.UnsignedInt;
typedef __compar_fn_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

class __locale_struct extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<__locale_data>> __locales;

  external ffi.Pointer<ffi.UnsignedShort> __ctype_b;

  external ffi.Pointer<ffi.Int> __ctype_tolower;

  external ffi.Pointer<ffi.Int> __ctype_toupper;

  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<ffi.Char>> __names;
}

class __locale_data extends ffi.Opaque {}

typedef locale_t = __locale_t;
typedef __locale_t = ffi.Pointer<__locale_struct>;

class dogecoin_dns_seed_ extends ffi.Struct {
  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> domain;
}

class dogecoin_chainparams_ extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> chainname;

  @ffi.Uint8()
  external int b58prefix_pubkey_address;

  @ffi.Uint8()
  external int b58prefix_script_address;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Char> bech32_hrp;

  @ffi.Uint8()
  external int b58prefix_secret_address;

  /// !private key
  @ffi.Uint32()
  external int b58prefix_bip32_privkey;

  @ffi.Uint32()
  external int b58prefix_bip32_pubkey;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedChar> netmagic;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> genesisblockhash;

  @ffi.Int()
  external int default_port;

  @ffi.Array.multi([8])
  external ffi.Array<dogecoin_dns_seed> dnsseeds;
}

typedef dogecoin_dns_seed = dogecoin_dns_seed_;

class dogecoin_checkpoint_ extends ffi.Struct {
  @ffi.Uint32()
  external int height;

  external ffi.Pointer<ffi.Char> hash;

  @ffi.Uint32()
  external int timestamp;

  @ffi.Uint32()
  external int target;
}

typedef dogecoin_chainparams = dogecoin_chainparams_;
typedef dogecoin_checkpoint = dogecoin_checkpoint_;
typedef dogecoin_bool = ffi.Uint8;

class dogecoin_hdnode extends ffi.Struct {
  @ffi.Uint32()
  external int depth;

  @ffi.Uint32()
  external int fingerprint;

  @ffi.Uint32()
  external int child_num;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> chain_code;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> private_key;

  @ffi.Array.multi([33])
  external ffi.Array<ffi.Uint8> public_key;
}

class buffer extends ffi.Struct {
  external ffi.Pointer<ffi.Void> p;

  @ffi.Int()
  external int len;
}

class const_buffer extends ffi.Struct {
  external ffi.Pointer<ffi.Void> p;

  @ffi.Int()
  external int len;
}

class cstring extends ffi.Struct {
  external ffi.Pointer<ffi.Char> str;

  @ffi.Int()
  external int len;

  @ffi.Int()
  external int alloc;
}

typedef ssize_t = __ssize_t;

/// It's a struct that has pointers to functions that do the actual memory management.
class dogecoin_mem_mapper extends ffi.Struct {
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>
      dogecoin_malloc;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>
      dogecoin_calloc;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Int)>>
      dogecoin_realloc;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      dogecoin_free;
}

class _sha256_context extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint32> state;

  @ffi.Uint64()
  external int bitcount;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> buffer;
}

class _sha512_context extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint64> state;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint64> bitcount;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Uint8> buffer;
}

typedef sha256_context = _sha256_context;
typedef sha512_context = _sha512_context;

class vector extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Void>> data;

  @ffi.Int()
  external int len;

  @ffi.Int()
  external int alloc;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      elem_free_f;
}

class dogecoin_key_ extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> privkey;
}

class dogecoin_pubkey_ extends ffi.Struct {
  @dogecoin_bool()
  external int compressed;

  @ffi.Array.multi([65])
  external ffi.Array<ffi.Uint8> pubkey;
}

typedef dogecoin_key = dogecoin_key_;
typedef dogecoin_pubkey = dogecoin_pubkey_;

/// Sighash version types
abstract class dogecoin_sig_version {
  static const int SIGVERSION_BASE = 0;
}

/// Script opcodes
abstract class opcodetype {
  static const int OP_0 = 0;
  static const int OP_FALSE = 0;
  static const int OP_PUSHDATA1 = 76;
  static const int OP_PUSHDATA2 = 77;
  static const int OP_PUSHDATA4 = 78;
  static const int OP_1NEGATE = 79;
  static const int OP_RESERVED = 80;
  static const int OP_1 = 81;
  static const int OP_TRUE = 81;
  static const int OP_2 = 82;
  static const int OP_3 = 83;
  static const int OP_4 = 84;
  static const int OP_5 = 85;
  static const int OP_6 = 86;
  static const int OP_7 = 87;
  static const int OP_8 = 88;
  static const int OP_9 = 89;
  static const int OP_10 = 90;
  static const int OP_11 = 91;
  static const int OP_12 = 92;
  static const int OP_13 = 93;
  static const int OP_14 = 94;
  static const int OP_15 = 95;
  static const int OP_16 = 96;
  static const int OP_NOP = 97;
  static const int OP_VER = 98;
  static const int OP_IF = 99;
  static const int OP_NOTIF = 100;
  static const int OP_VERIF = 101;
  static const int OP_VERNOTIF = 102;
  static const int OP_ELSE = 103;
  static const int OP_ENDIF = 104;
  static const int OP_VERIFY = 105;
  static const int OP_RETURN = 106;
  static const int OP_TOALTSTACK = 107;
  static const int OP_FROMALTSTACK = 108;
  static const int OP_2DROP = 109;
  static const int OP_2DUP = 110;
  static const int OP_3DUP = 111;
  static const int OP_2OVER = 112;
  static const int OP_2ROT = 113;
  static const int OP_2SWAP = 114;
  static const int OP_IFDUP = 115;
  static const int OP_DEPTH = 116;
  static const int OP_DROP = 117;
  static const int OP_DUP = 118;
  static const int OP_NIP = 119;
  static const int OP_OVER = 120;
  static const int OP_PICK = 121;
  static const int OP_ROLL = 122;
  static const int OP_ROT = 123;
  static const int OP_SWAP = 124;
  static const int OP_TUCK = 125;
  static const int OP_CAT = 126;
  static const int OP_SUBSTR = 127;
  static const int OP_LEFT = 128;
  static const int OP_RIGHT = 129;
  static const int OP_SIZE = 130;
  static const int OP_INVERT = 131;
  static const int OP_AND = 132;
  static const int OP_OR = 133;
  static const int OP_XOR = 134;
  static const int OP_EQUAL = 135;
  static const int OP_EQUALVERIFY = 136;
  static const int OP_RESERVED1 = 137;
  static const int OP_RESERVED2 = 138;
  static const int OP_1ADD = 139;
  static const int OP_1SUB = 140;
  static const int OP_2MUL = 141;
  static const int OP_2DIV = 142;
  static const int OP_NEGATE = 143;
  static const int OP_ABS = 144;
  static const int OP_NOT = 145;
  static const int OP_0NOTEQUAL = 146;
  static const int OP_ADD = 147;
  static const int OP_SUB = 148;
  static const int OP_MUL = 149;
  static const int OP_DIV = 150;
  static const int OP_MOD = 151;
  static const int OP_LSHIFT = 152;
  static const int OP_RSHIFT = 153;
  static const int OP_BOOLAND = 154;
  static const int OP_BOOLOR = 155;
  static const int OP_NUMEQUAL = 156;
  static const int OP_NUMEQUALVERIFY = 157;
  static const int OP_NUMNOTEQUAL = 158;
  static const int OP_LESSTHAN = 159;
  static const int OP_GREATERTHAN = 160;
  static const int OP_LESSTHANOREQUAL = 161;
  static const int OP_GREATERTHANOREQUAL = 162;
  static const int OP_MIN = 163;
  static const int OP_MAX = 164;
  static const int OP_WITHIN = 165;
  static const int OP_RIPEMD160 = 166;
  static const int OP_SHA1 = 167;
  static const int OP_SHA256 = 168;
  static const int OP_HASH160 = 169;
  static const int OP_HASH256 = 170;
  static const int OP_CODESEPARATOR = 171;
  static const int OP_CHECKSIG = 172;
  static const int OP_CHECKSIGVERIFY = 173;
  static const int OP_CHECKMULTISIG = 174;
  static const int OP_CHECKMULTISIGVERIFY = 175;
  static const int OP_NOP1 = 176;
  static const int OP_NOP2 = 177;
  static const int OP_CHECKLOCKTIMEVERIFY = 177;
  static const int OP_NOP3 = 178;
  static const int OP_NOP4 = 179;
  static const int OP_NOP5 = 180;
  static const int OP_NOP6 = 181;
  static const int OP_NOP7 = 182;
  static const int OP_NOP8 = 183;
  static const int OP_NOP9 = 184;
  static const int OP_NOP10 = 185;
  static const int OP_SMALLINTEGER = 250;
  static const int OP_PUBKEYS = 251;
  static const int OP_PUBKEYHASH = 253;
  static const int OP_PUBKEY = 254;
  static const int OP_INVALIDOPCODE = 255;
}

abstract class dogecoin_tx_out_type {
  static const int DOGECOIN_TX_INVALID = -1;
  static const int DOGECOIN_TX_NONSTANDARD = 0;
  static const int DOGECOIN_TX_PUBKEY = 1;
  static const int DOGECOIN_TX_PUBKEYHASH = 2;
  static const int DOGECOIN_TX_SCRIPTHASH = 3;
  static const int DOGECOIN_TX_MULTISIG = 4;
}

class dogecoin_script_op_ extends ffi.Struct {
  @ffi.Int32()
  external int op;

  external ffi.Pointer<ffi.UnsignedChar> data;

  @ffi.Int()
  external int datalen;
}

typedef dogecoin_script_op = dogecoin_script_op_;

class dogecoin_script_ extends ffi.Struct {
  external ffi.Pointer<ffi.Int> data;

  @ffi.Int()
  external int limit;

  @ffi.Int()
  external int current;
}

class dogecoin_tx_outpoint_ extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> hash;

  @ffi.Uint32()
  external int n;
}

class dogecoin_tx_in_ extends ffi.Struct {
  external dogecoin_tx_outpoint prevout;

  external ffi.Pointer<cstring> script_sig;

  @ffi.Uint32()
  external int sequence;
}

typedef dogecoin_tx_outpoint = dogecoin_tx_outpoint_;

class dogecoin_tx_out_ extends ffi.Struct {
  @ffi.Int64()
  external int value;

  external ffi.Pointer<cstring> script_pubkey;
}

class dogecoin_tx_ extends ffi.Struct {
  @ffi.Int32()
  external int version;

  external ffi.Pointer<vector> vin;

  external ffi.Pointer<vector> vout;

  @ffi.Uint32()
  external int locktime;
}

typedef dogecoin_tx_out = dogecoin_tx_out_;
typedef dogecoin_tx_in = dogecoin_tx_in_;
typedef dogecoin_tx = dogecoin_tx_;

abstract class dogecoin_tx_sign_result {
  static const int DOGECOIN_SIGN_UNKNOWN = 0;
  static const int DOGECOIN_SIGN_INVALID_KEY = -2;
  static const int DOGECOIN_SIGN_NO_KEY_MATCH = -3;
  static const int DOGECOIN_SIGN_SIGHASH_FAILED = -4;
  static const int DOGECOIN_SIGN_UNKNOWN_SCRIPT_TYPE = -5;
  static const int DOGECOIN_SIGN_INVALID_TX_OR_SCRIPT = -6;
  static const int DOGECOIN_SIGN_INPUTINDEX_OUT_OF_RANGE = -7;
  static const int DOGECOIN_SIGN_OK = 1;
}

class dogecoin_block_header_ extends ffi.Struct {
  @ffi.Int32()
  external int version;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> prev_block;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> merkle_root;

  @ffi.Uint32()
  external int timestamp;

  @ffi.Uint32()
  external int bits;

  @ffi.Uint32()
  external int nonce;
}

typedef dogecoin_block_header = dogecoin_block_header_;

class AES_state extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint16> slice;
}

class AES128_ctx extends ffi.Struct {
  @ffi.Array.multi([11])
  external ffi.Array<AES_state> rk;
}

class AES192_ctx extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<AES_state> rk;
}

class AES256_ctx extends ffi.Struct {
  @ffi.Array.multi([15])
  external ffi.Array<AES_state> rk;
}

class iovec extends ffi.Struct {
  external ffi.Pointer<ffi.Void> iov_base;

  @ffi.Int()
  external int iov_len;
}

abstract class __socket_type {
  static const int SOCK_STREAM = 1;
  static const int SOCK_DGRAM = 2;
  static const int SOCK_RAW = 3;
  static const int SOCK_RDM = 4;
  static const int SOCK_SEQPACKET = 5;
  static const int SOCK_DCCP = 6;
  static const int SOCK_PACKET = 10;
  static const int SOCK_CLOEXEC = 524288;
  static const int SOCK_NONBLOCK = 2048;
}

class sockaddr extends ffi.Struct {
  @sa_family_t()
  external int sa_family;

  @ffi.Array.multi([14])
  external ffi.Array<ffi.Char> sa_data;
}

typedef sa_family_t = ffi.UnsignedShort;

class sockaddr_storage extends ffi.Struct {
  @sa_family_t()
  external int ss_family;

  @ffi.Array.multi([118])
  external ffi.Array<ffi.Char> __ss_padding;

  @ffi.UnsignedLong()
  external int __ss_align;
}

class msghdr extends ffi.Struct {
  external ffi.Pointer<ffi.Void> msg_name;

  @socklen_t()
  external int msg_namelen;

  external ffi.Pointer<iovec> msg_iov;

  @ffi.Int()
  external int msg_iovlen;

  external ffi.Pointer<ffi.Void> msg_control;

  @ffi.Int()
  external int msg_controllen;

  @ffi.Int()
  external int msg_flags;
}

typedef socklen_t = __socklen_t;
typedef __socklen_t = ffi.UnsignedInt;

class cmsghdr extends ffi.Opaque {}

class __kernel_fd_set extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedLong> fds_bits;
}

class __kernel_fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> val;
}

class linger extends ffi.Struct {
  @ffi.Int()
  external int l_onoff;

  @ffi.Int()
  external int l_linger;
}

class osockaddr extends ffi.Struct {
  @ffi.UnsignedShort()
  external int sa_family;

  @ffi.Array.multi([14])
  external ffi.Array<ffi.UnsignedChar> sa_data;
}

class in_addr extends ffi.Struct {
  @in_addr_t()
  external int s_addr;
}

typedef in_addr_t = ffi.Uint32;

class ip_opts extends ffi.Struct {
  external in_addr ip_dst;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> ip_opts1;
}

class ip_mreqn extends ffi.Struct {
  external in_addr imr_multiaddr;

  external in_addr imr_address;

  @ffi.Int()
  external int imr_ifindex;
}

class in_pktinfo extends ffi.Struct {
  @ffi.Int()
  external int ipi_ifindex;

  external in_addr ipi_spec_dst;

  external in_addr ipi_addr;
}

class in6_addr extends ffi.Struct {
  external UnnamedUnion2 __in6_u;
}

class UnnamedUnion2 extends ffi.Union {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> __u6_addr8;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint16> __u6_addr16;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint32> __u6_addr32;
}

class sockaddr_in extends ffi.Struct {
  @sa_family_t()
  external int sin_family;

  @in_port_t()
  external int sin_port;

  external in_addr sin_addr;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.UnsignedChar> sin_zero;
}

typedef in_port_t = ffi.Uint16;

class sockaddr_in6 extends ffi.Struct {
  @sa_family_t()
  external int sin6_family;

  @in_port_t()
  external int sin6_port;

  @ffi.Uint32()
  external int sin6_flowinfo;

  external in6_addr sin6_addr;

  @ffi.Uint32()
  external int sin6_scope_id;
}

class ip_mreq extends ffi.Struct {
  external in_addr imr_multiaddr;

  external in_addr imr_interface;
}

class ip_mreq_source extends ffi.Struct {
  external in_addr imr_multiaddr;

  external in_addr imr_interface;

  external in_addr imr_sourceaddr;
}

class ipv6_mreq extends ffi.Struct {
  external in6_addr ipv6mr_multiaddr;

  @ffi.UnsignedInt()
  external int ipv6mr_interface;
}

class group_req extends ffi.Struct {
  @ffi.Uint32()
  external int gr_interface;

  external sockaddr_storage gr_group;
}

class group_source_req extends ffi.Struct {
  @ffi.Uint32()
  external int gsr_interface;

  external sockaddr_storage gsr_group;

  external sockaddr_storage gsr_source;
}

class ip_msfilter extends ffi.Struct {
  external in_addr imsf_multiaddr;

  external in_addr imsf_interface;

  @ffi.Uint32()
  external int imsf_fmode;

  @ffi.Uint32()
  external int imsf_numsrc;

  @ffi.Array.multi([1])
  external ffi.Array<in_addr> imsf_slist;
}

class group_filter extends ffi.Struct {
  @ffi.Uint32()
  external int gf_interface;

  external sockaddr_storage gf_group;

  @ffi.Uint32()
  external int gf_fmode;

  @ffi.Uint32()
  external int gf_numsrc;

  @ffi.Array.multi([1])
  external ffi.Array<sockaddr_storage> gf_slist;
}

abstract class service_bits {
  static const int DOGECOIN_NODE_NONE = 0;
  static const int DOGECOIN_NODE_NETWORK = 1;
  static const int DOGECOIN_NODE_GETUTXO = 2;
  static const int DOGECOIN_NODE_BLOOM = 4;
  static const int DOGECOIN_NODE_XTHIN = 16;
  static const int DOGECOIN_NODE_COMPACT_FILTERS = 64;
}

abstract class DOGECOIN_INV_TYPE {
  static const int DOGECOIN_INV_TYPE_ERROR = 0;
  static const int DOGECOIN_INV_TYPE_TX = 1;
  static const int DOGECOIN_INV_TYPE_BLOCK = 2;
  static const int DOGECOIN_INV_TYPE_FILTERED_BLOCK = 3;
  static const int DOGECOIN_INV_TYPE_CMPCT_BLOCK = 4;
}

class dogecoin_p2p_msg_hdr_ extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedChar> netmagic;

  @ffi.Array.multi([12])
  external ffi.Array<ffi.Char> command;

  @ffi.Uint32()
  external int data_len;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedChar> hash;
}

class dogecoin_p2p_inv_msg_ extends ffi.Struct {
  @ffi.Uint32()
  external int type;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> hash;
}

class dogecoin_p2p_address_ extends ffi.Struct {
  @ffi.Uint32()
  external int time;

  @ffi.Uint64()
  external int services;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedChar> ip;

  @ffi.Uint16()
  external int port;
}

class dogecoin_p2p_version_msg_ extends ffi.Struct {
  @ffi.Int32()
  external int version;

  @ffi.Uint64()
  external int services;

  @ffi.Int64()
  external int timestamp;

  external dogecoin_p2p_address addr_recv;

  external dogecoin_p2p_address addr_from;

  @ffi.Uint64()
  external int nonce;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> useragent;

  @ffi.Int32()
  external int start_height;

  @ffi.Uint8()
  external int relay;
}

typedef dogecoin_p2p_address = dogecoin_p2p_address_;

/// getdata / inv message types.
/// These numbers are defined by the protocol. When adding a new value, be sure
/// to mention it in the respective BIP.
abstract class GetDataMsg {
  static const int MSG_TX = 1;
  static const int MSG_BLOCK = 2;

  /// !< Defined in BIP37
  static const int MSG_FILTERED_BLOCK = 3;

  /// !< Defined in BIP152
  static const int MSG_CMPCT_BLOCK = 4;
}

typedef dogecoin_p2p_version_msg = dogecoin_p2p_version_msg_;
typedef dogecoin_p2p_inv_msg = dogecoin_p2p_inv_msg_;
typedef dogecoin_p2p_msg_hdr = dogecoin_p2p_msg_hdr_;

abstract class NODE_STATE {
  static const int NODE_CONNECTING = 1;
  static const int NODE_CONNECTED = 2;
  static const int NODE_ERRORED = 4;
  static const int NODE_TIMEOUT = 8;
  static const int NODE_HEADERSYNC = 16;
  static const int NODE_BLOCKSYNC = 32;
  static const int NODE_MISSBEHAVED = 64;
  static const int NODE_DISCONNECTED = 128;
  static const int NODE_DISCONNECTED_FROM_REMOTE_PEER = 256;
}

class dogecoin_node_ extends ffi.Struct {
  external sockaddr addr;

  external ffi.Pointer<bufferevent> event_bev;

  external ffi.Pointer<event> timer_event;

  external ffi.Pointer<dogecoin_node_group> nodegroup;

  @ffi.Int()
  external int nodeid;

  @ffi.Uint64()
  external int lastping;

  @ffi.Uint64()
  external int time_started_con;

  @ffi.Uint64()
  external int time_last_request;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> last_requested_inv;

  external ffi.Pointer<cstring> recvBuffer;

  @ffi.Uint64()
  external int nonce;

  @ffi.Uint64()
  external int services;

  @ffi.Uint32()
  external int state;

  @ffi.Int()
  external int missbehavescore;

  @dogecoin_bool()
  external int version_handshake;

  @ffi.UnsignedInt()
  external int bestknownheight;

  @ffi.Uint32()
  external int hints;
}

class bufferevent extends ffi.Opaque {}

class event extends ffi.Opaque {}

typedef dogecoin_node_group = dogecoin_node_group_;

class dogecoin_node_group_ extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ctx;

  external ffi.Pointer<vector> nodes;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Char> clientstr;

  @ffi.Int()
  external int desired_amount_connected_nodes;

  external ffi.Pointer<dogecoin_chainparams> chainparams;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>
      log_write_cb;

  external ffi.Pointer<
      ffi.NativeFunction<
          dogecoin_bool Function(
              ffi.Pointer<dogecoin_node_>,
              ffi.Pointer<dogecoin_p2p_msg_hdr>,
              ffi.Pointer<const_buffer>)>> parse_cmd_cb;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<dogecoin_node_>,
              ffi.Pointer<dogecoin_p2p_msg_hdr>,
              ffi.Pointer<const_buffer>)>> postcmd_cb;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_node_>)>>
      node_connection_state_changed_cb;

  external ffi.Pointer<
          ffi.NativeFunction<
              dogecoin_bool Function(ffi.Pointer<dogecoin_node_>)>>
      should_connect_to_more_nodes_cb;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<dogecoin_node_>)>>
      handshake_done_cb;

  external ffi.Pointer<
          ffi.NativeFunction<
              dogecoin_bool Function(
                  ffi.Pointer<dogecoin_node_>, ffi.Pointer<ffi.Uint64>)>>
      periodic_timer_cb;
}

typedef dogecoin_node = dogecoin_node_;

class broadcast_ctx extends ffi.Struct {
  external ffi.Pointer<dogecoin_tx> tx;

  @ffi.UnsignedInt()
  external int timeout;

  @ffi.Int()
  external int debuglevel;

  @ffi.Int()
  external int connected_to_peers;

  @ffi.Int()
  external int max_peers_to_connect;

  @ffi.Int()
  external int max_peers_to_inv;

  @ffi.Int()
  external int inved_to_peers;

  @ffi.Int()
  external int getdata_from_peers;

  @ffi.Int()
  external int found_on_non_inved_peers;

  @ffi.Uint64()
  external int start_time;
}

class dogecoin_rnd_mapper_ extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>
      dogecoin_random_init;

  external ffi.Pointer<
          ffi.NativeFunction<
              dogecoin_bool Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Uint32, ffi.Uint8)>>
      dogecoin_random_bytes;
}

typedef dogecoin_rnd_mapper = dogecoin_rnd_mapper_;

class working_transaction extends ffi.Struct {
  @ffi.Int()
  external int idx;

  external ffi.Pointer<dogecoin_tx> transaction;

  @ffi.Int()
  external int hh;
}

class dogecoin_btree_node extends ffi.Struct {
  external ffi.Pointer<ffi.Void> key;

  external ffi.Pointer<dogecoin_btree_node> left;

  external ffi.Pointer<dogecoin_btree_node> right;
}

const int SIGHASH_ALL = 1;

const int SIGHASH_NONE = 2;

const int SIGHASH_SINGLE = 3;

const int SIGHASH_ANYONECANPAY = 128;

const int MSG_OOB = 1;

const int MSG_PEEK = 2;

const int MSG_DONTROUTE = 4;

const int MSG_CTRUNC = 8;

const int MSG_PROXY = 16;

const int MSG_TRUNC = 32;

const int MSG_DONTWAIT = 64;

const int MSG_EOR = 128;

const int MSG_WAITALL = 256;

const int MSG_FIN = 512;

const int MSG_SYN = 1024;

const int MSG_CONFIRM = 2048;

const int MSG_RST = 4096;

const int MSG_ERRQUEUE = 8192;

const int MSG_NOSIGNAL = 16384;

const int MSG_MORE = 32768;

const int MSG_WAITFORONE = 65536;

const int MSG_BATCH = 262144;

const int MSG_ZEROCOPY = 67108864;

const int MSG_FASTOPEN = 536870912;

const int MSG_CMSG_CLOEXEC = 1073741824;

const int SCM_RIGHTS = 1;

const int SHUT_RD = 0;

const int SHUT_WR = 1;

const int SHUT_RDWR = 2;

const int IPPROTO_IP = 0;

const int IPPROTO_ICMP = 1;

const int IPPROTO_IGMP = 2;

const int IPPROTO_IPIP = 4;

const int IPPROTO_TCP = 6;

const int IPPROTO_EGP = 8;

const int IPPROTO_PUP = 12;

const int IPPROTO_UDP = 17;

const int IPPROTO_IDP = 22;

const int IPPROTO_TP = 29;

const int IPPROTO_DCCP = 33;

const int IPPROTO_IPV6 = 41;

const int IPPROTO_RSVP = 46;

const int IPPROTO_GRE = 47;

const int IPPROTO_ESP = 50;

const int IPPROTO_AH = 51;

const int IPPROTO_MTP = 92;

const int IPPROTO_BEETPH = 94;

const int IPPROTO_ENCAP = 98;

const int IPPROTO_PIM = 103;

const int IPPROTO_COMP = 108;

const int IPPROTO_SCTP = 132;

const int IPPROTO_UDPLITE = 136;

const int IPPROTO_MPLS = 137;

const int IPPROTO_ETHERNET = 143;

const int IPPROTO_RAW = 255;

const int IPPROTO_MPTCP = 262;

const int IPPROTO_MAX = 263;

const int IPPROTO_HOPOPTS = 0;

const int IPPROTO_ROUTING = 43;

const int IPPROTO_FRAGMENT = 44;

const int IPPROTO_ICMPV6 = 58;

const int IPPROTO_NONE = 59;

const int IPPROTO_DSTOPTS = 60;

const int IPPROTO_MH = 135;

const int IPPORT_ECHO = 7;

const int IPPORT_DISCARD = 9;

const int IPPORT_SYSTAT = 11;

const int IPPORT_DAYTIME = 13;

const int IPPORT_NETSTAT = 15;

const int IPPORT_FTP = 21;

const int IPPORT_TELNET = 23;

const int IPPORT_SMTP = 25;

const int IPPORT_TIMESERVER = 37;

const int IPPORT_NAMESERVER = 42;

const int IPPORT_WHOIS = 43;

const int IPPORT_MTP = 57;

const int IPPORT_TFTP = 69;

const int IPPORT_RJE = 77;

const int IPPORT_FINGER = 79;

const int IPPORT_TTYLINK = 87;

const int IPPORT_SUPDUP = 95;

const int IPPORT_EXECSERVER = 512;

const int IPPORT_LOGINSERVER = 513;

const int IPPORT_CMDSERVER = 514;

const int IPPORT_EFSSERVER = 520;

const int IPPORT_BIFFUDP = 512;

const int IPPORT_WHOSERVER = 513;

const int IPPORT_ROUTESERVER = 520;

const int IPPORT_RESERVED = 1024;

const int IPPORT_USERRESERVED = 5000;

const int NODE_CONNECTIONSTATE_DISCONNECTED = 0;

const int NODE_CONNECTIONSTATE_CONNECTING = 5;

const int NODE_CONNECTIONSTATE_CONNECTED = 50;

const int NODE_CONNECTIONSTATE_ERRORED = 100;

const int NODE_CONNECTIONSTATE_ERRORED_TIMEOUT = 101;

const int _LIBC_LIMITS_H_ = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_60559_BFP__ = 201404;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_60559_COMPLEX__ = 201404;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 36;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int MB_LEN_MAX = 16;

const int LLONG_MIN = -9223372036854775808;

const int LLONG_MAX = 9223372036854775807;

const int ULLONG_MAX = -1;

const int _BITS_POSIX1_LIM_H = 1;

const int _POSIX_AIO_LISTIO_MAX = 2;

const int _POSIX_AIO_MAX = 1;

const int _POSIX_ARG_MAX = 4096;

const int _POSIX_CHILD_MAX = 25;

const int _POSIX_DELAYTIMER_MAX = 32;

const int _POSIX_HOST_NAME_MAX = 255;

const int _POSIX_LINK_MAX = 8;

const int _POSIX_LOGIN_NAME_MAX = 9;

const int _POSIX_MAX_CANON = 255;

const int _POSIX_MAX_INPUT = 255;

const int _POSIX_MQ_OPEN_MAX = 8;

const int _POSIX_MQ_PRIO_MAX = 32;

const int _POSIX_NAME_MAX = 14;

const int _POSIX_NGROUPS_MAX = 8;

const int _POSIX_OPEN_MAX = 20;

const int _POSIX_PATH_MAX = 256;

const int _POSIX_PIPE_BUF = 512;

const int _POSIX_RE_DUP_MAX = 255;

const int _POSIX_RTSIG_MAX = 8;

const int _POSIX_SEM_NSEMS_MAX = 256;

const int _POSIX_SEM_VALUE_MAX = 32767;

const int _POSIX_SIGQUEUE_MAX = 32;

const int _POSIX_SSIZE_MAX = 32767;

const int _POSIX_STREAM_MAX = 8;

const int _POSIX_SYMLINK_MAX = 255;

const int _POSIX_SYMLOOP_MAX = 8;

const int _POSIX_TIMER_MAX = 32;

const int _POSIX_TTY_NAME_MAX = 9;

const int _POSIX_TZNAME_MAX = 6;

const int _POSIX_CLOCKRES_MIN = 20000000;

const int NGROUPS_MAX = 65536;

const int MAX_CANON = 255;

const int MAX_INPUT = 255;

const int NAME_MAX = 255;

const int PATH_MAX = 4096;

const int PIPE_BUF = 4096;

const int XATTR_NAME_MAX = 255;

const int XATTR_SIZE_MAX = 65536;

const int XATTR_LIST_MAX = 65536;

const int RTSIG_MAX = 32;

const int _POSIX_THREAD_KEYS_MAX = 128;

const int PTHREAD_KEYS_MAX = 1024;

const int _POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4;

const int PTHREAD_DESTRUCTOR_ITERATIONS = 4;

const int _POSIX_THREAD_THREADS_MAX = 64;

const int AIO_PRIO_DELTA_MAX = 20;

const int DELAYTIMER_MAX = 2147483647;

const int TTY_NAME_MAX = 32;

const int LOGIN_NAME_MAX = 256;

const int HOST_NAME_MAX = 64;

const int MQ_PRIO_MAX = 32768;

const int SEM_VALUE_MAX = 2147483647;

const int _BITS_POSIX2_LIM_H = 1;

const int _POSIX2_BC_BASE_MAX = 99;

const int _POSIX2_BC_DIM_MAX = 2048;

const int _POSIX2_BC_SCALE_MAX = 99;

const int _POSIX2_BC_STRING_MAX = 1000;

const int _POSIX2_COLL_WEIGHTS_MAX = 2;

const int _POSIX2_EXPR_NEST_MAX = 32;

const int _POSIX2_LINE_MAX = 2048;

const int _POSIX2_RE_DUP_MAX = 255;

const int _POSIX2_CHARCLASS_NAME_MAX = 14;

const int BC_BASE_MAX = 99;

const int BC_DIM_MAX = 2048;

const int BC_SCALE_MAX = 99;

const int BC_STRING_MAX = 1000;

const int COLL_WEIGHTS_MAX = 255;

const int EXPR_NEST_MAX = 32;

const int LINE_MAX = 2048;

const int CHARCLASS_NAME_MAX = 2048;

const int RE_DUP_MAX = 32767;

const int _STDINT_H = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int _STDIO_H = 1;

const int _____fpos_t_defined = 1;

const int ____mbstate_t_defined = 1;

const int _____fpos64_t_defined = 1;

const int ____FILE_defined = 1;

const int __FILE_defined = 1;

const int __struct_FILE_defined = 1;

const int _IO_EOF_SEEN = 16;

const int _IO_ERR_SEEN = 32;

const int _IO_USER_LOCK = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 8192;

const int EOF = -1;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const String P_tmpdir = '/tmp';

const int _BITS_STDIO_LIM_H = 1;

const int L_tmpnam = 20;

const int TMP_MAX = 238328;

const int FILENAME_MAX = 4096;

const int L_ctermid = 9;

const int FOPEN_MAX = 16;

const int __HAVE_FLOAT128 = 0;

const int __HAVE_DISTINCT_FLOAT128 = 0;

const int __HAVE_FLOAT64X = 1;

const int __HAVE_FLOAT64X_LONG_DOUBLE = 1;

const int __HAVE_FLOAT16 = 0;

const int __HAVE_FLOAT32 = 1;

const int __HAVE_FLOAT64 = 1;

const int __HAVE_FLOAT32X = 1;

const int __HAVE_FLOAT128X = 0;

const int __HAVE_DISTINCT_FLOAT16 = 0;

const int __HAVE_DISTINCT_FLOAT32 = 0;

const int __HAVE_DISTINCT_FLOAT64 = 0;

const int __HAVE_DISTINCT_FLOAT32X = 0;

const int __HAVE_DISTINCT_FLOAT64X = 0;

const int __HAVE_DISTINCT_FLOAT128X = 0;

const int __HAVE_FLOAT128_UNLIKE_LDBL = 0;

const int __HAVE_FLOATN_NOT_TYPEDEF = 0;

const int _STDLIB_H = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WSTOPPED = 2;

const int WEXITED = 4;

const int WCONTINUED = 8;

const int WNOWAIT = 16777216;

const int __WNOTHREAD = 536870912;

const int __WALL = 1073741824;

const int __WCLONE = 2147483648;

const int __W_CONTINUED = 65535;

const int __WCOREFLAG = 128;

const int __ldiv_t_defined = 1;

const int __lldiv_t_defined = 1;

const int RAND_MAX = 2147483647;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int _SYS_TYPES_H = 1;

const int __clock_t_defined = 1;

const int __clockid_t_defined = 1;

const int __time_t_defined = 1;

const int __timer_t_defined = 1;

const int __BIT_TYPES_DEFINED__ = 1;

const int _ENDIAN_H = 1;

const int _BITS_ENDIAN_H = 1;

const int __LITTLE_ENDIAN = 1234;

const int __BIG_ENDIAN = 4321;

const int __PDP_ENDIAN = 3412;

const int _BITS_ENDIANNESS_H = 1;

const int __BYTE_ORDER = 1234;

const int __FLOAT_WORD_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int _BITS_BYTESWAP_H = 1;

const int _BITS_UINTN_IDENTITY_H = 1;

const int _SYS_SELECT_H = 1;

const int __sigset_t_defined = 1;

const int _SIGSET_NWORDS = 16;

const int __timeval_defined = 1;

const int _STRUCT_TIMESPEC = 1;

const int __NFDBITS = 64;

const int FD_SETSIZE = 1024;

const int NFDBITS = 64;

const int _BITS_PTHREADTYPES_COMMON_H = 1;

const int _THREAD_SHARED_TYPES_H = 1;

const int _BITS_PTHREADTYPES_ARCH_H = 1;

const int __SIZEOF_PTHREAD_MUTEX_T = 40;

const int __SIZEOF_PTHREAD_ATTR_T = 56;

const int __SIZEOF_PTHREAD_RWLOCK_T = 56;

const int __SIZEOF_PTHREAD_BARRIER_T = 32;

const int __SIZEOF_PTHREAD_MUTEXATTR_T = 4;

const int __SIZEOF_PTHREAD_COND_T = 48;

const int __SIZEOF_PTHREAD_CONDATTR_T = 4;

const int __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;

const int __SIZEOF_PTHREAD_BARRIERATTR_T = 4;

const int _THREAD_MUTEX_INTERNAL_H = 1;

const int __PTHREAD_MUTEX_HAVE_PREV = 1;

const int __PTHREAD_RWLOCK_ELISION_EXTRA = 0;

const int __have_pthread_attr_t = 1;

const int _ALLOCA_H = 1;

const int _STRING_H = 1;

const int _BITS_TYPES_LOCALE_T_H = 1;

const int _BITS_TYPES___LOCALE_T_H = 1;

const int _STRINGS_H = 1;

const int true1 = 1;

const int false1 = 0;

const int DEBUG = 0;

const int DOGECOIN_ECKEY_UNCOMPRESSED_LENGTH = 65;

const int DOGECOIN_ECKEY_COMPRESSED_LENGTH = 33;

const int DOGECOIN_ECKEY_PKEY_LENGTH = 32;

const int DOGECOIN_HASH_LENGTH = 32;

const int AES_BLOCK_SIZE = 16;

const int DOGECOIN_BIP32_CHAINCODE_SIZE = 32;

const int RSIZE_MAX = 9223372036854775807;

const int SHA256_BLOCK_LENGTH = 64;

const int SHA256_DIGEST_LENGTH = 32;

const int SHA256_DIGEST_STRING_LENGTH = 65;

const int SHA512_BLOCK_LENGTH = 128;

const int SHA512_DIGEST_LENGTH = 64;

const int SHA512_DIGEST_STRING_LENGTH = 129;

const int _ARPA_INET_H = 1;

const int _NETINET_IN_H = 1;

const int _SYS_SOCKET_H = 1;

const int __iovec_defined = 1;

const int SOCK_STREAM = 1;

const int SOCK_DGRAM = 2;

const int SOCK_RAW = 3;

const int SOCK_RDM = 4;

const int SOCK_SEQPACKET = 5;

const int SOCK_DCCP = 6;

const int SOCK_PACKET = 10;

const int SOCK_CLOEXEC = 524288;

const int SOCK_NONBLOCK = 2048;

const int PF_UNSPEC = 0;

const int PF_LOCAL = 1;

const int PF_UNIX = 1;

const int PF_FILE = 1;

const int PF_INET = 2;

const int PF_AX25 = 3;

const int PF_IPX = 4;

const int PF_APPLETALK = 5;

const int PF_NETROM = 6;

const int PF_BRIDGE = 7;

const int PF_ATMPVC = 8;

const int PF_X25 = 9;

const int PF_INET6 = 10;

const int PF_ROSE = 11;

const int PF_DECnet = 12;

const int PF_NETBEUI = 13;

const int PF_SECURITY = 14;

const int PF_KEY = 15;

const int PF_NETLINK = 16;

const int PF_ROUTE = 16;

const int PF_PACKET = 17;

const int PF_ASH = 18;

const int PF_ECONET = 19;

const int PF_ATMSVC = 20;

const int PF_RDS = 21;

const int PF_SNA = 22;

const int PF_IRDA = 23;

const int PF_PPPOX = 24;

const int PF_WANPIPE = 25;

const int PF_LLC = 26;

const int PF_IB = 27;

const int PF_MPLS = 28;

const int PF_CAN = 29;

const int PF_TIPC = 30;

const int PF_BLUETOOTH = 31;

const int PF_IUCV = 32;

const int PF_RXRPC = 33;

const int PF_ISDN = 34;

const int PF_PHONET = 35;

const int PF_IEEE802154 = 36;

const int PF_CAIF = 37;

const int PF_ALG = 38;

const int PF_NFC = 39;

const int PF_VSOCK = 40;

const int PF_KCM = 41;

const int PF_QIPCRTR = 42;

const int PF_SMC = 43;

const int PF_XDP = 44;

const int PF_MCTP = 45;

const int PF_MAX = 46;

const int AF_UNSPEC = 0;

const int AF_LOCAL = 1;

const int AF_UNIX = 1;

const int AF_FILE = 1;

const int AF_INET = 2;

const int AF_AX25 = 3;

const int AF_IPX = 4;

const int AF_APPLETALK = 5;

const int AF_NETROM = 6;

const int AF_BRIDGE = 7;

const int AF_ATMPVC = 8;

const int AF_X25 = 9;

const int AF_INET6 = 10;

const int AF_ROSE = 11;

const int AF_DECnet = 12;

const int AF_NETBEUI = 13;

const int AF_SECURITY = 14;

const int AF_KEY = 15;

const int AF_NETLINK = 16;

const int AF_ROUTE = 16;

const int AF_PACKET = 17;

const int AF_ASH = 18;

const int AF_ECONET = 19;

const int AF_ATMSVC = 20;

const int AF_RDS = 21;

const int AF_SNA = 22;

const int AF_IRDA = 23;

const int AF_PPPOX = 24;

const int AF_WANPIPE = 25;

const int AF_LLC = 26;

const int AF_IB = 27;

const int AF_MPLS = 28;

const int AF_CAN = 29;

const int AF_TIPC = 30;

const int AF_BLUETOOTH = 31;

const int AF_IUCV = 32;

const int AF_RXRPC = 33;

const int AF_ISDN = 34;

const int AF_PHONET = 35;

const int AF_IEEE802154 = 36;

const int AF_CAIF = 37;

const int AF_ALG = 38;

const int AF_NFC = 39;

const int AF_VSOCK = 40;

const int AF_KCM = 41;

const int AF_QIPCRTR = 42;

const int AF_SMC = 43;

const int AF_XDP = 44;

const int AF_MCTP = 45;

const int AF_MAX = 46;

const int SOL_RAW = 255;

const int SOL_DECNET = 261;

const int SOL_X25 = 262;

const int SOL_PACKET = 263;

const int SOL_ATM = 264;

const int SOL_AAL = 265;

const int SOL_IRDA = 266;

const int SOL_NETBEUI = 267;

const int SOL_LLC = 268;

const int SOL_DCCP = 269;

const int SOL_NETLINK = 270;

const int SOL_TIPC = 271;

const int SOL_RXRPC = 272;

const int SOL_PPPOL2TP = 273;

const int SOL_BLUETOOTH = 274;

const int SOL_PNPIPE = 275;

const int SOL_RDS = 276;

const int SOL_IUCV = 277;

const int SOL_CAIF = 278;

const int SOL_ALG = 279;

const int SOL_NFC = 280;

const int SOL_KCM = 281;

const int SOL_TLS = 282;

const int SOL_XDP = 283;

const int SOL_MPTCP = 284;

const int SOL_MCTP = 285;

const int SOL_SMC = 286;

const int SOMAXCONN = 4096;

const int _BITS_SOCKADDR_H = 1;

const int __SOCKADDR_COMMON_SIZE = 2;

const int _SS_SIZE = 128;

const int _SS_PADSIZE = 118;

const int MSG_OOB1 = 1;

const int MSG_PEEK1 = 2;

const int MSG_DONTROUTE1 = 4;

const int MSG_CTRUNC1 = 8;

const int MSG_PROXY1 = 16;

const int MSG_TRUNC1 = 32;

const int MSG_DONTWAIT1 = 64;

const int MSG_EOR1 = 128;

const int MSG_WAITALL1 = 256;

const int MSG_FIN1 = 512;

const int MSG_SYN1 = 1024;

const int MSG_CONFIRM1 = 2048;

const int MSG_RST1 = 4096;

const int MSG_ERRQUEUE1 = 8192;

const int MSG_NOSIGNAL1 = 16384;

const int MSG_MORE1 = 32768;

const int MSG_WAITFORONE1 = 65536;

const int MSG_BATCH1 = 262144;

const int MSG_ZEROCOPY1 = 67108864;

const int MSG_FASTOPEN1 = 536870912;

const int MSG_CMSG_CLOEXEC1 = 1073741824;

const int SCM_RIGHTS1 = 1;

const int __BITS_PER_LONG = 64;

const int FIOSETOWN = 35073;

const int SIOCSPGRP = 35074;

const int FIOGETOWN = 35075;

const int SIOCGPGRP = 35076;

const int SIOCATMARK = 35077;

const int SIOCGSTAMP_OLD = 35078;

const int SIOCGSTAMPNS_OLD = 35079;

const int SOL_SOCKET = 1;

const int SO_DEBUG = 1;

const int SO_REUSEADDR = 2;

const int SO_TYPE = 3;

const int SO_ERROR = 4;

const int SO_DONTROUTE = 5;

const int SO_BROADCAST = 6;

const int SO_SNDBUF = 7;

const int SO_RCVBUF = 8;

const int SO_SNDBUFFORCE = 32;

const int SO_RCVBUFFORCE = 33;

const int SO_KEEPALIVE = 9;

const int SO_OOBINLINE = 10;

const int SO_NO_CHECK = 11;

const int SO_PRIORITY = 12;

const int SO_LINGER = 13;

const int SO_BSDCOMPAT = 14;

const int SO_REUSEPORT = 15;

const int SO_PASSCRED = 16;

const int SO_PEERCRED = 17;

const int SO_RCVLOWAT = 18;

const int SO_SNDLOWAT = 19;

const int SO_RCVTIMEO_OLD = 20;

const int SO_SNDTIMEO_OLD = 21;

const int SO_SECURITY_AUTHENTICATION = 22;

const int SO_SECURITY_ENCRYPTION_TRANSPORT = 23;

const int SO_SECURITY_ENCRYPTION_NETWORK = 24;

const int SO_BINDTODEVICE = 25;

const int SO_ATTACH_FILTER = 26;

const int SO_DETACH_FILTER = 27;

const int SO_GET_FILTER = 26;

const int SO_PEERNAME = 28;

const int SO_ACCEPTCONN = 30;

const int SO_PEERSEC = 31;

const int SO_PASSSEC = 34;

const int SO_MARK = 36;

const int SO_PROTOCOL = 38;

const int SO_DOMAIN = 39;

const int SO_RXQ_OVFL = 40;

const int SO_WIFI_STATUS = 41;

const int SCM_WIFI_STATUS = 41;

const int SO_PEEK_OFF = 42;

const int SO_NOFCS = 43;

const int SO_LOCK_FILTER = 44;

const int SO_SELECT_ERR_QUEUE = 45;

const int SO_BUSY_POLL = 46;

const int SO_MAX_PACING_RATE = 47;

const int SO_BPF_EXTENSIONS = 48;

const int SO_INCOMING_CPU = 49;

const int SO_ATTACH_BPF = 50;

const int SO_DETACH_BPF = 27;

const int SO_ATTACH_REUSEPORT_CBPF = 51;

const int SO_ATTACH_REUSEPORT_EBPF = 52;

const int SO_CNX_ADVICE = 53;

const int SCM_TIMESTAMPING_OPT_STATS = 54;

const int SO_MEMINFO = 55;

const int SO_INCOMING_NAPI_ID = 56;

const int SO_COOKIE = 57;

const int SCM_TIMESTAMPING_PKTINFO = 58;

const int SO_PEERGROUPS = 59;

const int SO_ZEROCOPY = 60;

const int SO_TXTIME = 61;

const int SCM_TXTIME = 61;

const int SO_BINDTOIFINDEX = 62;

const int SO_TIMESTAMP_OLD = 29;

const int SO_TIMESTAMPNS_OLD = 35;

const int SO_TIMESTAMPING_OLD = 37;

const int SO_TIMESTAMP_NEW = 63;

const int SO_TIMESTAMPNS_NEW = 64;

const int SO_TIMESTAMPING_NEW = 65;

const int SO_RCVTIMEO_NEW = 66;

const int SO_SNDTIMEO_NEW = 67;

const int SO_DETACH_REUSEPORT_BPF = 68;

const int SO_PREFER_BUSY_POLL = 69;

const int SO_BUSY_POLL_BUDGET = 70;

const int SO_NETNS_COOKIE = 71;

const int SO_BUF_LOCK = 72;

const int SO_RESERVE_MEM = 73;

const int SO_TXREHASH = 74;

const int SO_TIMESTAMP = 29;

const int SO_TIMESTAMPNS = 35;

const int SO_TIMESTAMPING = 37;

const int SO_RCVTIMEO = 20;

const int SO_SNDTIMEO = 21;

const int SCM_TIMESTAMP = 29;

const int SCM_TIMESTAMPNS = 35;

const int SCM_TIMESTAMPING = 37;

const int __osockaddr_defined = 1;

const int SHUT_RD1 = 0;

const int SHUT_WR1 = 1;

const int SHUT_RDWR1 = 2;

const int __USE_KERNEL_IPV6_DEFS = 0;

const int IP_OPTIONS = 4;

const int IP_HDRINCL = 3;

const int IP_TOS = 1;

const int IP_TTL = 2;

const int IP_RECVOPTS = 6;

const int IP_RECVRETOPTS = 7;

const int IP_RETOPTS = 7;

const int IP_MULTICAST_IF = 32;

const int IP_MULTICAST_TTL = 33;

const int IP_MULTICAST_LOOP = 34;

const int IP_ADD_MEMBERSHIP = 35;

const int IP_DROP_MEMBERSHIP = 36;

const int IP_UNBLOCK_SOURCE = 37;

const int IP_BLOCK_SOURCE = 38;

const int IP_ADD_SOURCE_MEMBERSHIP = 39;

const int IP_DROP_SOURCE_MEMBERSHIP = 40;

const int IP_MSFILTER = 41;

const int MCAST_JOIN_GROUP = 42;

const int MCAST_BLOCK_SOURCE = 43;

const int MCAST_UNBLOCK_SOURCE = 44;

const int MCAST_LEAVE_GROUP = 45;

const int MCAST_JOIN_SOURCE_GROUP = 46;

const int MCAST_LEAVE_SOURCE_GROUP = 47;

const int MCAST_MSFILTER = 48;

const int IP_MULTICAST_ALL = 49;

const int IP_UNICAST_IF = 50;

const int MCAST_EXCLUDE = 0;

const int MCAST_INCLUDE = 1;

const int IP_ROUTER_ALERT = 5;

const int IP_PKTINFO = 8;

const int IP_PKTOPTIONS = 9;

const int IP_PMTUDISC = 10;

const int IP_MTU_DISCOVER = 10;

const int IP_RECVERR = 11;

const int IP_RECVTTL = 12;

const int IP_RECVTOS = 13;

const int IP_MTU = 14;

const int IP_FREEBIND = 15;

const int IP_IPSEC_POLICY = 16;

const int IP_XFRM_POLICY = 17;

const int IP_PASSSEC = 18;

const int IP_TRANSPARENT = 19;

const int IP_ORIGDSTADDR = 20;

const int IP_RECVORIGDSTADDR = 20;

const int IP_MINTTL = 21;

const int IP_NODEFRAG = 22;

const int IP_CHECKSUM = 23;

const int IP_BIND_ADDRESS_NO_PORT = 24;

const int IP_RECVFRAGSIZE = 25;

const int IP_RECVERR_RFC4884 = 26;

const int IP_PMTUDISC_DONT = 0;

const int IP_PMTUDISC_WANT = 1;

const int IP_PMTUDISC_DO = 2;

const int IP_PMTUDISC_PROBE = 3;

const int IP_PMTUDISC_INTERFACE = 4;

const int IP_PMTUDISC_OMIT = 5;

const int SOL_IP = 0;

const int IP_DEFAULT_MULTICAST_TTL = 1;

const int IP_DEFAULT_MULTICAST_LOOP = 1;

const int IP_MAX_MEMBERSHIPS = 20;

const int IPV6_ADDRFORM = 1;

const int IPV6_2292PKTINFO = 2;

const int IPV6_2292HOPOPTS = 3;

const int IPV6_2292DSTOPTS = 4;

const int IPV6_2292RTHDR = 5;

const int IPV6_2292PKTOPTIONS = 6;

const int IPV6_CHECKSUM = 7;

const int IPV6_2292HOPLIMIT = 8;

const int IPV6_NEXTHOP = 9;

const int IPV6_AUTHHDR = 10;

const int IPV6_UNICAST_HOPS = 16;

const int IPV6_MULTICAST_IF = 17;

const int IPV6_MULTICAST_HOPS = 18;

const int IPV6_MULTICAST_LOOP = 19;

const int IPV6_JOIN_GROUP = 20;

const int IPV6_LEAVE_GROUP = 21;

const int IPV6_ROUTER_ALERT = 22;

const int IPV6_MTU_DISCOVER = 23;

const int IPV6_MTU = 24;

const int IPV6_RECVERR = 25;

const int IPV6_V6ONLY = 26;

const int IPV6_JOIN_ANYCAST = 27;

const int IPV6_LEAVE_ANYCAST = 28;

const int IPV6_MULTICAST_ALL = 29;

const int IPV6_ROUTER_ALERT_ISOLATE = 30;

const int IPV6_RECVERR_RFC4884 = 31;

const int IPV6_IPSEC_POLICY = 34;

const int IPV6_XFRM_POLICY = 35;

const int IPV6_HDRINCL = 36;

const int IPV6_RECVPKTINFO = 49;

const int IPV6_PKTINFO = 50;

const int IPV6_RECVHOPLIMIT = 51;

const int IPV6_HOPLIMIT = 52;

const int IPV6_RECVHOPOPTS = 53;

const int IPV6_HOPOPTS = 54;

const int IPV6_RTHDRDSTOPTS = 55;

const int IPV6_RECVRTHDR = 56;

const int IPV6_RTHDR = 57;

const int IPV6_RECVDSTOPTS = 58;

const int IPV6_DSTOPTS = 59;

const int IPV6_RECVPATHMTU = 60;

const int IPV6_PATHMTU = 61;

const int IPV6_DONTFRAG = 62;

const int IPV6_RECVTCLASS = 66;

const int IPV6_TCLASS = 67;

const int IPV6_AUTOFLOWLABEL = 70;

const int IPV6_ADDR_PREFERENCES = 72;

const int IPV6_MINHOPCOUNT = 73;

const int IPV6_ORIGDSTADDR = 74;

const int IPV6_RECVORIGDSTADDR = 74;

const int IPV6_TRANSPARENT = 75;

const int IPV6_UNICAST_IF = 76;

const int IPV6_RECVFRAGSIZE = 77;

const int IPV6_FREEBIND = 78;

const int IPV6_ADD_MEMBERSHIP = 20;

const int IPV6_DROP_MEMBERSHIP = 21;

const int IPV6_RXHOPOPTS = 54;

const int IPV6_RXDSTOPTS = 59;

const int IPV6_PMTUDISC_DONT = 0;

const int IPV6_PMTUDISC_WANT = 1;

const int IPV6_PMTUDISC_DO = 2;

const int IPV6_PMTUDISC_PROBE = 3;

const int IPV6_PMTUDISC_INTERFACE = 4;

const int IPV6_PMTUDISC_OMIT = 5;

const int SOL_IPV6 = 41;

const int SOL_ICMPV6 = 58;

const int IPV6_RTHDR_LOOSE = 0;

const int IPV6_RTHDR_STRICT = 1;

const int IPV6_RTHDR_TYPE_0 = 0;

const int IPPROTO_IP1 = 0;

const int IPPROTO_ICMP1 = 1;

const int IPPROTO_IGMP1 = 2;

const int IPPROTO_IPIP1 = 4;

const int IPPROTO_TCP1 = 6;

const int IPPROTO_EGP1 = 8;

const int IPPROTO_PUP1 = 12;

const int IPPROTO_UDP1 = 17;

const int IPPROTO_IDP1 = 22;

const int IPPROTO_TP1 = 29;

const int IPPROTO_DCCP1 = 33;

const int IPPROTO_IPV61 = 41;

const int IPPROTO_RSVP1 = 46;

const int IPPROTO_GRE1 = 47;

const int IPPROTO_ESP1 = 50;

const int IPPROTO_AH1 = 51;

const int IPPROTO_MTP1 = 92;

const int IPPROTO_BEETPH1 = 94;

const int IPPROTO_ENCAP1 = 98;

const int IPPROTO_PIM1 = 103;

const int IPPROTO_COMP1 = 108;

const int IPPROTO_SCTP1 = 132;

const int IPPROTO_UDPLITE1 = 136;

const int IPPROTO_MPLS1 = 137;

const int IPPROTO_ETHERNET1 = 143;

const int IPPROTO_RAW1 = 255;

const int IPPROTO_MPTCP1 = 262;

const int IPPROTO_HOPOPTS1 = 0;

const int IPPROTO_ROUTING1 = 43;

const int IPPROTO_FRAGMENT1 = 44;

const int IPPROTO_ICMPV61 = 58;

const int IPPROTO_NONE1 = 59;

const int IPPROTO_DSTOPTS1 = 60;

const int IPPROTO_MH1 = 135;

const int IN_CLASSA_NET = 4278190080;

const int IN_CLASSA_NSHIFT = 24;

const int IN_CLASSA_HOST = 16777215;

const int IN_CLASSA_MAX = 128;

const int IN_CLASSB_NET = 4294901760;

const int IN_CLASSB_NSHIFT = 16;

const int IN_CLASSB_HOST = 65535;

const int IN_CLASSB_MAX = 65536;

const int IN_CLASSC_NET = 4294967040;

const int IN_CLASSC_NSHIFT = 8;

const int IN_CLASSC_HOST = 255;

const int INADDR_ANY = 0;

const int INADDR_BROADCAST = 4294967295;

const int INADDR_NONE = 4294967295;

const int INADDR_DUMMY = 3221225480;

const int IN_LOOPBACKNET = 127;

const int INADDR_LOOPBACK = 2130706433;

const int INADDR_UNSPEC_GROUP = 3758096384;

const int INADDR_ALLHOSTS_GROUP = 3758096385;

const int INADDR_ALLRTRS_GROUP = 3758096386;

const int INADDR_ALLSNOOPERS_GROUP = 3758096490;

const int INADDR_MAX_LOCAL_GROUP = 3758096639;

const int INET_ADDRSTRLEN = 16;

const int INET6_ADDRSTRLEN = 46;

const int TO_UINT8_HEX_BUF_LEN = 2048;

const int VARINT_LEN = 20;
