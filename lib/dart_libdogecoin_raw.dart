// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint, unused_field, unused_element
import 'dart:ffi' as ffi;

/// Bindings to libdogecoin
class libdogecoin {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  libdogecoin(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  libdogecoin.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _wordlist_ita =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('wordlist_ita');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get wordlist_ita => _wordlist_ita.value;

  set wordlist_ita(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _wordlist_ita.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _wordlist_spa =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('wordlist_spa');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get wordlist_spa => _wordlist_spa.value;

  set wordlist_spa(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _wordlist_spa.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _wordlist_cze =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('wordlist_cze');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get wordlist_cze => _wordlist_cze.value;

  set wordlist_cze(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _wordlist_cze.value = value;

  /// Copyright (c) 2013-2014 Tomas Dzetkulic
  /// Copyright (c) 2013-2014 Pavol Rusnak
  ///
  /// Permission is hereby granted, free of charge, to any person obtaining
  /// a copy of this software and associated documentation files (the "Software"),
  /// to deal in the Software without restriction, including without limitation
  /// the rights to use, copy, modify, merge, publish, distribute, sublicense,
  /// and/or sell copies of the Software, and to permit persons to whom the
  /// Software is furnished to do so, subject to the following conditions:
  ///
  /// The above copyright notice and this permission notice shall be included
  /// in all copies or substantial portions of the Software.
  ///
  /// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  /// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  /// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
  /// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES
  /// OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  /// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  /// OTHER DEALINGS IN THE SOFTWARE.
  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _wordlist_eng =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('wordlist_eng');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get wordlist_eng => _wordlist_eng.value;

  set wordlist_eng(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _wordlist_eng.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _wordlist_fra =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('wordlist_fra');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get wordlist_fra => _wordlist_fra.value;

  set wordlist_fra(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _wordlist_fra.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _wordlist_por =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('wordlist_por');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get wordlist_por => _wordlist_por.value;

  set wordlist_por(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _wordlist_por.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _wordlist_sc =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('wordlist_sc');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get wordlist_sc => _wordlist_sc.value;

  set wordlist_sc(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _wordlist_sc.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _wordlist_tc =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('wordlist_tc');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get wordlist_tc => _wordlist_tc.value;

  set wordlist_tc(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _wordlist_tc.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _wordlist_jpn =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('wordlist_jpn');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get wordlist_jpn => _wordlist_jpn.value;

  set wordlist_jpn(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _wordlist_jpn.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _wordlist_kor =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('wordlist_kor');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get wordlist_kor => _wordlist_kor.value;

  set wordlist_kor(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _wordlist_kor.value = value;

  late final ffi.Pointer<ffi.Int> _LIBDOGECOIN_API =
      _lookup<ffi.Int>('LIBDOGECOIN_API');

  int get LIBDOGECOIN_API => _LIBDOGECOIN_API.value;

  set LIBDOGECOIN_API(int value) => _LIBDOGECOIN_API.value = value;

  void hash_message(
    ffi.Pointer<ffi.Char> msg,
    int message_bytes,
  ) {
    return _hash_message(
      msg,
      message_bytes,
    );
  }

  late final _hash_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int)>>('hash_message');
  late final _hash_message =
      _hash_messagePtr.asFunction<void Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Int> sign_message(
    ffi.Pointer<ffi.Char> privkey,
    ffi.Pointer<ffi.Char> msg,
  ) {
    return _sign_message(
      privkey,
      msg,
    );
  }

  late final _sign_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sign_message');
  late final _sign_message = _sign_messagePtr.asFunction<
      ffi.Pointer<ffi.Int> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int verify_message(
    ffi.Pointer<ffi.Char> sig,
    ffi.Pointer<ffi.Char> msg,
    ffi.Pointer<ffi.Char> address,
  ) {
    return _verify_message(
      sig,
      msg,
      address,
    );
  }

  late final _verify_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('verify_message');
  late final _verify_message = _verify_messagePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<ffi.Int> _uint16_t = _lookup<ffi.Int>('uint16_t');

  int get uint16_t => _uint16_t.value;

  set uint16_t(int value) => _uint16_t.value = value;

  late final ffi.Pointer<ffi.Int> _vector1 = _lookup<ffi.Int>('vector');

  int get vector1 => _vector1.value;

  set vector1(int value) => _vector1.value = value;

  int vector_free(
    ffi.Pointer<vector2> vec,
    int free_array,
  ) {
    return _vector_free(
      vec,
      free_array,
    );
  }

  late final _vector_freePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<vector2>, ffi.Int)>>(
      'vector_free');
  late final _vector_free =
      _vector_freePtr.asFunction<int Function(ffi.Pointer<vector2>, int)>();

  late final ffi.Pointer<ffi.Int> _dogecoin_bool =
      _lookup<ffi.Int>('dogecoin_bool');

  int get dogecoin_bool => _dogecoin_bool.value;

  set dogecoin_bool(int value) => _dogecoin_bool.value = value;

  int vector_remove_idx(
    ffi.Pointer<vector2> vec,
    int idx,
  ) {
    return _vector_remove_idx(
      vec,
      idx,
    );
  }

  late final _vector_remove_idxPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<vector2>, ffi.Int)>>(
      'vector_remove_idx');
  late final _vector_remove_idx = _vector_remove_idxPtr
      .asFunction<int Function(ffi.Pointer<vector2>, int)>();

  int vector_remove_range(
    ffi.Pointer<vector2> vec,
    int idx,
    int len,
  ) {
    return _vector_remove_range(
      vec,
      idx,
      len,
    );
  }

  late final _vector_remove_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<vector2>, ffi.Int, ffi.Int)>>('vector_remove_range');
  late final _vector_remove_range = _vector_remove_rangePtr
      .asFunction<int Function(ffi.Pointer<vector2>, int, int)>();

  late final ffi.Pointer<ffi.Int> _ssize_t = _lookup<ffi.Int>('ssize_t');

  int get ssize_t => _ssize_t.value;

  set ssize_t(int value) => _ssize_t.value = value;

  late final ffi.Pointer<ffi.Int> _dogecoin_block_header =
      _lookup<ffi.Int>('dogecoin_block_header');

  int get dogecoin_block_header => _dogecoin_block_header.value;

  set dogecoin_block_header(int value) => _dogecoin_block_header.value = value;

  int dogecoin_block_header_free(
    ffi.Pointer<dogecoin_block_header1> header,
  ) {
    return _dogecoin_block_header_free(
      header,
    );
  }

  late final _dogecoin_block_header_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<dogecoin_block_header1>)>>(
      'dogecoin_block_header_free');
  late final _dogecoin_block_header_free = _dogecoin_block_header_freePtr
      .asFunction<int Function(ffi.Pointer<dogecoin_block_header1>)>();

  int dogecoin_block_header_deserialize(
    ffi.Pointer<dogecoin_block_header1> header,
    ffi.Pointer<const_buffer> buf,
  ) {
    return _dogecoin_block_header_deserialize(
      header,
      buf,
    );
  }

  late final _dogecoin_block_header_deserializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<dogecoin_block_header1>,
              ffi.Pointer<const_buffer>)>>('dogecoin_block_header_deserialize');
  late final _dogecoin_block_header_deserialize =
      _dogecoin_block_header_deserializePtr.asFunction<
          int Function(ffi.Pointer<dogecoin_block_header1>,
              ffi.Pointer<const_buffer>)>();

  int dogecoin_block_header_serialize(
    ffi.Pointer<ffi.Int> s,
    ffi.Pointer<dogecoin_block_header1> header,
  ) {
    return _dogecoin_block_header_serialize(
      s,
      header,
    );
  }

  late final _dogecoin_block_header_serializePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Int>, ffi.Pointer<dogecoin_block_header1>)>>(
      'dogecoin_block_header_serialize');
  late final _dogecoin_block_header_serialize =
      _dogecoin_block_header_serializePtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<dogecoin_block_header1>)>();

  int dogecoin_block_header_copy(
    ffi.Pointer<dogecoin_block_header1> dest,
    ffi.Pointer<dogecoin_block_header1> src,
  ) {
    return _dogecoin_block_header_copy(
      dest,
      src,
    );
  }

  late final _dogecoin_block_header_copyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<dogecoin_block_header1>,
                  ffi.Pointer<dogecoin_block_header1>)>>(
      'dogecoin_block_header_copy');
  late final _dogecoin_block_header_copy =
      _dogecoin_block_header_copyPtr.asFunction<
          int Function(ffi.Pointer<dogecoin_block_header1>,
              ffi.Pointer<dogecoin_block_header1>)>();

  void printQr(
    ffi.Pointer<ffi.Int> qrcode,
  ) {
    return _printQr(
      qrcode,
    );
  }

  late final _printQrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int>)>>(
          'printQr');
  late final _printQr =
      _printQrPtr.asFunction<void Function(ffi.Pointer<ffi.Int>)>();

  int outputQRStringFromQRBytes(
    ffi.Pointer<ffi.Int> inQrBytes,
    ffi.Pointer<ffi.Char> outString,
  ) {
    return _outputQRStringFromQRBytes(
      inQrBytes,
      outString,
    );
  }

  late final _outputQRStringFromQRBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>)>>('outputQRStringFromQRBytes');
  late final _outputQRStringFromQRBytes = _outputQRStringFromQRBytesPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>)>();

  int stringToQrArray(
    ffi.Pointer<ffi.Char> inString,
    ffi.Pointer<ffi.Int> outQrBytes,
  ) {
    return _stringToQrArray(
      inString,
      outQrBytes,
    );
  }

  late final _stringToQrArrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>>('stringToQrArray');
  late final _stringToQrArray = _stringToQrArrayPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  int qrgen_p2pkh_to_qr_string(
    ffi.Pointer<ffi.Char> in_p2pkh,
    ffi.Pointer<ffi.Char> outString,
  ) {
    return _qrgen_p2pkh_to_qr_string(
      in_p2pkh,
      outString,
    );
  }

  late final _qrgen_p2pkh_to_qr_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('qrgen_p2pkh_to_qr_string');
  late final _qrgen_p2pkh_to_qr_string = _qrgen_p2pkh_to_qr_stringPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int qrgen_p2pkh_consoleprint_to_qr(
    ffi.Pointer<ffi.Char> in_p2pkh,
  ) {
    return _qrgen_p2pkh_consoleprint_to_qr(
      in_p2pkh,
    );
  }

  late final _qrgen_p2pkh_consoleprint_to_qrPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'qrgen_p2pkh_consoleprint_to_qr');
  late final _qrgen_p2pkh_consoleprint_to_qr =
      _qrgen_p2pkh_consoleprint_to_qrPtr
          .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int qrgen_p2pkh_to_qrbits(
    ffi.Pointer<ffi.Char> in_p2pkh,
    ffi.Pointer<ffi.Int> outQrByteArray,
  ) {
    return _qrgen_p2pkh_to_qrbits(
      in_p2pkh,
      outQrByteArray,
    );
  }

  late final _qrgen_p2pkh_to_qrbitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('qrgen_p2pkh_to_qrbits');
  late final _qrgen_p2pkh_to_qrbits = _qrgen_p2pkh_to_qrbitsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  int qrgen_string_to_qr_pngfile(
    ffi.Pointer<ffi.Char> outFilename,
    ffi.Pointer<ffi.Char> inString,
    int sizeMultiplier,
  ) {
    return _qrgen_string_to_qr_pngfile(
      outFilename,
      inString,
      sizeMultiplier,
    );
  }

  late final _qrgen_string_to_qr_pngfilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('qrgen_string_to_qr_pngfile');
  late final _qrgen_string_to_qr_pngfile =
      _qrgen_string_to_qr_pngfilePtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int qrgen_string_to_qr_jpgfile(
    ffi.Pointer<ffi.Char> outFilename,
    ffi.Pointer<ffi.Char> inString,
    int sizeMultiplier,
  ) {
    return _qrgen_string_to_qr_jpgfile(
      outFilename,
      inString,
      sizeMultiplier,
    );
  }

  late final _qrgen_string_to_qr_jpgfilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('qrgen_string_to_qr_jpgfile');
  late final _qrgen_string_to_qr_jpgfile =
      _qrgen_string_to_qr_jpgfilePtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  late final ffi.Pointer<ffi.Int> _dogecoin_hdnode =
      _lookup<ffi.Int>('dogecoin_hdnode');

  int get dogecoin_hdnode => _dogecoin_hdnode.value;

  set dogecoin_hdnode(int value) => _dogecoin_hdnode.value = value;

  int dogecoin_hdnode_free(
    ffi.Pointer<ffi.Int> node,
  ) {
    return _dogecoin_hdnode_free(
      node,
    );
  }

  late final _dogecoin_hdnode_freePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>)>>(
          'dogecoin_hdnode_free');
  late final _dogecoin_hdnode_free =
      _dogecoin_hdnode_freePtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int dogecoin_hdnode_fill_public_key(
    ffi.Pointer<ffi.Int> node,
  ) {
    return _dogecoin_hdnode_fill_public_key(
      node,
    );
  }

  late final _dogecoin_hdnode_fill_public_keyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>)>>(
          'dogecoin_hdnode_fill_public_key');
  late final _dogecoin_hdnode_fill_public_key =
      _dogecoin_hdnode_fill_public_keyPtr
          .asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int dogecoin_hdnode_serialize_public(
    ffi.Pointer<ffi.Int> node,
    ffi.Pointer<ffi.Int> chain,
    ffi.Pointer<ffi.Char> str,
    int strsize,
  ) {
    return _dogecoin_hdnode_serialize_public(
      node,
      chain,
      str,
      strsize,
    );
  }

  late final _dogecoin_hdnode_serialize_publicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('dogecoin_hdnode_serialize_public');
  late final _dogecoin_hdnode_serialize_public =
      _dogecoin_hdnode_serialize_publicPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>, int)>();

  int dogecoin_hdnode_serialize_private(
    ffi.Pointer<ffi.Int> node,
    ffi.Pointer<ffi.Int> chain,
    ffi.Pointer<ffi.Char> str,
    int strsize,
  ) {
    return _dogecoin_hdnode_serialize_private(
      node,
      chain,
      str,
      strsize,
    );
  }

  late final _dogecoin_hdnode_serialize_privatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('dogecoin_hdnode_serialize_private');
  late final _dogecoin_hdnode_serialize_private =
      _dogecoin_hdnode_serialize_privatePtr.asFunction<
          int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>, int)>();

  int dogecoin_hdnode_get_hash160(
    ffi.Pointer<ffi.Int> node,
    int hash160_out,
  ) {
    return _dogecoin_hdnode_get_hash160(
      node,
      hash160_out,
    );
  }

  late final _dogecoin_hdnode_get_hash160Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Int)>>(
      'dogecoin_hdnode_get_hash160');
  late final _dogecoin_hdnode_get_hash160 = _dogecoin_hdnode_get_hash160Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Int>, int)>();

  int dogecoin_hdnode_get_p2pkh_address(
    ffi.Pointer<ffi.Int> node,
    ffi.Pointer<ffi.Int> chain,
    ffi.Pointer<ffi.Char> str,
    int strsize,
  ) {
    return _dogecoin_hdnode_get_p2pkh_address(
      node,
      chain,
      str,
      strsize,
    );
  }

  late final _dogecoin_hdnode_get_p2pkh_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('dogecoin_hdnode_get_p2pkh_address');
  late final _dogecoin_hdnode_get_p2pkh_address =
      _dogecoin_hdnode_get_p2pkh_addressPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>, int)>();

  late final ffi.Pointer<ffi.Pointer<eckey1>> _keys =
      _lookup<ffi.Pointer<eckey1>>('keys');

  ffi.Pointer<eckey1> get keys => _keys.value;

  set keys(ffi.Pointer<eckey1> value) => _keys.value = value;

  late final ffi.Pointer<ffi.Int> _eckey2 = _lookup<ffi.Int>('eckey');

  int get eckey2 => _eckey2.value;

  set eckey2(int value) => _eckey2.value = value;

  int add_eckey(
    ffi.Pointer<eckey> key,
  ) {
    return _add_eckey(
      key,
    );
  }

  late final _add_eckeyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<eckey>)>>(
          'add_eckey');
  late final _add_eckey =
      _add_eckeyPtr.asFunction<int Function(ffi.Pointer<eckey>)>();

  int remove_eckey(
    ffi.Pointer<eckey> key,
  ) {
    return _remove_eckey(
      key,
    );
  }

  late final _remove_eckeyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<eckey>)>>(
          'remove_eckey');
  late final _remove_eckey =
      _remove_eckeyPtr.asFunction<int Function(ffi.Pointer<eckey>)>();

  int dogecoin_key_free(
    ffi.Pointer<eckey> eckey,
  ) {
    return _dogecoin_key_free(
      eckey,
    );
  }

  late final _dogecoin_key_freePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<eckey>)>>(
          'dogecoin_key_free');
  late final _dogecoin_key_free =
      _dogecoin_key_freePtr.asFunction<int Function(ffi.Pointer<eckey>)>();

  int start_key(
    int is_testnet,
  ) {
    return _start_key(
      is_testnet,
    );
  }

  late final _start_keyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('start_key');
  late final _start_key = _start_keyPtr.asFunction<int Function(int)>();

  int derive_bip44_extended_private_key(
    ffi.Pointer<ffi.Int> master_key,
    int account,
    ffi.Pointer<ffi.Int> address_index,
    ffi.Pointer<ffi.Int> change_level,
    ffi.Pointer<ffi.Char> path,
    int is_testnet,
    ffi.Pointer<ffi.Char> keypath,
    ffi.Pointer<ffi.Int> bip44_key,
  ) {
    return _derive_bip44_extended_private_key(
      master_key,
      account,
      address_index,
      change_level,
      path,
      is_testnet,
      keypath,
      bip44_key,
    );
  }

  late final _derive_bip44_extended_private_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('derive_bip44_extended_private_key');
  late final _derive_bip44_extended_private_key =
      _derive_bip44_extended_private_keyPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Int>,
              int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>();

  int derive_bip44_extended_public_key(
    ffi.Pointer<ffi.Int> master_key,
    int account,
    ffi.Pointer<ffi.Int> address_index,
    ffi.Pointer<ffi.Int> change_level,
    ffi.Pointer<ffi.Char> path,
    int is_testnet,
    ffi.Pointer<ffi.Char> keypath,
    ffi.Pointer<ffi.Int> bip44_key,
  ) {
    return _derive_bip44_extended_public_key(
      master_key,
      account,
      address_index,
      change_level,
      path,
      is_testnet,
      keypath,
      bip44_key,
    );
  }

  late final _derive_bip44_extended_public_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('derive_bip44_extended_public_key');
  late final _derive_bip44_extended_public_key =
      _derive_bip44_extended_public_keyPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Int>,
              int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>();

  late final ffi.Pointer<ffi.Int> _DOGECOIN_P2P_MESSAGE_CHUNK_SIZE =
      _lookup<ffi.Int>('DOGECOIN_P2P_MESSAGE_CHUNK_SIZE');

  int get DOGECOIN_P2P_MESSAGE_CHUNK_SIZE =>
      _DOGECOIN_P2P_MESSAGE_CHUNK_SIZE.value;

  set DOGECOIN_P2P_MESSAGE_CHUNK_SIZE(int value) =>
      _DOGECOIN_P2P_MESSAGE_CHUNK_SIZE.value = value;

  int net_write_log_printf(
    ffi.Pointer<ffi.Char> format,
  ) {
    return _net_write_log_printf(
      format,
    );
  }

  late final _net_write_log_printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'net_write_log_printf');
  late final _net_write_log_printf = _net_write_log_printfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int net_write_log_null(
    ffi.Pointer<ffi.Char> format,
  ) {
    return _net_write_log_null(
      format,
    );
  }

  late final _net_write_log_nullPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'net_write_log_null');
  late final _net_write_log_null =
      _net_write_log_nullPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<ffi.Int> _dogecoin_node =
      _lookup<ffi.Int>('dogecoin_node');

  int get dogecoin_node => _dogecoin_node.value;

  set dogecoin_node(int value) => _dogecoin_node.value = value;

  int dogecoin_node_free(
    ffi.Pointer<dogecoin_node1> node,
  ) {
    return _dogecoin_node_free(
      node,
    );
  }

  late final _dogecoin_node_freePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<dogecoin_node1>)>>(
      'dogecoin_node_free');
  late final _dogecoin_node_free = _dogecoin_node_freePtr
      .asFunction<int Function(ffi.Pointer<dogecoin_node1>)>();

  int dogecoin_node_disconnect(
    ffi.Pointer<dogecoin_node1> node,
  ) {
    return _dogecoin_node_disconnect(
      node,
    );
  }

  late final _dogecoin_node_disconnectPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<dogecoin_node1>)>>(
      'dogecoin_node_disconnect');
  late final _dogecoin_node_disconnect = _dogecoin_node_disconnectPtr
      .asFunction<int Function(ffi.Pointer<dogecoin_node1>)>();

  late final ffi.Pointer<ffi.Int> _dogecoin_node_group1 =
      _lookup<ffi.Int>('dogecoin_node_group');

  int get dogecoin_node_group1 => _dogecoin_node_group1.value;

  set dogecoin_node_group1(int value) => _dogecoin_node_group1.value = value;

  int dogecoin_node_group_free(
    ffi.Pointer<dogecoin_node_group> group,
  ) {
    return _dogecoin_node_group_free(
      group,
    );
  }

  late final _dogecoin_node_group_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<dogecoin_node_group>)>>('dogecoin_node_group_free');
  late final _dogecoin_node_group_free = _dogecoin_node_group_freePtr
      .asFunction<int Function(ffi.Pointer<dogecoin_node_group>)>();

  int dogecoin_node_group_shutdown(
    ffi.Pointer<dogecoin_node_group> group,
  ) {
    return _dogecoin_node_group_shutdown(
      group,
    );
  }

  late final _dogecoin_node_group_shutdownPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<dogecoin_node_group>)>>(
      'dogecoin_node_group_shutdown');
  late final _dogecoin_node_group_shutdown = _dogecoin_node_group_shutdownPtr
      .asFunction<int Function(ffi.Pointer<dogecoin_node_group>)>();

  int dogecoin_node_group_add_node(
    ffi.Pointer<dogecoin_node_group> group,
    ffi.Pointer<dogecoin_node1> node,
  ) {
    return _dogecoin_node_group_add_node(
      group,
      node,
    );
  }

  late final _dogecoin_node_group_add_nodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<dogecoin_node_group>,
              ffi.Pointer<dogecoin_node1>)>>('dogecoin_node_group_add_node');
  late final _dogecoin_node_group_add_node =
      _dogecoin_node_group_add_nodePtr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_node_group>, ffi.Pointer<dogecoin_node1>)>();

  int dogecoin_node_group_event_loop(
    ffi.Pointer<dogecoin_node_group> group,
  ) {
    return _dogecoin_node_group_event_loop(
      group,
    );
  }

  late final _dogecoin_node_group_event_loopPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<dogecoin_node_group>)>>(
      'dogecoin_node_group_event_loop');
  late final _dogecoin_node_group_event_loop =
      _dogecoin_node_group_event_loopPtr
          .asFunction<int Function(ffi.Pointer<dogecoin_node_group>)>();

  int dogecoin_node_group_amount_of_connected_nodes(
    ffi.Pointer<dogecoin_node_group> group,
    int state,
  ) {
    return _dogecoin_node_group_amount_of_connected_nodes(
      group,
      state,
    );
  }

  late final _dogecoin_node_group_amount_of_connected_nodesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<dogecoin_node_group>,
              ffi.Int32)>>('dogecoin_node_group_amount_of_connected_nodes');
  late final _dogecoin_node_group_amount_of_connected_nodes =
      _dogecoin_node_group_amount_of_connected_nodesPtr
          .asFunction<int Function(ffi.Pointer<dogecoin_node_group>, int)>();

  int dogecoin_node_send_version(
    ffi.Pointer<dogecoin_node1> node,
  ) {
    return _dogecoin_node_send_version(
      node,
    );
  }

  late final _dogecoin_node_send_versionPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<dogecoin_node1>)>>(
      'dogecoin_node_send_version');
  late final _dogecoin_node_send_version = _dogecoin_node_send_versionPtr
      .asFunction<int Function(ffi.Pointer<dogecoin_node1>)>();

  int dogecoin_node_send(
    ffi.Pointer<dogecoin_node1> node,
    ffi.Pointer<ffi.Int> data,
  ) {
    return _dogecoin_node_send(
      node,
      data,
    );
  }

  late final _dogecoin_node_sendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<dogecoin_node1>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_node_send');
  late final _dogecoin_node_send = _dogecoin_node_sendPtr.asFunction<
      int Function(ffi.Pointer<dogecoin_node1>, ffi.Pointer<ffi.Int>)>();

  int dogecoin_node_parse_message(
    ffi.Pointer<dogecoin_node1> node,
    ffi.Pointer<ffi.Int> hdr,
    ffi.Pointer<const_buffer2> buf,
  ) {
    return _dogecoin_node_parse_message(
      node,
      hdr,
      buf,
    );
  }

  late final _dogecoin_node_parse_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<dogecoin_node1>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<const_buffer2>)>>('dogecoin_node_parse_message');
  late final _dogecoin_node_parse_message =
      _dogecoin_node_parse_messagePtr.asFunction<
          int Function(ffi.Pointer<dogecoin_node1>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<const_buffer2>)>();

  int dogecoin_node_connection_state_changed(
    ffi.Pointer<dogecoin_node1> node,
  ) {
    return _dogecoin_node_connection_state_changed(
      node,
    );
  }

  late final _dogecoin_node_connection_state_changedPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<dogecoin_node1>)>>(
      'dogecoin_node_connection_state_changed');
  late final _dogecoin_node_connection_state_changed =
      _dogecoin_node_connection_state_changedPtr
          .asFunction<int Function(ffi.Pointer<dogecoin_node1>)>();

  late final ffi.Pointer<ffi.Int> _size_t = _lookup<ffi.Int>('size_t');

  int get size_t => _size_t.value;

  set size_t(int value) => _size_t.value = value;

  late final ffi.Pointer<ffi.Int> _cstring1 = _lookup<ffi.Int>('cstring');

  int get cstring1 => _cstring1.value;

  set cstring1(int value) => _cstring1.value = value;

  int cstr_free(
    ffi.Pointer<cstring> s,
    int free_buf,
  ) {
    return _cstr_free(
      s,
      free_buf,
    );
  }

  late final _cstr_freePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_free');
  late final _cstr_free =
      _cstr_freePtr.asFunction<int Function(ffi.Pointer<cstring>, int)>();

  int cstr_equal(
    ffi.Pointer<cstring> a,
    ffi.Pointer<cstring> b,
  ) {
    return _cstr_equal(
      a,
      b,
    );
  }

  late final _cstr_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_equal');
  late final _cstr_equal = _cstr_equalPtr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_compare(
    ffi.Pointer<cstring> a,
    ffi.Pointer<cstring> b,
  ) {
    return _cstr_compare(
      a,
      b,
    );
  }

  late final _cstr_comparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_compare');
  late final _cstr_compare = _cstr_comparePtr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_resize(
    ffi.Pointer<cstring> s,
    int sz,
  ) {
    return _cstr_resize(
      s,
      sz,
    );
  }

  late final _cstr_resizePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_resize');
  late final _cstr_resize =
      _cstr_resizePtr.asFunction<int Function(ffi.Pointer<cstring>, int)>();

  int cstr_erase(
    ffi.Pointer<cstring> s,
    int pos,
    int len,
  ) {
    return _cstr_erase(
      s,
      pos,
      len,
    );
  }

  late final _cstr_erasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Int, ffi.Int)>>('cstr_erase');
  late final _cstr_erase =
      _cstr_erasePtr.asFunction<int Function(ffi.Pointer<cstring>, int, int)>();

  int cstr_append_buf(
    ffi.Pointer<cstring> s,
    ffi.Pointer<ffi.Void> buf,
    int sz,
  ) {
    return _cstr_append_buf(
      s,
      buf,
      sz,
    );
  }

  late final _cstr_append_bufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('cstr_append_buf');
  late final _cstr_append_buf = _cstr_append_bufPtr.asFunction<
      int Function(ffi.Pointer<cstring>, ffi.Pointer<ffi.Void>, int)>();

  int cstr_append_cstr(
    ffi.Pointer<cstring> s,
    ffi.Pointer<cstring> append,
  ) {
    return _cstr_append_cstr(
      s,
      append,
    );
  }

  late final _cstr_append_cstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cstring>, ffi.Pointer<cstring>)>>('cstr_append_cstr');
  late final _cstr_append_cstr = _cstr_append_cstrPtr
      .asFunction<int Function(ffi.Pointer<cstring>, ffi.Pointer<cstring>)>();

  int cstr_append_c(
    ffi.Pointer<cstring> s,
    int ch,
  ) {
    return _cstr_append_c(
      s,
      ch,
    );
  }

  late final _cstr_append_cPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Char)>>(
      'cstr_append_c');
  late final _cstr_append_c =
      _cstr_append_cPtr.asFunction<int Function(ffi.Pointer<cstring>, int)>();

  int cstr_alloc_minsize(
    ffi.Pointer<cstring> s,
    int sz,
  ) {
    return _cstr_alloc_minsize(
      s,
      sz,
    );
  }

  late final _cstr_alloc_minsizePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cstring>, ffi.Int)>>(
      'cstr_alloc_minsize');
  late final _cstr_alloc_minsize = _cstr_alloc_minsizePtr
      .asFunction<int Function(ffi.Pointer<cstring>, int)>();

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdin =
      _lookup<ffi.Pointer<FILE>>('stdin');

  ffi.Pointer<FILE> get stdin => _stdin.value;

  set stdin(ffi.Pointer<FILE> value) => _stdin.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdout =
      _lookup<ffi.Pointer<FILE>>('stdout');

  ffi.Pointer<FILE> get stdout => _stdout.value;

  set stdout(ffi.Pointer<FILE> value) => _stdout.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stderr =
      _lookup<ffi.Pointer<FILE>>('stderr');

  ffi.Pointer<FILE> get stderr => _stderr.value;

  set stderr(ffi.Pointer<FILE> value) => _stderr.value = value;

  int remove(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove(
      __filename,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat = _renameatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose(
      __stream,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam(
      arg0,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r(
      __s,
    );
  }

  late final _tmpnam_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r = _tmpnam_rPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam(
      __dir,
      __pfx,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush(
      __stream,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked(
      __stream,
    );
  }

  late final _fflush_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked =
      _fflush_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen(
      __filename,
      __modes,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen(
      __fd,
      __modes,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen = _fmemopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Int> __sizeloc,
  ) {
    return _open_memstream(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('open_memstream');
  late final _open_memstream = _open_memstreamPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void setbuf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf(
      __stream,
      __buf,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer = _setbufferPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf(
      __stream,
    );
  }

  late final _setlinebufPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf =
      _setlinebufPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf(
      __stream,
      __format,
    );
  }

  late final _fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf = _fprintfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf(
      __format,
    );
  }

  late final _printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf =
      _printfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf(
      __s,
      __format,
    );
  }

  late final _sprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf = _sprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfprintf');
  late final _vfprintf = _vfprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vprintf(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vprintf(
      __format,
      __arg,
    );
  }

  late final _vprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vprintf');
  late final _vprintf =
      _vprintfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsprintf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsprintf');
  late final _vsprintf = _vsprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int snprintf(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf = _snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsnprintf(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('vsnprintf');
  late final _vsnprintf = _vsnprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int vdprintf(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    int __arg,
  ) {
    return _vdprintf(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('vdprintf');
  late final _vdprintf =
      _vdprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int dprintf(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf(
      __fd,
      __fmt,
    );
  }

  late final _dprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf =
      _dprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf(
      __stream,
      __format,
    );
  }

  late final _fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf = _fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf(
      __format,
    );
  }

  late final _scanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf =
      _scanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf(
      __s,
      __format,
    );
  }

  late final _sscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf = _sscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf = _vfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf(
      __format,
      __arg,
    );
  }

  late final _vscanfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf =
      _vscanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf = _vsscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fgetc(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc(
      __stream,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc(
      __stream,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  int getc_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked(
      __stream,
    );
  }

  late final _getc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked =
      _getc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked =
      _getchar_unlockedPtr.asFunction<int Function()>();

  int fgetc_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked(
      __stream,
    );
  }

  late final _fgetc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked =
      _fgetc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc(
      __c,
      __stream,
    );
  }

  late final _fputcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc(
      __c,
      __stream,
    );
  }

  late final _putcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int __c,
  ) {
    return _putchar(
      __c,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int fputc_unlocked(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked(
      __c,
      __stream,
    );
  }

  late final _fputc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked =
      _fputc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked(
      __c,
      __stream,
    );
  }

  late final _putc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked =
      _putc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked(
    int __c,
  ) {
    return _putchar_unlocked(
      __c,
    );
  }

  late final _putchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked =
      _putchar_unlockedPtr.asFunction<int Function(int)>();

  int getw(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw(
      __stream,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw(
      __w,
      __stream,
    );
  }

  late final _putwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelimPtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim = ___getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelimPtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim = _getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getlinePtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<FILE>)>>('getline');
  late final _getline = _getlinePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<FILE>)>();

  int fputs(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs(
      __s,
      __stream,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts(
      __s,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc(
      __c,
      __stream,
    );
  }

  late final _ungetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked = _fread_unlockedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked = _fwrite_unlockedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell(
      __stream,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind(
      __stream,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseekoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko =
      _fseekoPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftelloPtr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello = _ftelloPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos(
      __stream,
      __pos,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos(
      __stream,
      __pos,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr(
      __stream,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof(
      __stream,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror(
      __stream,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked(
      __stream,
    );
  }

  late final _clearerr_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked =
      _clearerr_unlockedPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked(
      __stream,
    );
  }

  late final _feof_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked =
      _feof_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked(
      __stream,
    );
  }

  late final _ferror_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked =
      _ferror_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror(
      __s,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno(
      __stream,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno = _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked(
      __stream,
    );
  }

  late final _fileno_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked =
      _fileno_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose(
      __stream,
    );
  }

  late final _pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose = _pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen(
      __command,
      __modes,
    );
  }

  late final _popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen = _popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid(
      __s,
    );
  }

  late final _ctermidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid = _ctermidPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile(
      __stream,
    );
  }

  late final _flockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile =
      _flockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile(
      __stream,
    );
  }

  late final _ftrylockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile =
      _ftrylockfilePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile(
      __stream,
    );
  }

  late final _funlockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile =
      _funlockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow(
      arg0,
    );
  }

  late final ___uflowPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow =
      ___uflowPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow(
      arg0,
      arg1,
    );
  }

  late final ___overflowPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow =
      ___overflowPtr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __ctype_get_mb_cur_max() {
    return ___ctype_get_mb_cur_max();
  }

  late final ___ctype_get_mb_cur_maxPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max =
      ___ctype_get_mb_cur_maxPtr.asFunction<int Function()>();

  double atof(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof(
      __nptr,
    );
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi(
      __nptr,
    );
  }

  late final _atoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi = _atoiPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol(
      __nptr,
    );
  }

  late final _atolPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol = _atolPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll(
      __nptr,
    );
  }

  late final _atollPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll =
      _atollPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod(
      __nptr,
      __endptr,
    );
  }

  late final _strtodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod = _strtodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof(
      __nptr,
      __endptr,
    );
  }

  late final _strtofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof = _strtofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol = _strtolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul = _strtoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoqPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq = _strtoqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouqPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq = _strtouqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtollPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll = _strtollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull = _strtoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a(
    int __n,
  ) {
    return _l64a(
      __n,
    );
  }

  late final _l64aPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a = _l64aPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l(
      __s,
    );
  }

  late final _a64lPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l = _a64lPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select = _selectPtr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect = _pselectPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random() {
    return _random();
  }

  late final _randomPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random = _randomPtr.asFunction<int Function()>();

  void srandom(
    int __seed,
  ) {
    return _srandom(
      __seed,
    );
  }

  late final _srandomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom = _srandomPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int)>>('initstate');
  late final _initstate = _initstatePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate(
      __statebuf,
    );
  }

  late final _setstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate = _setstatePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r(
      __buf,
      __result,
    );
  }

  late final _random_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r = _random_rPtr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r(
      __seed,
      __buf,
    );
  }

  late final _srandom_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r =
      _srandom_rPtr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r = _initstate_rPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r = _setstate_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand() {
    return _rand();
  }

  late final _randPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand = _randPtr.asFunction<int Function()>();

  void srand(
    int __seed,
  ) {
    return _srand(
      __seed,
    );
  }

  late final _srandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand = _srandPtr.asFunction<void Function(int)>();

  int rand_r(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r(
      __seed,
    );
  }

  late final _rand_rPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r =
      _rand_rPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand48() {
    return _drand48();
  }

  late final _drand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand48 = _drand48Ptr.asFunction<double Function()>();

  double erand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand48(
      __xsubi,
    );
  }

  late final _erand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand48 =
      _erand48Ptr.asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand48 = _lrand48Ptr.asFunction<int Function()>();

  int nrand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand48(
      __xsubi,
    );
  }

  late final _nrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand48 =
      _nrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand48 = _mrand48Ptr.asFunction<int Function()>();

  int jrand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand48(
      __xsubi,
    );
  }

  late final _jrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand48 =
      _jrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand48(
    int __seedval,
  ) {
    return _srand48(
      __seedval,
    );
  }

  late final _srand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand48 = _srand48Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed48(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed48(
      __seed16v,
    );
  }

  late final _seed48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed48 = _seed48Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong48(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong48(
      __param,
    );
  }

  late final _lcong48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong48 =
      _lcong48Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r(
      __buffer,
      __result,
    );
  }

  late final _drand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r = _drand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r = _erand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r(
      __buffer,
      __result,
    );
  }

  late final _lrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r = _lrand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r = _nrand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r(
      __buffer,
      __result,
    );
  }

  late final _mrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r = _mrand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r = _jrand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r =
      _srand48_rPtr.asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r = _seed48_rPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r(
      __param,
      __buffer,
    );
  }

  late final _lcong48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r = _lcong48_rPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int arc4random() {
    return _arc4random();
  }

  late final _arc4randomPtr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random = _arc4randomPtr.asFunction<int Function()>();

  void arc4random_buf(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf(
      __buf,
      __size,
    );
  }

  late final _arc4random_bufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('arc4random_buf');
  late final _arc4random_buf = _arc4random_bufPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform(
    int __upper_bound,
  ) {
    return _arc4random_uniform(
      __upper_bound,
    );
  }

  late final _arc4random_uniformPtr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
          'arc4random_uniform');
  late final _arc4random_uniform =
      _arc4random_uniformPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'malloc');
  late final _malloc =
      _mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc(
    int __nmemb,
    int __size,
  ) {
    return _calloc(
      __nmemb,
      __size,
    );
  }

  late final _callocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'calloc');
  late final _calloc =
      _callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('realloc');
  late final _realloc = _reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free(
      __ptr,
    );
  }

  late final _freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free =
      _freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray = _reallocarrayPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca(
    int __size,
  ) {
    return _alloca(
      __size,
    );
  }

  late final _allocaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'alloca');
  late final _alloca =
      _allocaPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc(
    int __size,
  ) {
    return _valloc(
      __size,
    );
  }

  late final _vallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'valloc');
  late final _valloc =
      _vallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int,
              ffi.Int)>>('posix_memalign');
  late final _posix_memalign = _posix_memalignPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  late final _aligned_allocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'aligned_alloc');
  late final _aligned_alloc =
      _aligned_allocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort() {
    return _abort();
  }

  late final _abortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort = _abortPtr.asFunction<void Function()>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit(
      __func,
    );
  }

  late final _atexitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit = _atexitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit(
      __func,
    );
  }

  late final _at_quick_exitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit = _at_quick_exitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Int __status, ffi.Pointer<ffi.Void> __arg)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit(
      __func,
      __arg,
    );
  }

  late final _on_exitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Int __status, ffi.Pointer<ffi.Void> __arg)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit = _on_exitPtr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int __status, ffi.Pointer<ffi.Void> __arg)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit(
    int __status,
  ) {
    return _exit(
      __status,
    );
  }

  late final _exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit = _exitPtr.asFunction<void Function(int)>();

  void quick_exit(
    int __status,
  ) {
    return _quick_exit(
      __status,
    );
  }

  late final _quick_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit = _quick_exitPtr.asFunction<void Function(int)>();

  void _Exit(
    int __status,
  ) {
    return __Exit(
      __status,
    );
  }

  late final __ExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv(
      __name,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv(
      __string,
    );
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv =
      _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv = _setenvPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv(
      __name,
    );
  }

  late final _unsetenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv =
      _unsetenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv() {
    return _clearenv();
  }

  late final _clearenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv = _clearenvPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp(
      __template,
    );
  }

  late final _mktempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp = _mktempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp(
      __template,
    );
  }

  late final _mkstempPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp =
      _mkstempPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps(
      __template,
      __suffixlen,
    );
  }

  late final _mkstempsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps =
      _mkstempsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp(
      __template,
    );
  }

  late final _mkdtempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp = _mkdtempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system(
      __command,
    );
  }

  late final _systemPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system =
      _systemPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath(
      __name,
      __resolved,
    );
  }

  late final _realpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath = _realpathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              __compar_fn_t)>>('bsearch');
  late final _bsearch = _bsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              __compar_fn_t)>>('qsort');
  late final _qsort = _qsortPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs(
    int __x,
  ) {
    return _abs(
      __x,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int labs(
    int __x,
  ) {
    return _labs(
      __x,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  int llabs(
    int __x,
  ) {
    return _llabs(
      __x,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  div_t div(
    int __numer,
    int __denom,
  ) {
    return _div(
      __numer,
      __denom,
    );
  }

  late final _divPtr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div = _divPtr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv(
    int __numer,
    int __denom,
  ) {
    return _ldiv(
      __numer,
      __denom,
    );
  }

  late final _ldivPtr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv = _ldivPtr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv(
    int __numer,
    int __denom,
  ) {
    return _lldiv(
      __numer,
      __denom,
    );
  }

  late final _lldivPtr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv = _lldivPtr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt = _ecvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt = _fcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt = _gcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('ecvt_r');
  late final _ecvt_r = _ecvt_rPtr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('fcvt_r');
  late final _fcvt_r = _fcvt_rPtr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen(
      __s,
      __n,
    );
  }

  late final _mblenPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mblen');
  late final _mblen =
      _mblenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc(
    ffi.Pointer<ffi.Int> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb(
      __s,
      __wchar,
    );
  }

  late final _wctombPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'wctomb');
  late final _wctomb =
      _wctombPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs(
    ffi.Pointer<ffi.Int> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Int> __pwcs,
    int __n,
  ) {
    return _wcstombs(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  int rpmatch(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch(
      __response,
    );
  }

  late final _rpmatchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch =
      _rpmatchPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsuboptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt = _getsuboptPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg =
      _getloadavgPtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memcpy');
  late final _memcpy = _memcpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memmove');
  late final _memmove = _memmovePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memccpy');
  late final _memccpy = _memccpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset(
      __s,
      __c,
      __n,
    );
  }

  late final _memsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memset');
  late final _memset = _memsetPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('memcmp');
  late final _memcmp = _memcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__memcmpeq');
  late final ___memcmpeq = ___memcmpeqPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr(
      __s,
      __c,
      __n,
    );
  }

  late final _memchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('memchr');
  late final _memchr = _memchrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy(
      __dest,
      __src,
    );
  }

  late final _strcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy = _strcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncpy');
  late final _strncpy = _strncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat(
      __dest,
      __src,
    );
  }

  late final _strcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat = _strcatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strncat');
  late final _strncat = _strncatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp(
      __s1,
      __s2,
    );
  }

  late final _strcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp = _strcmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncmp');
  late final _strncmp = _strncmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll(
      __s1,
      __s2,
    );
  }

  late final _strcollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll = _strcollPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strxfrm');
  late final _strxfrm = _strxfrmPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l = _strcoll_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strxfrm_l');
  late final _strxfrm_l = _strxfrm_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup(
      __s,
    );
  }

  late final _strdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup = _strdupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup(
      __string,
      __n,
    );
  }

  late final _strndupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strndup');
  late final _strndup = _strndupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr(
      __s,
      __c,
    );
  }

  late final _strchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr = _strchrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr(
      __s,
      __c,
    );
  }

  late final _strrchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr = _strrchrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn(
      __s,
      __reject,
    );
  }

  late final _strcspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn = _strcspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn(
      __s,
      __accept,
    );
  }

  late final _strspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn = _strspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk(
      __s,
      __accept,
    );
  }

  late final _strpbrkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk = _strpbrkPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr(
      __haystack,
      __needle,
    );
  }

  late final _strstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr = _strstrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok(
      __s,
      __delim,
    );
  }

  late final _strtokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok = _strtokPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r = ___strtok_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r = _strtok_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen(
      __s,
    );
  }

  late final _strlenPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'strlen');
  late final _strlen =
      _strlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen(
      __string,
      __maxlen,
    );
  }

  late final _strnlenPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'strnlen');
  late final _strnlen =
      _strnlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror(
    int __errnum,
  ) {
    return _strerror(
      __errnum,
    );
  }

  late final _strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror =
      _strerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('strerror_r');
  late final _strerror_r = _strerror_rPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l(
      __errnum,
      __l,
    );
  }

  late final _strerror_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l = _strerror_lPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcmp');
  late final _bcmp = _bcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int)>>('bcopy');
  late final _bcopy = _bcopyPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero(
      __s,
      __n,
    );
  }

  late final _bzeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('bzero');
  late final _bzero =
      _bzeroPtr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index(
      __s,
      __c,
    );
  }

  late final _indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index = _indexPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex(
      __s,
      __c,
    );
  }

  late final _rindexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex = _rindexPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs(
    int __i,
  ) {
    return _ffs(
      __i,
    );
  }

  late final _ffsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs = _ffsPtr.asFunction<int Function(int)>();

  int ffsl(
    int __l,
  ) {
    return _ffsl(
      __l,
    );
  }

  late final _ffslPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl = _ffslPtr.asFunction<int Function(int)>();

  int ffsll(
    int __ll,
  ) {
    return _ffsll(
      __ll,
    );
  }

  late final _ffsllPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll = _ffsllPtr.asFunction<int Function(int)>();

  int strcasecmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp(
      __s1,
      __s2,
    );
  }

  late final _strcasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp = _strcasecmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('strncasecmp');
  late final _strncasecmp = _strncasecmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l = _strcasecmp_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l = _strncasecmp_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero(
      __s,
      __n,
    );
  }

  late final _explicit_bzeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('explicit_bzero');
  late final _explicit_bzero = _explicit_bzeroPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep(
      __stringp,
      __delim,
    );
  }

  late final _strsepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep = _strsepPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal(
    int __sig,
  ) {
    return _strsignal(
      __sig,
    );
  }

  late final _strsignalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal =
      _strsignalPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy(
      __dest,
      __src,
    );
  }

  late final ___stpcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy = ___stpcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy(
      __dest,
      __src,
    );
  }

  late final _stpcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy = _stpcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('__stpncpy');
  late final ___stpncpy = ___stpncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('stpncpy');
  late final _stpncpy = _stpncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  /// !init static ecc context
  void dogecoin_ecc_start() {
    return _dogecoin_ecc_start();
  }

  late final _dogecoin_ecc_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('dogecoin_ecc_start');
  late final _dogecoin_ecc_start =
      _dogecoin_ecc_startPtr.asFunction<void Function()>();

  /// !destroys the static ecc context
  void dogecoin_ecc_stop() {
    return _dogecoin_ecc_stop();
  }

  late final _dogecoin_ecc_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('dogecoin_ecc_stop');
  late final _dogecoin_ecc_stop =
      _dogecoin_ecc_stopPtr.asFunction<void Function()>();

  int generatePrivPubKeypair(
    ffi.Pointer<ffi.Char> wif_privkey,
    ffi.Pointer<ffi.Char> p2pkh_pubkey,
    int is_testnet,
  ) {
    return _generatePrivPubKeypair(
      wif_privkey,
      p2pkh_pubkey,
      is_testnet,
    );
  }

  late final _generatePrivPubKeypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('generatePrivPubKeypair');
  late final _generatePrivPubKeypair = _generatePrivPubKeypairPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int generateHDMasterPubKeypair(
    ffi.Pointer<ffi.Char> wif_privkey_master,
    ffi.Pointer<ffi.Char> p2pkh_pubkey_master,
    int is_testnet,
  ) {
    return _generateHDMasterPubKeypair(
      wif_privkey_master,
      p2pkh_pubkey_master,
      is_testnet,
    );
  }

  late final _generateHDMasterPubKeypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('generateHDMasterPubKeypair');
  late final _generateHDMasterPubKeypair =
      _generateHDMasterPubKeypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int generateDerivedHDPubkey(
    ffi.Pointer<ffi.Char> wif_privkey_master,
    ffi.Pointer<ffi.Char> p2pkh_pubkey,
  ) {
    return _generateDerivedHDPubkey(
      wif_privkey_master,
      p2pkh_pubkey,
    );
  }

  late final _generateDerivedHDPubkeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('generateDerivedHDPubkey');
  late final _generateDerivedHDPubkey = _generateDerivedHDPubkeyPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int verifyPrivPubKeypair(
    ffi.Pointer<ffi.Char> wif_privkey,
    ffi.Pointer<ffi.Char> p2pkh_pubkey,
    int is_testnet,
  ) {
    return _verifyPrivPubKeypair(
      wif_privkey,
      p2pkh_pubkey,
      is_testnet,
    );
  }

  late final _verifyPrivPubKeypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('verifyPrivPubKeypair');
  late final _verifyPrivPubKeypair = _verifyPrivPubKeypairPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int verifyHDMasterPubKeypair(
    ffi.Pointer<ffi.Char> wif_privkey_master,
    ffi.Pointer<ffi.Char> p2pkh_pubkey_master,
    int is_testnet,
  ) {
    return _verifyHDMasterPubKeypair(
      wif_privkey_master,
      p2pkh_pubkey_master,
      is_testnet,
    );
  }

  late final _verifyHDMasterPubKeypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('verifyHDMasterPubKeypair');
  late final _verifyHDMasterPubKeypair =
      _verifyHDMasterPubKeypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int verifyP2pkhAddress(
    ffi.Pointer<ffi.Char> p2pkh_pubkey,
    int len,
  ) {
    return _verifyP2pkhAddress(
      p2pkh_pubkey,
      len,
    );
  }

  late final _verifyP2pkhAddressPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'verifyP2pkhAddress');
  late final _verifyP2pkhAddress = _verifyP2pkhAddressPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int getDerivedHDAddress(
    ffi.Pointer<ffi.Char> masterkey,
    int account,
    int ischange,
    int addressindex,
    ffi.Pointer<ffi.Char> outaddress,
    int outprivkey,
  ) {
    return _getDerivedHDAddress(
      masterkey,
      account,
      ischange,
      addressindex,
      outaddress,
      outprivkey,
    );
  }

  late final _getDerivedHDAddressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Uint32,
              ffi.Int,
              ffi.Uint32,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('getDerivedHDAddress');
  late final _getDerivedHDAddress = _getDerivedHDAddressPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Char>, int)>();

  int getDerivedHDAddressByPath(
    ffi.Pointer<ffi.Char> masterkey,
    ffi.Pointer<ffi.Char> derived_path,
    ffi.Pointer<ffi.Char> outaddress,
    int outprivkey,
  ) {
    return _getDerivedHDAddressByPath(
      masterkey,
      derived_path,
      outaddress,
      outprivkey,
    );
  }

  late final _getDerivedHDAddressByPathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('getDerivedHDAddressByPath');
  late final _getDerivedHDAddressByPath =
      _getDerivedHDAddressByPathPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, int)>();

  int generateEnglishMnemonic(
    ffi.Pointer<ffi.Char> entropy,
    ffi.Pointer<ffi.Char> size,
    ffi.Pointer<ffi.Char> mnemonic,
  ) {
    return _generateEnglishMnemonic(
      entropy,
      size,
      mnemonic,
    );
  }

  late final _generateEnglishMnemonicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('generateEnglishMnemonic');
  late final _generateEnglishMnemonic = _generateEnglishMnemonicPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int generateRandomEnglishMnemonic(
    ffi.Pointer<ffi.Char> size,
    ffi.Pointer<ffi.Char> mnemonic,
  ) {
    return _generateRandomEnglishMnemonic(
      size,
      mnemonic,
    );
  }

  late final _generateRandomEnglishMnemonicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('generateRandomEnglishMnemonic');
  late final _generateRandomEnglishMnemonic = _generateRandomEnglishMnemonicPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int dogecoin_seed_from_mnemonic(
    ffi.Pointer<ffi.Char> mnemonic,
    ffi.Pointer<ffi.Char> pass,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return _dogecoin_seed_from_mnemonic(
      mnemonic,
      pass,
      seed,
    );
  }

  late final _dogecoin_seed_from_mnemonicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>)>>('dogecoin_seed_from_mnemonic');
  late final _dogecoin_seed_from_mnemonic =
      _dogecoin_seed_from_mnemonicPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>)>();

  int getDerivedHDAddressFromMnemonic(
    int account,
    int index,
    ffi.Pointer<ffi.Char> change_level,
    ffi.Pointer<ffi.Char> mnemonic,
    ffi.Pointer<ffi.Char> pass,
    ffi.Pointer<ffi.Char> p2pkh_pubkey,
    int is_testnet,
  ) {
    return _getDerivedHDAddressFromMnemonic(
      account,
      index,
      change_level,
      mnemonic,
      pass,
      p2pkh_pubkey,
      is_testnet,
    );
  }

  late final _getDerivedHDAddressFromMnemonicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Uint32,
              ffi.Uint32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('getDerivedHDAddressFromMnemonic');
  late final _getDerivedHDAddressFromMnemonic =
      _getDerivedHDAddressFromMnemonicPtr.asFunction<
          int Function(int, int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int start_transaction() {
    return _start_transaction();
  }

  late final _start_transactionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('start_transaction');
  late final _start_transaction =
      _start_transactionPtr.asFunction<int Function()>();

  int add_utxo(
    int txindex,
    ffi.Pointer<ffi.Char> hex_utxo_txid,
    int vout,
  ) {
    return _add_utxo(
      txindex,
      hex_utxo_txid,
      vout,
    );
  }

  late final _add_utxoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('add_utxo');
  late final _add_utxo =
      _add_utxoPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int add_output(
    int txindex,
    ffi.Pointer<ffi.Char> destinationaddress,
    ffi.Pointer<ffi.Char> amount,
  ) {
    return _add_output(
      txindex,
      destinationaddress,
      amount,
    );
  }

  late final _add_outputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('add_output');
  late final _add_output = _add_outputPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> finalize_transaction(
    int txindex,
    ffi.Pointer<ffi.Char> destinationaddress,
    ffi.Pointer<ffi.Char> subtractedfee,
    ffi.Pointer<ffi.Char> out_dogeamount_for_verification,
    ffi.Pointer<ffi.Char> changeaddress,
  ) {
    return _finalize_transaction(
      txindex,
      destinationaddress,
      subtractedfee,
      out_dogeamount_for_verification,
      changeaddress,
    );
  }

  late final _finalize_transactionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('finalize_transaction');
  late final _finalize_transaction = _finalize_transactionPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int sign_transaction(
    int txindex,
    ffi.Pointer<ffi.Char> script_pubkey,
    ffi.Pointer<ffi.Char> privkey,
  ) {
    return _sign_transaction(
      txindex,
      script_pubkey,
      privkey,
    );
  }

  late final _sign_transactionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('sign_transaction');
  late final _sign_transaction = _sign_transactionPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void remove_all() {
    return _remove_all();
  }

  late final _remove_allPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('remove_all');
  late final _remove_all = _remove_allPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Char> get_raw_transaction(
    int txindex,
  ) {
    return _get_raw_transaction(
      txindex,
    );
  }

  late final _get_raw_transactionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'get_raw_transaction');
  late final _get_raw_transaction =
      _get_raw_transactionPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void clear_transaction(
    int txindex,
  ) {
    return _clear_transaction(
      txindex,
    );
  }

  late final _clear_transactionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'clear_transaction');
  late final _clear_transaction =
      _clear_transactionPtr.asFunction<void Function(int)>();

  int sign_raw_transaction(
    int inputindex,
    ffi.Pointer<ffi.Char> incomingrawtx,
    ffi.Pointer<ffi.Char> scripthex,
    int sighashtype,
    ffi.Pointer<ffi.Char> privkey,
  ) {
    return _sign_raw_transaction(
      inputindex,
      incomingrawtx,
      scripthex,
      sighashtype,
      privkey,
    );
  }

  late final _sign_raw_transactionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>)>>('sign_raw_transaction');
  late final _sign_raw_transaction = _sign_raw_transactionPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>)>();

  int store_raw_transaction(
    ffi.Pointer<ffi.Char> incomingrawtx,
  ) {
    return _store_raw_transaction(
      incomingrawtx,
    );
  }

  late final _store_raw_transactionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'store_raw_transaction');
  late final _store_raw_transaction = _store_raw_transactionPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> dogecoin_char_vla(
    int size,
  ) {
    return _dogecoin_char_vla(
      size,
    );
  }

  late final _dogecoin_char_vlaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'dogecoin_char_vla');
  late final _dogecoin_char_vla =
      _dogecoin_char_vlaPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void dogecoin_free(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _dogecoin_free(
      ptr,
    );
  }

  late final _dogecoin_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'dogecoin_free');
  late final _dogecoin_free =
      _dogecoin_freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  late final ffi.Pointer<ffi.Pointer<eckey>> _keys1 =
      _lookup<ffi.Pointer<eckey>>('keys');

  ffi.Pointer<eckey> get keys1 => _keys1.value;

  set keys1(ffi.Pointer<eckey> value) => _keys1.value = value;

  ffi.Pointer<eckey> new_eckey() {
    return _new_eckey();
  }

  late final _new_eckeyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<eckey> Function()>>('new_eckey');
  late final _new_eckey =
      _new_eckeyPtr.asFunction<ffi.Pointer<eckey> Function()>();

  ffi.Pointer<eckey> find_eckey(
    int idx,
  ) {
    return _find_eckey(
      idx,
    );
  }

  late final _find_eckeyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<eckey> Function(ffi.Int)>>(
          'find_eckey');
  late final _find_eckey =
      _find_eckeyPtr.asFunction<ffi.Pointer<eckey> Function(int)>();

  late final ffi.Pointer<ffi.Int> ___uint16_t = _lookup<ffi.Int>('__uint16_t');

  int get __uint16_t => ___uint16_t.value;

  set __uint16_t(int value) => ___uint16_t.value = value;

  void rmd160(
    ffi.Pointer<ffi.Int> msg,
    int msg_len,
    ffi.Pointer<ffi.Int> hash,
  ) {
    return _rmd160(
      msg,
      msg_len,
      hash,
    );
  }

  late final _rmd160Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<ffi.Int>)>>('rmd160');
  late final _rmd160 = _rmd160Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Int>, int, ffi.Pointer<ffi.Int>)>();

  late final ffi.Pointer<ffi.Int> _LIBDOGECOIN_END_DECL =
      _lookup<ffi.Int>('LIBDOGECOIN_END_DECL');

  int get LIBDOGECOIN_END_DECL => _LIBDOGECOIN_END_DECL.value;

  set LIBDOGECOIN_END_DECL(int value) => _LIBDOGECOIN_END_DECL.value = value;

  /// !get public key from given private key
  int dogecoin_ecc_get_pubkey(
    ffi.Pointer<ffi.Int> private_key,
    ffi.Pointer<ffi.Int> public_key,
    ffi.Pointer<ffi.Int> public_key_len,
    int compressed,
  ) {
    return _dogecoin_ecc_get_pubkey(
      private_key,
      public_key,
      public_key_len,
      compressed,
    );
  }

  late final _dogecoin_ecc_get_pubkeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Int)>>('dogecoin_ecc_get_pubkey');
  late final _dogecoin_ecc_get_pubkey = _dogecoin_ecc_get_pubkeyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, int)>();

  int dogecoin_rnd_set_mapper(
    int mapper,
  ) {
    return _dogecoin_rnd_set_mapper(
      mapper,
    );
  }

  late final _dogecoin_rnd_set_mapperPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(dogecoin_rnd_mapper)>>(
          'dogecoin_rnd_set_mapper');
  late final _dogecoin_rnd_set_mapper =
      _dogecoin_rnd_set_mapperPtr.asFunction<int Function(int)>();

  int dogecoin_rnd_set_mapper_default() {
    return _dogecoin_rnd_set_mapper_default();
  }

  late final _dogecoin_rnd_set_mapper_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'dogecoin_rnd_set_mapper_default');
  late final _dogecoin_rnd_set_mapper_default =
      _dogecoin_rnd_set_mapper_defaultPtr.asFunction<int Function()>();

  int dogecoin_random_init() {
    return _dogecoin_random_init();
  }

  late final _dogecoin_random_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('dogecoin_random_init');
  late final _dogecoin_random_init =
      _dogecoin_random_initPtr.asFunction<int Function()>();

  int buffer_equal(
    ffi.Pointer<ffi.Void> a,
    ffi.Pointer<ffi.Void> b,
  ) {
    return _buffer_equal(
      a,
      b,
    );
  }

  late final _buffer_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>('buffer_equal');
  late final _buffer_equal = _buffer_equalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  int buffer_free(
    ffi.Pointer<ffi.Void> struct_buffer,
  ) {
    return _buffer_free(
      struct_buffer,
    );
  }

  late final _buffer_freePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'buffer_free');
  late final _buffer_free =
      _buffer_freePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Int> buffer_copy(
    ffi.Pointer<ffi.Void> data,
    int data_len,
  ) {
    return _buffer_copy(
      data,
      data_len,
    );
  }

  late final _buffer_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('buffer_copy');
  late final _buffer_copy = _buffer_copyPtr
      .asFunction<ffi.Pointer<ffi.Int> Function(ffi.Pointer<ffi.Void>, int)>();

  int sha256_init(
    ffi.Pointer<sha256_context> arg0,
  ) {
    return _sha256_init(
      arg0,
    );
  }

  late final _sha256_initPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sha256_context>)>>(
      'sha256_init');
  late final _sha256_init =
      _sha256_initPtr.asFunction<int Function(ffi.Pointer<sha256_context>)>();

  int sha256_write(
    ffi.Pointer<sha256_context> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
    int size_t,
  ) {
    return _sha256_write(
      arg0,
      arg1,
      size_t,
    );
  }

  late final _sha256_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sha256_context>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('sha256_write');
  late final _sha256_write = _sha256_writePtr.asFunction<
      int Function(ffi.Pointer<sha256_context>, ffi.Pointer<ffi.Uint8>, int)>();

  int sha256_finalize(
    ffi.Pointer<sha256_context> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
  ) {
    return _sha256_finalize(
      arg0,
      arg1,
    );
  }

  late final _sha256_finalizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sha256_context>,
              ffi.Pointer<ffi.Uint8>)>>('sha256_finalize');
  late final _sha256_finalize = _sha256_finalizePtr.asFunction<
      int Function(ffi.Pointer<sha256_context>, ffi.Pointer<ffi.Uint8>)>();

  int sha256_raw(
    ffi.Pointer<ffi.Uint8> arg0,
    int size_t,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return _sha256_raw(
      arg0,
      size_t,
      arg2,
    );
  }

  late final _sha256_rawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<ffi.Uint8>)>>('sha256_raw');
  late final _sha256_raw = _sha256_rawPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  int sha512_init(
    ffi.Pointer<sha512_context> arg0,
  ) {
    return _sha512_init(
      arg0,
    );
  }

  late final _sha512_initPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sha512_context>)>>(
      'sha512_init');
  late final _sha512_init =
      _sha512_initPtr.asFunction<int Function(ffi.Pointer<sha512_context>)>();

  int sha512_write(
    ffi.Pointer<sha512_context> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
    int size_t,
  ) {
    return _sha512_write(
      arg0,
      arg1,
      size_t,
    );
  }

  late final _sha512_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sha512_context>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('sha512_write');
  late final _sha512_write = _sha512_writePtr.asFunction<
      int Function(ffi.Pointer<sha512_context>, ffi.Pointer<ffi.Uint8>, int)>();

  int sha512_finalize(
    ffi.Pointer<sha512_context> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
  ) {
    return _sha512_finalize(
      arg0,
      arg1,
    );
  }

  late final _sha512_finalizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sha512_context>,
              ffi.Pointer<ffi.Uint8>)>>('sha512_finalize');
  late final _sha512_finalize = _sha512_finalizePtr.asFunction<
      int Function(ffi.Pointer<sha512_context>, ffi.Pointer<ffi.Uint8>)>();

  int sha512_raw(
    ffi.Pointer<ffi.Uint8> arg0,
    int size_t,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    return _sha512_raw(
      arg0,
      size_t,
      arg2,
    );
  }

  late final _sha512_rawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<ffi.Uint8>)>>('sha512_raw');
  late final _sha512_raw = _sha512_rawPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  int hmac_sha256_init(
    ffi.Pointer<hmac_sha256_context> hctx,
    ffi.Pointer<ffi.Uint8> key,
    int keylen,
  ) {
    return _hmac_sha256_init(
      hctx,
      key,
      keylen,
    );
  }

  late final _hmac_sha256_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<hmac_sha256_context>,
              ffi.Pointer<ffi.Uint8>, ffi.Uint32)>>('hmac_sha256_init');
  late final _hmac_sha256_init = _hmac_sha256_initPtr.asFunction<
      int Function(
          ffi.Pointer<hmac_sha256_context>, ffi.Pointer<ffi.Uint8>, int)>();

  int hmac_sha256_write(
    ffi.Pointer<hmac_sha256_context> hctx,
    ffi.Pointer<ffi.Uint8> msg,
    int msglen,
  ) {
    return _hmac_sha256_write(
      hctx,
      msg,
      msglen,
    );
  }

  late final _hmac_sha256_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<hmac_sha256_context>,
              ffi.Pointer<ffi.Uint8>, ffi.Uint32)>>('hmac_sha256_write');
  late final _hmac_sha256_write = _hmac_sha256_writePtr.asFunction<
      int Function(
          ffi.Pointer<hmac_sha256_context>, ffi.Pointer<ffi.Uint8>, int)>();

  int hmac_sha256_finalize(
    ffi.Pointer<hmac_sha256_context> hctx,
    ffi.Pointer<ffi.Uint8> hmac,
  ) {
    return _hmac_sha256_finalize(
      hctx,
      hmac,
    );
  }

  late final _hmac_sha256_finalizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<hmac_sha256_context>,
              ffi.Pointer<ffi.Uint8>)>>('hmac_sha256_finalize');
  late final _hmac_sha256_finalize = _hmac_sha256_finalizePtr.asFunction<
      int Function(ffi.Pointer<hmac_sha256_context>, ffi.Pointer<ffi.Uint8>)>();

  int hmac_sha256(
    ffi.Pointer<ffi.Uint8> key,
    int keylen,
    ffi.Pointer<ffi.Uint8> msg,
    int msglen,
    ffi.Pointer<ffi.Uint8> hmac,
  ) {
    return _hmac_sha256(
      key,
      keylen,
      msg,
      msglen,
      hmac,
    );
  }

  late final _hmac_sha256Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>)>>('hmac_sha256');
  late final _hmac_sha256 = _hmac_sha256Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>)>();

  int hmac_sha512_init(
    ffi.Pointer<hmac_sha512_context> hctx,
    ffi.Pointer<ffi.Uint8> key,
    int keylen,
  ) {
    return _hmac_sha512_init(
      hctx,
      key,
      keylen,
    );
  }

  late final _hmac_sha512_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<hmac_sha512_context>,
              ffi.Pointer<ffi.Uint8>, ffi.Uint32)>>('hmac_sha512_init');
  late final _hmac_sha512_init = _hmac_sha512_initPtr.asFunction<
      int Function(
          ffi.Pointer<hmac_sha512_context>, ffi.Pointer<ffi.Uint8>, int)>();

  int hmac_sha512_write(
    ffi.Pointer<hmac_sha512_context> hctx,
    ffi.Pointer<ffi.Uint8> msg,
    int msglen,
  ) {
    return _hmac_sha512_write(
      hctx,
      msg,
      msglen,
    );
  }

  late final _hmac_sha512_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<hmac_sha512_context>,
              ffi.Pointer<ffi.Uint8>, ffi.Uint32)>>('hmac_sha512_write');
  late final _hmac_sha512_write = _hmac_sha512_writePtr.asFunction<
      int Function(
          ffi.Pointer<hmac_sha512_context>, ffi.Pointer<ffi.Uint8>, int)>();

  int hmac_sha512_finalize(
    ffi.Pointer<hmac_sha512_context> hctx,
    ffi.Pointer<ffi.Uint8> hmac,
  ) {
    return _hmac_sha512_finalize(
      hctx,
      hmac,
    );
  }

  late final _hmac_sha512_finalizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<hmac_sha512_context>,
              ffi.Pointer<ffi.Uint8>)>>('hmac_sha512_finalize');
  late final _hmac_sha512_finalize = _hmac_sha512_finalizePtr.asFunction<
      int Function(ffi.Pointer<hmac_sha512_context>, ffi.Pointer<ffi.Uint8>)>();

  int hmac_sha512(
    ffi.Pointer<ffi.Uint8> key,
    int keylen,
    ffi.Pointer<ffi.Uint8> msg,
    int msglen,
    ffi.Pointer<ffi.Uint8> hmac,
  ) {
    return _hmac_sha512(
      key,
      keylen,
      msg,
      msglen,
      hmac,
    );
  }

  late final _hmac_sha512Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>)>>('hmac_sha512');
  late final _hmac_sha512 = _hmac_sha512Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>)>();

  int pbkdf2_hmac_sha256_init(
    ffi.Pointer<pbkdf2_hmac_sha256_context> pctx,
    ffi.Pointer<ffi.Uint8> pass,
    int passlen,
    ffi.Pointer<ffi.Uint8> salt,
    int saltlen,
  ) {
    return _pbkdf2_hmac_sha256_init(
      pctx,
      pass,
      passlen,
      salt,
      saltlen,
    );
  }

  late final _pbkdf2_hmac_sha256_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pbkdf2_hmac_sha256_context>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('pbkdf2_hmac_sha256_init');
  late final _pbkdf2_hmac_sha256_init = _pbkdf2_hmac_sha256_initPtr.asFunction<
      int Function(ffi.Pointer<pbkdf2_hmac_sha256_context>,
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  int pbkdf2_hmac_sha256_write(
    ffi.Pointer<pbkdf2_hmac_sha256_context> pctx,
    int iterations,
  ) {
    return _pbkdf2_hmac_sha256_write(
      pctx,
      iterations,
    );
  }

  late final _pbkdf2_hmac_sha256_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pbkdf2_hmac_sha256_context>,
              ffi.Uint32)>>('pbkdf2_hmac_sha256_write');
  late final _pbkdf2_hmac_sha256_write = _pbkdf2_hmac_sha256_writePtr
      .asFunction<int Function(ffi.Pointer<pbkdf2_hmac_sha256_context>, int)>();

  int pbkdf2_hmac_sha256_finalize(
    ffi.Pointer<pbkdf2_hmac_sha256_context> pctx,
    ffi.Pointer<ffi.Uint8> key,
  ) {
    return _pbkdf2_hmac_sha256_finalize(
      pctx,
      key,
    );
  }

  late final _pbkdf2_hmac_sha256_finalizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pbkdf2_hmac_sha256_context>,
              ffi.Pointer<ffi.Uint8>)>>('pbkdf2_hmac_sha256_finalize');
  late final _pbkdf2_hmac_sha256_finalize =
      _pbkdf2_hmac_sha256_finalizePtr.asFunction<
          int Function(ffi.Pointer<pbkdf2_hmac_sha256_context>,
              ffi.Pointer<ffi.Uint8>)>();

  int pbkdf2_hmac_sha256(
    ffi.Pointer<ffi.Uint8> pass,
    int passlen,
    ffi.Pointer<ffi.Uint8> salt,
    int saltlen,
    int iterations,
    ffi.Pointer<ffi.Uint8> key,
  ) {
    return _pbkdf2_hmac_sha256(
      pass,
      passlen,
      salt,
      saltlen,
      iterations,
      key,
    );
  }

  late final _pbkdf2_hmac_sha256Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint8>)>>('pbkdf2_hmac_sha256');
  late final _pbkdf2_hmac_sha256 = _pbkdf2_hmac_sha256Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, ffi.Pointer<ffi.Uint8>)>();

  int pbkdf2_hmac_sha512_init(
    ffi.Pointer<pbkdf2_hmac_sha512_context> pctx,
    ffi.Pointer<ffi.Uint8> pass,
    int passlen,
    ffi.Pointer<ffi.Uint8> salt,
    int saltlen,
  ) {
    return _pbkdf2_hmac_sha512_init(
      pctx,
      pass,
      passlen,
      salt,
      saltlen,
    );
  }

  late final _pbkdf2_hmac_sha512_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pbkdf2_hmac_sha512_context>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('pbkdf2_hmac_sha512_init');
  late final _pbkdf2_hmac_sha512_init = _pbkdf2_hmac_sha512_initPtr.asFunction<
      int Function(ffi.Pointer<pbkdf2_hmac_sha512_context>,
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  int pbkdf2_hmac_sha512_write(
    ffi.Pointer<pbkdf2_hmac_sha512_context> pctx,
    int iterations,
  ) {
    return _pbkdf2_hmac_sha512_write(
      pctx,
      iterations,
    );
  }

  late final _pbkdf2_hmac_sha512_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pbkdf2_hmac_sha512_context>,
              ffi.Uint32)>>('pbkdf2_hmac_sha512_write');
  late final _pbkdf2_hmac_sha512_write = _pbkdf2_hmac_sha512_writePtr
      .asFunction<int Function(ffi.Pointer<pbkdf2_hmac_sha512_context>, int)>();

  int pbkdf2_hmac_sha512_finalize(
    ffi.Pointer<pbkdf2_hmac_sha512_context> pctx,
    ffi.Pointer<ffi.Uint8> key,
  ) {
    return _pbkdf2_hmac_sha512_finalize(
      pctx,
      key,
    );
  }

  late final _pbkdf2_hmac_sha512_finalizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pbkdf2_hmac_sha512_context>,
              ffi.Pointer<ffi.Uint8>)>>('pbkdf2_hmac_sha512_finalize');
  late final _pbkdf2_hmac_sha512_finalize =
      _pbkdf2_hmac_sha512_finalizePtr.asFunction<
          int Function(ffi.Pointer<pbkdf2_hmac_sha512_context>,
              ffi.Pointer<ffi.Uint8>)>();

  int pbkdf2_hmac_sha512(
    ffi.Pointer<ffi.Uint8> pass,
    int passlen,
    ffi.Pointer<ffi.Uint8> salt,
    int saltlen,
    int iterations,
    ffi.Pointer<ffi.Uint8> key,
  ) {
    return _pbkdf2_hmac_sha512(
      pass,
      passlen,
      salt,
      saltlen,
      iterations,
      key,
    );
  }

  late final _pbkdf2_hmac_sha512Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint8>)>>('pbkdf2_hmac_sha512');
  late final _pbkdf2_hmac_sha512 = _pbkdf2_hmac_sha512Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, ffi.Pointer<ffi.Uint8>)>();

  int dogecoin_base58_encode(
    ffi.Pointer<ffi.Char> b58,
    ffi.Pointer<ffi.Int> b58sz,
    ffi.Pointer<ffi.Void> data,
    int binsz,
  ) {
    return _dogecoin_base58_encode(
      b58,
      b58sz,
      data,
      binsz,
    );
  }

  late final _dogecoin_base58_encodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('dogecoin_base58_encode');
  late final _dogecoin_base58_encode = _dogecoin_base58_encodePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Void>, int)>();

  int dogecoin_base58_decode(
    ffi.Pointer<ffi.Void> bin,
    ffi.Pointer<ffi.Int> binszp,
    ffi.Pointer<ffi.Char> b58,
    int b58sz,
  ) {
    return _dogecoin_base58_decode(
      bin,
      binszp,
      b58,
      b58sz,
    );
  }

  late final _dogecoin_base58_decodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('dogecoin_base58_decode');
  late final _dogecoin_base58_decode = _dogecoin_base58_decodePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  void AES128_init(
    ffi.Pointer<AES128_ctx> ctx,
    ffi.Pointer<ffi.UnsignedChar> key16,
  ) {
    return _AES128_init(
      ctx,
      key16,
    );
  }

  late final _AES128_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<AES128_ctx>,
              ffi.Pointer<ffi.UnsignedChar>)>>('AES128_init');
  late final _AES128_init = _AES128_initPtr.asFunction<
      void Function(ffi.Pointer<AES128_ctx>, ffi.Pointer<ffi.UnsignedChar>)>();

  void AES128_encrypt(
    ffi.Pointer<AES128_ctx> ctx,
    int blocks,
    ffi.Pointer<ffi.UnsignedChar> cipher16,
    ffi.Pointer<ffi.UnsignedChar> plain16,
  ) {
    return _AES128_encrypt(
      ctx,
      blocks,
      cipher16,
      plain16,
    );
  }

  late final _AES128_encryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<AES128_ctx>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>>('AES128_encrypt');
  late final _AES128_encrypt = _AES128_encryptPtr.asFunction<
      void Function(ffi.Pointer<AES128_ctx>, int, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>)>();

  void AES128_decrypt(
    ffi.Pointer<AES128_ctx> ctx,
    int blocks,
    ffi.Pointer<ffi.UnsignedChar> plain16,
    ffi.Pointer<ffi.UnsignedChar> cipher16,
  ) {
    return _AES128_decrypt(
      ctx,
      blocks,
      plain16,
      cipher16,
    );
  }

  late final _AES128_decryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<AES128_ctx>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>>('AES128_decrypt');
  late final _AES128_decrypt = _AES128_decryptPtr.asFunction<
      void Function(ffi.Pointer<AES128_ctx>, int, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>)>();

  void AES192_init(
    ffi.Pointer<AES192_ctx> ctx,
    ffi.Pointer<ffi.UnsignedChar> key24,
  ) {
    return _AES192_init(
      ctx,
      key24,
    );
  }

  late final _AES192_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<AES192_ctx>,
              ffi.Pointer<ffi.UnsignedChar>)>>('AES192_init');
  late final _AES192_init = _AES192_initPtr.asFunction<
      void Function(ffi.Pointer<AES192_ctx>, ffi.Pointer<ffi.UnsignedChar>)>();

  void AES192_encrypt(
    ffi.Pointer<AES192_ctx> ctx,
    int blocks,
    ffi.Pointer<ffi.UnsignedChar> cipher16,
    ffi.Pointer<ffi.UnsignedChar> plain16,
  ) {
    return _AES192_encrypt(
      ctx,
      blocks,
      cipher16,
      plain16,
    );
  }

  late final _AES192_encryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<AES192_ctx>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>>('AES192_encrypt');
  late final _AES192_encrypt = _AES192_encryptPtr.asFunction<
      void Function(ffi.Pointer<AES192_ctx>, int, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>)>();

  void AES192_decrypt(
    ffi.Pointer<AES192_ctx> ctx,
    int blocks,
    ffi.Pointer<ffi.UnsignedChar> plain16,
    ffi.Pointer<ffi.UnsignedChar> cipher16,
  ) {
    return _AES192_decrypt(
      ctx,
      blocks,
      plain16,
      cipher16,
    );
  }

  late final _AES192_decryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<AES192_ctx>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>>('AES192_decrypt');
  late final _AES192_decrypt = _AES192_decryptPtr.asFunction<
      void Function(ffi.Pointer<AES192_ctx>, int, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>)>();

  void AES256_init(
    ffi.Pointer<AES256_ctx> ctx,
    ffi.Pointer<ffi.UnsignedChar> key32,
  ) {
    return _AES256_init(
      ctx,
      key32,
    );
  }

  late final _AES256_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<AES256_ctx>,
              ffi.Pointer<ffi.UnsignedChar>)>>('AES256_init');
  late final _AES256_init = _AES256_initPtr.asFunction<
      void Function(ffi.Pointer<AES256_ctx>, ffi.Pointer<ffi.UnsignedChar>)>();

  void AES256_encrypt(
    ffi.Pointer<AES256_ctx> ctx,
    int blocks,
    ffi.Pointer<ffi.UnsignedChar> cipher16,
    ffi.Pointer<ffi.UnsignedChar> plain16,
  ) {
    return _AES256_encrypt(
      ctx,
      blocks,
      cipher16,
      plain16,
    );
  }

  late final _AES256_encryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<AES256_ctx>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>>('AES256_encrypt');
  late final _AES256_encrypt = _AES256_encryptPtr.asFunction<
      void Function(ffi.Pointer<AES256_ctx>, int, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>)>();

  void AES256_decrypt(
    ffi.Pointer<AES256_ctx> ctx,
    int blocks,
    ffi.Pointer<ffi.UnsignedChar> plain16,
    ffi.Pointer<ffi.UnsignedChar> cipher16,
  ) {
    return _AES256_decrypt(
      ctx,
      blocks,
      plain16,
      cipher16,
    );
  }

  late final _AES256_decryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<AES256_ctx>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>>('AES256_decrypt');
  late final _AES256_decrypt = _AES256_decryptPtr.asFunction<
      void Function(ffi.Pointer<AES256_ctx>, int, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>)>();

  ffi.Pointer<cmsghdr> __cmsg_nxthdr(
    ffi.Pointer<msghdr> __mhdr,
    ffi.Pointer<cmsghdr> __cmsg,
  ) {
    return ___cmsg_nxthdr(
      __mhdr,
      __cmsg,
    );
  }

  late final ___cmsg_nxthdrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cmsghdr> Function(
              ffi.Pointer<msghdr>, ffi.Pointer<cmsghdr>)>>('__cmsg_nxthdr');
  late final ___cmsg_nxthdr = ___cmsg_nxthdrPtr.asFunction<
      ffi.Pointer<cmsghdr> Function(
          ffi.Pointer<msghdr>, ffi.Pointer<cmsghdr>)>();

  int socket(
    int __domain,
    int __type,
    int __protocol,
  ) {
    return _socket(
      __domain,
      __type,
      __protocol,
    );
  }

  late final _socketPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'socket');
  late final _socket = _socketPtr.asFunction<int Function(int, int, int)>();

  int socketpair(
    int __domain,
    int __type,
    int __protocol,
    ffi.Pointer<ffi.Int> __fds,
  ) {
    return _socketpair(
      __domain,
      __type,
      __protocol,
      __fds,
    );
  }

  late final _socketpairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>)>>('socketpair');
  late final _socketpair = _socketpairPtr
      .asFunction<int Function(int, int, int, ffi.Pointer<ffi.Int>)>();

  int bind(
    int __fd,
    ffi.Pointer<sockaddr> __addr,
    int __len,
  ) {
    return _bind(
      __fd,
      __addr,
      __len,
    );
  }

  late final _bindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr>, socklen_t)>>('bind');
  late final _bind =
      _bindPtr.asFunction<int Function(int, ffi.Pointer<sockaddr>, int)>();

  int getsockname(
    int __fd,
    ffi.Pointer<sockaddr> __addr,
    ffi.Pointer<socklen_t> __len,
  ) {
    return _getsockname(
      __fd,
      __addr,
      __len,
    );
  }

  late final _getsocknamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr>,
              ffi.Pointer<socklen_t>)>>('getsockname');
  late final _getsockname = _getsocknamePtr.asFunction<
      int Function(int, ffi.Pointer<sockaddr>, ffi.Pointer<socklen_t>)>();

  int connect(
    int __fd,
    ffi.Pointer<sockaddr> __addr,
    int __len,
  ) {
    return _connect(
      __fd,
      __addr,
      __len,
    );
  }

  late final _connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<sockaddr>, socklen_t)>>('connect');
  late final _connect =
      _connectPtr.asFunction<int Function(int, ffi.Pointer<sockaddr>, int)>();

  int getpeername(
    int __fd,
    ffi.Pointer<sockaddr> __addr,
    ffi.Pointer<socklen_t> __len,
  ) {
    return _getpeername(
      __fd,
      __addr,
      __len,
    );
  }

  late final _getpeernamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr>,
              ffi.Pointer<socklen_t>)>>('getpeername');
  late final _getpeername = _getpeernamePtr.asFunction<
      int Function(int, ffi.Pointer<sockaddr>, ffi.Pointer<socklen_t>)>();

  int send(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
    int __flags,
  ) {
    return _send(
      __fd,
      __buf,
      __n,
      __flags,
    );
  }

  late final _sendPtr = _lookup<
      ffi.NativeFunction<
          ssize_t1 Function(
              ffi.Int, ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('send');
  late final _send =
      _sendPtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  int recv(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
    int __flags,
  ) {
    return _recv(
      __fd,
      __buf,
      __n,
      __flags,
    );
  }

  late final _recvPtr = _lookup<
      ffi.NativeFunction<
          ssize_t1 Function(
              ffi.Int, ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('recv');
  late final _recv =
      _recvPtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  int sendto(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
    int __flags,
    ffi.Pointer<sockaddr> __addr,
    int __addr_len,
  ) {
    return _sendto(
      __fd,
      __buf,
      __n,
      __flags,
      __addr,
      __addr_len,
    );
  }

  late final _sendtoPtr = _lookup<
      ffi.NativeFunction<
          ssize_t1 Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<sockaddr>, socklen_t)>>('sendto');
  late final _sendto = _sendtoPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<sockaddr>, int)>();

  int recvfrom(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
    int __flags,
    ffi.Pointer<sockaddr> __addr,
    ffi.Pointer<socklen_t> __addr_len,
  ) {
    return _recvfrom(
      __fd,
      __buf,
      __n,
      __flags,
      __addr,
      __addr_len,
    );
  }

  late final _recvfromPtr = _lookup<
      ffi.NativeFunction<
          ssize_t1 Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<sockaddr>, ffi.Pointer<socklen_t>)>>('recvfrom');
  late final _recvfrom = _recvfromPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<sockaddr>,
          ffi.Pointer<socklen_t>)>();

  int sendmsg(
    int __fd,
    ffi.Pointer<msghdr> __message,
    int __flags,
  ) {
    return _sendmsg(
      __fd,
      __message,
      __flags,
    );
  }

  late final _sendmsgPtr = _lookup<
      ffi.NativeFunction<
          ssize_t1 Function(ffi.Int, ffi.Pointer<msghdr>, ffi.Int)>>('sendmsg');
  late final _sendmsg =
      _sendmsgPtr.asFunction<int Function(int, ffi.Pointer<msghdr>, int)>();

  int recvmsg(
    int __fd,
    ffi.Pointer<msghdr> __message,
    int __flags,
  ) {
    return _recvmsg(
      __fd,
      __message,
      __flags,
    );
  }

  late final _recvmsgPtr = _lookup<
      ffi.NativeFunction<
          ssize_t1 Function(ffi.Int, ffi.Pointer<msghdr>, ffi.Int)>>('recvmsg');
  late final _recvmsg =
      _recvmsgPtr.asFunction<int Function(int, ffi.Pointer<msghdr>, int)>();

  int getsockopt(
    int __fd,
    int __level,
    int __optname,
    ffi.Pointer<ffi.Void> __optval,
    ffi.Pointer<socklen_t> __optlen,
  ) {
    return _getsockopt(
      __fd,
      __level,
      __optname,
      __optval,
      __optlen,
    );
  }

  late final _getsockoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<socklen_t>)>>('getsockopt');
  late final _getsockopt = _getsockoptPtr.asFunction<
      int Function(
          int, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<socklen_t>)>();

  int setsockopt(
    int __fd,
    int __level,
    int __optname,
    ffi.Pointer<ffi.Void> __optval,
    int __optlen,
  ) {
    return _setsockopt(
      __fd,
      __level,
      __optname,
      __optval,
      __optlen,
    );
  }

  late final _setsockoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>,
              socklen_t)>>('setsockopt');
  late final _setsockopt = _setsockoptPtr
      .asFunction<int Function(int, int, int, ffi.Pointer<ffi.Void>, int)>();

  int listen(
    int __fd,
    int __n,
  ) {
    return _listen(
      __fd,
      __n,
    );
  }

  late final _listenPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('listen');
  late final _listen = _listenPtr.asFunction<int Function(int, int)>();

  int accept(
    int __fd,
    ffi.Pointer<sockaddr> __addr,
    ffi.Pointer<socklen_t> __addr_len,
  ) {
    return _accept(
      __fd,
      __addr,
      __addr_len,
    );
  }

  late final _acceptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr>,
              ffi.Pointer<socklen_t>)>>('accept');
  late final _accept = _acceptPtr.asFunction<
      int Function(int, ffi.Pointer<sockaddr>, ffi.Pointer<socklen_t>)>();

  int shutdown(
    int __fd,
    int __how,
  ) {
    return _shutdown(
      __fd,
      __how,
    );
  }

  late final _shutdownPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'shutdown');
  late final _shutdown = _shutdownPtr.asFunction<int Function(int, int)>();

  int sockatmark(
    int __fd,
  ) {
    return _sockatmark(
      __fd,
    );
  }

  late final _sockatmarkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sockatmark');
  late final _sockatmark = _sockatmarkPtr.asFunction<int Function(int)>();

  int isfdtype(
    int __fd,
    int __fdtype,
  ) {
    return _isfdtype(
      __fd,
      __fdtype,
    );
  }

  late final _isfdtypePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'isfdtype');
  late final _isfdtype = _isfdtypePtr.asFunction<int Function(int, int)>();

  late final ffi.Pointer<in6_addr> _in6addr_any =
      _lookup<in6_addr>('in6addr_any');

  in6_addr get in6addr_any => _in6addr_any.ref;

  late final ffi.Pointer<in6_addr> _in6addr_loopback =
      _lookup<in6_addr>('in6addr_loopback');

  in6_addr get in6addr_loopback => _in6addr_loopback.ref;

  int ntohl(
    int __netlong,
  ) {
    return _ntohl(
      __netlong,
    );
  }

  late final _ntohlPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>>('ntohl');
  late final _ntohl = _ntohlPtr.asFunction<int Function(int)>();

  int ntohs(
    int __netshort,
  ) {
    return _ntohs(
      __netshort,
    );
  }

  late final _ntohsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(ffi.Uint16)>>('ntohs');
  late final _ntohs = _ntohsPtr.asFunction<int Function(int)>();

  int htonl(
    int __hostlong,
  ) {
    return _htonl(
      __hostlong,
    );
  }

  late final _htonlPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>>('htonl');
  late final _htonl = _htonlPtr.asFunction<int Function(int)>();

  int htons(
    int __hostshort,
  ) {
    return _htons(
      __hostshort,
    );
  }

  late final _htonsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(ffi.Uint16)>>('htons');
  late final _htons = _htonsPtr.asFunction<int Function(int)>();

  int bindresvport(
    int __sockfd,
    ffi.Pointer<sockaddr_in> __sock_in,
  ) {
    return _bindresvport(
      __sockfd,
      __sock_in,
    );
  }

  late final _bindresvportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr_in>)>>('bindresvport');
  late final _bindresvport = _bindresvportPtr
      .asFunction<int Function(int, ffi.Pointer<sockaddr_in>)>();

  int bindresvport6(
    int __sockfd,
    ffi.Pointer<sockaddr_in6> __sock_in,
  ) {
    return _bindresvport6(
      __sockfd,
      __sock_in,
    );
  }

  late final _bindresvport6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<sockaddr_in6>)>>('bindresvport6');
  late final _bindresvport6 = _bindresvport6Ptr
      .asFunction<int Function(int, ffi.Pointer<sockaddr_in6>)>();

  int inet_addr(
    ffi.Pointer<ffi.Char> __cp,
  ) {
    return _inet_addr(
      __cp,
    );
  }

  late final _inet_addrPtr =
      _lookup<ffi.NativeFunction<in_addr_t Function(ffi.Pointer<ffi.Char>)>>(
          'inet_addr');
  late final _inet_addr =
      _inet_addrPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int inet_lnaof(
    in_addr __in,
  ) {
    return _inet_lnaof(
      __in,
    );
  }

  late final _inet_lnaofPtr =
      _lookup<ffi.NativeFunction<in_addr_t Function(in_addr)>>('inet_lnaof');
  late final _inet_lnaof = _inet_lnaofPtr.asFunction<int Function(in_addr)>();

  in_addr inet_makeaddr(
    int __net,
    int __host,
  ) {
    return _inet_makeaddr(
      __net,
      __host,
    );
  }

  late final _inet_makeaddrPtr =
      _lookup<ffi.NativeFunction<in_addr Function(in_addr_t, in_addr_t)>>(
          'inet_makeaddr');
  late final _inet_makeaddr =
      _inet_makeaddrPtr.asFunction<in_addr Function(int, int)>();

  int inet_netof(
    in_addr __in,
  ) {
    return _inet_netof(
      __in,
    );
  }

  late final _inet_netofPtr =
      _lookup<ffi.NativeFunction<in_addr_t Function(in_addr)>>('inet_netof');
  late final _inet_netof = _inet_netofPtr.asFunction<int Function(in_addr)>();

  int inet_network(
    ffi.Pointer<ffi.Char> __cp,
  ) {
    return _inet_network(
      __cp,
    );
  }

  late final _inet_networkPtr =
      _lookup<ffi.NativeFunction<in_addr_t Function(ffi.Pointer<ffi.Char>)>>(
          'inet_network');
  late final _inet_network =
      _inet_networkPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> inet_ntoa(
    in_addr __in,
  ) {
    return _inet_ntoa(
      __in,
    );
  }

  late final _inet_ntoaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(in_addr)>>(
          'inet_ntoa');
  late final _inet_ntoa =
      _inet_ntoaPtr.asFunction<ffi.Pointer<ffi.Char> Function(in_addr)>();

  int inet_pton(
    int __af,
    ffi.Pointer<ffi.Char> __cp,
    ffi.Pointer<ffi.Void> __buf,
  ) {
    return _inet_pton(
      __af,
      __cp,
      __buf,
    );
  }

  late final _inet_ptonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('inet_pton');
  late final _inet_pton = _inet_ptonPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> inet_ntop(
    int __af,
    ffi.Pointer<ffi.Void> __cp,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _inet_ntop(
      __af,
      __cp,
      __buf,
      __len,
    );
  }

  late final _inet_ntopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>, socklen_t)>>('inet_ntop');
  late final _inet_ntop = _inet_ntopPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, int)>();

  int inet_aton(
    ffi.Pointer<ffi.Char> __cp,
    ffi.Pointer<in_addr> __inp,
  ) {
    return _inet_aton(
      __cp,
      __inp,
    );
  }

  late final _inet_atonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<in_addr>)>>('inet_aton');
  late final _inet_aton = _inet_atonPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<in_addr>)>();

  ffi.Pointer<ffi.Char> inet_neta(
    int __net,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _inet_neta(
      __net,
      __buf,
      __len,
    );
  }

  late final _inet_netaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              in_addr_t, ffi.Pointer<ffi.Char>, ffi.Int)>>('inet_neta');
  late final _inet_neta = _inet_netaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> inet_net_ntop(
    int __af,
    ffi.Pointer<ffi.Void> __cp,
    int __bits,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _inet_net_ntop(
      __af,
      __cp,
      __bits,
      __buf,
      __len,
    );
  }

  late final _inet_net_ntopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('inet_net_ntop');
  late final _inet_net_ntop = _inet_net_ntopPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          int, ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>, int)>();

  int inet_net_pton(
    int __af,
    ffi.Pointer<ffi.Char> __cp,
    ffi.Pointer<ffi.Void> __buf,
    int __len,
  ) {
    return _inet_net_pton(
      __af,
      __cp,
      __buf,
      __len,
    );
  }

  late final _inet_net_ptonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('inet_net_pton');
  late final _inet_net_pton = _inet_net_ptonPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>, int)>();

  int inet_nsap_addr(
    ffi.Pointer<ffi.Char> __cp,
    ffi.Pointer<ffi.UnsignedChar> __buf,
    int __len,
  ) {
    return _inet_nsap_addr(
      __cp,
      __buf,
      __len,
    );
  }

  late final _inet_nsap_addrPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('inet_nsap_addr');
  late final _inet_nsap_addr = _inet_nsap_addrPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<ffi.Char> inet_nsap_ntoa(
    int __len,
    ffi.Pointer<ffi.UnsignedChar> __cp,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _inet_nsap_ntoa(
      __len,
      __cp,
      __buf,
    );
  }

  late final _inet_nsap_ntoaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Char>)>>('inet_nsap_ntoa');
  late final _inet_nsap_ntoa = _inet_nsap_ntoaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          int, ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<ffi.UnsignedInt> _DOGECOIN_MAX_P2P_MSG_SIZE =
      _lookup<ffi.UnsignedInt>('DOGECOIN_MAX_P2P_MSG_SIZE');

  int get DOGECOIN_MAX_P2P_MSG_SIZE => _DOGECOIN_MAX_P2P_MSG_SIZE.value;

  set DOGECOIN_MAX_P2P_MSG_SIZE(int value) =>
      _DOGECOIN_MAX_P2P_MSG_SIZE.value = value;

  late final ffi.Pointer<ffi.UnsignedInt> _DOGECOIN_P2P_HDRSZ =
      _lookup<ffi.UnsignedInt>('DOGECOIN_P2P_HDRSZ');

  int get DOGECOIN_P2P_HDRSZ => _DOGECOIN_P2P_HDRSZ.value;

  set DOGECOIN_P2P_HDRSZ(int value) => _DOGECOIN_P2P_HDRSZ.value = value;

  int DISABLE_WARNING() {
    return _DISABLE_WARNING();
  }

  late final _DISABLE_WARNINGPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('DISABLE_WARNING');
  late final _DISABLE_WARNING =
      _DISABLE_WARNINGPtr.asFunction<int Function()>();

  late final ffi.Pointer<ffi.Int> _NULLHASH = _lookup<ffi.Int>('NULLHASH');

  int get NULLHASH => _NULLHASH.value;

  set NULLHASH(int value) => _NULLHASH.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _DOGECOIN_MSG_VERSION =
      _lookup<ffi.Pointer<ffi.Char>>('DOGECOIN_MSG_VERSION');

  ffi.Pointer<ffi.Char> get DOGECOIN_MSG_VERSION => _DOGECOIN_MSG_VERSION.value;

  set DOGECOIN_MSG_VERSION(ffi.Pointer<ffi.Char> value) =>
      _DOGECOIN_MSG_VERSION.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _DOGECOIN_MSG_VERACK =
      _lookup<ffi.Pointer<ffi.Char>>('DOGECOIN_MSG_VERACK');

  ffi.Pointer<ffi.Char> get DOGECOIN_MSG_VERACK => _DOGECOIN_MSG_VERACK.value;

  set DOGECOIN_MSG_VERACK(ffi.Pointer<ffi.Char> value) =>
      _DOGECOIN_MSG_VERACK.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _DOGECOIN_MSG_PING =
      _lookup<ffi.Pointer<ffi.Char>>('DOGECOIN_MSG_PING');

  ffi.Pointer<ffi.Char> get DOGECOIN_MSG_PING => _DOGECOIN_MSG_PING.value;

  set DOGECOIN_MSG_PING(ffi.Pointer<ffi.Char> value) =>
      _DOGECOIN_MSG_PING.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _DOGECOIN_MSG_PONG =
      _lookup<ffi.Pointer<ffi.Char>>('DOGECOIN_MSG_PONG');

  ffi.Pointer<ffi.Char> get DOGECOIN_MSG_PONG => _DOGECOIN_MSG_PONG.value;

  set DOGECOIN_MSG_PONG(ffi.Pointer<ffi.Char> value) =>
      _DOGECOIN_MSG_PONG.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _DOGECOIN_MSG_GETDATA =
      _lookup<ffi.Pointer<ffi.Char>>('DOGECOIN_MSG_GETDATA');

  ffi.Pointer<ffi.Char> get DOGECOIN_MSG_GETDATA => _DOGECOIN_MSG_GETDATA.value;

  set DOGECOIN_MSG_GETDATA(ffi.Pointer<ffi.Char> value) =>
      _DOGECOIN_MSG_GETDATA.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _DOGECOIN_MSG_GETHEADERS =
      _lookup<ffi.Pointer<ffi.Char>>('DOGECOIN_MSG_GETHEADERS');

  ffi.Pointer<ffi.Char> get DOGECOIN_MSG_GETHEADERS =>
      _DOGECOIN_MSG_GETHEADERS.value;

  set DOGECOIN_MSG_GETHEADERS(ffi.Pointer<ffi.Char> value) =>
      _DOGECOIN_MSG_GETHEADERS.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _DOGECOIN_MSG_HEADERS =
      _lookup<ffi.Pointer<ffi.Char>>('DOGECOIN_MSG_HEADERS');

  ffi.Pointer<ffi.Char> get DOGECOIN_MSG_HEADERS => _DOGECOIN_MSG_HEADERS.value;

  set DOGECOIN_MSG_HEADERS(ffi.Pointer<ffi.Char> value) =>
      _DOGECOIN_MSG_HEADERS.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _DOGECOIN_MSG_GETBLOCKS =
      _lookup<ffi.Pointer<ffi.Char>>('DOGECOIN_MSG_GETBLOCKS');

  ffi.Pointer<ffi.Char> get DOGECOIN_MSG_GETBLOCKS =>
      _DOGECOIN_MSG_GETBLOCKS.value;

  set DOGECOIN_MSG_GETBLOCKS(ffi.Pointer<ffi.Char> value) =>
      _DOGECOIN_MSG_GETBLOCKS.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _DOGECOIN_MSG_BLOCK =
      _lookup<ffi.Pointer<ffi.Char>>('DOGECOIN_MSG_BLOCK');

  ffi.Pointer<ffi.Char> get DOGECOIN_MSG_BLOCK => _DOGECOIN_MSG_BLOCK.value;

  set DOGECOIN_MSG_BLOCK(ffi.Pointer<ffi.Char> value) =>
      _DOGECOIN_MSG_BLOCK.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _DOGECOIN_MSG_INV =
      _lookup<ffi.Pointer<ffi.Char>>('DOGECOIN_MSG_INV');

  ffi.Pointer<ffi.Char> get DOGECOIN_MSG_INV => _DOGECOIN_MSG_INV.value;

  set DOGECOIN_MSG_INV(ffi.Pointer<ffi.Char> value) =>
      _DOGECOIN_MSG_INV.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _DOGECOIN_MSG_TX =
      _lookup<ffi.Pointer<ffi.Char>>('DOGECOIN_MSG_TX');

  ffi.Pointer<ffi.Char> get DOGECOIN_MSG_TX => _DOGECOIN_MSG_TX.value;

  set DOGECOIN_MSG_TX(ffi.Pointer<ffi.Char> value) =>
      _DOGECOIN_MSG_TX.value = value;

  late final ffi.Pointer<ffi.UnsignedInt> _MAX_HEADERS_RESULTS =
      _lookup<ffi.UnsignedInt>('MAX_HEADERS_RESULTS');

  int get MAX_HEADERS_RESULTS => _MAX_HEADERS_RESULTS.value;

  set MAX_HEADERS_RESULTS(int value) => _MAX_HEADERS_RESULTS.value = value;

  late final ffi.Pointer<ffi.Int> _DOGECOIN_PROTOCOL_VERSION =
      _lookup<ffi.Int>('DOGECOIN_PROTOCOL_VERSION');

  int get DOGECOIN_PROTOCOL_VERSION => _DOGECOIN_PROTOCOL_VERSION.value;

  set DOGECOIN_PROTOCOL_VERSION(int value) =>
      _DOGECOIN_PROTOCOL_VERSION.value = value;

  /// getdata message type flags
  late final ffi.Pointer<ffi.Uint32> _MSG_TYPE_MASK =
      _lookup<ffi.Uint32>('MSG_TYPE_MASK');

  int get MSG_TYPE_MASK => _MSG_TYPE_MASK.value;

  set MSG_TYPE_MASK(int value) => _MSG_TYPE_MASK.value = value;

  int dogecoin_p2p_msg_version_init(
    ffi.Pointer<dogecoin_p2p_version_msg> msg,
    ffi.Pointer<dogecoin_p2p_address> addrFrom,
    ffi.Pointer<dogecoin_p2p_address> addrTo,
    ffi.Pointer<ffi.Char> strSubVer,
    int relay,
  ) {
    return _dogecoin_p2p_msg_version_init(
      msg,
      addrFrom,
      addrTo,
      strSubVer,
      relay,
    );
  }

  late final _dogecoin_p2p_msg_version_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<dogecoin_p2p_version_msg>,
              ffi.Pointer<dogecoin_p2p_address>,
              ffi.Pointer<dogecoin_p2p_address>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('dogecoin_p2p_msg_version_init');
  late final _dogecoin_p2p_msg_version_init =
      _dogecoin_p2p_msg_version_initPtr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_p2p_version_msg>,
              ffi.Pointer<dogecoin_p2p_address>,
              ffi.Pointer<dogecoin_p2p_address>,
              ffi.Pointer<ffi.Char>,
              int)>();

  int dogecoin_p2p_msg_version_ser(
    ffi.Pointer<dogecoin_p2p_version_msg> msg,
    ffi.Pointer<ffi.Int> buf,
  ) {
    return _dogecoin_p2p_msg_version_ser(
      msg,
      buf,
    );
  }

  late final _dogecoin_p2p_msg_version_serPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<dogecoin_p2p_version_msg>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_p2p_msg_version_ser');
  late final _dogecoin_p2p_msg_version_ser =
      _dogecoin_p2p_msg_version_serPtr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_p2p_version_msg>, ffi.Pointer<ffi.Int>)>();

  int dogecoin_p2p_msg_inv_init(
    ffi.Pointer<dogecoin_p2p_inv_msg> msg,
    int type,
    int hash,
  ) {
    return _dogecoin_p2p_msg_inv_init(
      msg,
      type,
      hash,
    );
  }

  late final _dogecoin_p2p_msg_inv_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<dogecoin_p2p_inv_msg>, ffi.Uint32,
              ffi.Int)>>('dogecoin_p2p_msg_inv_init');
  late final _dogecoin_p2p_msg_inv_init = _dogecoin_p2p_msg_inv_initPtr
      .asFunction<int Function(ffi.Pointer<dogecoin_p2p_inv_msg>, int, int)>();

  int dogecoin_p2p_msg_inv_ser(
    ffi.Pointer<dogecoin_p2p_inv_msg> msg,
    ffi.Pointer<ffi.Int> buf,
  ) {
    return _dogecoin_p2p_msg_inv_ser(
      msg,
      buf,
    );
  }

  late final _dogecoin_p2p_msg_inv_serPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<dogecoin_p2p_inv_msg>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_p2p_msg_inv_ser');
  late final _dogecoin_p2p_msg_inv_ser =
      _dogecoin_p2p_msg_inv_serPtr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_p2p_inv_msg>, ffi.Pointer<ffi.Int>)>();

  int dogecoin_p2p_address_init(
    ffi.Pointer<dogecoin_p2p_address> addr,
  ) {
    return _dogecoin_p2p_address_init(
      addr,
    );
  }

  late final _dogecoin_p2p_address_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<dogecoin_p2p_address>)>>('dogecoin_p2p_address_init');
  late final _dogecoin_p2p_address_init = _dogecoin_p2p_address_initPtr
      .asFunction<int Function(ffi.Pointer<dogecoin_p2p_address>)>();

  int dogecoin_addr_to_p2paddr(
    ffi.Pointer<sockaddr> addr,
    ffi.Pointer<dogecoin_p2p_address> addr_out,
  ) {
    return _dogecoin_addr_to_p2paddr(
      addr,
      addr_out,
    );
  }

  late final _dogecoin_addr_to_p2paddrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sockaddr>,
              ffi.Pointer<dogecoin_p2p_address>)>>('dogecoin_addr_to_p2paddr');
  late final _dogecoin_addr_to_p2paddr =
      _dogecoin_addr_to_p2paddrPtr.asFunction<
          int Function(
              ffi.Pointer<sockaddr>, ffi.Pointer<dogecoin_p2p_address>)>();

  int dogecoin_p2p_ser_addr(
    int protover,
    ffi.Pointer<dogecoin_p2p_address> addr,
    ffi.Pointer<ffi.Int> str_out,
  ) {
    return _dogecoin_p2p_ser_addr(
      protover,
      addr,
      str_out,
    );
  }

  late final _dogecoin_p2p_ser_addrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<dogecoin_p2p_address>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_p2p_ser_addr');
  late final _dogecoin_p2p_ser_addr = _dogecoin_p2p_ser_addrPtr.asFunction<
      int Function(
          int, ffi.Pointer<dogecoin_p2p_address>, ffi.Pointer<ffi.Int>)>();

  int dogecoin_p2paddr_to_addr(
    ffi.Pointer<dogecoin_p2p_address> p2p_addr,
    ffi.Pointer<sockaddr> addr_out,
  ) {
    return _dogecoin_p2paddr_to_addr(
      p2p_addr,
      addr_out,
    );
  }

  late final _dogecoin_p2paddr_to_addrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<dogecoin_p2p_address>,
              ffi.Pointer<sockaddr>)>>('dogecoin_p2paddr_to_addr');
  late final _dogecoin_p2paddr_to_addr =
      _dogecoin_p2paddr_to_addrPtr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_p2p_address>, ffi.Pointer<sockaddr>)>();

  int dogecoin_p2p_deser_msghdr(
    ffi.Pointer<dogecoin_p2p_msg_hdr> hdr,
    ffi.Pointer<const_buffer3> buf,
  ) {
    return _dogecoin_p2p_deser_msghdr(
      hdr,
      buf,
    );
  }

  late final _dogecoin_p2p_deser_msghdrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<dogecoin_p2p_msg_hdr>,
              ffi.Pointer<const_buffer3>)>>('dogecoin_p2p_deser_msghdr');
  late final _dogecoin_p2p_deser_msghdr =
      _dogecoin_p2p_deser_msghdrPtr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_p2p_msg_hdr>, ffi.Pointer<const_buffer3>)>();

  int dogecoin_p2p_msg_getheaders(
    ffi.Pointer<ffi.Int> blocklocators,
    int hashstop,
    ffi.Pointer<ffi.Int> str_out,
  ) {
    return _dogecoin_p2p_msg_getheaders(
      blocklocators,
      hashstop,
      str_out,
    );
  }

  late final _dogecoin_p2p_msg_getheadersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('dogecoin_p2p_msg_getheaders');
  late final _dogecoin_p2p_msg_getheaders =
      _dogecoin_p2p_msg_getheadersPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int>, int, ffi.Pointer<ffi.Int>)>();

  void utils_clear_buffers() {
    return _utils_clear_buffers();
  }

  late final _utils_clear_buffersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('utils_clear_buffers');
  late final _utils_clear_buffers =
      _utils_clear_buffersPtr.asFunction<void Function()>();

  int utils_hex_to_bin(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.UnsignedChar> out,
    int inLen,
    ffi.Pointer<ffi.Int> outLen,
  ) {
    return _utils_hex_to_bin(
      str,
      out,
      inLen,
      outLen,
    );
  }

  late final _utils_hex_to_binPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int, ffi.Pointer<ffi.Int>)>>('utils_hex_to_bin');
  late final _utils_hex_to_bin = _utils_hex_to_binPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>, int,
          ffi.Pointer<ffi.Int>)>();

  int utils_bin_to_hex(
    ffi.Pointer<ffi.UnsignedChar> bin_in,
    int inlen,
    ffi.Pointer<ffi.Char> hex_out,
  ) {
    return _utils_bin_to_hex(
      bin_in,
      inlen,
      hex_out,
    );
  }

  late final _utils_bin_to_hexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('utils_bin_to_hex');
  late final _utils_bin_to_hex = _utils_bin_to_hexPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<ffi.Int> _uint8_t = _lookup<ffi.Int>('uint8_t');

  int get uint8_t => _uint8_t.value;

  set uint8_t(int value) => _uint8_t.value = value;

  ffi.Pointer<ffi.Int> utils_uint8_to_hex(
    ffi.Pointer<ffi.Int> bin,
    int l,
  ) {
    return _utils_uint8_to_hex(
      bin,
      l,
    );
  }

  late final _utils_uint8_to_hexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(
              ffi.Pointer<ffi.Int>, ffi.Int)>>('utils_uint8_to_hex');
  late final _utils_uint8_to_hex = _utils_uint8_to_hexPtr
      .asFunction<ffi.Pointer<ffi.Int> Function(ffi.Pointer<ffi.Int>, int)>();

  int utils_reverse_hex(
    ffi.Pointer<ffi.Char> h,
    int len,
  ) {
    return _utils_reverse_hex(
      h,
      len,
    );
  }

  late final _utils_reverse_hexPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'utils_reverse_hex');
  late final _utils_reverse_hex = _utils_reverse_hexPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int utils_uint256_sethex(
    ffi.Pointer<ffi.Char> psz,
    ffi.Pointer<ffi.Int> out,
  ) {
    return _utils_uint256_sethex(
      psz,
      out,
    );
  }

  late final _utils_uint256_sethexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('utils_uint256_sethex');
  late final _utils_uint256_sethex = _utils_uint256_sethexPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Int> safe_malloc(
    int size,
  ) {
    return _safe_malloc(
      size,
    );
  }

  late final _safe_mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function(ffi.Int)>>(
          'safe_malloc');
  late final _safe_malloc =
      _safe_mallocPtr.asFunction<ffi.Pointer<ffi.Int> Function(int)>();

  int dogecoin_cheap_random_bytes(
    ffi.Pointer<ffi.Int> buf,
    int len,
  ) {
    return _dogecoin_cheap_random_bytes(
      buf,
      len,
    );
  }

  late final _dogecoin_cheap_random_bytesPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Int)>>(
      'dogecoin_cheap_random_bytes');
  late final _dogecoin_cheap_random_bytes = _dogecoin_cheap_random_bytesPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int>, int)>();

  int dogecoin_get_default_datadir(
    ffi.Pointer<ffi.Int> path_out,
  ) {
    return _dogecoin_get_default_datadir(
      path_out,
    );
  }

  late final _dogecoin_get_default_datadirPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>)>>(
          'dogecoin_get_default_datadir');
  late final _dogecoin_get_default_datadir = _dogecoin_get_default_datadirPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int dogecoin_file_commit(
    ffi.Pointer<ffi.Int> file,
  ) {
    return _dogecoin_file_commit(
      file,
    );
  }

  late final _dogecoin_file_commitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>)>>(
          'dogecoin_file_commit');
  late final _dogecoin_file_commit =
      _dogecoin_file_commitPtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int print_image(
    ffi.Pointer<ffi.Int> fptr,
  ) {
    return _print_image(
      fptr,
    );
  }

  late final _print_imagePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>)>>(
          'print_image');
  late final _print_image =
      _print_imagePtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int print_header(
    ffi.Pointer<ffi.Char> filepath,
  ) {
    return _print_header(
      filepath,
    );
  }

  late final _print_headerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'print_header');
  late final _print_header =
      _print_headerPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int print_bits(
    int size,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _print_bits(
      size,
      ptr,
    );
  }

  late final _print_bitsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Void>)>>(
      'print_bits');
  late final _print_bits =
      _print_bitsPtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>)>();

  int prepend(
    ffi.Pointer<ffi.Char> s,
    ffi.Pointer<ffi.Char> t,
  ) {
    return _prepend(
      s,
      t,
    );
  }

  late final _prependPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('prepend');
  late final _prepend = _prependPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int append(
    ffi.Pointer<ffi.Char> s,
    ffi.Pointer<ffi.Char> t,
  ) {
    return _append(
      s,
      t,
    );
  }

  late final _appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('append');
  late final _append = _appendPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int text_to_hex(
    ffi.Pointer<ffi.Char> in1,
    ffi.Pointer<ffi.Char> out,
  ) {
    return _text_to_hex(
      in1,
      out,
    );
  }

  late final _text_to_hexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('text_to_hex');
  late final _text_to_hex = _text_to_hexPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Int> get_build() {
    return _get_build();
  }

  late final _get_buildPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>('get_build');
  late final _get_build =
      _get_buildPtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  int dogecoin_str_reverse(
    ffi.Pointer<ffi.Char> s,
  ) {
    return _dogecoin_str_reverse(
      s,
    );
  }

  late final _dogecoin_str_reversePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'dogecoin_str_reverse');
  late final _dogecoin_str_reverse = _dogecoin_str_reversePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int dogecoin_uitoa(
    int n,
    ffi.Pointer<ffi.Char> s,
  ) {
    return _dogecoin_uitoa(
      n,
      s,
    );
  }

  late final _dogecoin_uitoaPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dogecoin_uitoa');
  late final _dogecoin_uitoa =
      _dogecoin_uitoaPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<ffi.Int> _bool = _lookup<ffi.Int>('bool');

  int get bool => _bool.value;

  set bool(int value) => _bool.value = value;

  int base64_int(
    int ch,
  ) {
    return _base64_int(
      ch,
    );
  }

  late final _base64_intPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedInt)>>(
          'base64_int');
  late final _base64_int = _base64_intPtr.asFunction<int Function(int)>();

  int base64_encoded_size(
    int in_size,
  ) {
    return _base64_encoded_size(
      in_size,
    );
  }

  late final _base64_encoded_sizePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedInt)>>(
          'base64_encoded_size');
  late final _base64_encoded_size =
      _base64_encoded_sizePtr.asFunction<int Function(int)>();

  int base64_decoded_size(
    int in_size,
  ) {
    return _base64_decoded_size(
      in_size,
    );
  }

  late final _base64_decoded_sizePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedInt)>>(
          'base64_decoded_size');
  late final _base64_decoded_size =
      _base64_decoded_sizePtr.asFunction<int Function(int)>();

  int base64_encode(
    ffi.Pointer<ffi.UnsignedChar> in1,
    int in_len,
    ffi.Pointer<ffi.UnsignedChar> out,
  ) {
    return _base64_encode(
      in1,
      in_len,
      out,
    );
  }

  late final _base64_encodePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.UnsignedChar>)>>('base64_encode');
  late final _base64_encode = _base64_encodePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.UnsignedChar>)>();

  int base64_decode(
    ffi.Pointer<ffi.UnsignedChar> in1,
    int in_len,
    ffi.Pointer<ffi.UnsignedChar> out,
  ) {
    return _base64_decode(
      in1,
      in_len,
      out,
    );
  }

  late final _base64_decodePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.UnsignedChar>)>>('base64_decode');
  late final _base64_decode = _base64_decodePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.UnsignedChar>)>();

  late final ffi.Pointer<ffi.Pointer<working_transaction1>> _transactions =
      _lookup<ffi.Pointer<working_transaction1>>('transactions');

  ffi.Pointer<working_transaction1> get transactions => _transactions.value;

  set transactions(ffi.Pointer<working_transaction1> value) =>
      _transactions.value = value;

  late final ffi.Pointer<ffi.Int> _working_transaction2 =
      _lookup<ffi.Int>('working_transaction');

  int get working_transaction2 => _working_transaction2.value;

  set working_transaction2(int value) => _working_transaction2.value = value;

  int add_transaction(
    ffi.Pointer<working_transaction1> working_tx,
  ) {
    return _add_transaction(
      working_tx,
    );
  }

  late final _add_transactionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<working_transaction1>)>>('add_transaction');
  late final _add_transaction = _add_transactionPtr
      .asFunction<int Function(ffi.Pointer<working_transaction1>)>();

  int remove_transaction(
    ffi.Pointer<working_transaction> working_tx,
  ) {
    return _remove_transaction(
      working_tx,
    );
  }

  late final _remove_transactionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<working_transaction>)>>('remove_transaction');
  late final _remove_transaction = _remove_transactionPtr
      .asFunction<int Function(ffi.Pointer<working_transaction>)>();

  int print_transactions() {
    return _print_transactions();
  }

  late final _print_transactionsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('print_transactions');
  late final _print_transactions =
      _print_transactionsPtr.asFunction<int Function()>();

  int count_transactions() {
    return _count_transactions();
  }

  late final _count_transactionsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('count_transactions');
  late final _count_transactions =
      _count_transactionsPtr.asFunction<int Function()>();

  int by_id() {
    return _by_id();
  }

  late final _by_idPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('by_id');
  late final _by_id = _by_idPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Int> getl(
    ffi.Pointer<ffi.Char> prompt,
  ) {
    return _getl(
      prompt,
    );
  }

  late final _getlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(ffi.Pointer<ffi.Char>)>>('getl');
  late final _getl = _getlPtr
      .asFunction<ffi.Pointer<ffi.Int> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Int> get_raw_tx(
    ffi.Pointer<ffi.Char> prompt_tx,
  ) {
    return _get_raw_tx(
      prompt_tx,
    );
  }

  late final _get_raw_txPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(ffi.Pointer<ffi.Char>)>>('get_raw_tx');
  late final _get_raw_tx = _get_raw_txPtr
      .asFunction<ffi.Pointer<ffi.Int> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Int> get_private_key(
    ffi.Pointer<ffi.Char> prompt_key,
  ) {
    return _get_private_key(
      prompt_key,
    );
  }

  late final _get_private_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(
              ffi.Pointer<ffi.Char>)>>('get_private_key');
  late final _get_private_key = _get_private_keyPtr
      .asFunction<ffi.Pointer<ffi.Int> Function(ffi.Pointer<ffi.Char>)>();

  int save_raw_transaction(
    int txindex,
    ffi.Pointer<ffi.Char> hexadecimal_transaction,
  ) {
    return _save_raw_transaction(
      txindex,
      hexadecimal_transaction,
    );
  }

  late final _save_raw_transactionPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'save_raw_transaction');
  late final _save_raw_transaction = _save_raw_transactionPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int sign_indexed_raw_transaction(
    int txindex,
    int inputindex,
    ffi.Pointer<ffi.Char> incomingrawtx,
    ffi.Pointer<ffi.Char> scripthex,
    int sighashtype,
    ffi.Pointer<ffi.Char> privkey,
  ) {
    return _sign_indexed_raw_transaction(
      txindex,
      inputindex,
      incomingrawtx,
      scripthex,
      sighashtype,
      privkey,
    );
  }

  late final _sign_indexed_raw_transactionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>)>>('sign_indexed_raw_transaction');
  late final _sign_indexed_raw_transaction =
      _sign_indexed_raw_transactionPtr.asFunction<
          int Function(int, int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              int, ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<dogecoin_chainparams> _dogecoin_chainparams_main =
      _lookup<dogecoin_chainparams>('dogecoin_chainparams_main');

  dogecoin_chainparams get dogecoin_chainparams_main =>
      _dogecoin_chainparams_main.ref;

  late final ffi.Pointer<dogecoin_chainparams> _dogecoin_chainparams_test =
      _lookup<dogecoin_chainparams>('dogecoin_chainparams_test');

  dogecoin_chainparams get dogecoin_chainparams_test =>
      _dogecoin_chainparams_test.ref;

  late final ffi.Pointer<dogecoin_chainparams> _dogecoin_chainparams_regtest =
      _lookup<dogecoin_chainparams>('dogecoin_chainparams_regtest');

  dogecoin_chainparams get dogecoin_chainparams_regtest =>
      _dogecoin_chainparams_regtest.ref;

  late final ffi.Pointer<ffi.Pointer<dogecoin_checkpoint>>
      _dogecoin_mainnet_checkpoint_array =
      _lookup<ffi.Pointer<dogecoin_checkpoint>>(
          'dogecoin_mainnet_checkpoint_array');

  ffi.Pointer<dogecoin_checkpoint> get dogecoin_mainnet_checkpoint_array =>
      _dogecoin_mainnet_checkpoint_array.value;

  set dogecoin_mainnet_checkpoint_array(
          ffi.Pointer<dogecoin_checkpoint> value) =>
      _dogecoin_mainnet_checkpoint_array.value = value;

  late final ffi.Pointer<ffi.Pointer<dogecoin_checkpoint>>
      _dogecoin_testnet_checkpoint_array =
      _lookup<ffi.Pointer<dogecoin_checkpoint>>(
          'dogecoin_testnet_checkpoint_array');

  ffi.Pointer<dogecoin_checkpoint> get dogecoin_testnet_checkpoint_array =>
      _dogecoin_testnet_checkpoint_array.value;

  set dogecoin_testnet_checkpoint_array(
          ffi.Pointer<dogecoin_checkpoint> value) =>
      _dogecoin_testnet_checkpoint_array.value = value;

  late final ffi.Pointer<ffi.Int> _dogecoin_chainparams1 =
      _lookup<ffi.Int>('dogecoin_chainparams');

  int get dogecoin_chainparams1 => _dogecoin_chainparams1.value;

  set dogecoin_chainparams1(int value) => _dogecoin_chainparams1.value = value;

  int chain_from_b58_prefix_bool(
    ffi.Pointer<ffi.Char> address,
  ) {
    return _chain_from_b58_prefix_bool(
      address,
    );
  }

  late final _chain_from_b58_prefix_boolPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'chain_from_b58_prefix_bool');
  late final _chain_from_b58_prefix_bool = _chain_from_b58_prefix_boolPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clock() {
    return _clock();
  }

  late final _clockPtr =
      _lookup<ffi.NativeFunction<clock_t Function()>>('clock');
  late final _clock = _clockPtr.asFunction<int Function()>();

  int time(
    ffi.Pointer<time_t> __timer,
  ) {
    return _time(
      __timer,
    );
  }

  late final _timePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<time_t>)>>('time');
  late final _time = _timePtr.asFunction<int Function(ffi.Pointer<time_t>)>();

  double difftime(
    int __time1,
    int __time0,
  ) {
    return _difftime(
      __time1,
      __time0,
    );
  }

  late final _difftimePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(time_t, time_t)>>(
          'difftime');
  late final _difftime = _difftimePtr.asFunction<double Function(int, int)>();

  int mktime(
    ffi.Pointer<tm> __tp,
  ) {
    return _mktime(
      __tp,
    );
  }

  late final _mktimePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('mktime');
  late final _mktime = _mktimePtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int strftime(
    ffi.Pointer<ffi.Char> __s,
    int __maxsize,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<tm> __tp,
  ) {
    return _strftime(
      __s,
      __maxsize,
      __format,
      __tp,
    );
  }

  late final _strftimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<tm>)>>('strftime');
  late final _strftime = _strftimePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<tm>)>();

  int strftime_l(
    ffi.Pointer<ffi.Char> __s,
    int __maxsize,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<tm> __tp,
    locale_t __loc,
  ) {
    return _strftime_l(
      __s,
      __maxsize,
      __format,
      __tp,
      __loc,
    );
  }

  late final _strftime_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<tm>, locale_t)>>('strftime_l');
  late final _strftime_l = _strftime_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<tm>, locale_t)>();

  ffi.Pointer<tm> gmtime(
    ffi.Pointer<time_t> __timer,
  ) {
    return _gmtime(
      __timer,
    );
  }

  late final _gmtimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>(
      'gmtime');
  late final _gmtime =
      _gmtimePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<tm> localtime(
    ffi.Pointer<time_t> __timer,
  ) {
    return _localtime(
      __timer,
    );
  }

  late final _localtimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>(
      'localtime');
  late final _localtime =
      _localtimePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<tm> gmtime_r(
    ffi.Pointer<time_t> __timer,
    ffi.Pointer<tm> __tp,
  ) {
    return _gmtime_r(
      __timer,
      __tp,
    );
  }

  late final _gmtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('gmtime_r');
  late final _gmtime_r = _gmtime_rPtr.asFunction<
      ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>();

  ffi.Pointer<tm> localtime_r(
    ffi.Pointer<time_t> __timer,
    ffi.Pointer<tm> __tp,
  ) {
    return _localtime_r(
      __timer,
      __tp,
    );
  }

  late final _localtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('localtime_r');
  late final _localtime_r = _localtime_rPtr.asFunction<
      ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>();

  ffi.Pointer<ffi.Char> asctime(
    ffi.Pointer<tm> __tp,
  ) {
    return _asctime(
      __tp,
    );
  }

  late final _asctimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>>(
      'asctime');
  late final _asctime =
      _asctimePtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>();

  ffi.Pointer<ffi.Char> ctime(
    ffi.Pointer<time_t> __timer,
  ) {
    return _ctime(
      __timer,
    );
  }

  late final _ctimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>>('ctime');
  late final _ctime = _ctimePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<ffi.Char> asctime_r(
    ffi.Pointer<tm> __tp,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _asctime_r(
      __tp,
      __buf,
    );
  }

  late final _asctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)>>('asctime_r');
  late final _asctime_r = _asctime_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctime_r(
    ffi.Pointer<time_t> __timer,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _ctime_r(
      __timer,
      __buf,
    );
  }

  late final _ctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>>('ctime_r');
  late final _ctime_r = _ctime_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> ___tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('__tzname');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get __tzname => ___tzname.value;

  set __tzname(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      ___tzname.value = value;

  late final ffi.Pointer<ffi.Int> ___daylight = _lookup<ffi.Int>('__daylight');

  int get __daylight => ___daylight.value;

  set __daylight(int value) => ___daylight.value = value;

  late final ffi.Pointer<ffi.Long> ___timezone =
      _lookup<ffi.Long>('__timezone');

  int get __timezone => ___timezone.value;

  set __timezone(int value) => ___timezone.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('tzname');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get tzname => _tzname.value;

  set tzname(ffi.Pointer<ffi.Pointer<ffi.Char>> value) => _tzname.value = value;

  void tzset() {
    return _tzset();
  }

  late final _tzsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('tzset');
  late final _tzset = _tzsetPtr.asFunction<void Function()>();

  late final ffi.Pointer<ffi.Int> _daylight = _lookup<ffi.Int>('daylight');

  int get daylight => _daylight.value;

  set daylight(int value) => _daylight.value = value;

  late final ffi.Pointer<ffi.Long> _timezone = _lookup<ffi.Long>('timezone');

  int get timezone => _timezone.value;

  set timezone(int value) => _timezone.value = value;

  int timegm(
    ffi.Pointer<tm> __tp,
  ) {
    return _timegm(
      __tp,
    );
  }

  late final _timegmPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('timegm');
  late final _timegm = _timegmPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int timelocal(
    ffi.Pointer<tm> __tp,
  ) {
    return _timelocal(
      __tp,
    );
  }

  late final _timelocalPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>(
          'timelocal');
  late final _timelocal =
      _timelocalPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int dysize(
    int __year,
  ) {
    return _dysize(
      __year,
    );
  }

  late final _dysizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('dysize');
  late final _dysize = _dysizePtr.asFunction<int Function(int)>();

  int nanosleep(
    ffi.Pointer<timespec> __requested_time,
    ffi.Pointer<timespec> __remaining,
  ) {
    return _nanosleep(
      __requested_time,
      __remaining,
    );
  }

  late final _nanosleepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<timespec>, ffi.Pointer<timespec>)>>('nanosleep');
  late final _nanosleep = _nanosleepPtr
      .asFunction<int Function(ffi.Pointer<timespec>, ffi.Pointer<timespec>)>();

  int clock_getres(
    int __clock_id,
    ffi.Pointer<timespec> __res,
  ) {
    return _clock_getres(
      __clock_id,
      __res,
    );
  }

  late final _clock_getresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>>('clock_getres');
  late final _clock_getres =
      _clock_getresPtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_gettime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_gettime(
      __clock_id,
      __tp,
    );
  }

  late final _clock_gettimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>>('clock_gettime');
  late final _clock_gettime =
      _clock_gettimePtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_settime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_settime(
      __clock_id,
      __tp,
    );
  }

  late final _clock_settimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>>('clock_settime');
  late final _clock_settime =
      _clock_settimePtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_nanosleep(
    int __clock_id,
    int __flags,
    ffi.Pointer<timespec> __req,
    ffi.Pointer<timespec> __rem,
  ) {
    return _clock_nanosleep(
      __clock_id,
      __flags,
      __req,
      __rem,
    );
  }

  late final _clock_nanosleepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Int, ffi.Pointer<timespec>,
              ffi.Pointer<timespec>)>>('clock_nanosleep');
  late final _clock_nanosleep = _clock_nanosleepPtr.asFunction<
      int Function(int, int, ffi.Pointer<timespec>, ffi.Pointer<timespec>)>();

  int clock_getcpuclockid(
    int __pid,
    ffi.Pointer<clockid_t> __clock_id,
  ) {
    return _clock_getcpuclockid(
      __pid,
      __clock_id,
    );
  }

  late final _clock_getcpuclockidPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(pid_t, ffi.Pointer<clockid_t>)>>(
      'clock_getcpuclockid');
  late final _clock_getcpuclockid = _clock_getcpuclockidPtr
      .asFunction<int Function(int, ffi.Pointer<clockid_t>)>();

  int timer_create(
    int __clock_id,
    ffi.Pointer<sigevent> __evp,
    ffi.Pointer<timer_t> __timerid,
  ) {
    return _timer_create(
      __clock_id,
      __evp,
      __timerid,
    );
  }

  late final _timer_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Pointer<sigevent>,
              ffi.Pointer<timer_t>)>>('timer_create');
  late final _timer_create = _timer_createPtr.asFunction<
      int Function(int, ffi.Pointer<sigevent>, ffi.Pointer<timer_t>)>();

  int timer_delete(
    timer_t __timerid,
  ) {
    return _timer_delete(
      __timerid,
    );
  }

  late final _timer_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(timer_t)>>('timer_delete');
  late final _timer_delete =
      _timer_deletePtr.asFunction<int Function(timer_t)>();

  int timer_settime(
    timer_t __timerid,
    int __flags,
    ffi.Pointer<itimerspec> __value,
    ffi.Pointer<itimerspec> __ovalue,
  ) {
    return _timer_settime(
      __timerid,
      __flags,
      __value,
      __ovalue,
    );
  }

  late final _timer_settimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(timer_t, ffi.Int, ffi.Pointer<itimerspec>,
              ffi.Pointer<itimerspec>)>>('timer_settime');
  late final _timer_settime = _timer_settimePtr.asFunction<
      int Function(
          timer_t, int, ffi.Pointer<itimerspec>, ffi.Pointer<itimerspec>)>();

  int timer_gettime(
    timer_t __timerid,
    ffi.Pointer<itimerspec> __value,
  ) {
    return _timer_gettime(
      __timerid,
      __value,
    );
  }

  late final _timer_gettimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(timer_t, ffi.Pointer<itimerspec>)>>('timer_gettime');
  late final _timer_gettime = _timer_gettimePtr
      .asFunction<int Function(timer_t, ffi.Pointer<itimerspec>)>();

  int timer_getoverrun(
    timer_t __timerid,
  ) {
    return _timer_getoverrun(
      __timerid,
    );
  }

  late final _timer_getoverrunPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(timer_t)>>(
          'timer_getoverrun');
  late final _timer_getoverrun =
      _timer_getoverrunPtr.asFunction<int Function(timer_t)>();

  int timespec_get(
    ffi.Pointer<timespec> __ts,
    int __base,
  ) {
    return _timespec_get(
      __ts,
      __base,
    );
  }

  late final _timespec_getPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<timespec>, ffi.Int)>>(
      'timespec_get');
  late final _timespec_get =
      _timespec_getPtr.asFunction<int Function(ffi.Pointer<timespec>, int)>();

  ffi.Pointer<ffi.Char> moon() {
    return _moon();
  }

  late final _moonPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>('moon');
  late final _moon = _moonPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int generateHDMasterPubKeypairFromMnemonic(
    ffi.Pointer<ffi.Char> wif_privkey_master,
    ffi.Pointer<ffi.Char> p2pkh_pubkey_master,
    int mnemonic,
    int pass,
    int is_testnet,
  ) {
    return _generateHDMasterPubKeypairFromMnemonic(
      wif_privkey_master,
      p2pkh_pubkey_master,
      mnemonic,
      pass,
      is_testnet,
    );
  }

  late final _generateHDMasterPubKeypairFromMnemonicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('generateHDMasterPubKeypairFromMnemonic');
  late final _generateHDMasterPubKeypairFromMnemonic =
      _generateHDMasterPubKeypairFromMnemonicPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int, int)>();

  int verifyHDMasterPubKeypairFromMnemonic(
    ffi.Pointer<ffi.Char> wif_privkey_master,
    ffi.Pointer<ffi.Char> p2pkh_pubkey_master,
    int mnemonic,
    int pass,
    int is_testnet,
  ) {
    return _verifyHDMasterPubKeypairFromMnemonic(
      wif_privkey_master,
      p2pkh_pubkey_master,
      mnemonic,
      pass,
      is_testnet,
    );
  }

  late final _verifyHDMasterPubKeypairFromMnemonicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('verifyHDMasterPubKeypairFromMnemonic');
  late final _verifyHDMasterPubKeypairFromMnemonic =
      _verifyHDMasterPubKeypairFromMnemonicPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int, int)>();

  int dogecoin_privkey_init(
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_init(
      privkey,
    );
  }

  late final _dogecoin_privkey_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<dogecoin_key>)>>(
          'dogecoin_privkey_init');
  late final _dogecoin_privkey_init = _dogecoin_privkey_initPtr
      .asFunction<int Function(ffi.Pointer<dogecoin_key>)>();

  int dogecoin_privkey_cleanse(
    ffi.Pointer<dogecoin_key> privkey,
  ) {
    return _dogecoin_privkey_cleanse(
      privkey,
    );
  }

  late final _dogecoin_privkey_cleansePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<dogecoin_key>)>>(
          'dogecoin_privkey_cleanse');
  late final _dogecoin_privkey_cleanse = _dogecoin_privkey_cleansePtr
      .asFunction<int Function(ffi.Pointer<dogecoin_key>)>();

  int dogecoin_privkey_encode_wif(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<ffi.Int> chain,
    ffi.Pointer<ffi.Char> privkey_wif,
    ffi.Pointer<ffi.Int> strsize_inout,
  ) {
    return _dogecoin_privkey_encode_wif(
      privkey,
      chain,
      privkey_wif,
      strsize_inout,
    );
  }

  late final _dogecoin_privkey_encode_wifPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<dogecoin_key>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_privkey_encode_wif');
  late final _dogecoin_privkey_encode_wif =
      _dogecoin_privkey_encode_wifPtr.asFunction<
          int Function(ffi.Pointer<dogecoin_key>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  int dogecoin_pubkey_init(
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_pubkey_init(
      pubkey,
    );
  }

  late final _dogecoin_pubkey_initPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<dogecoin_pubkey>)>>(
      'dogecoin_pubkey_init');
  late final _dogecoin_pubkey_init = _dogecoin_pubkey_initPtr
      .asFunction<int Function(ffi.Pointer<dogecoin_pubkey>)>();

  int dogecoin_pubkey_get_length(
    int ch_header,
  ) {
    return _dogecoin_pubkey_get_length(
      ch_header,
    );
  }

  late final _dogecoin_pubkey_get_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedChar)>>(
          'dogecoin_pubkey_get_length');
  late final _dogecoin_pubkey_get_length =
      _dogecoin_pubkey_get_lengthPtr.asFunction<int Function(int)>();

  int dogecoin_pubkey_cleanse(
    ffi.Pointer<dogecoin_pubkey> pubkey,
  ) {
    return _dogecoin_pubkey_cleanse(
      pubkey,
    );
  }

  late final _dogecoin_pubkey_cleansePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<dogecoin_pubkey>)>>(
      'dogecoin_pubkey_cleanse');
  late final _dogecoin_pubkey_cleanse = _dogecoin_pubkey_cleansePtr
      .asFunction<int Function(ffi.Pointer<dogecoin_pubkey>)>();

  int dogecoin_pubkey_from_key(
    ffi.Pointer<dogecoin_key> privkey,
    ffi.Pointer<dogecoin_pubkey> pubkey_inout,
  ) {
    return _dogecoin_pubkey_from_key(
      privkey,
      pubkey_inout,
    );
  }

  late final _dogecoin_pubkey_from_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<dogecoin_key>,
              ffi.Pointer<dogecoin_pubkey>)>>('dogecoin_pubkey_from_key');
  late final _dogecoin_pubkey_from_key =
      _dogecoin_pubkey_from_keyPtr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_key>, ffi.Pointer<dogecoin_pubkey>)>();

  int dogecoin_pubkey_get_hash160(
    ffi.Pointer<dogecoin_pubkey> pubkey,
    int hash160,
  ) {
    return _dogecoin_pubkey_get_hash160(
      pubkey,
      hash160,
    );
  }

  late final _dogecoin_pubkey_get_hash160Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<dogecoin_pubkey>,
              ffi.Int)>>('dogecoin_pubkey_get_hash160');
  late final _dogecoin_pubkey_get_hash160 = _dogecoin_pubkey_get_hash160Ptr
      .asFunction<int Function(ffi.Pointer<dogecoin_pubkey>, int)>();

  /// !p2pkh utilities
  int dogecoin_script_hash_to_p2pkh(
    ffi.Pointer<dogecoin_tx_out> txout,
    ffi.Pointer<ffi.Char> p2pkh,
    int is_testnet,
  ) {
    return _dogecoin_script_hash_to_p2pkh(
      txout,
      p2pkh,
      is_testnet,
    );
  }

  late final _dogecoin_script_hash_to_p2pkhPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<dogecoin_tx_out>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('dogecoin_script_hash_to_p2pkh');
  late final _dogecoin_script_hash_to_p2pkh =
      _dogecoin_script_hash_to_p2pkhPtr.asFunction<
          int Function(
              ffi.Pointer<dogecoin_tx_out>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Int> dogecoin_p2pkh_to_script_hash(
    ffi.Pointer<ffi.Char> p2pkh,
  ) {
    return _dogecoin_p2pkh_to_script_hash(
      p2pkh,
    );
  }

  late final _dogecoin_p2pkh_to_script_hashPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(
              ffi.Pointer<ffi.Char>)>>('dogecoin_p2pkh_to_script_hash');
  late final _dogecoin_p2pkh_to_script_hash = _dogecoin_p2pkh_to_script_hashPtr
      .asFunction<ffi.Pointer<ffi.Int> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Int> dogecoin_private_key_wif_to_script_hash(
    ffi.Pointer<ffi.Char> private_key_wif,
  ) {
    return _dogecoin_private_key_wif_to_script_hash(
      private_key_wif,
    );
  }

  late final _dogecoin_private_key_wif_to_script_hashPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int> Function(ffi.Pointer<ffi.Char>)>>(
      'dogecoin_private_key_wif_to_script_hash');
  late final _dogecoin_private_key_wif_to_script_hash =
      _dogecoin_private_key_wif_to_script_hashPtr
          .asFunction<ffi.Pointer<ffi.Int> Function(ffi.Pointer<ffi.Char>)>();

  /// !create a new tx input
  late final ffi.Pointer<ffi.Int> _dogecoin_tx_in =
      _lookup<ffi.Int>('dogecoin_tx_in');

  int get dogecoin_tx_in => _dogecoin_tx_in.value;

  set dogecoin_tx_in(int value) => _dogecoin_tx_in.value = value;

  int dogecoin_tx_in_free(
    ffi.Pointer<dogecoin_tx_in1> tx_in,
  ) {
    return _dogecoin_tx_in_free(
      tx_in,
    );
  }

  late final _dogecoin_tx_in_freePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<dogecoin_tx_in1>)>>(
      'dogecoin_tx_in_free');
  late final _dogecoin_tx_in_free = _dogecoin_tx_in_freePtr
      .asFunction<int Function(ffi.Pointer<dogecoin_tx_in1>)>();

  int dogecoin_tx_in_copy(
    ffi.Pointer<dogecoin_tx_in1> dest,
    ffi.Pointer<dogecoin_tx_in1> src,
  ) {
    return _dogecoin_tx_in_copy(
      dest,
      src,
    );
  }

  late final _dogecoin_tx_in_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<dogecoin_tx_in1>,
              ffi.Pointer<dogecoin_tx_in1>)>>('dogecoin_tx_in_copy');
  late final _dogecoin_tx_in_copy = _dogecoin_tx_in_copyPtr.asFunction<
      int Function(
          ffi.Pointer<dogecoin_tx_in1>, ffi.Pointer<dogecoin_tx_in1>)>();

  int dogecoin_tx_in_serialize(
    ffi.Pointer<ffi.Int> s,
    ffi.Pointer<dogecoin_tx_in1> tx_in,
  ) {
    return _dogecoin_tx_in_serialize(
      s,
      tx_in,
    );
  }

  late final _dogecoin_tx_in_serializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>,
              ffi.Pointer<dogecoin_tx_in1>)>>('dogecoin_tx_in_serialize');
  late final _dogecoin_tx_in_serialize =
      _dogecoin_tx_in_serializePtr.asFunction<
          int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<dogecoin_tx_in1>)>();

  /// !create a new tx output
  late final ffi.Pointer<ffi.Int> _dogecoin_tx_out1 =
      _lookup<ffi.Int>('dogecoin_tx_out');

  int get dogecoin_tx_out1 => _dogecoin_tx_out1.value;

  set dogecoin_tx_out1(int value) => _dogecoin_tx_out1.value = value;

  int dogecoin_tx_out_free(
    ffi.Pointer<dogecoin_tx_out> tx_out,
  ) {
    return _dogecoin_tx_out_free(
      tx_out,
    );
  }

  late final _dogecoin_tx_out_freePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<dogecoin_tx_out>)>>(
      'dogecoin_tx_out_free');
  late final _dogecoin_tx_out_free = _dogecoin_tx_out_freePtr
      .asFunction<int Function(ffi.Pointer<dogecoin_tx_out>)>();

  int dogecoin_tx_out_copy(
    ffi.Pointer<dogecoin_tx_out> dest,
    ffi.Pointer<dogecoin_tx_out> src,
  ) {
    return _dogecoin_tx_out_copy(
      dest,
      src,
    );
  }

  late final _dogecoin_tx_out_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<dogecoin_tx_out>,
              ffi.Pointer<dogecoin_tx_out>)>>('dogecoin_tx_out_copy');
  late final _dogecoin_tx_out_copy = _dogecoin_tx_out_copyPtr.asFunction<
      int Function(
          ffi.Pointer<dogecoin_tx_out>, ffi.Pointer<dogecoin_tx_out>)>();

  int dogecoin_tx_out_serialize(
    ffi.Pointer<ffi.Int> s,
    ffi.Pointer<dogecoin_tx_out> tx_out,
  ) {
    return _dogecoin_tx_out_serialize(
      s,
      tx_out,
    );
  }

  late final _dogecoin_tx_out_serializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>,
              ffi.Pointer<dogecoin_tx_out>)>>('dogecoin_tx_out_serialize');
  late final _dogecoin_tx_out_serialize =
      _dogecoin_tx_out_serializePtr.asFunction<
          int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<dogecoin_tx_out>)>();

  /// !create a new tx input
  late final ffi.Pointer<ffi.Int> _dogecoin_tx =
      _lookup<ffi.Int>('dogecoin_tx');

  int get dogecoin_tx => _dogecoin_tx.value;

  set dogecoin_tx(int value) => _dogecoin_tx.value = value;

  int dogecoin_tx_free(
    ffi.Pointer<dogecoin_tx1> tx,
  ) {
    return _dogecoin_tx_free(
      tx,
    );
  }

  late final _dogecoin_tx_freePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<dogecoin_tx1>)>>(
          'dogecoin_tx_free');
  late final _dogecoin_tx_free = _dogecoin_tx_freePtr
      .asFunction<int Function(ffi.Pointer<dogecoin_tx1>)>();

  int dogecoin_tx_copy(
    ffi.Pointer<dogecoin_tx1> dest,
    ffi.Pointer<dogecoin_tx1> src,
  ) {
    return _dogecoin_tx_copy(
      dest,
      src,
    );
  }

  late final _dogecoin_tx_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<dogecoin_tx1>,
              ffi.Pointer<dogecoin_tx1>)>>('dogecoin_tx_copy');
  late final _dogecoin_tx_copy = _dogecoin_tx_copyPtr.asFunction<
      int Function(ffi.Pointer<dogecoin_tx1>, ffi.Pointer<dogecoin_tx1>)>();

  /// !deserialize/parse a p2p serialized dogecoin transaction
  int dogecoin_tx_deserialize(
    ffi.Pointer<ffi.UnsignedChar> tx_serialized,
    int inlen,
    ffi.Pointer<dogecoin_tx1> tx,
    ffi.Pointer<ffi.Int> consumed_length,
  ) {
    return _dogecoin_tx_deserialize(
      tx_serialized,
      inlen,
      tx,
      consumed_length,
    );
  }

  late final _dogecoin_tx_deserializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<dogecoin_tx1>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_tx_deserialize');
  late final _dogecoin_tx_deserialize = _dogecoin_tx_deserializePtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, int,
          ffi.Pointer<dogecoin_tx1>, ffi.Pointer<ffi.Int>)>();

  /// !serialize a dogecoin data structure into a p2p serialized buffer
  int dogecoin_tx_serialize(
    ffi.Pointer<ffi.Int> s,
    ffi.Pointer<dogecoin_tx1> tx,
  ) {
    return _dogecoin_tx_serialize(
      s,
      tx,
    );
  }

  late final _dogecoin_tx_serializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>,
              ffi.Pointer<dogecoin_tx1>)>>('dogecoin_tx_serialize');
  late final _dogecoin_tx_serialize = _dogecoin_tx_serializePtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<dogecoin_tx1>)>();

  int dogecoin_tx_hash(
    ffi.Pointer<dogecoin_tx1> tx,
    int hashout,
  ) {
    return _dogecoin_tx_hash(
      tx,
      hashout,
    );
  }

  late final _dogecoin_tx_hashPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<dogecoin_tx1>, ffi.Int)>>('dogecoin_tx_hash');
  late final _dogecoin_tx_hash = _dogecoin_tx_hashPtr
      .asFunction<int Function(ffi.Pointer<dogecoin_tx1>, int)>();

  ffi.Pointer<ffi.Char> dogecoin_tx_sign_result_to_str(
    int result,
  ) {
    return _dogecoin_tx_sign_result_to_str(
      result,
    );
  }

  late final _dogecoin_tx_sign_result_to_strPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'dogecoin_tx_sign_result_to_str');
  late final _dogecoin_tx_sign_result_to_str =
      _dogecoin_tx_sign_result_to_strPtr
          .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int dogecoin_tx_sign_input(
    ffi.Pointer<dogecoin_tx1> tx_in_out,
    ffi.Pointer<ffi.Int> script,
    ffi.Pointer<ffi.Int> privkey,
    int inputindex,
    int sighashtype,
    ffi.Pointer<ffi.Int> sigcompact_out,
    ffi.Pointer<ffi.Int> sigder_out,
    ffi.Pointer<ffi.Int> sigder_len,
  ) {
    return _dogecoin_tx_sign_input(
      tx_in_out,
      script,
      privkey,
      inputindex,
      sighashtype,
      sigcompact_out,
      sigder_out,
      sigder_len,
    );
  }

  late final _dogecoin_tx_sign_inputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<dogecoin_tx1>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_tx_sign_input');
  late final _dogecoin_tx_sign_input = _dogecoin_tx_sign_inputPtr.asFunction<
      int Function(
          ffi.Pointer<dogecoin_tx1>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          int,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Int>> _wow_txt =
      _lookup<ffi.Pointer<ffi.Int>>('wow_txt');

  ffi.Pointer<ffi.Int> get wow_txt => _wow_txt.value;

  set wow_txt(ffi.Pointer<ffi.Int> value) => _wow_txt.value = value;

  int wow() {
    return _wow();
  }

  late final _wowPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('wow');
  late final _wow = _wowPtr.asFunction<int Function()>();

  int dogecoin_mem_set_mapper(
    dogecoin_mem_mapper mapper,
  ) {
    return _dogecoin_mem_set_mapper(
      mapper,
    );
  }

  late final _dogecoin_mem_set_mapperPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(dogecoin_mem_mapper)>>(
          'dogecoin_mem_set_mapper');
  late final _dogecoin_mem_set_mapper = _dogecoin_mem_set_mapperPtr
      .asFunction<int Function(dogecoin_mem_mapper)>();

  int dogecoin_mem_set_mapper_default() {
    return _dogecoin_mem_set_mapper_default();
  }

  late final _dogecoin_mem_set_mapper_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'dogecoin_mem_set_mapper_default');
  late final _dogecoin_mem_set_mapper_default =
      _dogecoin_mem_set_mapper_defaultPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Int> dogecoin_malloc(
    int size,
  ) {
    return _dogecoin_malloc(
      size,
    );
  }

  late final _dogecoin_mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function(ffi.Int)>>(
          'dogecoin_malloc');
  late final _dogecoin_malloc =
      _dogecoin_mallocPtr.asFunction<ffi.Pointer<ffi.Int> Function(int)>();

  ffi.Pointer<ffi.Int> dogecoin_calloc(
    int count,
    int size,
  ) {
    return _dogecoin_calloc(
      count,
      size,
    );
  }

  late final _dogecoin_callocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Int> Function(ffi.Int, ffi.Int)>>(
      'dogecoin_calloc');
  late final _dogecoin_calloc =
      _dogecoin_callocPtr.asFunction<ffi.Pointer<ffi.Int> Function(int, int)>();

  ffi.Pointer<ffi.Int> dogecoin_realloc(
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _dogecoin_realloc(
      ptr,
      size,
    );
  }

  late final _dogecoin_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('dogecoin_realloc');
  late final _dogecoin_realloc = _dogecoin_reallocPtr
      .asFunction<ffi.Pointer<ffi.Int> Function(ffi.Pointer<ffi.Void>, int)>();

  late final ffi.Pointer<ffi.Int> _errno_t = _lookup<ffi.Int>('errno_t');

  int get errno_t => _errno_t.value;

  set errno_t(int value) => _errno_t.value = value;

  ffi.Pointer<ffi.Int> memcpy_safe(
    ffi.Pointer<ffi.Void> destination,
    ffi.Pointer<ffi.Void> source,
    int count,
  ) {
    return _memcpy_safe(
      destination,
      source,
      count,
    );
  }

  late final _memcpy_safePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('memcpy_safe');
  late final _memcpy_safe = _memcpy_safePtr.asFunction<
      ffi.Pointer<ffi.Int> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  late final ffi.Pointer<ffi.Int> _uint32_t = _lookup<ffi.Int>('uint32_t');

  int get uint32_t => _uint32_t.value;

  set uint32_t(int value) => _uint32_t.value = value;

  ffi.Pointer<ffi.Int> dogecoin_string_vla(
    int size,
  ) {
    return _dogecoin_string_vla(
      size,
    );
  }

  late final _dogecoin_string_vlaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function(ffi.Int)>>(
          'dogecoin_string_vla');
  late final _dogecoin_string_vla =
      _dogecoin_string_vlaPtr.asFunction<ffi.Pointer<ffi.Int> Function(int)>();

  ffi.Pointer<ffi.Int> dogecoin_uchar_vla(
    int size,
  ) {
    return _dogecoin_uchar_vla(
      size,
    );
  }

  late final _dogecoin_uchar_vlaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function(ffi.Int)>>(
          'dogecoin_uchar_vla');
  late final _dogecoin_uchar_vla =
      _dogecoin_uchar_vlaPtr.asFunction<ffi.Pointer<ffi.Int> Function(int)>();

  ffi.Pointer<ffi.Pointer<ffi.Int>> dogecoin_ucharptr_vla(
    int size,
  ) {
    return _dogecoin_ucharptr_vla(
      size,
    );
  }

  late final _dogecoin_ucharptr_vlaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Int>> Function(
              ffi.Int)>>('dogecoin_ucharptr_vla');
  late final _dogecoin_ucharptr_vla = _dogecoin_ucharptr_vlaPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Int>> Function(int)>();

  late final ffi.Pointer<ffi.Int> _dogecoin_bool2 =
      _lookup<ffi.Int>('dogecoin_bool');

  int get dogecoin_bool2 => _dogecoin_bool2.value;

  set dogecoin_bool2(int value) => _dogecoin_bool2.value = value;

  void ser_bytes(
    ffi.Pointer<ffi.Int> s,
    ffi.Pointer<ffi.Void> p,
    int len,
  ) {
    return _ser_bytes(
      s,
      p,
      len,
    );
  }

  late final _ser_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('ser_bytes');
  late final _ser_bytes = _ser_bytesPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Void>, int)>();

  int ser_u16(
    ffi.Pointer<ffi.Int> s,
    int v_,
  ) {
    return _ser_u16(
      s,
      v_,
    );
  }

  late final _ser_u16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Uint16)>>('ser_u16');
  late final _ser_u16 =
      _ser_u16Ptr.asFunction<int Function(ffi.Pointer<ffi.Int>, int)>();

  int ser_u32(
    ffi.Pointer<ffi.Int> s,
    int v_,
  ) {
    return _ser_u32(
      s,
      v_,
    );
  }

  late final _ser_u32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Uint32)>>('ser_u32');
  late final _ser_u32 =
      _ser_u32Ptr.asFunction<int Function(ffi.Pointer<ffi.Int>, int)>();

  int ser_u64(
    ffi.Pointer<ffi.Int> s,
    int v_,
  ) {
    return _ser_u64(
      s,
      v_,
    );
  }

  late final _ser_u64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Uint64)>>('ser_u64');
  late final _ser_u64 =
      _ser_u64Ptr.asFunction<int Function(ffi.Pointer<ffi.Int>, int)>();

  int ser_u256(
    ffi.Pointer<ffi.Int> s,
    ffi.Pointer<ffi.UnsignedChar> v_,
  ) {
    return _ser_u256(
      s,
      v_,
    );
  }

  late final _ser_u256Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>)>>('ser_u256');
  late final _ser_u256 = _ser_u256Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.UnsignedChar>)>();

  int ser_varlen(
    ffi.Pointer<ffi.Int> s,
    int vlen,
  ) {
    return _ser_varlen(
      s,
      vlen,
    );
  }

  late final _ser_varlenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Uint32)>>('ser_varlen');
  late final _ser_varlen =
      _ser_varlenPtr.asFunction<int Function(ffi.Pointer<ffi.Int>, int)>();

  int ser_str(
    ffi.Pointer<ffi.Int> s,
    ffi.Pointer<ffi.Char> s_in,
    int maxlen,
  ) {
    return _ser_str(
      s,
      s_in,
      maxlen,
    );
  }

  late final _ser_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('ser_str');
  late final _ser_str = _ser_strPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int ser_varstr(
    ffi.Pointer<ffi.Int> s,
    ffi.Pointer<ffi.Int> s_in,
  ) {
    return _ser_varstr(
      s,
      s_in,
    );
  }

  late final _ser_varstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ser_varstr');
  late final _ser_varstr = _ser_varstrPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int ser_s32(
    ffi.Pointer<ffi.Int> s,
    int v_,
  ) {
    return _ser_s32(
      s,
      v_,
    );
  }

  late final _ser_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Int32)>>('ser_s32');
  late final _ser_s32 =
      _ser_s32Ptr.asFunction<int Function(ffi.Pointer<ffi.Int>, int)>();

  int ser_s64(
    ffi.Pointer<ffi.Int> s,
    int v_,
  ) {
    return _ser_s64(
      s,
      v_,
    );
  }

  late final _ser_s64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Int64)>>('ser_s64');
  late final _ser_s64 =
      _ser_s64Ptr.asFunction<int Function(ffi.Pointer<ffi.Int>, int)>();

  int deser_skip(
    ffi.Pointer<const_buffer4> buf,
    int len,
  ) {
    return _deser_skip(
      buf,
      len,
    );
  }

  late final _deser_skipPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<const_buffer4>, ffi.Int)>>('deser_skip');
  late final _deser_skip = _deser_skipPtr
      .asFunction<int Function(ffi.Pointer<const_buffer4>, int)>();

  int deser_bytes(
    ffi.Pointer<ffi.Void> po,
    ffi.Pointer<const_buffer5> buf,
    int len,
  ) {
    return _deser_bytes(
      po,
      buf,
      len,
    );
  }

  late final _deser_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<const_buffer5>,
              ffi.Int)>>('deser_bytes');
  late final _deser_bytes = _deser_bytesPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<const_buffer5>, int)>();

  int deser_u16(
    ffi.Pointer<ffi.Uint16> vo,
    ffi.Pointer<const_buffer6> buf,
  ) {
    return _deser_u16(
      vo,
      buf,
    );
  }

  late final _deser_u16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<const_buffer6>)>>('deser_u16');
  late final _deser_u16 = _deser_u16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<const_buffer6>)>();

  int deser_u32(
    ffi.Pointer<ffi.Uint32> vo,
    ffi.Pointer<const_buffer7> buf,
  ) {
    return _deser_u32(
      vo,
      buf,
    );
  }

  late final _deser_u32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<const_buffer7>)>>('deser_u32');
  late final _deser_u32 = _deser_u32Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint32>, ffi.Pointer<const_buffer7>)>();

  int deser_i32(
    ffi.Pointer<ffi.Int32> vo,
    ffi.Pointer<const_buffer8> buf,
  ) {
    return _deser_i32(
      vo,
      buf,
    );
  }

  late final _deser_i32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<const_buffer8>)>>('deser_i32');
  late final _deser_i32 = _deser_i32Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<const_buffer8>)>();

  int deser_s32(
    ffi.Pointer<ffi.Int32> vo,
    ffi.Pointer<const_buffer9> buf,
  ) {
    return _deser_s32(
      vo,
      buf,
    );
  }

  late final _deser_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<const_buffer9>)>>('deser_s32');
  late final _deser_s32 = _deser_s32Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<const_buffer9>)>();

  int deser_u64(
    ffi.Pointer<ffi.Uint64> vo,
    ffi.Pointer<const_buffer10> buf,
  ) {
    return _deser_u64(
      vo,
      buf,
    );
  }

  late final _deser_u64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<const_buffer10>)>>('deser_u64');
  late final _deser_u64 = _deser_u64Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint64>, ffi.Pointer<const_buffer10>)>();

  int deser_u256(
    ffi.Pointer<ffi.Uint8> vo,
    ffi.Pointer<const_buffer11> buf,
  ) {
    return _deser_u256(
      vo,
      buf,
    );
  }

  late final _deser_u256Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<const_buffer11>)>>('deser_u256');
  late final _deser_u256 = _deser_u256Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<const_buffer11>)>();

  int deser_varlen(
    ffi.Pointer<ffi.Uint32> lo,
    ffi.Pointer<const_buffer12> buf,
  ) {
    return _deser_varlen(
      lo,
      buf,
    );
  }

  late final _deser_varlenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<const_buffer12>)>>('deser_varlen');
  late final _deser_varlen = _deser_varlenPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint32>, ffi.Pointer<const_buffer12>)>();

  int deser_varlen_file(
    ffi.Pointer<ffi.Uint32> lo,
    ffi.Pointer<FILE> file,
    ffi.Pointer<ffi.Uint8> rawdata,
    ffi.Pointer<ffi.Int> buflen_inout,
  ) {
    return _deser_varlen_file(
      lo,
      file,
      rawdata,
      buflen_inout,
    );
  }

  late final _deser_varlen_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Int>)>>('deser_varlen_file');
  late final _deser_varlen_file = _deser_varlen_filePtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint32>, ffi.Pointer<FILE>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Int>)>();

  int deser_str(
    ffi.Pointer<ffi.Char> so,
    ffi.Pointer<const_buffer13> buf,
    int maxlen,
  ) {
    return _deser_str(
      so,
      buf,
      maxlen,
    );
  }

  late final _deser_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<const_buffer13>,
              ffi.Int)>>('deser_str');
  late final _deser_str = _deser_strPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<const_buffer13>, int)>();

  int deser_varstr(
    ffi.Pointer<ffi.Pointer<ffi.Int>> so,
    ffi.Pointer<const_buffer14> buf,
  ) {
    return _deser_varstr(
      so,
      buf,
    );
  }

  late final _deser_varstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Int>>,
              ffi.Pointer<const_buffer14>)>>('deser_varstr');
  late final _deser_varstr = _deser_varstrPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Int>>, ffi.Pointer<const_buffer14>)>();

  int deser_s64(
    ffi.Pointer<ffi.Int64> vo,
    ffi.Pointer<const_buffer15> buf,
  ) {
    return _deser_s64(
      vo,
      buf,
    );
  }

  late final _deser_s64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int64>,
              ffi.Pointer<const_buffer15>)>>('deser_s64');
  late final _deser_s64 = _deser_s64Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int64>, ffi.Pointer<const_buffer15>)>();

  int koinu_to_coins_str(
    int koinu,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _koinu_to_coins_str(
      koinu,
      str,
    );
  }

  late final _koinu_to_coins_strPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'koinu_to_coins_str');
  late final _koinu_to_coins_str = _koinu_to_coins_strPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<ffi.Int> _uint64_t = _lookup<ffi.Int>('uint64_t');

  int get uint64_t => _uint64_t.value;

  set uint64_t(int value) => _uint64_t.value = value;

  late final ffi.Pointer<ffi.Int> _MAX_SCRIPT_SIZE =
      _lookup<ffi.Int>('MAX_SCRIPT_SIZE');

  int get MAX_SCRIPT_SIZE => _MAX_SCRIPT_SIZE.value;

  set MAX_SCRIPT_SIZE(int value) => _MAX_SCRIPT_SIZE.value = value;

  int dogecoin_script_copy_without_op_codeseperator(
    ffi.Pointer<ffi.Int> scriptin,
    ffi.Pointer<ffi.Int> scriptout,
  ) {
    return _dogecoin_script_copy_without_op_codeseperator(
      scriptin,
      scriptout,
    );
  }

  late final _dogecoin_script_copy_without_op_codeseperatorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>(
      'dogecoin_script_copy_without_op_codeseperator');
  late final _dogecoin_script_copy_without_op_codeseperator =
      _dogecoin_script_copy_without_op_codeseperatorPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  late final ffi.Pointer<ffi.Int> _dogecoin_script_op =
      _lookup<ffi.Int>('dogecoin_script_op');

  int get dogecoin_script_op => _dogecoin_script_op.value;

  set dogecoin_script_op(int value) => _dogecoin_script_op.value = value;

  int dogecoin_script_op_free(
    ffi.Pointer<dogecoin_script_op1> script_op,
  ) {
    return _dogecoin_script_op_free(
      script_op,
    );
  }

  late final _dogecoin_script_op_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<dogecoin_script_op1>)>>('dogecoin_script_op_free');
  late final _dogecoin_script_op_free = _dogecoin_script_op_freePtr
      .asFunction<int Function(ffi.Pointer<dogecoin_script_op1>)>();

  void dogecoin_script_op_free_cb(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _dogecoin_script_op_free_cb(
      data,
    );
  }

  late final _dogecoin_script_op_free_cbPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'dogecoin_script_op_free_cb');
  late final _dogecoin_script_op_free_cb = _dogecoin_script_op_free_cbPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int dogecoin_script_get_ops(
    ffi.Pointer<ffi.Int> script_in,
    ffi.Pointer<ffi.Int> ops_out,
  ) {
    return _dogecoin_script_get_ops(
      script_in,
      ops_out,
    );
  }

  late final _dogecoin_script_get_opsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_script_get_ops');
  late final _dogecoin_script_get_ops = _dogecoin_script_get_opsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int dogecoin_script_classify_ops(
    ffi.Pointer<ffi.Int> ops,
  ) {
    return _dogecoin_script_classify_ops(
      ops,
    );
  }

  late final _dogecoin_script_classify_opsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>)>>(
          'dogecoin_script_classify_ops');
  late final _dogecoin_script_classify_ops = _dogecoin_script_classify_opsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int dogecoin_script_classify(
    ffi.Pointer<ffi.Int> script,
    ffi.Pointer<ffi.Int> data_out,
  ) {
    return _dogecoin_script_classify(
      script,
      data_out,
    );
  }

  late final _dogecoin_script_classifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('dogecoin_script_classify');
  late final _dogecoin_script_classify = _dogecoin_script_classifyPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int dogecoin_encode_op_n(
    int n,
  ) {
    return _dogecoin_encode_op_n(
      n,
    );
  }

  late final _dogecoin_encode_op_nPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'dogecoin_encode_op_n');
  late final _dogecoin_encode_op_n =
      _dogecoin_encode_op_nPtr.asFunction<int Function(int)>();

  int dogecoin_script_append_op(
    ffi.Pointer<ffi.Int> script_in,
    int op,
  ) {
    return _dogecoin_script_append_op(
      script_in,
      op,
    );
  }

  late final _dogecoin_script_append_opPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Int32)>>('dogecoin_script_append_op');
  late final _dogecoin_script_append_op = _dogecoin_script_append_opPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int>, int)>();

  int dogecoin_script_append_pushdata(
    ffi.Pointer<ffi.Int> script_in,
    ffi.Pointer<ffi.UnsignedChar> data,
    int datalen,
  ) {
    return _dogecoin_script_append_pushdata(
      script_in,
      data,
      datalen,
    );
  }

  late final _dogecoin_script_append_pushdataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('dogecoin_script_append_pushdata');
  late final _dogecoin_script_append_pushdata =
      _dogecoin_script_append_pushdataPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<ffi.Int> dogecoin_tx_out_type_to_str(
    int type,
  ) {
    return _dogecoin_tx_out_type_to_str(
      type,
    );
  }

  late final _dogecoin_tx_out_type_to_strPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function(ffi.Int32)>>(
          'dogecoin_tx_out_type_to_str');
  late final _dogecoin_tx_out_type_to_str = _dogecoin_tx_out_type_to_strPtr
      .asFunction<ffi.Pointer<ffi.Int> Function(int)>();

  int get_mnemonic(
    int entropysize,
    ffi.Pointer<ffi.Char> entropy,
    ffi.Pointer<ffi.Pointer<ffi.Char>> wordslist,
    ffi.Pointer<ffi.Char> space,
    ffi.Pointer<ffi.Char> entropy_out,
    ffi.Pointer<ffi.Char> mnemonic,
    ffi.Pointer<ffi.Int> mnemonic_size,
  ) {
    return _get_mnemonic(
      entropysize,
      entropy,
      wordslist,
      space,
      entropy_out,
      mnemonic,
      mnemonic_size,
    );
  }

  late final _get_mnemonicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('get_mnemonic');
  late final _get_mnemonic = _get_mnemonicPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>)>();

  int produce_mnemonic_sentence(
    int segSize,
    int checksumBits,
    ffi.Pointer<ffi.Char> firstByte,
    ffi.Pointer<ffi.Char> entropy,
    ffi.Pointer<ffi.Pointer<ffi.Char>> wordlist,
    ffi.Pointer<ffi.Char> space,
    ffi.Pointer<ffi.Char> mnemonic,
    ffi.Pointer<ffi.Int> mnemonic_size,
  ) {
    return _produce_mnemonic_sentence(
      segSize,
      checksumBits,
      firstByte,
      entropy,
      wordlist,
      space,
      mnemonic,
      mnemonic_size,
    );
  }

  late final _produce_mnemonic_sentencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('produce_mnemonic_sentence');
  late final _produce_mnemonic_sentence =
      _produce_mnemonic_sentencePtr.asFunction<
          int Function(
              int,
              int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>();

  int get_root_seed(
    ffi.Pointer<ffi.Char> pass,
    ffi.Pointer<ffi.Char> passphrase,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return _get_root_seed(
      pass,
      passphrase,
      seed,
    );
  }

  late final _get_root_seedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>)>>('get_root_seed');
  late final _get_root_seed = _get_root_seedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Uint8>)>();

  int get_words(
    ffi.Pointer<ffi.Char> lang,
    ffi.Pointer<ffi.Pointer<ffi.Char>> wordlist,
  ) {
    return _get_words(
      lang,
      wordlist,
    );
  }

  late final _get_wordsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('get_words');
  late final _get_words = _get_wordsPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int get_custom_words(
    ffi.Pointer<ffi.Char> filepath,
    ffi.Pointer<ffi.Pointer<ffi.Char>> wordlist,
  ) {
    return _get_custom_words(
      filepath,
      wordlist,
    );
  }

  late final _get_custom_wordsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('get_custom_words');
  late final _get_custom_words = _get_custom_wordsPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int dogecoin_generate_mnemonic(
    ffi.Pointer<ffi.Char> entropy_size,
    ffi.Pointer<ffi.Char> language,
    ffi.Pointer<ffi.Char> space,
    ffi.Pointer<ffi.Char> entropy,
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Char> entropy_out,
    ffi.Pointer<ffi.Int> size,
    ffi.Pointer<ffi.Char> words,
  ) {
    return _dogecoin_generate_mnemonic(
      entropy_size,
      language,
      space,
      entropy,
      filename,
      entropy_out,
      size,
      words,
    );
  }

  late final _dogecoin_generate_mnemonicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>)>>('dogecoin_generate_mnemonic');
  late final _dogecoin_generate_mnemonic =
      _dogecoin_generate_mnemonicPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>)>();

  int qrcodegen_encodeText(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Uint8> tempBuffer,
    ffi.Pointer<ffi.Uint8> qrcode,
    int ecl,
    int minVersion,
    int maxVersion,
    int mask,
    int boostEcl,
  ) {
    return _qrcodegen_encodeText(
      text,
      tempBuffer,
      qrcode,
      ecl,
      minVersion,
      maxVersion,
      mask,
      boostEcl,
    );
  }

  late final _qrcodegen_encodeTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int32,
              ffi.Int,
              ffi.Int,
              ffi.Int32,
              ffi.Int)>>('qrcodegen_encodeText');
  late final _qrcodegen_encodeText = _qrcodegen_encodeTextPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int, int, int, int, int)>();

  int qrcodegen_encodeBinary(
    ffi.Pointer<ffi.Uint8> dataAndTemp,
    int dataLen,
    ffi.Pointer<ffi.Uint8> qrcode,
    int ecl,
    int minVersion,
    int maxVersion,
    int mask,
    int boostEcl,
  ) {
    return _qrcodegen_encodeBinary(
      dataAndTemp,
      dataLen,
      qrcode,
      ecl,
      minVersion,
      maxVersion,
      mask,
      boostEcl,
    );
  }

  late final _qrcodegen_encodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int32,
              ffi.Int,
              ffi.Int,
              ffi.Int32,
              ffi.Int)>>('qrcodegen_encodeBinary');
  late final _qrcodegen_encodeBinary = _qrcodegen_encodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          int, int, int, int)>();

  int qrcodegen_encodeSegments(
    ffi.Pointer<qrcodegen_Segment> segs,
    int len,
    int ecl,
    ffi.Pointer<ffi.Uint8> tempBuffer,
    ffi.Pointer<ffi.Uint8> qrcode,
  ) {
    return _qrcodegen_encodeSegments(
      segs,
      len,
      ecl,
      tempBuffer,
      qrcode,
    );
  }

  late final _qrcodegen_encodeSegmentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<qrcodegen_Segment>,
              ffi.Int,
              ffi.Int32,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('qrcodegen_encodeSegments');
  late final _qrcodegen_encodeSegments =
      _qrcodegen_encodeSegmentsPtr.asFunction<
          int Function(ffi.Pointer<qrcodegen_Segment>, int, int,
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  int qrcodegen_encodeSegmentsAdvanced(
    ffi.Pointer<qrcodegen_Segment> segs,
    int len,
    int ecl,
    int minVersion,
    int maxVersion,
    int mask,
    int boostEcl,
    ffi.Pointer<ffi.Uint8> tempBuffer,
    ffi.Pointer<ffi.Uint8> qrcode,
  ) {
    return _qrcodegen_encodeSegmentsAdvanced(
      segs,
      len,
      ecl,
      minVersion,
      maxVersion,
      mask,
      boostEcl,
      tempBuffer,
      qrcode,
    );
  }

  late final _qrcodegen_encodeSegmentsAdvancedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<qrcodegen_Segment>,
              ffi.Int,
              ffi.Int32,
              ffi.Int,
              ffi.Int,
              ffi.Int32,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('qrcodegen_encodeSegmentsAdvanced');
  late final _qrcodegen_encodeSegmentsAdvanced =
      _qrcodegen_encodeSegmentsAdvancedPtr.asFunction<
          int Function(ffi.Pointer<qrcodegen_Segment>, int, int, int, int, int,
              int, ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  int qrcodegen_isNumeric(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _qrcodegen_isNumeric(
      text,
    );
  }

  late final _qrcodegen_isNumericPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'qrcodegen_isNumeric');
  late final _qrcodegen_isNumeric =
      _qrcodegen_isNumericPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int qrcodegen_isAlphanumeric(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _qrcodegen_isAlphanumeric(
      text,
    );
  }

  late final _qrcodegen_isAlphanumericPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'qrcodegen_isAlphanumeric');
  late final _qrcodegen_isAlphanumeric = _qrcodegen_isAlphanumericPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int qrcodegen_calcSegmentBufferSize(
    int mode,
    int numChars,
  ) {
    return _qrcodegen_calcSegmentBufferSize(
      mode,
      numChars,
    );
  }

  late final _qrcodegen_calcSegmentBufferSizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int32, ffi.Int)>>(
          'qrcodegen_calcSegmentBufferSize');
  late final _qrcodegen_calcSegmentBufferSize =
      _qrcodegen_calcSegmentBufferSizePtr.asFunction<int Function(int, int)>();

  qrcodegen_Segment qrcodegen_makeBytes(
    ffi.Pointer<ffi.Uint8> data,
    int len,
    ffi.Pointer<ffi.Uint8> buf,
  ) {
    return _qrcodegen_makeBytes(
      data,
      len,
      buf,
    );
  }

  late final _qrcodegen_makeBytesPtr = _lookup<
      ffi.NativeFunction<
          qrcodegen_Segment Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Pointer<ffi.Uint8>)>>('qrcodegen_makeBytes');
  late final _qrcodegen_makeBytes = _qrcodegen_makeBytesPtr.asFunction<
      qrcodegen_Segment Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  qrcodegen_Segment qrcodegen_makeNumeric(
    ffi.Pointer<ffi.Char> digits,
    ffi.Pointer<ffi.Uint8> buf,
  ) {
    return _qrcodegen_makeNumeric(
      digits,
      buf,
    );
  }

  late final _qrcodegen_makeNumericPtr = _lookup<
      ffi.NativeFunction<
          qrcodegen_Segment Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>)>>('qrcodegen_makeNumeric');
  late final _qrcodegen_makeNumeric = _qrcodegen_makeNumericPtr.asFunction<
      qrcodegen_Segment Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>)>();

  qrcodegen_Segment qrcodegen_makeAlphanumeric(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Uint8> buf,
  ) {
    return _qrcodegen_makeAlphanumeric(
      text,
      buf,
    );
  }

  late final _qrcodegen_makeAlphanumericPtr = _lookup<
      ffi.NativeFunction<
          qrcodegen_Segment Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>)>>('qrcodegen_makeAlphanumeric');
  late final _qrcodegen_makeAlphanumeric =
      _qrcodegen_makeAlphanumericPtr.asFunction<
          qrcodegen_Segment Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>)>();

  qrcodegen_Segment qrcodegen_makeEci(
    int assignVal,
    ffi.Pointer<ffi.Uint8> buf,
  ) {
    return _qrcodegen_makeEci(
      assignVal,
      buf,
    );
  }

  late final _qrcodegen_makeEciPtr = _lookup<
      ffi.NativeFunction<
          qrcodegen_Segment Function(
              ffi.Long, ffi.Pointer<ffi.Uint8>)>>('qrcodegen_makeEci');
  late final _qrcodegen_makeEci = _qrcodegen_makeEciPtr
      .asFunction<qrcodegen_Segment Function(int, ffi.Pointer<ffi.Uint8>)>();

  int qrcodegen_getSize(
    ffi.Pointer<ffi.Uint8> qrcode,
  ) {
    return _qrcodegen_getSize(
      qrcode,
    );
  }

  late final _qrcodegen_getSizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Uint8>)>>(
          'qrcodegen_getSize');
  late final _qrcodegen_getSize =
      _qrcodegen_getSizePtr.asFunction<int Function(ffi.Pointer<ffi.Uint8>)>();

  int qrcodegen_getModule(
    ffi.Pointer<ffi.Uint8> qrcode,
    int x,
    int y,
  ) {
    return _qrcodegen_getModule(
      qrcode,
      x,
      y,
    );
  }

  late final _qrcodegen_getModulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Int)>>('qrcodegen_getModule');
  late final _qrcodegen_getModule = _qrcodegen_getModulePtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _LODEPNG_VERSION_STRING =
      _lookup<ffi.Pointer<ffi.Char>>('LODEPNG_VERSION_STRING');

  ffi.Pointer<ffi.Char> get LODEPNG_VERSION_STRING =>
      _LODEPNG_VERSION_STRING.value;

  set LODEPNG_VERSION_STRING(ffi.Pointer<ffi.Char> value) =>
      _LODEPNG_VERSION_STRING.value = value;

  int lodepng_decode_memory(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
    ffi.Pointer<ffi.UnsignedInt> w,
    ffi.Pointer<ffi.UnsignedInt> h,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int insize,
    int colortype,
    int bitdepth,
  ) {
    return _lodepng_decode_memory(
      out,
      w,
      h,
      in1,
      insize,
      colortype,
      bitdepth,
    );
  }

  late final _lodepng_decode_memoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int32,
              ffi.UnsignedInt)>>('lodepng_decode_memory');
  late final _lodepng_decode_memory = _lodepng_decode_memoryPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          int,
          int)>();

  int lodepng_decode32(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
    ffi.Pointer<ffi.UnsignedInt> w,
    ffi.Pointer<ffi.UnsignedInt> h,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int insize,
  ) {
    return _lodepng_decode32(
      out,
      w,
      h,
      in1,
      insize,
    );
  }

  late final _lodepng_decode32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('lodepng_decode32');
  late final _lodepng_decode32 = _lodepng_decode32Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedChar>,
          int)>();

  int lodepng_decode24(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
    ffi.Pointer<ffi.UnsignedInt> w,
    ffi.Pointer<ffi.UnsignedInt> h,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int insize,
  ) {
    return _lodepng_decode24(
      out,
      w,
      h,
      in1,
      insize,
    );
  }

  late final _lodepng_decode24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('lodepng_decode24');
  late final _lodepng_decode24 = _lodepng_decode24Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedChar>,
          int)>();

  int lodepng_decode_file(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
    ffi.Pointer<ffi.UnsignedInt> w,
    ffi.Pointer<ffi.UnsignedInt> h,
    ffi.Pointer<ffi.Char> filename,
    int colortype,
    int bitdepth,
  ) {
    return _lodepng_decode_file(
      out,
      w,
      h,
      filename,
      colortype,
      bitdepth,
    );
  }

  late final _lodepng_decode_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.UnsignedInt)>>('lodepng_decode_file');
  late final _lodepng_decode_file = _lodepng_decode_filePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.Char>,
          int,
          int)>();

  int lodepng_decode32_file(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
    ffi.Pointer<ffi.UnsignedInt> w,
    ffi.Pointer<ffi.UnsignedInt> h,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _lodepng_decode32_file(
      out,
      w,
      h,
      filename,
    );
  }

  late final _lodepng_decode32_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Char>)>>('lodepng_decode32_file');
  late final _lodepng_decode32_file = _lodepng_decode32_filePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.Char>)>();

  int lodepng_decode24_file(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
    ffi.Pointer<ffi.UnsignedInt> w,
    ffi.Pointer<ffi.UnsignedInt> h,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _lodepng_decode24_file(
      out,
      w,
      h,
      filename,
    );
  }

  late final _lodepng_decode24_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Char>)>>('lodepng_decode24_file');
  late final _lodepng_decode24_file = _lodepng_decode24_filePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.Char>)>();

  int lodepng_encode_memory(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
    ffi.Pointer<ffi.Int> outsize,
    ffi.Pointer<ffi.UnsignedChar> image,
    int w,
    int h,
    int colortype,
    int bitdepth,
  ) {
    return _lodepng_encode_memory(
      out,
      outsize,
      image,
      w,
      h,
      colortype,
      bitdepth,
    );
  }

  late final _lodepng_encode_memoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Int32,
              ffi.UnsignedInt)>>('lodepng_encode_memory');
  late final _lodepng_encode_memory = _lodepng_encode_memoryPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          int,
          int,
          int)>();

  int lodepng_encode32(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
    ffi.Pointer<ffi.Int> outsize,
    ffi.Pointer<ffi.UnsignedChar> image,
    int w,
    int h,
  ) {
    return _lodepng_encode32(
      out,
      outsize,
      image,
      w,
      h,
    );
  }

  late final _lodepng_encode32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedInt,
              ffi.UnsignedInt)>>('lodepng_encode32');
  late final _lodepng_encode32 = _lodepng_encode32Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.UnsignedChar>, int, int)>();

  int lodepng_encode24(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
    ffi.Pointer<ffi.Int> outsize,
    ffi.Pointer<ffi.UnsignedChar> image,
    int w,
    int h,
  ) {
    return _lodepng_encode24(
      out,
      outsize,
      image,
      w,
      h,
    );
  }

  late final _lodepng_encode24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedInt,
              ffi.UnsignedInt)>>('lodepng_encode24');
  late final _lodepng_encode24 = _lodepng_encode24Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.UnsignedChar>, int, int)>();

  int lodepng_encode_file(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.UnsignedChar> image,
    int w,
    int h,
    int colortype,
    int bitdepth,
  ) {
    return _lodepng_encode_file(
      filename,
      image,
      w,
      h,
      colortype,
      bitdepth,
    );
  }

  late final _lodepng_encode_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Int32,
              ffi.UnsignedInt)>>('lodepng_encode_file');
  late final _lodepng_encode_file = _lodepng_encode_filePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>, int,
          int, int, int)>();

  int lodepng_encode32_file(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.UnsignedChar> image,
    int w,
    int h,
  ) {
    return _lodepng_encode32_file(
      filename,
      image,
      w,
      h,
    );
  }

  late final _lodepng_encode32_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedInt,
              ffi.UnsignedInt)>>('lodepng_encode32_file');
  late final _lodepng_encode32_file = _lodepng_encode32_filePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>, int, int)>();

  int lodepng_encode24_file(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.UnsignedChar> image,
    int w,
    int h,
  ) {
    return _lodepng_encode24_file(
      filename,
      image,
      w,
      h,
    );
  }

  late final _lodepng_encode24_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedInt,
              ffi.UnsignedInt)>>('lodepng_encode24_file');
  late final _lodepng_encode24_file = _lodepng_encode24_filePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>, int, int)>();

  ffi.Pointer<ffi.Char> lodepng_error_text(
    int code,
  ) {
    return _lodepng_error_text(
      code,
    );
  }

  late final _lodepng_error_textPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedInt)>>(
      'lodepng_error_text');
  late final _lodepng_error_text =
      _lodepng_error_textPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  late final ffi.Pointer<LodePNGDecompressSettings>
      _lodepng_default_decompress_settings =
      _lookup<LodePNGDecompressSettings>('lodepng_default_decompress_settings');

  LodePNGDecompressSettings get lodepng_default_decompress_settings =>
      _lodepng_default_decompress_settings.ref;

  void lodepng_decompress_settings_init(
    ffi.Pointer<LodePNGDecompressSettings> settings,
  ) {
    return _lodepng_decompress_settings_init(
      settings,
    );
  }

  late final _lodepng_decompress_settings_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<LodePNGDecompressSettings>)>>(
      'lodepng_decompress_settings_init');
  late final _lodepng_decompress_settings_init =
      _lodepng_decompress_settings_initPtr
          .asFunction<void Function(ffi.Pointer<LodePNGDecompressSettings>)>();

  late final ffi.Pointer<LodePNGCompressSettings>
      _lodepng_default_compress_settings =
      _lookup<LodePNGCompressSettings>('lodepng_default_compress_settings');

  LodePNGCompressSettings get lodepng_default_compress_settings =>
      _lodepng_default_compress_settings.ref;

  void lodepng_compress_settings_init(
    ffi.Pointer<LodePNGCompressSettings> settings,
  ) {
    return _lodepng_compress_settings_init(
      settings,
    );
  }

  late final _lodepng_compress_settings_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<LodePNGCompressSettings>)>>(
      'lodepng_compress_settings_init');
  late final _lodepng_compress_settings_init =
      _lodepng_compress_settings_initPtr
          .asFunction<void Function(ffi.Pointer<LodePNGCompressSettings>)>();

  void lodepng_color_mode_init(
    ffi.Pointer<LodePNGColorMode> info,
  ) {
    return _lodepng_color_mode_init(
      info,
    );
  }

  late final _lodepng_color_mode_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<LodePNGColorMode>)>>(
      'lodepng_color_mode_init');
  late final _lodepng_color_mode_init = _lodepng_color_mode_initPtr
      .asFunction<void Function(ffi.Pointer<LodePNGColorMode>)>();

  void lodepng_color_mode_cleanup(
    ffi.Pointer<LodePNGColorMode> info,
  ) {
    return _lodepng_color_mode_cleanup(
      info,
    );
  }

  late final _lodepng_color_mode_cleanupPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<LodePNGColorMode>)>>(
      'lodepng_color_mode_cleanup');
  late final _lodepng_color_mode_cleanup = _lodepng_color_mode_cleanupPtr
      .asFunction<void Function(ffi.Pointer<LodePNGColorMode>)>();

  int lodepng_color_mode_copy(
    ffi.Pointer<LodePNGColorMode> dest,
    ffi.Pointer<LodePNGColorMode> source,
  ) {
    return _lodepng_color_mode_copy(
      dest,
      source,
    );
  }

  late final _lodepng_color_mode_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<LodePNGColorMode>,
              ffi.Pointer<LodePNGColorMode>)>>('lodepng_color_mode_copy');
  late final _lodepng_color_mode_copy = _lodepng_color_mode_copyPtr.asFunction<
      int Function(
          ffi.Pointer<LodePNGColorMode>, ffi.Pointer<LodePNGColorMode>)>();

  LodePNGColorMode lodepng_color_mode_make(
    int colortype,
    int bitdepth,
  ) {
    return _lodepng_color_mode_make(
      colortype,
      bitdepth,
    );
  }

  late final _lodepng_color_mode_makePtr = _lookup<
      ffi.NativeFunction<
          LodePNGColorMode Function(
              ffi.Int32, ffi.UnsignedInt)>>('lodepng_color_mode_make');
  late final _lodepng_color_mode_make = _lodepng_color_mode_makePtr
      .asFunction<LodePNGColorMode Function(int, int)>();

  void lodepng_palette_clear(
    ffi.Pointer<LodePNGColorMode> info,
  ) {
    return _lodepng_palette_clear(
      info,
    );
  }

  late final _lodepng_palette_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<LodePNGColorMode>)>>(
      'lodepng_palette_clear');
  late final _lodepng_palette_clear = _lodepng_palette_clearPtr
      .asFunction<void Function(ffi.Pointer<LodePNGColorMode>)>();

  int lodepng_palette_add(
    ffi.Pointer<LodePNGColorMode> info,
    int r,
    int g,
    int b,
    int a,
  ) {
    return _lodepng_palette_add(
      info,
      r,
      g,
      b,
      a,
    );
  }

  late final _lodepng_palette_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<LodePNGColorMode>,
              ffi.UnsignedChar,
              ffi.UnsignedChar,
              ffi.UnsignedChar,
              ffi.UnsignedChar)>>('lodepng_palette_add');
  late final _lodepng_palette_add = _lodepng_palette_addPtr.asFunction<
      int Function(ffi.Pointer<LodePNGColorMode>, int, int, int, int)>();

  int lodepng_get_bpp(
    ffi.Pointer<LodePNGColorMode> info,
  ) {
    return _lodepng_get_bpp(
      info,
    );
  }

  late final _lodepng_get_bppPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<LodePNGColorMode>)>>('lodepng_get_bpp');
  late final _lodepng_get_bpp = _lodepng_get_bppPtr
      .asFunction<int Function(ffi.Pointer<LodePNGColorMode>)>();

  int lodepng_get_channels(
    ffi.Pointer<LodePNGColorMode> info,
  ) {
    return _lodepng_get_channels(
      info,
    );
  }

  late final _lodepng_get_channelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<LodePNGColorMode>)>>('lodepng_get_channels');
  late final _lodepng_get_channels = _lodepng_get_channelsPtr
      .asFunction<int Function(ffi.Pointer<LodePNGColorMode>)>();

  int lodepng_is_greyscale_type(
    ffi.Pointer<LodePNGColorMode> info,
  ) {
    return _lodepng_is_greyscale_type(
      info,
    );
  }

  late final _lodepng_is_greyscale_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<LodePNGColorMode>)>>('lodepng_is_greyscale_type');
  late final _lodepng_is_greyscale_type = _lodepng_is_greyscale_typePtr
      .asFunction<int Function(ffi.Pointer<LodePNGColorMode>)>();

  int lodepng_is_alpha_type(
    ffi.Pointer<LodePNGColorMode> info,
  ) {
    return _lodepng_is_alpha_type(
      info,
    );
  }

  late final _lodepng_is_alpha_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<LodePNGColorMode>)>>('lodepng_is_alpha_type');
  late final _lodepng_is_alpha_type = _lodepng_is_alpha_typePtr
      .asFunction<int Function(ffi.Pointer<LodePNGColorMode>)>();

  int lodepng_is_palette_type(
    ffi.Pointer<LodePNGColorMode> info,
  ) {
    return _lodepng_is_palette_type(
      info,
    );
  }

  late final _lodepng_is_palette_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<LodePNGColorMode>)>>('lodepng_is_palette_type');
  late final _lodepng_is_palette_type = _lodepng_is_palette_typePtr
      .asFunction<int Function(ffi.Pointer<LodePNGColorMode>)>();

  int lodepng_has_palette_alpha(
    ffi.Pointer<LodePNGColorMode> info,
  ) {
    return _lodepng_has_palette_alpha(
      info,
    );
  }

  late final _lodepng_has_palette_alphaPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<LodePNGColorMode>)>>('lodepng_has_palette_alpha');
  late final _lodepng_has_palette_alpha = _lodepng_has_palette_alphaPtr
      .asFunction<int Function(ffi.Pointer<LodePNGColorMode>)>();

  int lodepng_can_have_alpha(
    ffi.Pointer<LodePNGColorMode> info,
  ) {
    return _lodepng_can_have_alpha(
      info,
    );
  }

  late final _lodepng_can_have_alphaPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<LodePNGColorMode>)>>('lodepng_can_have_alpha');
  late final _lodepng_can_have_alpha = _lodepng_can_have_alphaPtr
      .asFunction<int Function(ffi.Pointer<LodePNGColorMode>)>();

  int lodepng_get_raw_size(
    int w,
    int h,
    ffi.Pointer<LodePNGColorMode> color,
  ) {
    return _lodepng_get_raw_size(
      w,
      h,
      color,
    );
  }

  late final _lodepng_get_raw_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.UnsignedInt,
              ffi.Pointer<LodePNGColorMode>)>>('lodepng_get_raw_size');
  late final _lodepng_get_raw_size = _lodepng_get_raw_sizePtr
      .asFunction<int Function(int, int, ffi.Pointer<LodePNGColorMode>)>();

  void lodepng_info_init(
    ffi.Pointer<LodePNGInfo> info,
  ) {
    return _lodepng_info_init(
      info,
    );
  }

  late final _lodepng_info_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<LodePNGInfo>)>>(
          'lodepng_info_init');
  late final _lodepng_info_init = _lodepng_info_initPtr
      .asFunction<void Function(ffi.Pointer<LodePNGInfo>)>();

  void lodepng_info_cleanup(
    ffi.Pointer<LodePNGInfo> info,
  ) {
    return _lodepng_info_cleanup(
      info,
    );
  }

  late final _lodepng_info_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<LodePNGInfo>)>>(
          'lodepng_info_cleanup');
  late final _lodepng_info_cleanup = _lodepng_info_cleanupPtr
      .asFunction<void Function(ffi.Pointer<LodePNGInfo>)>();

  int lodepng_info_copy(
    ffi.Pointer<LodePNGInfo> dest,
    ffi.Pointer<LodePNGInfo> source,
  ) {
    return _lodepng_info_copy(
      dest,
      source,
    );
  }

  late final _lodepng_info_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<LodePNGInfo>,
              ffi.Pointer<LodePNGInfo>)>>('lodepng_info_copy');
  late final _lodepng_info_copy = _lodepng_info_copyPtr.asFunction<
      int Function(ffi.Pointer<LodePNGInfo>, ffi.Pointer<LodePNGInfo>)>();

  int lodepng_add_text(
    ffi.Pointer<LodePNGInfo> info,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _lodepng_add_text(
      info,
      key,
      str,
    );
  }

  late final _lodepng_add_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<LodePNGInfo>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('lodepng_add_text');
  late final _lodepng_add_text = _lodepng_add_textPtr.asFunction<
      int Function(ffi.Pointer<LodePNGInfo>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void lodepng_clear_text(
    ffi.Pointer<LodePNGInfo> info,
  ) {
    return _lodepng_clear_text(
      info,
    );
  }

  late final _lodepng_clear_textPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<LodePNGInfo>)>>(
          'lodepng_clear_text');
  late final _lodepng_clear_text = _lodepng_clear_textPtr
      .asFunction<void Function(ffi.Pointer<LodePNGInfo>)>();

  int lodepng_add_itext(
    ffi.Pointer<LodePNGInfo> info,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> langtag,
    ffi.Pointer<ffi.Char> transkey,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _lodepng_add_itext(
      info,
      key,
      langtag,
      transkey,
      str,
    );
  }

  late final _lodepng_add_itextPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<LodePNGInfo>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('lodepng_add_itext');
  late final _lodepng_add_itext = _lodepng_add_itextPtr.asFunction<
      int Function(
          ffi.Pointer<LodePNGInfo>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void lodepng_clear_itext(
    ffi.Pointer<LodePNGInfo> info,
  ) {
    return _lodepng_clear_itext(
      info,
    );
  }

  late final _lodepng_clear_itextPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<LodePNGInfo>)>>(
          'lodepng_clear_itext');
  late final _lodepng_clear_itext = _lodepng_clear_itextPtr
      .asFunction<void Function(ffi.Pointer<LodePNGInfo>)>();

  int lodepng_set_icc(
    ffi.Pointer<LodePNGInfo> info,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.UnsignedChar> profile,
    int profile_size,
  ) {
    return _lodepng_set_icc(
      info,
      name,
      profile,
      profile_size,
    );
  }

  late final _lodepng_set_iccPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<LodePNGInfo>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedInt)>>('lodepng_set_icc');
  late final _lodepng_set_icc = _lodepng_set_iccPtr.asFunction<
      int Function(ffi.Pointer<LodePNGInfo>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  void lodepng_clear_icc(
    ffi.Pointer<LodePNGInfo> info,
  ) {
    return _lodepng_clear_icc(
      info,
    );
  }

  late final _lodepng_clear_iccPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<LodePNGInfo>)>>(
          'lodepng_clear_icc');
  late final _lodepng_clear_icc = _lodepng_clear_iccPtr
      .asFunction<void Function(ffi.Pointer<LodePNGInfo>)>();

  int lodepng_convert(
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.UnsignedChar> in1,
    ffi.Pointer<LodePNGColorMode> mode_out,
    ffi.Pointer<LodePNGColorMode> mode_in,
    int w,
    int h,
  ) {
    return _lodepng_convert(
      out,
      in1,
      mode_out,
      mode_in,
      w,
      h,
    );
  }

  late final _lodepng_convertPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<LodePNGColorMode>,
              ffi.Pointer<LodePNGColorMode>,
              ffi.UnsignedInt,
              ffi.UnsignedInt)>>('lodepng_convert');
  late final _lodepng_convert = _lodepng_convertPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<LodePNGColorMode>,
          ffi.Pointer<LodePNGColorMode>,
          int,
          int)>();

  void lodepng_decoder_settings_init(
    ffi.Pointer<LodePNGDecoderSettings> settings,
  ) {
    return _lodepng_decoder_settings_init(
      settings,
    );
  }

  late final _lodepng_decoder_settings_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<LodePNGDecoderSettings>)>>(
      'lodepng_decoder_settings_init');
  late final _lodepng_decoder_settings_init = _lodepng_decoder_settings_initPtr
      .asFunction<void Function(ffi.Pointer<LodePNGDecoderSettings>)>();

  void lodepng_color_stats_init(
    ffi.Pointer<LodePNGColorStats> stats,
  ) {
    return _lodepng_color_stats_init(
      stats,
    );
  }

  late final _lodepng_color_stats_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<LodePNGColorStats>)>>('lodepng_color_stats_init');
  late final _lodepng_color_stats_init = _lodepng_color_stats_initPtr
      .asFunction<void Function(ffi.Pointer<LodePNGColorStats>)>();

  int lodepng_compute_color_stats(
    ffi.Pointer<LodePNGColorStats> stats,
    ffi.Pointer<ffi.UnsignedChar> image,
    int w,
    int h,
    ffi.Pointer<LodePNGColorMode> mode_in,
  ) {
    return _lodepng_compute_color_stats(
      stats,
      image,
      w,
      h,
      mode_in,
    );
  }

  late final _lodepng_compute_color_statsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<LodePNGColorStats>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Pointer<LodePNGColorMode>)>>('lodepng_compute_color_stats');
  late final _lodepng_compute_color_stats =
      _lodepng_compute_color_statsPtr.asFunction<
          int Function(
              ffi.Pointer<LodePNGColorStats>,
              ffi.Pointer<ffi.UnsignedChar>,
              int,
              int,
              ffi.Pointer<LodePNGColorMode>)>();

  void lodepng_encoder_settings_init(
    ffi.Pointer<LodePNGEncoderSettings> settings,
  ) {
    return _lodepng_encoder_settings_init(
      settings,
    );
  }

  late final _lodepng_encoder_settings_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<LodePNGEncoderSettings>)>>(
      'lodepng_encoder_settings_init');
  late final _lodepng_encoder_settings_init = _lodepng_encoder_settings_initPtr
      .asFunction<void Function(ffi.Pointer<LodePNGEncoderSettings>)>();

  void lodepng_state_init(
    ffi.Pointer<LodePNGState> state,
  ) {
    return _lodepng_state_init(
      state,
    );
  }

  late final _lodepng_state_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<LodePNGState>)>>(
          'lodepng_state_init');
  late final _lodepng_state_init = _lodepng_state_initPtr
      .asFunction<void Function(ffi.Pointer<LodePNGState>)>();

  void lodepng_state_cleanup(
    ffi.Pointer<LodePNGState> state,
  ) {
    return _lodepng_state_cleanup(
      state,
    );
  }

  late final _lodepng_state_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<LodePNGState>)>>(
          'lodepng_state_cleanup');
  late final _lodepng_state_cleanup = _lodepng_state_cleanupPtr
      .asFunction<void Function(ffi.Pointer<LodePNGState>)>();

  void lodepng_state_copy(
    ffi.Pointer<LodePNGState> dest,
    ffi.Pointer<LodePNGState> source,
  ) {
    return _lodepng_state_copy(
      dest,
      source,
    );
  }

  late final _lodepng_state_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<LodePNGState>,
              ffi.Pointer<LodePNGState>)>>('lodepng_state_copy');
  late final _lodepng_state_copy = _lodepng_state_copyPtr.asFunction<
      void Function(ffi.Pointer<LodePNGState>, ffi.Pointer<LodePNGState>)>();

  int lodepng_decode(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
    ffi.Pointer<ffi.UnsignedInt> w,
    ffi.Pointer<ffi.UnsignedInt> h,
    ffi.Pointer<LodePNGState> state,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int insize,
  ) {
    return _lodepng_decode(
      out,
      w,
      h,
      state,
      in1,
      insize,
    );
  }

  late final _lodepng_decodePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<LodePNGState>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('lodepng_decode');
  late final _lodepng_decode = _lodepng_decodePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<LodePNGState>,
          ffi.Pointer<ffi.UnsignedChar>,
          int)>();

  int lodepng_inspect(
    ffi.Pointer<ffi.UnsignedInt> w,
    ffi.Pointer<ffi.UnsignedInt> h,
    ffi.Pointer<LodePNGState> state,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int insize,
  ) {
    return _lodepng_inspect(
      w,
      h,
      state,
      in1,
      insize,
    );
  }

  late final _lodepng_inspectPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<LodePNGState>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('lodepng_inspect');
  late final _lodepng_inspect = _lodepng_inspectPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<LodePNGState>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int lodepng_inspect_chunk(
    ffi.Pointer<LodePNGState> state,
    int pos,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int insize,
  ) {
    return _lodepng_inspect_chunk(
      state,
      pos,
      in1,
      insize,
    );
  }

  late final _lodepng_inspect_chunkPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<LodePNGState>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('lodepng_inspect_chunk');
  late final _lodepng_inspect_chunk = _lodepng_inspect_chunkPtr.asFunction<
      int Function(ffi.Pointer<LodePNGState>, int,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  int lodepng_encode(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
    ffi.Pointer<ffi.Int> outsize,
    ffi.Pointer<ffi.UnsignedChar> image,
    int w,
    int h,
    ffi.Pointer<LodePNGState> state,
  ) {
    return _lodepng_encode(
      out,
      outsize,
      image,
      w,
      h,
      state,
    );
  }

  late final _lodepng_encodePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Pointer<LodePNGState>)>>('lodepng_encode');
  late final _lodepng_encode = _lodepng_encodePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          int,
          ffi.Pointer<LodePNGState>)>();

  int lodepng_chunk_length(
    ffi.Pointer<ffi.UnsignedChar> chunk,
  ) {
    return _lodepng_chunk_length(
      chunk,
    );
  }

  late final _lodepng_chunk_lengthPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.UnsignedChar>)>>('lodepng_chunk_length');
  late final _lodepng_chunk_length = _lodepng_chunk_lengthPtr
      .asFunction<int Function(ffi.Pointer<ffi.UnsignedChar>)>();

  void lodepng_chunk_type(
    ffi.Pointer<ffi.Char> type,
    ffi.Pointer<ffi.UnsignedChar> chunk,
  ) {
    return _lodepng_chunk_type(
      type,
      chunk,
    );
  }

  late final _lodepng_chunk_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedChar>)>>('lodepng_chunk_type');
  late final _lodepng_chunk_type = _lodepng_chunk_typePtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>)>();

  int lodepng_chunk_type_equals(
    ffi.Pointer<ffi.UnsignedChar> chunk,
    ffi.Pointer<ffi.Char> type,
  ) {
    return _lodepng_chunk_type_equals(
      chunk,
      type,
    );
  }

  late final _lodepng_chunk_type_equalsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Char>)>>('lodepng_chunk_type_equals');
  late final _lodepng_chunk_type_equals =
      _lodepng_chunk_type_equalsPtr.asFunction<
          int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Char>)>();

  int lodepng_chunk_ancillary(
    ffi.Pointer<ffi.UnsignedChar> chunk,
  ) {
    return _lodepng_chunk_ancillary(
      chunk,
    );
  }

  late final _lodepng_chunk_ancillaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              ffi.Pointer<ffi.UnsignedChar>)>>('lodepng_chunk_ancillary');
  late final _lodepng_chunk_ancillary = _lodepng_chunk_ancillaryPtr
      .asFunction<int Function(ffi.Pointer<ffi.UnsignedChar>)>();

  int lodepng_chunk_private(
    ffi.Pointer<ffi.UnsignedChar> chunk,
  ) {
    return _lodepng_chunk_private(
      chunk,
    );
  }

  late final _lodepng_chunk_privatePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              ffi.Pointer<ffi.UnsignedChar>)>>('lodepng_chunk_private');
  late final _lodepng_chunk_private = _lodepng_chunk_privatePtr
      .asFunction<int Function(ffi.Pointer<ffi.UnsignedChar>)>();

  int lodepng_chunk_safetocopy(
    ffi.Pointer<ffi.UnsignedChar> chunk,
  ) {
    return _lodepng_chunk_safetocopy(
      chunk,
    );
  }

  late final _lodepng_chunk_safetocopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              ffi.Pointer<ffi.UnsignedChar>)>>('lodepng_chunk_safetocopy');
  late final _lodepng_chunk_safetocopy = _lodepng_chunk_safetocopyPtr
      .asFunction<int Function(ffi.Pointer<ffi.UnsignedChar>)>();

  ffi.Pointer<ffi.UnsignedChar> lodepng_chunk_data(
    ffi.Pointer<ffi.UnsignedChar> chunk,
  ) {
    return _lodepng_chunk_data(
      chunk,
    );
  }

  late final _lodepng_chunk_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<ffi.UnsignedChar>)>>('lodepng_chunk_data');
  late final _lodepng_chunk_data = _lodepng_chunk_dataPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ffi.UnsignedChar>)>();

  ffi.Pointer<ffi.UnsignedChar> lodepng_chunk_data_const(
    ffi.Pointer<ffi.UnsignedChar> chunk,
  ) {
    return _lodepng_chunk_data_const(
      chunk,
    );
  }

  late final _lodepng_chunk_data_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<ffi.UnsignedChar>)>>('lodepng_chunk_data_const');
  late final _lodepng_chunk_data_const =
      _lodepng_chunk_data_constPtr.asFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<ffi.UnsignedChar>)>();

  int lodepng_chunk_check_crc(
    ffi.Pointer<ffi.UnsignedChar> chunk,
  ) {
    return _lodepng_chunk_check_crc(
      chunk,
    );
  }

  late final _lodepng_chunk_check_crcPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.UnsignedChar>)>>('lodepng_chunk_check_crc');
  late final _lodepng_chunk_check_crc = _lodepng_chunk_check_crcPtr
      .asFunction<int Function(ffi.Pointer<ffi.UnsignedChar>)>();

  void lodepng_chunk_generate_crc(
    ffi.Pointer<ffi.UnsignedChar> chunk,
  ) {
    return _lodepng_chunk_generate_crc(
      chunk,
    );
  }

  late final _lodepng_chunk_generate_crcPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedChar>)>>(
      'lodepng_chunk_generate_crc');
  late final _lodepng_chunk_generate_crc = _lodepng_chunk_generate_crcPtr
      .asFunction<void Function(ffi.Pointer<ffi.UnsignedChar>)>();

  ffi.Pointer<ffi.UnsignedChar> lodepng_chunk_next(
    ffi.Pointer<ffi.UnsignedChar> chunk,
    ffi.Pointer<ffi.UnsignedChar> end,
  ) {
    return _lodepng_chunk_next(
      chunk,
      end,
    );
  }

  late final _lodepng_chunk_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>>('lodepng_chunk_next');
  late final _lodepng_chunk_next = _lodepng_chunk_nextPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.UnsignedChar>)>();

  ffi.Pointer<ffi.UnsignedChar> lodepng_chunk_next_const(
    ffi.Pointer<ffi.UnsignedChar> chunk,
    ffi.Pointer<ffi.UnsignedChar> end,
  ) {
    return _lodepng_chunk_next_const(
      chunk,
      end,
    );
  }

  late final _lodepng_chunk_next_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>>('lodepng_chunk_next_const');
  late final _lodepng_chunk_next_const =
      _lodepng_chunk_next_constPtr.asFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.UnsignedChar>)>();

  ffi.Pointer<ffi.UnsignedChar> lodepng_chunk_find(
    ffi.Pointer<ffi.UnsignedChar> chunk,
    ffi.Pointer<ffi.UnsignedChar> end,
    ffi.Pointer<ffi.Char> type,
  ) {
    return _lodepng_chunk_find(
      chunk,
      end,
      type,
    );
  }

  late final _lodepng_chunk_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Char>)>>('lodepng_chunk_find');
  late final _lodepng_chunk_find = _lodepng_chunk_findPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.UnsignedChar> lodepng_chunk_find_const(
    ffi.Pointer<ffi.UnsignedChar> chunk,
    ffi.Pointer<ffi.UnsignedChar> end,
    ffi.Pointer<ffi.Char> type,
  ) {
    return _lodepng_chunk_find_const(
      chunk,
      end,
      type,
    );
  }

  late final _lodepng_chunk_find_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Char>)>>('lodepng_chunk_find_const');
  late final _lodepng_chunk_find_const =
      _lodepng_chunk_find_constPtr.asFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Char>)>();

  int lodepng_chunk_append(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
    ffi.Pointer<ffi.Int> outsize,
    ffi.Pointer<ffi.UnsignedChar> chunk,
  ) {
    return _lodepng_chunk_append(
      out,
      outsize,
      chunk,
    );
  }

  late final _lodepng_chunk_appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>)>>('lodepng_chunk_append');
  late final _lodepng_chunk_append = _lodepng_chunk_appendPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.UnsignedChar>)>();

  int lodepng_chunk_create(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
    ffi.Pointer<ffi.Int> outsize,
    int length,
    ffi.Pointer<ffi.Char> type,
    ffi.Pointer<ffi.UnsignedChar> data,
  ) {
    return _lodepng_chunk_create(
      out,
      outsize,
      length,
      type,
      data,
    );
  }

  late final _lodepng_chunk_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.Int>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedChar>)>>('lodepng_chunk_create');
  late final _lodepng_chunk_create = _lodepng_chunk_createPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ffi.Int>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.UnsignedChar>)>();

  int lodepng_crc32(
    ffi.Pointer<ffi.UnsignedChar> buf,
    int len,
  ) {
    return _lodepng_crc32(
      buf,
      len,
    );
  }

  late final _lodepng_crc32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('lodepng_crc32');
  late final _lodepng_crc32 = _lodepng_crc32Ptr
      .asFunction<int Function(ffi.Pointer<ffi.UnsignedChar>, int)>();

  int lodepng_inflate(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
    ffi.Pointer<ffi.Int> outsize,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int insize,
    ffi.Pointer<LodePNGDecompressSettings> settings,
  ) {
    return _lodepng_inflate(
      out,
      outsize,
      in1,
      insize,
      settings,
    );
  }

  late final _lodepng_inflatePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<LodePNGDecompressSettings>)>>('lodepng_inflate');
  late final _lodepng_inflate = _lodepng_inflatePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<LodePNGDecompressSettings>)>();

  int lodepng_zlib_decompress(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
    ffi.Pointer<ffi.Int> outsize,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int insize,
    ffi.Pointer<LodePNGDecompressSettings> settings,
  ) {
    return _lodepng_zlib_decompress(
      out,
      outsize,
      in1,
      insize,
      settings,
    );
  }

  late final _lodepng_zlib_decompressPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
                  ffi.Pointer<ffi.Int>,
                  ffi.Pointer<ffi.UnsignedChar>,
                  ffi.Int,
                  ffi.Pointer<LodePNGDecompressSettings>)>>(
      'lodepng_zlib_decompress');
  late final _lodepng_zlib_decompress = _lodepng_zlib_decompressPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<LodePNGDecompressSettings>)>();

  int lodepng_zlib_compress(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
    ffi.Pointer<ffi.Int> outsize,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int insize,
    ffi.Pointer<LodePNGCompressSettings> settings,
  ) {
    return _lodepng_zlib_compress(
      out,
      outsize,
      in1,
      insize,
      settings,
    );
  }

  late final _lodepng_zlib_compressPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<LodePNGCompressSettings>)>>('lodepng_zlib_compress');
  late final _lodepng_zlib_compress = _lodepng_zlib_compressPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<LodePNGCompressSettings>)>();

  int lodepng_huffman_code_lengths(
    ffi.Pointer<ffi.UnsignedInt> lengths,
    ffi.Pointer<ffi.UnsignedInt> frequencies,
    int numcodes,
    int maxbitlen,
  ) {
    return _lodepng_huffman_code_lengths(
      lengths,
      frequencies,
      numcodes,
      maxbitlen,
    );
  }

  late final _lodepng_huffman_code_lengthsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Int,
              ffi.UnsignedInt)>>('lodepng_huffman_code_lengths');
  late final _lodepng_huffman_code_lengths =
      _lodepng_huffman_code_lengthsPtr.asFunction<
          int Function(ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>, int, int)>();

  int lodepng_deflate(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
    ffi.Pointer<ffi.Int> outsize,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int insize,
    ffi.Pointer<LodePNGCompressSettings> settings,
  ) {
    return _lodepng_deflate(
      out,
      outsize,
      in1,
      insize,
      settings,
    );
  }

  late final _lodepng_deflatePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<LodePNGCompressSettings>)>>('lodepng_deflate');
  late final _lodepng_deflate = _lodepng_deflatePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<LodePNGCompressSettings>)>();

  int lodepng_load_file(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
    ffi.Pointer<ffi.Int> outsize,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _lodepng_load_file(
      out,
      outsize,
      filename,
    );
  }

  late final _lodepng_load_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>)>>('lodepng_load_file');
  late final _lodepng_load_file = _lodepng_load_filePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>)>();

  int lodepng_save_file(
    ffi.Pointer<ffi.UnsignedChar> buffer,
    int buffersize,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _lodepng_save_file(
      buffer,
      buffersize,
      filename,
    );
  }

  late final _lodepng_save_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('lodepng_save_file');
  late final _lodepng_save_file = _lodepng_save_filePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.Char>)>();

  void __assert_fail(
    ffi.Pointer<ffi.Char> __assertion,
    ffi.Pointer<ffi.Char> __file,
    int __line,
    ffi.Pointer<ffi.Char> __function,
  ) {
    return ___assert_fail(
      __assertion,
      __file,
      __line,
      __function,
    );
  }

  late final ___assert_failPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>)>>('__assert_fail');
  late final ___assert_fail = ___assert_failPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>)>();

  void __assert_perror_fail(
    int __errnum,
    ffi.Pointer<ffi.Char> __file,
    int __line,
    ffi.Pointer<ffi.Char> __function,
  ) {
    return ___assert_perror_fail(
      __errnum,
      __file,
      __line,
      __function,
    );
  }

  late final ___assert_perror_failPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>)>>('__assert_perror_fail');
  late final ___assert_perror_fail = ___assert_perror_failPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  void __assert(
    ffi.Pointer<ffi.Char> __assertion,
    ffi.Pointer<ffi.Char> __file,
    int __line,
  ) {
    return ___assert(
      __assertion,
      __file,
      __line,
    );
  }

  late final ___assertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('__assert');
  late final ___assert = ___assertPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Pointer<ffi.UnsignedShort>> __ctype_b_loc() {
    return ___ctype_b_loc();
  }

  late final ___ctype_b_locPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.UnsignedShort>>
              Function()>>('__ctype_b_loc');
  late final ___ctype_b_loc = ___ctype_b_locPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.UnsignedShort>> Function()>();

  ffi.Pointer<ffi.Pointer<__int32_t>> __ctype_tolower_loc() {
    return ___ctype_tolower_loc();
  }

  late final ___ctype_tolower_locPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<__int32_t>> Function()>>(
      '__ctype_tolower_loc');
  late final ___ctype_tolower_loc = ___ctype_tolower_locPtr
      .asFunction<ffi.Pointer<ffi.Pointer<__int32_t>> Function()>();

  ffi.Pointer<ffi.Pointer<__int32_t>> __ctype_toupper_loc() {
    return ___ctype_toupper_loc();
  }

  late final ___ctype_toupper_locPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<__int32_t>> Function()>>(
      '__ctype_toupper_loc');
  late final ___ctype_toupper_loc = ___ctype_toupper_locPtr
      .asFunction<ffi.Pointer<ffi.Pointer<__int32_t>> Function()>();

  int isalnum(
    int arg0,
  ) {
    return _isalnum(
      arg0,
    );
  }

  late final _isalnumPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('isalnum');
  late final _isalnum = _isalnumPtr.asFunction<int Function(int)>();

  int isalpha(
    int arg0,
  ) {
    return _isalpha(
      arg0,
    );
  }

  late final _isalphaPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('isalpha');
  late final _isalpha = _isalphaPtr.asFunction<int Function(int)>();

  int iscntrl(
    int arg0,
  ) {
    return _iscntrl(
      arg0,
    );
  }

  late final _iscntrlPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('iscntrl');
  late final _iscntrl = _iscntrlPtr.asFunction<int Function(int)>();

  int isdigit(
    int arg0,
  ) {
    return _isdigit(
      arg0,
    );
  }

  late final _isdigitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('isdigit');
  late final _isdigit = _isdigitPtr.asFunction<int Function(int)>();

  int islower(
    int arg0,
  ) {
    return _islower(
      arg0,
    );
  }

  late final _islowerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('islower');
  late final _islower = _islowerPtr.asFunction<int Function(int)>();

  int isgraph(
    int arg0,
  ) {
    return _isgraph(
      arg0,
    );
  }

  late final _isgraphPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('isgraph');
  late final _isgraph = _isgraphPtr.asFunction<int Function(int)>();

  int isprint(
    int arg0,
  ) {
    return _isprint(
      arg0,
    );
  }

  late final _isprintPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('isprint');
  late final _isprint = _isprintPtr.asFunction<int Function(int)>();

  int ispunct(
    int arg0,
  ) {
    return _ispunct(
      arg0,
    );
  }

  late final _ispunctPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ispunct');
  late final _ispunct = _ispunctPtr.asFunction<int Function(int)>();

  int isspace(
    int arg0,
  ) {
    return _isspace(
      arg0,
    );
  }

  late final _isspacePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('isspace');
  late final _isspace = _isspacePtr.asFunction<int Function(int)>();

  int isupper(
    int arg0,
  ) {
    return _isupper(
      arg0,
    );
  }

  late final _isupperPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('isupper');
  late final _isupper = _isupperPtr.asFunction<int Function(int)>();

  int isxdigit(
    int arg0,
  ) {
    return _isxdigit(
      arg0,
    );
  }

  late final _isxdigitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('isxdigit');
  late final _isxdigit = _isxdigitPtr.asFunction<int Function(int)>();

  int tolower(
    int __c,
  ) {
    return _tolower1(
      __c,
    );
  }

  late final _tolowerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('tolower');
  late final _tolower1 = _tolowerPtr.asFunction<int Function(int)>();

  int toupper(
    int __c,
  ) {
    return _toupper1(
      __c,
    );
  }

  late final _toupperPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('toupper');
  late final _toupper1 = _toupperPtr.asFunction<int Function(int)>();

  int isblank(
    int arg0,
  ) {
    return _isblank(
      arg0,
    );
  }

  late final _isblankPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('isblank');
  late final _isblank = _isblankPtr.asFunction<int Function(int)>();

  int isascii(
    int __c,
  ) {
    return _isascii(
      __c,
    );
  }

  late final _isasciiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('isascii');
  late final _isascii = _isasciiPtr.asFunction<int Function(int)>();

  int toascii(
    int __c,
  ) {
    return _toascii(
      __c,
    );
  }

  late final _toasciiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('toascii');
  late final _toascii = _toasciiPtr.asFunction<int Function(int)>();

  int _toupper(
    int arg0,
  ) {
    return __toupper(
      arg0,
    );
  }

  late final __toupperPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('_toupper');
  late final __toupper = __toupperPtr.asFunction<int Function(int)>();

  int _tolower(
    int arg0,
  ) {
    return __tolower(
      arg0,
    );
  }

  late final __tolowerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('_tolower');
  late final __tolower = __tolowerPtr.asFunction<int Function(int)>();

  int isalnum_l(
    int arg0,
    locale_t arg1,
  ) {
    return _isalnum_l(
      arg0,
      arg1,
    );
  }

  late final _isalnum_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, locale_t)>>(
          'isalnum_l');
  late final _isalnum_l =
      _isalnum_lPtr.asFunction<int Function(int, locale_t)>();

  int isalpha_l(
    int arg0,
    locale_t arg1,
  ) {
    return _isalpha_l(
      arg0,
      arg1,
    );
  }

  late final _isalpha_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, locale_t)>>(
          'isalpha_l');
  late final _isalpha_l =
      _isalpha_lPtr.asFunction<int Function(int, locale_t)>();

  int iscntrl_l(
    int arg0,
    locale_t arg1,
  ) {
    return _iscntrl_l(
      arg0,
      arg1,
    );
  }

  late final _iscntrl_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, locale_t)>>(
          'iscntrl_l');
  late final _iscntrl_l =
      _iscntrl_lPtr.asFunction<int Function(int, locale_t)>();

  int isdigit_l(
    int arg0,
    locale_t arg1,
  ) {
    return _isdigit_l(
      arg0,
      arg1,
    );
  }

  late final _isdigit_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, locale_t)>>(
          'isdigit_l');
  late final _isdigit_l =
      _isdigit_lPtr.asFunction<int Function(int, locale_t)>();

  int islower_l(
    int arg0,
    locale_t arg1,
  ) {
    return _islower_l(
      arg0,
      arg1,
    );
  }

  late final _islower_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, locale_t)>>(
          'islower_l');
  late final _islower_l =
      _islower_lPtr.asFunction<int Function(int, locale_t)>();

  int isgraph_l(
    int arg0,
    locale_t arg1,
  ) {
    return _isgraph_l(
      arg0,
      arg1,
    );
  }

  late final _isgraph_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, locale_t)>>(
          'isgraph_l');
  late final _isgraph_l =
      _isgraph_lPtr.asFunction<int Function(int, locale_t)>();

  int isprint_l(
    int arg0,
    locale_t arg1,
  ) {
    return _isprint_l(
      arg0,
      arg1,
    );
  }

  late final _isprint_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, locale_t)>>(
          'isprint_l');
  late final _isprint_l =
      _isprint_lPtr.asFunction<int Function(int, locale_t)>();

  int ispunct_l(
    int arg0,
    locale_t arg1,
  ) {
    return _ispunct_l(
      arg0,
      arg1,
    );
  }

  late final _ispunct_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, locale_t)>>(
          'ispunct_l');
  late final _ispunct_l =
      _ispunct_lPtr.asFunction<int Function(int, locale_t)>();

  int isspace_l(
    int arg0,
    locale_t arg1,
  ) {
    return _isspace_l(
      arg0,
      arg1,
    );
  }

  late final _isspace_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, locale_t)>>(
          'isspace_l');
  late final _isspace_l =
      _isspace_lPtr.asFunction<int Function(int, locale_t)>();

  int isupper_l(
    int arg0,
    locale_t arg1,
  ) {
    return _isupper_l(
      arg0,
      arg1,
    );
  }

  late final _isupper_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, locale_t)>>(
          'isupper_l');
  late final _isupper_l =
      _isupper_lPtr.asFunction<int Function(int, locale_t)>();

  int isxdigit_l(
    int arg0,
    locale_t arg1,
  ) {
    return _isxdigit_l(
      arg0,
      arg1,
    );
  }

  late final _isxdigit_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, locale_t)>>(
          'isxdigit_l');
  late final _isxdigit_l =
      _isxdigit_lPtr.asFunction<int Function(int, locale_t)>();

  int isblank_l(
    int arg0,
    locale_t arg1,
  ) {
    return _isblank_l(
      arg0,
      arg1,
    );
  }

  late final _isblank_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, locale_t)>>(
          'isblank_l');
  late final _isblank_l =
      _isblank_lPtr.asFunction<int Function(int, locale_t)>();

  int __tolower_l(
    int __c,
    locale_t __l,
  ) {
    return ___tolower_l(
      __c,
      __l,
    );
  }

  late final ___tolower_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, locale_t)>>(
          '__tolower_l');
  late final ___tolower_l =
      ___tolower_lPtr.asFunction<int Function(int, locale_t)>();

  int tolower_l(
    int __c,
    locale_t __l,
  ) {
    return _tolower_l(
      __c,
      __l,
    );
  }

  late final _tolower_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, locale_t)>>(
          'tolower_l');
  late final _tolower_l =
      _tolower_lPtr.asFunction<int Function(int, locale_t)>();

  int __toupper_l(
    int __c,
    locale_t __l,
  ) {
    return ___toupper_l(
      __c,
      __l,
    );
  }

  late final ___toupper_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, locale_t)>>(
          '__toupper_l');
  late final ___toupper_l =
      ___toupper_lPtr.asFunction<int Function(int, locale_t)>();

  int toupper_l(
    int __c,
    locale_t __l,
  ) {
    return _toupper_l(
      __c,
      __l,
    );
  }

  late final _toupper_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, locale_t)>>(
          'toupper_l');
  late final _toupper_l =
      _toupper_lPtr.asFunction<int Function(int, locale_t)>();

  int __fpclassify(
    double __value,
  ) {
    return ___fpclassify(
      __value,
    );
  }

  late final ___fpclassifyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('__fpclassify');
  late final ___fpclassify =
      ___fpclassifyPtr.asFunction<int Function(double)>();

  int __signbit(
    double __value,
  ) {
    return ___signbit(
      __value,
    );
  }

  late final ___signbitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('__signbit');
  late final ___signbit = ___signbitPtr.asFunction<int Function(double)>();

  int __isinf(
    double __value,
  ) {
    return ___isinf(
      __value,
    );
  }

  late final ___isinfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('__isinf');
  late final ___isinf = ___isinfPtr.asFunction<int Function(double)>();

  int __finite(
    double __value,
  ) {
    return ___finite(
      __value,
    );
  }

  late final ___finitePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('__finite');
  late final ___finite = ___finitePtr.asFunction<int Function(double)>();

  int __isnan(
    double __value,
  ) {
    return ___isnan(
      __value,
    );
  }

  late final ___isnanPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('__isnan');
  late final ___isnan = ___isnanPtr.asFunction<int Function(double)>();

  int __iseqsig(
    double __x,
    double __y,
  ) {
    return ___iseqsig(
      __x,
      __y,
    );
  }

  late final ___iseqsigPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double, ffi.Double)>>(
          '__iseqsig');
  late final ___iseqsig =
      ___iseqsigPtr.asFunction<int Function(double, double)>();

  int __issignaling(
    double __value,
  ) {
    return ___issignaling(
      __value,
    );
  }

  late final ___issignalingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>(
          '__issignaling');
  late final ___issignaling =
      ___issignalingPtr.asFunction<int Function(double)>();

  double acos(
    double __x,
  ) {
    return _acos(
      __x,
    );
  }

  late final _acosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acos');
  late final _acos = _acosPtr.asFunction<double Function(double)>();

  double __acos(
    double __x,
  ) {
    return ___acos(
      __x,
    );
  }

  late final ___acosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__acos');
  late final ___acos = ___acosPtr.asFunction<double Function(double)>();

  double asin(
    double __x,
  ) {
    return _asin(
      __x,
    );
  }

  late final _asinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asin');
  late final _asin = _asinPtr.asFunction<double Function(double)>();

  double __asin(
    double __x,
  ) {
    return ___asin(
      __x,
    );
  }

  late final ___asinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__asin');
  late final ___asin = ___asinPtr.asFunction<double Function(double)>();

  double atan(
    double __x,
  ) {
    return _atan(
      __x,
    );
  }

  late final _atanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atan');
  late final _atan = _atanPtr.asFunction<double Function(double)>();

  double __atan(
    double __x,
  ) {
    return ___atan(
      __x,
    );
  }

  late final ___atanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__atan');
  late final ___atan = ___atanPtr.asFunction<double Function(double)>();

  double atan2(
    double __y,
    double __x,
  ) {
    return _atan2(
      __y,
      __x,
    );
  }

  late final _atan2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'atan2');
  late final _atan2 = _atan2Ptr.asFunction<double Function(double, double)>();

  double __atan2(
    double __y,
    double __x,
  ) {
    return ___atan2(
      __y,
      __x,
    );
  }

  late final ___atan2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__atan2');
  late final ___atan2 =
      ___atan2Ptr.asFunction<double Function(double, double)>();

  double cos(
    double __x,
  ) {
    return _cos(
      __x,
    );
  }

  late final _cosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cos');
  late final _cos = _cosPtr.asFunction<double Function(double)>();

  double __cos(
    double __x,
  ) {
    return ___cos(
      __x,
    );
  }

  late final ___cosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__cos');
  late final ___cos = ___cosPtr.asFunction<double Function(double)>();

  double sin(
    double __x,
  ) {
    return _sin(
      __x,
    );
  }

  late final _sinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sin');
  late final _sin = _sinPtr.asFunction<double Function(double)>();

  double __sin(
    double __x,
  ) {
    return ___sin(
      __x,
    );
  }

  late final ___sinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__sin');
  late final ___sin = ___sinPtr.asFunction<double Function(double)>();

  double tan(
    double __x,
  ) {
    return _tan(
      __x,
    );
  }

  late final _tanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tan');
  late final _tan = _tanPtr.asFunction<double Function(double)>();

  double __tan(
    double __x,
  ) {
    return ___tan(
      __x,
    );
  }

  late final ___tanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__tan');
  late final ___tan = ___tanPtr.asFunction<double Function(double)>();

  double cosh(
    double __x,
  ) {
    return _cosh(
      __x,
    );
  }

  late final _coshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cosh');
  late final _cosh = _coshPtr.asFunction<double Function(double)>();

  double __cosh(
    double __x,
  ) {
    return ___cosh(
      __x,
    );
  }

  late final ___coshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__cosh');
  late final ___cosh = ___coshPtr.asFunction<double Function(double)>();

  double sinh(
    double __x,
  ) {
    return _sinh(
      __x,
    );
  }

  late final _sinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sinh');
  late final _sinh = _sinhPtr.asFunction<double Function(double)>();

  double __sinh(
    double __x,
  ) {
    return ___sinh(
      __x,
    );
  }

  late final ___sinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__sinh');
  late final ___sinh = ___sinhPtr.asFunction<double Function(double)>();

  double tanh(
    double __x,
  ) {
    return _tanh(
      __x,
    );
  }

  late final _tanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tanh');
  late final _tanh = _tanhPtr.asFunction<double Function(double)>();

  double __tanh(
    double __x,
  ) {
    return ___tanh(
      __x,
    );
  }

  late final ___tanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__tanh');
  late final ___tanh = ___tanhPtr.asFunction<double Function(double)>();

  double acosh(
    double __x,
  ) {
    return _acosh(
      __x,
    );
  }

  late final _acoshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acosh');
  late final _acosh = _acoshPtr.asFunction<double Function(double)>();

  double __acosh(
    double __x,
  ) {
    return ___acosh(
      __x,
    );
  }

  late final ___acoshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__acosh');
  late final ___acosh = ___acoshPtr.asFunction<double Function(double)>();

  double asinh(
    double __x,
  ) {
    return _asinh(
      __x,
    );
  }

  late final _asinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asinh');
  late final _asinh = _asinhPtr.asFunction<double Function(double)>();

  double __asinh(
    double __x,
  ) {
    return ___asinh(
      __x,
    );
  }

  late final ___asinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__asinh');
  late final ___asinh = ___asinhPtr.asFunction<double Function(double)>();

  double atanh(
    double __x,
  ) {
    return _atanh(
      __x,
    );
  }

  late final _atanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atanh');
  late final _atanh = _atanhPtr.asFunction<double Function(double)>();

  double __atanh(
    double __x,
  ) {
    return ___atanh(
      __x,
    );
  }

  late final ___atanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__atanh');
  late final ___atanh = ___atanhPtr.asFunction<double Function(double)>();

  double exp(
    double __x,
  ) {
    return _exp(
      __x,
    );
  }

  late final _expPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp');
  late final _exp = _expPtr.asFunction<double Function(double)>();

  double __exp(
    double __x,
  ) {
    return ___exp(
      __x,
    );
  }

  late final ___expPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__exp');
  late final ___exp = ___expPtr.asFunction<double Function(double)>();

  double frexp(
    double __x,
    ffi.Pointer<ffi.Int> __exponent,
  ) {
    return _frexp(
      __x,
      __exponent,
    );
  }

  late final _frexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int>)>>('frexp');
  late final _frexp =
      _frexpPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double __frexp(
    double __x,
    ffi.Pointer<ffi.Int> __exponent,
  ) {
    return ___frexp(
      __x,
      __exponent,
    );
  }

  late final ___frexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int>)>>('__frexp');
  late final ___frexp =
      ___frexpPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double ldexp(
    double __x,
    int __exponent,
  ) {
    return _ldexp(
      __x,
      __exponent,
    );
  }

  late final _ldexpPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          'ldexp');
  late final _ldexp = _ldexpPtr.asFunction<double Function(double, int)>();

  double __ldexp(
    double __x,
    int __exponent,
  ) {
    return ___ldexp(
      __x,
      __exponent,
    );
  }

  late final ___ldexpPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          '__ldexp');
  late final ___ldexp = ___ldexpPtr.asFunction<double Function(double, int)>();

  double log(
    double __x,
  ) {
    return _log(
      __x,
    );
  }

  late final _logPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log');
  late final _log = _logPtr.asFunction<double Function(double)>();

  double __log(
    double __x,
  ) {
    return ___log(
      __x,
    );
  }

  late final ___logPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__log');
  late final ___log = ___logPtr.asFunction<double Function(double)>();

  double log10(
    double __x,
  ) {
    return _log10(
      __x,
    );
  }

  late final _log10Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log10');
  late final _log10 = _log10Ptr.asFunction<double Function(double)>();

  double __log10(
    double __x,
  ) {
    return ___log10(
      __x,
    );
  }

  late final ___log10Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__log10');
  late final ___log10 = ___log10Ptr.asFunction<double Function(double)>();

  double modf(
    double __x,
    ffi.Pointer<ffi.Double> __iptr,
  ) {
    return _modf(
      __x,
      __iptr,
    );
  }

  late final _modfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Double>)>>('modf');
  late final _modf =
      _modfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Double>)>();

  double __modf(
    double __x,
    ffi.Pointer<ffi.Double> __iptr,
  ) {
    return ___modf(
      __x,
      __iptr,
    );
  }

  late final ___modfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Double>)>>('__modf');
  late final ___modf =
      ___modfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Double>)>();

  double expm1(
    double __x,
  ) {
    return _expm1(
      __x,
    );
  }

  late final _expm1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('expm1');
  late final _expm1 = _expm1Ptr.asFunction<double Function(double)>();

  double __expm1(
    double __x,
  ) {
    return ___expm1(
      __x,
    );
  }

  late final ___expm1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__expm1');
  late final ___expm1 = ___expm1Ptr.asFunction<double Function(double)>();

  double log1p(
    double __x,
  ) {
    return _log1p(
      __x,
    );
  }

  late final _log1pPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log1p');
  late final _log1p = _log1pPtr.asFunction<double Function(double)>();

  double __log1p(
    double __x,
  ) {
    return ___log1p(
      __x,
    );
  }

  late final ___log1pPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__log1p');
  late final ___log1p = ___log1pPtr.asFunction<double Function(double)>();

  double logb(
    double __x,
  ) {
    return _logb(
      __x,
    );
  }

  late final _logbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('logb');
  late final _logb = _logbPtr.asFunction<double Function(double)>();

  double __logb(
    double __x,
  ) {
    return ___logb(
      __x,
    );
  }

  late final ___logbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__logb');
  late final ___logb = ___logbPtr.asFunction<double Function(double)>();

  double exp2(
    double __x,
  ) {
    return _exp2(
      __x,
    );
  }

  late final _exp2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp2');
  late final _exp2 = _exp2Ptr.asFunction<double Function(double)>();

  double __exp2(
    double __x,
  ) {
    return ___exp2(
      __x,
    );
  }

  late final ___exp2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__exp2');
  late final ___exp2 = ___exp2Ptr.asFunction<double Function(double)>();

  double log2(
    double __x,
  ) {
    return _log2(
      __x,
    );
  }

  late final _log2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log2');
  late final _log2 = _log2Ptr.asFunction<double Function(double)>();

  double __log2(
    double __x,
  ) {
    return ___log2(
      __x,
    );
  }

  late final ___log2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__log2');
  late final ___log2 = ___log2Ptr.asFunction<double Function(double)>();

  double pow(
    double __x,
    double __y,
  ) {
    return _pow(
      __x,
      __y,
    );
  }

  late final _powPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'pow');
  late final _pow = _powPtr.asFunction<double Function(double, double)>();

  double __pow(
    double __x,
    double __y,
  ) {
    return ___pow(
      __x,
      __y,
    );
  }

  late final ___powPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__pow');
  late final ___pow = ___powPtr.asFunction<double Function(double, double)>();

  double sqrt(
    double __x,
  ) {
    return _sqrt(
      __x,
    );
  }

  late final _sqrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sqrt');
  late final _sqrt = _sqrtPtr.asFunction<double Function(double)>();

  double __sqrt(
    double __x,
  ) {
    return ___sqrt(
      __x,
    );
  }

  late final ___sqrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__sqrt');
  late final ___sqrt = ___sqrtPtr.asFunction<double Function(double)>();

  double hypot(
    double __x,
    double __y,
  ) {
    return _hypot(
      __x,
      __y,
    );
  }

  late final _hypotPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'hypot');
  late final _hypot = _hypotPtr.asFunction<double Function(double, double)>();

  double __hypot(
    double __x,
    double __y,
  ) {
    return ___hypot(
      __x,
      __y,
    );
  }

  late final ___hypotPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__hypot');
  late final ___hypot =
      ___hypotPtr.asFunction<double Function(double, double)>();

  double cbrt(
    double __x,
  ) {
    return _cbrt(
      __x,
    );
  }

  late final _cbrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cbrt');
  late final _cbrt = _cbrtPtr.asFunction<double Function(double)>();

  double __cbrt(
    double __x,
  ) {
    return ___cbrt(
      __x,
    );
  }

  late final ___cbrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__cbrt');
  late final ___cbrt = ___cbrtPtr.asFunction<double Function(double)>();

  double ceil(
    double __x,
  ) {
    return _ceil(
      __x,
    );
  }

  late final _ceilPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('ceil');
  late final _ceil = _ceilPtr.asFunction<double Function(double)>();

  double __ceil(
    double __x,
  ) {
    return ___ceil(
      __x,
    );
  }

  late final ___ceilPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__ceil');
  late final ___ceil = ___ceilPtr.asFunction<double Function(double)>();

  double fabs(
    double __x,
  ) {
    return _fabs(
      __x,
    );
  }

  late final _fabsPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('fabs');
  late final _fabs = _fabsPtr.asFunction<double Function(double)>();

  double __fabs(
    double __x,
  ) {
    return ___fabs(
      __x,
    );
  }

  late final ___fabsPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__fabs');
  late final ___fabs = ___fabsPtr.asFunction<double Function(double)>();

  double floor(
    double __x,
  ) {
    return _floor(
      __x,
    );
  }

  late final _floorPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('floor');
  late final _floor = _floorPtr.asFunction<double Function(double)>();

  double __floor(
    double __x,
  ) {
    return ___floor(
      __x,
    );
  }

  late final ___floorPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__floor');
  late final ___floor = ___floorPtr.asFunction<double Function(double)>();

  double fmod(
    double __x,
    double __y,
  ) {
    return _fmod(
      __x,
      __y,
    );
  }

  late final _fmodPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmod');
  late final _fmod = _fmodPtr.asFunction<double Function(double, double)>();

  double __fmod(
    double __x,
    double __y,
  ) {
    return ___fmod(
      __x,
      __y,
    );
  }

  late final ___fmodPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__fmod');
  late final ___fmod = ___fmodPtr.asFunction<double Function(double, double)>();

  int isinf(
    double __value,
  ) {
    return _isinf(
      __value,
    );
  }

  late final _isinfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('isinf');
  late final _isinf = _isinfPtr.asFunction<int Function(double)>();

  int finite(
    double __value,
  ) {
    return _finite(
      __value,
    );
  }

  late final _finitePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('finite');
  late final _finite = _finitePtr.asFunction<int Function(double)>();

  double drem(
    double __x,
    double __y,
  ) {
    return _drem(
      __x,
      __y,
    );
  }

  late final _dremPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'drem');
  late final _drem = _dremPtr.asFunction<double Function(double, double)>();

  double __drem(
    double __x,
    double __y,
  ) {
    return ___drem(
      __x,
      __y,
    );
  }

  late final ___dremPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__drem');
  late final ___drem = ___dremPtr.asFunction<double Function(double, double)>();

  double significand(
    double __x,
  ) {
    return _significand(
      __x,
    );
  }

  late final _significandPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'significand');
  late final _significand =
      _significandPtr.asFunction<double Function(double)>();

  double __significand(
    double __x,
  ) {
    return ___significand(
      __x,
    );
  }

  late final ___significandPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          '__significand');
  late final ___significand =
      ___significandPtr.asFunction<double Function(double)>();

  double copysign(
    double __x,
    double __y,
  ) {
    return _copysign(
      __x,
      __y,
    );
  }

  late final _copysignPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'copysign');
  late final _copysign =
      _copysignPtr.asFunction<double Function(double, double)>();

  double __copysign(
    double __x,
    double __y,
  ) {
    return ___copysign(
      __x,
      __y,
    );
  }

  late final ___copysignPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__copysign');
  late final ___copysign =
      ___copysignPtr.asFunction<double Function(double, double)>();

  double nan(
    ffi.Pointer<ffi.Char> __tagb,
  ) {
    return _nan(
      __tagb,
    );
  }

  late final _nanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'nan');
  late final _nan =
      _nanPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  double __nan(
    ffi.Pointer<ffi.Char> __tagb,
  ) {
    return ___nan(
      __tagb,
    );
  }

  late final ___nanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          '__nan');
  late final ___nan =
      ___nanPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int isnan(
    double __value,
  ) {
    return _isnan(
      __value,
    );
  }

  late final _isnanPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('isnan');
  late final _isnan = _isnanPtr.asFunction<int Function(double)>();

  double j0(
    double arg0,
  ) {
    return _j0(
      arg0,
    );
  }

  late final _j0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j0');
  late final _j0 = _j0Ptr.asFunction<double Function(double)>();

  double __j0(
    double arg0,
  ) {
    return ___j0(
      arg0,
    );
  }

  late final ___j0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__j0');
  late final ___j0 = ___j0Ptr.asFunction<double Function(double)>();

  double j1(
    double arg0,
  ) {
    return _j1(
      arg0,
    );
  }

  late final _j1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j1');
  late final _j1 = _j1Ptr.asFunction<double Function(double)>();

  double __j1(
    double arg0,
  ) {
    return ___j1(
      arg0,
    );
  }

  late final ___j1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__j1');
  late final ___j1 = ___j1Ptr.asFunction<double Function(double)>();

  double jn(
    int arg0,
    double arg1,
  ) {
    return _jn(
      arg0,
      arg1,
    );
  }

  late final _jnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          'jn');
  late final _jn = _jnPtr.asFunction<double Function(int, double)>();

  double __jn(
    int arg0,
    double arg1,
  ) {
    return ___jn(
      arg0,
      arg1,
    );
  }

  late final ___jnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          '__jn');
  late final ___jn = ___jnPtr.asFunction<double Function(int, double)>();

  double y0(
    double arg0,
  ) {
    return _y0(
      arg0,
    );
  }

  late final _y0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y0');
  late final _y0 = _y0Ptr.asFunction<double Function(double)>();

  double __y0(
    double arg0,
  ) {
    return ___y0(
      arg0,
    );
  }

  late final ___y0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__y0');
  late final ___y0 = ___y0Ptr.asFunction<double Function(double)>();

  double y1(
    double arg0,
  ) {
    return _y1(
      arg0,
    );
  }

  late final _y1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y1');
  late final _y1 = _y1Ptr.asFunction<double Function(double)>();

  double __y1(
    double arg0,
  ) {
    return ___y1(
      arg0,
    );
  }

  late final ___y1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__y1');
  late final ___y1 = ___y1Ptr.asFunction<double Function(double)>();

  double yn(
    int arg0,
    double arg1,
  ) {
    return _yn(
      arg0,
      arg1,
    );
  }

  late final _ynPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          'yn');
  late final _yn = _ynPtr.asFunction<double Function(int, double)>();

  double __yn(
    int arg0,
    double arg1,
  ) {
    return ___yn(
      arg0,
      arg1,
    );
  }

  late final ___ynPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          '__yn');
  late final ___yn = ___ynPtr.asFunction<double Function(int, double)>();

  double erf(
    double arg0,
  ) {
    return _erf(
      arg0,
    );
  }

  late final _erfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erf');
  late final _erf = _erfPtr.asFunction<double Function(double)>();

  double __erf(
    double arg0,
  ) {
    return ___erf(
      arg0,
    );
  }

  late final ___erfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__erf');
  late final ___erf = ___erfPtr.asFunction<double Function(double)>();

  double erfc(
    double arg0,
  ) {
    return _erfc(
      arg0,
    );
  }

  late final _erfcPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erfc');
  late final _erfc = _erfcPtr.asFunction<double Function(double)>();

  double __erfc(
    double arg0,
  ) {
    return ___erfc(
      arg0,
    );
  }

  late final ___erfcPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__erfc');
  late final ___erfc = ___erfcPtr.asFunction<double Function(double)>();

  double lgamma(
    double arg0,
  ) {
    return _lgamma(
      arg0,
    );
  }

  late final _lgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('lgamma');
  late final _lgamma = _lgammaPtr.asFunction<double Function(double)>();

  double __lgamma(
    double arg0,
  ) {
    return ___lgamma(
      arg0,
    );
  }

  late final ___lgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__lgamma');
  late final ___lgamma = ___lgammaPtr.asFunction<double Function(double)>();

  double tgamma(
    double arg0,
  ) {
    return _tgamma(
      arg0,
    );
  }

  late final _tgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tgamma');
  late final _tgamma = _tgammaPtr.asFunction<double Function(double)>();

  double __tgamma(
    double arg0,
  ) {
    return ___tgamma(
      arg0,
    );
  }

  late final ___tgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__tgamma');
  late final ___tgamma = ___tgammaPtr.asFunction<double Function(double)>();

  double gamma(
    double arg0,
  ) {
    return _gamma(
      arg0,
    );
  }

  late final _gammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('gamma');
  late final _gamma = _gammaPtr.asFunction<double Function(double)>();

  double __gamma(
    double arg0,
  ) {
    return ___gamma(
      arg0,
    );
  }

  late final ___gammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__gamma');
  late final ___gamma = ___gammaPtr.asFunction<double Function(double)>();

  double lgamma_r(
    double arg0,
    ffi.Pointer<ffi.Int> __signgamp,
  ) {
    return _lgamma_r(
      arg0,
      __signgamp,
    );
  }

  late final _lgamma_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int>)>>('lgamma_r');
  late final _lgamma_r =
      _lgamma_rPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double __lgamma_r(
    double arg0,
    ffi.Pointer<ffi.Int> __signgamp,
  ) {
    return ___lgamma_r(
      arg0,
      __signgamp,
    );
  }

  late final ___lgamma_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int>)>>('__lgamma_r');
  late final ___lgamma_r = ___lgamma_rPtr
      .asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double rint(
    double __x,
  ) {
    return _rint(
      __x,
    );
  }

  late final _rintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('rint');
  late final _rint = _rintPtr.asFunction<double Function(double)>();

  double __rint(
    double __x,
  ) {
    return ___rint(
      __x,
    );
  }

  late final ___rintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__rint');
  late final ___rint = ___rintPtr.asFunction<double Function(double)>();

  double nextafter(
    double __x,
    double __y,
  ) {
    return _nextafter(
      __x,
      __y,
    );
  }

  late final _nextafterPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'nextafter');
  late final _nextafter =
      _nextafterPtr.asFunction<double Function(double, double)>();

  double __nextafter(
    double __x,
    double __y,
  ) {
    return ___nextafter(
      __x,
      __y,
    );
  }

  late final ___nextafterPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__nextafter');
  late final ___nextafter =
      ___nextafterPtr.asFunction<double Function(double, double)>();

  double remainder(
    double __x,
    double __y,
  ) {
    return _remainder(
      __x,
      __y,
    );
  }

  late final _remainderPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'remainder');
  late final _remainder =
      _remainderPtr.asFunction<double Function(double, double)>();

  double __remainder(
    double __x,
    double __y,
  ) {
    return ___remainder(
      __x,
      __y,
    );
  }

  late final ___remainderPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__remainder');
  late final ___remainder =
      ___remainderPtr.asFunction<double Function(double, double)>();

  double scalbn(
    double __x,
    int __n,
  ) {
    return _scalbn(
      __x,
      __n,
    );
  }

  late final _scalbnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          'scalbn');
  late final _scalbn = _scalbnPtr.asFunction<double Function(double, int)>();

  double __scalbn(
    double __x,
    int __n,
  ) {
    return ___scalbn(
      __x,
      __n,
    );
  }

  late final ___scalbnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          '__scalbn');
  late final ___scalbn =
      ___scalbnPtr.asFunction<double Function(double, int)>();

  int ilogb(
    double __x,
  ) {
    return _ilogb(
      __x,
    );
  }

  late final _ilogbPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('ilogb');
  late final _ilogb = _ilogbPtr.asFunction<int Function(double)>();

  int __ilogb(
    double __x,
  ) {
    return ___ilogb(
      __x,
    );
  }

  late final ___ilogbPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('__ilogb');
  late final ___ilogb = ___ilogbPtr.asFunction<int Function(double)>();

  double scalbln(
    double __x,
    int __n,
  ) {
    return _scalbln(
      __x,
      __n,
    );
  }

  late final _scalblnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Long)>>(
          'scalbln');
  late final _scalbln = _scalblnPtr.asFunction<double Function(double, int)>();

  double __scalbln(
    double __x,
    int __n,
  ) {
    return ___scalbln(
      __x,
      __n,
    );
  }

  late final ___scalblnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Long)>>(
          '__scalbln');
  late final ___scalbln =
      ___scalblnPtr.asFunction<double Function(double, int)>();

  double nearbyint(
    double __x,
  ) {
    return _nearbyint(
      __x,
    );
  }

  late final _nearbyintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('nearbyint');
  late final _nearbyint = _nearbyintPtr.asFunction<double Function(double)>();

  double __nearbyint(
    double __x,
  ) {
    return ___nearbyint(
      __x,
    );
  }

  late final ___nearbyintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          '__nearbyint');
  late final ___nearbyint =
      ___nearbyintPtr.asFunction<double Function(double)>();

  double round(
    double __x,
  ) {
    return _round(
      __x,
    );
  }

  late final _roundPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('round');
  late final _round = _roundPtr.asFunction<double Function(double)>();

  double __round(
    double __x,
  ) {
    return ___round(
      __x,
    );
  }

  late final ___roundPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__round');
  late final ___round = ___roundPtr.asFunction<double Function(double)>();

  double trunc(
    double __x,
  ) {
    return _trunc(
      __x,
    );
  }

  late final _truncPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('trunc');
  late final _trunc = _truncPtr.asFunction<double Function(double)>();

  double __trunc(
    double __x,
  ) {
    return ___trunc(
      __x,
    );
  }

  late final ___truncPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__trunc');
  late final ___trunc = ___truncPtr.asFunction<double Function(double)>();

  double remquo(
    double __x,
    double __y,
    ffi.Pointer<ffi.Int> __quo,
  ) {
    return _remquo(
      __x,
      __y,
      __quo,
    );
  }

  late final _remquoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Pointer<ffi.Int>)>>('remquo');
  late final _remquo = _remquoPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int>)>();

  double __remquo(
    double __x,
    double __y,
    ffi.Pointer<ffi.Int> __quo,
  ) {
    return ___remquo(
      __x,
      __y,
      __quo,
    );
  }

  late final ___remquoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Pointer<ffi.Int>)>>('__remquo');
  late final ___remquo = ___remquoPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int>)>();

  int lrint(
    double __x,
  ) {
    return _lrint(
      __x,
    );
  }

  late final _lrintPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Double)>>('lrint');
  late final _lrint = _lrintPtr.asFunction<int Function(double)>();

  int __lrint(
    double __x,
  ) {
    return ___lrint(
      __x,
    );
  }

  late final ___lrintPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Double)>>('__lrint');
  late final ___lrint = ___lrintPtr.asFunction<int Function(double)>();

  int llrint(
    double __x,
  ) {
    return _llrint(
      __x,
    );
  }

  late final _llrintPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>('llrint');
  late final _llrint = _llrintPtr.asFunction<int Function(double)>();

  int __llrint(
    double __x,
  ) {
    return ___llrint(
      __x,
    );
  }

  late final ___llrintPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>(
          '__llrint');
  late final ___llrint = ___llrintPtr.asFunction<int Function(double)>();

  int lround(
    double __x,
  ) {
    return _lround(
      __x,
    );
  }

  late final _lroundPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Double)>>('lround');
  late final _lround = _lroundPtr.asFunction<int Function(double)>();

  int __lround(
    double __x,
  ) {
    return ___lround(
      __x,
    );
  }

  late final ___lroundPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Double)>>('__lround');
  late final ___lround = ___lroundPtr.asFunction<int Function(double)>();

  int llround(
    double __x,
  ) {
    return _llround(
      __x,
    );
  }

  late final _llroundPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>('llround');
  late final _llround = _llroundPtr.asFunction<int Function(double)>();

  int __llround(
    double __x,
  ) {
    return ___llround(
      __x,
    );
  }

  late final ___llroundPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>(
          '__llround');
  late final ___llround = ___llroundPtr.asFunction<int Function(double)>();

  double fdim(
    double __x,
    double __y,
  ) {
    return _fdim(
      __x,
      __y,
    );
  }

  late final _fdimPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fdim');
  late final _fdim = _fdimPtr.asFunction<double Function(double, double)>();

  double __fdim(
    double __x,
    double __y,
  ) {
    return ___fdim(
      __x,
      __y,
    );
  }

  late final ___fdimPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__fdim');
  late final ___fdim = ___fdimPtr.asFunction<double Function(double, double)>();

  double fmax(
    double __x,
    double __y,
  ) {
    return _fmax(
      __x,
      __y,
    );
  }

  late final _fmaxPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmax');
  late final _fmax = _fmaxPtr.asFunction<double Function(double, double)>();

  double __fmax(
    double __x,
    double __y,
  ) {
    return ___fmax(
      __x,
      __y,
    );
  }

  late final ___fmaxPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__fmax');
  late final ___fmax = ___fmaxPtr.asFunction<double Function(double, double)>();

  double fmin(
    double __x,
    double __y,
  ) {
    return _fmin(
      __x,
      __y,
    );
  }

  late final _fminPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmin');
  late final _fmin = _fminPtr.asFunction<double Function(double, double)>();

  double __fmin(
    double __x,
    double __y,
  ) {
    return ___fmin(
      __x,
      __y,
    );
  }

  late final ___fminPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__fmin');
  late final ___fmin = ___fminPtr.asFunction<double Function(double, double)>();

  double fma(
    double __x,
    double __y,
    double __z,
  ) {
    return _fma(
      __x,
      __y,
      __z,
    );
  }

  late final _fmaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, ffi.Double)>>('fma');
  late final _fma =
      _fmaPtr.asFunction<double Function(double, double, double)>();

  double __fma(
    double __x,
    double __y,
    double __z,
  ) {
    return ___fma(
      __x,
      __y,
      __z,
    );
  }

  late final ___fmaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, ffi.Double)>>('__fma');
  late final ___fma =
      ___fmaPtr.asFunction<double Function(double, double, double)>();

  double scalb(
    double __x,
    double __n,
  ) {
    return _scalb(
      __x,
      __n,
    );
  }

  late final _scalbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'scalb');
  late final _scalb = _scalbPtr.asFunction<double Function(double, double)>();

  double __scalb(
    double __x,
    double __n,
  ) {
    return ___scalb(
      __x,
      __n,
    );
  }

  late final ___scalbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__scalb');
  late final ___scalb =
      ___scalbPtr.asFunction<double Function(double, double)>();

  int __fpclassifyf(
    double __value,
  ) {
    return ___fpclassifyf(
      __value,
    );
  }

  late final ___fpclassifyfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('__fpclassifyf');
  late final ___fpclassifyf =
      ___fpclassifyfPtr.asFunction<int Function(double)>();

  int __signbitf(
    double __value,
  ) {
    return ___signbitf(
      __value,
    );
  }

  late final ___signbitfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('__signbitf');
  late final ___signbitf = ___signbitfPtr.asFunction<int Function(double)>();

  int __isinff(
    double __value,
  ) {
    return ___isinff(
      __value,
    );
  }

  late final ___isinffPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('__isinff');
  late final ___isinff = ___isinffPtr.asFunction<int Function(double)>();

  int __finitef(
    double __value,
  ) {
    return ___finitef(
      __value,
    );
  }

  late final ___finitefPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('__finitef');
  late final ___finitef = ___finitefPtr.asFunction<int Function(double)>();

  int __isnanf(
    double __value,
  ) {
    return ___isnanf(
      __value,
    );
  }

  late final ___isnanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('__isnanf');
  late final ___isnanf = ___isnanfPtr.asFunction<int Function(double)>();

  int __iseqsigf(
    double __x,
    double __y,
  ) {
    return ___iseqsigf(
      __x,
      __y,
    );
  }

  late final ___iseqsigfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float, ffi.Float)>>(
          '__iseqsigf');
  late final ___iseqsigf =
      ___iseqsigfPtr.asFunction<int Function(double, double)>();

  int __issignalingf(
    double __value,
  ) {
    return ___issignalingf(
      __value,
    );
  }

  late final ___issignalingfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>(
          '__issignalingf');
  late final ___issignalingf =
      ___issignalingfPtr.asFunction<int Function(double)>();

  double acosf(
    double __x,
  ) {
    return _acosf(
      __x,
    );
  }

  late final _acosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acosf');
  late final _acosf = _acosfPtr.asFunction<double Function(double)>();

  double __acosf(
    double __x,
  ) {
    return ___acosf(
      __x,
    );
  }

  late final ___acosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__acosf');
  late final ___acosf = ___acosfPtr.asFunction<double Function(double)>();

  double asinf(
    double __x,
  ) {
    return _asinf(
      __x,
    );
  }

  late final _asinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinf');
  late final _asinf = _asinfPtr.asFunction<double Function(double)>();

  double __asinf(
    double __x,
  ) {
    return ___asinf(
      __x,
    );
  }

  late final ___asinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__asinf');
  late final ___asinf = ___asinfPtr.asFunction<double Function(double)>();

  double atanf(
    double __x,
  ) {
    return _atanf(
      __x,
    );
  }

  late final _atanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanf');
  late final _atanf = _atanfPtr.asFunction<double Function(double)>();

  double __atanf(
    double __x,
  ) {
    return ___atanf(
      __x,
    );
  }

  late final ___atanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__atanf');
  late final ___atanf = ___atanfPtr.asFunction<double Function(double)>();

  double atan2f(
    double __y,
    double __x,
  ) {
    return _atan2f(
      __y,
      __x,
    );
  }

  late final _atan2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'atan2f');
  late final _atan2f = _atan2fPtr.asFunction<double Function(double, double)>();

  double __atan2f(
    double __y,
    double __x,
  ) {
    return ___atan2f(
      __y,
      __x,
    );
  }

  late final ___atan2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__atan2f');
  late final ___atan2f =
      ___atan2fPtr.asFunction<double Function(double, double)>();

  double cosf(
    double __x,
  ) {
    return _cosf(
      __x,
    );
  }

  late final _cosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cosf');
  late final _cosf = _cosfPtr.asFunction<double Function(double)>();

  double __cosf(
    double __x,
  ) {
    return ___cosf(
      __x,
    );
  }

  late final ___cosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__cosf');
  late final ___cosf = ___cosfPtr.asFunction<double Function(double)>();

  double sinf(
    double __x,
  ) {
    return _sinf(
      __x,
    );
  }

  late final _sinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinf');
  late final _sinf = _sinfPtr.asFunction<double Function(double)>();

  double __sinf(
    double __x,
  ) {
    return ___sinf(
      __x,
    );
  }

  late final ___sinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__sinf');
  late final ___sinf = ___sinfPtr.asFunction<double Function(double)>();

  double tanf(
    double __x,
  ) {
    return _tanf(
      __x,
    );
  }

  late final _tanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanf');
  late final _tanf = _tanfPtr.asFunction<double Function(double)>();

  double __tanf(
    double __x,
  ) {
    return ___tanf(
      __x,
    );
  }

  late final ___tanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__tanf');
  late final ___tanf = ___tanfPtr.asFunction<double Function(double)>();

  double coshf(
    double __x,
  ) {
    return _coshf(
      __x,
    );
  }

  late final _coshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('coshf');
  late final _coshf = _coshfPtr.asFunction<double Function(double)>();

  double __coshf(
    double __x,
  ) {
    return ___coshf(
      __x,
    );
  }

  late final ___coshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__coshf');
  late final ___coshf = ___coshfPtr.asFunction<double Function(double)>();

  double sinhf(
    double __x,
  ) {
    return _sinhf(
      __x,
    );
  }

  late final _sinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinhf');
  late final _sinhf = _sinhfPtr.asFunction<double Function(double)>();

  double __sinhf(
    double __x,
  ) {
    return ___sinhf(
      __x,
    );
  }

  late final ___sinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__sinhf');
  late final ___sinhf = ___sinhfPtr.asFunction<double Function(double)>();

  double tanhf(
    double __x,
  ) {
    return _tanhf(
      __x,
    );
  }

  late final _tanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanhf');
  late final _tanhf = _tanhfPtr.asFunction<double Function(double)>();

  double __tanhf(
    double __x,
  ) {
    return ___tanhf(
      __x,
    );
  }

  late final ___tanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__tanhf');
  late final ___tanhf = ___tanhfPtr.asFunction<double Function(double)>();

  double acoshf(
    double __x,
  ) {
    return _acoshf(
      __x,
    );
  }

  late final _acoshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acoshf');
  late final _acoshf = _acoshfPtr.asFunction<double Function(double)>();

  double __acoshf(
    double __x,
  ) {
    return ___acoshf(
      __x,
    );
  }

  late final ___acoshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__acoshf');
  late final ___acoshf = ___acoshfPtr.asFunction<double Function(double)>();

  double asinhf(
    double __x,
  ) {
    return _asinhf(
      __x,
    );
  }

  late final _asinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinhf');
  late final _asinhf = _asinhfPtr.asFunction<double Function(double)>();

  double __asinhf(
    double __x,
  ) {
    return ___asinhf(
      __x,
    );
  }

  late final ___asinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__asinhf');
  late final ___asinhf = ___asinhfPtr.asFunction<double Function(double)>();

  double atanhf(
    double __x,
  ) {
    return _atanhf(
      __x,
    );
  }

  late final _atanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanhf');
  late final _atanhf = _atanhfPtr.asFunction<double Function(double)>();

  double __atanhf(
    double __x,
  ) {
    return ___atanhf(
      __x,
    );
  }

  late final ___atanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__atanhf');
  late final ___atanhf = ___atanhfPtr.asFunction<double Function(double)>();

  double expf(
    double __x,
  ) {
    return _expf(
      __x,
    );
  }

  late final _expfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expf');
  late final _expf = _expfPtr.asFunction<double Function(double)>();

  double __expf(
    double __x,
  ) {
    return ___expf(
      __x,
    );
  }

  late final ___expfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__expf');
  late final ___expf = ___expfPtr.asFunction<double Function(double)>();

  double frexpf(
    double __x,
    ffi.Pointer<ffi.Int> __exponent,
  ) {
    return _frexpf(
      __x,
      __exponent,
    );
  }

  late final _frexpfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Int>)>>('frexpf');
  late final _frexpf =
      _frexpfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double __frexpf(
    double __x,
    ffi.Pointer<ffi.Int> __exponent,
  ) {
    return ___frexpf(
      __x,
      __exponent,
    );
  }

  late final ___frexpfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Int>)>>('__frexpf');
  late final ___frexpf =
      ___frexpfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double ldexpf(
    double __x,
    int __exponent,
  ) {
    return _ldexpf(
      __x,
      __exponent,
    );
  }

  late final _ldexpfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>(
          'ldexpf');
  late final _ldexpf = _ldexpfPtr.asFunction<double Function(double, int)>();

  double __ldexpf(
    double __x,
    int __exponent,
  ) {
    return ___ldexpf(
      __x,
      __exponent,
    );
  }

  late final ___ldexpfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>(
          '__ldexpf');
  late final ___ldexpf =
      ___ldexpfPtr.asFunction<double Function(double, int)>();

  double logf(
    double __x,
  ) {
    return _logf(
      __x,
    );
  }

  late final _logfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logf');
  late final _logf = _logfPtr.asFunction<double Function(double)>();

  double __logf(
    double __x,
  ) {
    return ___logf(
      __x,
    );
  }

  late final ___logfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__logf');
  late final ___logf = ___logfPtr.asFunction<double Function(double)>();

  double log10f(
    double __x,
  ) {
    return _log10f(
      __x,
    );
  }

  late final _log10fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log10f');
  late final _log10f = _log10fPtr.asFunction<double Function(double)>();

  double __log10f(
    double __x,
  ) {
    return ___log10f(
      __x,
    );
  }

  late final ___log10fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__log10f');
  late final ___log10f = ___log10fPtr.asFunction<double Function(double)>();

  double modff(
    double __x,
    ffi.Pointer<ffi.Float> __iptr,
  ) {
    return _modff(
      __x,
      __iptr,
    );
  }

  late final _modffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Float>)>>('modff');
  late final _modff =
      _modffPtr.asFunction<double Function(double, ffi.Pointer<ffi.Float>)>();

  double __modff(
    double __x,
    ffi.Pointer<ffi.Float> __iptr,
  ) {
    return ___modff(
      __x,
      __iptr,
    );
  }

  late final ___modffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Float>)>>('__modff');
  late final ___modff =
      ___modffPtr.asFunction<double Function(double, ffi.Pointer<ffi.Float>)>();

  double expm1f(
    double __x,
  ) {
    return _expm1f(
      __x,
    );
  }

  late final _expm1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expm1f');
  late final _expm1f = _expm1fPtr.asFunction<double Function(double)>();

  double __expm1f(
    double __x,
  ) {
    return ___expm1f(
      __x,
    );
  }

  late final ___expm1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__expm1f');
  late final ___expm1f = ___expm1fPtr.asFunction<double Function(double)>();

  double log1pf(
    double __x,
  ) {
    return _log1pf(
      __x,
    );
  }

  late final _log1pfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log1pf');
  late final _log1pf = _log1pfPtr.asFunction<double Function(double)>();

  double __log1pf(
    double __x,
  ) {
    return ___log1pf(
      __x,
    );
  }

  late final ___log1pfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__log1pf');
  late final ___log1pf = ___log1pfPtr.asFunction<double Function(double)>();

  double logbf(
    double __x,
  ) {
    return _logbf(
      __x,
    );
  }

  late final _logbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logbf');
  late final _logbf = _logbfPtr.asFunction<double Function(double)>();

  double __logbf(
    double __x,
  ) {
    return ___logbf(
      __x,
    );
  }

  late final ___logbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__logbf');
  late final ___logbf = ___logbfPtr.asFunction<double Function(double)>();

  double exp2f(
    double __x,
  ) {
    return _exp2f(
      __x,
    );
  }

  late final _exp2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('exp2f');
  late final _exp2f = _exp2fPtr.asFunction<double Function(double)>();

  double __exp2f(
    double __x,
  ) {
    return ___exp2f(
      __x,
    );
  }

  late final ___exp2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__exp2f');
  late final ___exp2f = ___exp2fPtr.asFunction<double Function(double)>();

  double log2f(
    double __x,
  ) {
    return _log2f(
      __x,
    );
  }

  late final _log2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log2f');
  late final _log2f = _log2fPtr.asFunction<double Function(double)>();

  double __log2f(
    double __x,
  ) {
    return ___log2f(
      __x,
    );
  }

  late final ___log2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__log2f');
  late final ___log2f = ___log2fPtr.asFunction<double Function(double)>();

  double powf(
    double __x,
    double __y,
  ) {
    return _powf(
      __x,
      __y,
    );
  }

  late final _powfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'powf');
  late final _powf = _powfPtr.asFunction<double Function(double, double)>();

  double __powf(
    double __x,
    double __y,
  ) {
    return ___powf(
      __x,
      __y,
    );
  }

  late final ___powfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__powf');
  late final ___powf = ___powfPtr.asFunction<double Function(double, double)>();

  double sqrtf(
    double __x,
  ) {
    return _sqrtf(
      __x,
    );
  }

  late final _sqrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sqrtf');
  late final _sqrtf = _sqrtfPtr.asFunction<double Function(double)>();

  double __sqrtf(
    double __x,
  ) {
    return ___sqrtf(
      __x,
    );
  }

  late final ___sqrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__sqrtf');
  late final ___sqrtf = ___sqrtfPtr.asFunction<double Function(double)>();

  double hypotf(
    double __x,
    double __y,
  ) {
    return _hypotf(
      __x,
      __y,
    );
  }

  late final _hypotfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'hypotf');
  late final _hypotf = _hypotfPtr.asFunction<double Function(double, double)>();

  double __hypotf(
    double __x,
    double __y,
  ) {
    return ___hypotf(
      __x,
      __y,
    );
  }

  late final ___hypotfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__hypotf');
  late final ___hypotf =
      ___hypotfPtr.asFunction<double Function(double, double)>();

  double cbrtf(
    double __x,
  ) {
    return _cbrtf(
      __x,
    );
  }

  late final _cbrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cbrtf');
  late final _cbrtf = _cbrtfPtr.asFunction<double Function(double)>();

  double __cbrtf(
    double __x,
  ) {
    return ___cbrtf(
      __x,
    );
  }

  late final ___cbrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__cbrtf');
  late final ___cbrtf = ___cbrtfPtr.asFunction<double Function(double)>();

  double ceilf(
    double __x,
  ) {
    return _ceilf(
      __x,
    );
  }

  late final _ceilfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('ceilf');
  late final _ceilf = _ceilfPtr.asFunction<double Function(double)>();

  double __ceilf(
    double __x,
  ) {
    return ___ceilf(
      __x,
    );
  }

  late final ___ceilfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__ceilf');
  late final ___ceilf = ___ceilfPtr.asFunction<double Function(double)>();

  double fabsf(
    double __x,
  ) {
    return _fabsf(
      __x,
    );
  }

  late final _fabsfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('fabsf');
  late final _fabsf = _fabsfPtr.asFunction<double Function(double)>();

  double __fabsf(
    double __x,
  ) {
    return ___fabsf(
      __x,
    );
  }

  late final ___fabsfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__fabsf');
  late final ___fabsf = ___fabsfPtr.asFunction<double Function(double)>();

  double floorf(
    double __x,
  ) {
    return _floorf(
      __x,
    );
  }

  late final _floorfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('floorf');
  late final _floorf = _floorfPtr.asFunction<double Function(double)>();

  double __floorf(
    double __x,
  ) {
    return ___floorf(
      __x,
    );
  }

  late final ___floorfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__floorf');
  late final ___floorf = ___floorfPtr.asFunction<double Function(double)>();

  double fmodf(
    double __x,
    double __y,
  ) {
    return _fmodf(
      __x,
      __y,
    );
  }

  late final _fmodfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmodf');
  late final _fmodf = _fmodfPtr.asFunction<double Function(double, double)>();

  double __fmodf(
    double __x,
    double __y,
  ) {
    return ___fmodf(
      __x,
      __y,
    );
  }

  late final ___fmodfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__fmodf');
  late final ___fmodf =
      ___fmodfPtr.asFunction<double Function(double, double)>();

  int isinff(
    double __value,
  ) {
    return _isinff(
      __value,
    );
  }

  late final _isinffPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('isinff');
  late final _isinff = _isinffPtr.asFunction<int Function(double)>();

  int finitef(
    double __value,
  ) {
    return _finitef(
      __value,
    );
  }

  late final _finitefPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('finitef');
  late final _finitef = _finitefPtr.asFunction<int Function(double)>();

  double dremf(
    double __x,
    double __y,
  ) {
    return _dremf(
      __x,
      __y,
    );
  }

  late final _dremfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'dremf');
  late final _dremf = _dremfPtr.asFunction<double Function(double, double)>();

  double __dremf(
    double __x,
    double __y,
  ) {
    return ___dremf(
      __x,
      __y,
    );
  }

  late final ___dremfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__dremf');
  late final ___dremf =
      ___dremfPtr.asFunction<double Function(double, double)>();

  double significandf(
    double __x,
  ) {
    return _significandf(
      __x,
    );
  }

  late final _significandfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>(
          'significandf');
  late final _significandf =
      _significandfPtr.asFunction<double Function(double)>();

  double __significandf(
    double __x,
  ) {
    return ___significandf(
      __x,
    );
  }

  late final ___significandfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>(
          '__significandf');
  late final ___significandf =
      ___significandfPtr.asFunction<double Function(double)>();

  double copysignf(
    double __x,
    double __y,
  ) {
    return _copysignf(
      __x,
      __y,
    );
  }

  late final _copysignfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'copysignf');
  late final _copysignf =
      _copysignfPtr.asFunction<double Function(double, double)>();

  double __copysignf(
    double __x,
    double __y,
  ) {
    return ___copysignf(
      __x,
      __y,
    );
  }

  late final ___copysignfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__copysignf');
  late final ___copysignf =
      ___copysignfPtr.asFunction<double Function(double, double)>();

  double nanf(
    ffi.Pointer<ffi.Char> __tagb,
  ) {
    return _nanf(
      __tagb,
    );
  }

  late final _nanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ffi.Char>)>>(
          'nanf');
  late final _nanf =
      _nanfPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  double __nanf(
    ffi.Pointer<ffi.Char> __tagb,
  ) {
    return ___nanf(
      __tagb,
    );
  }

  late final ___nanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ffi.Char>)>>(
          '__nanf');
  late final ___nanf =
      ___nanfPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int isnanf(
    double __value,
  ) {
    return _isnanf(
      __value,
    );
  }

  late final _isnanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('isnanf');
  late final _isnanf = _isnanfPtr.asFunction<int Function(double)>();

  double j0f(
    double arg0,
  ) {
    return _j0f(
      arg0,
    );
  }

  late final _j0fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('j0f');
  late final _j0f = _j0fPtr.asFunction<double Function(double)>();

  double __j0f(
    double arg0,
  ) {
    return ___j0f(
      arg0,
    );
  }

  late final ___j0fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__j0f');
  late final ___j0f = ___j0fPtr.asFunction<double Function(double)>();

  double j1f(
    double arg0,
  ) {
    return _j1f(
      arg0,
    );
  }

  late final _j1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('j1f');
  late final _j1f = _j1fPtr.asFunction<double Function(double)>();

  double __j1f(
    double arg0,
  ) {
    return ___j1f(
      arg0,
    );
  }

  late final ___j1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__j1f');
  late final ___j1f = ___j1fPtr.asFunction<double Function(double)>();

  double jnf(
    int arg0,
    double arg1,
  ) {
    return _jnf(
      arg0,
      arg1,
    );
  }

  late final _jnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int, ffi.Float)>>(
          'jnf');
  late final _jnf = _jnfPtr.asFunction<double Function(int, double)>();

  double __jnf(
    int arg0,
    double arg1,
  ) {
    return ___jnf(
      arg0,
      arg1,
    );
  }

  late final ___jnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int, ffi.Float)>>(
          '__jnf');
  late final ___jnf = ___jnfPtr.asFunction<double Function(int, double)>();

  double y0f(
    double arg0,
  ) {
    return _y0f(
      arg0,
    );
  }

  late final _y0fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('y0f');
  late final _y0f = _y0fPtr.asFunction<double Function(double)>();

  double __y0f(
    double arg0,
  ) {
    return ___y0f(
      arg0,
    );
  }

  late final ___y0fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__y0f');
  late final ___y0f = ___y0fPtr.asFunction<double Function(double)>();

  double y1f(
    double arg0,
  ) {
    return _y1f(
      arg0,
    );
  }

  late final _y1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('y1f');
  late final _y1f = _y1fPtr.asFunction<double Function(double)>();

  double __y1f(
    double arg0,
  ) {
    return ___y1f(
      arg0,
    );
  }

  late final ___y1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__y1f');
  late final ___y1f = ___y1fPtr.asFunction<double Function(double)>();

  double ynf(
    int arg0,
    double arg1,
  ) {
    return _ynf(
      arg0,
      arg1,
    );
  }

  late final _ynfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int, ffi.Float)>>(
          'ynf');
  late final _ynf = _ynfPtr.asFunction<double Function(int, double)>();

  double __ynf(
    int arg0,
    double arg1,
  ) {
    return ___ynf(
      arg0,
      arg1,
    );
  }

  late final ___ynfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int, ffi.Float)>>(
          '__ynf');
  late final ___ynf = ___ynfPtr.asFunction<double Function(int, double)>();

  double erff(
    double arg0,
  ) {
    return _erff(
      arg0,
    );
  }

  late final _erffPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erff');
  late final _erff = _erffPtr.asFunction<double Function(double)>();

  double __erff(
    double arg0,
  ) {
    return ___erff(
      arg0,
    );
  }

  late final ___erffPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__erff');
  late final ___erff = ___erffPtr.asFunction<double Function(double)>();

  double erfcf(
    double arg0,
  ) {
    return _erfcf(
      arg0,
    );
  }

  late final _erfcfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erfcf');
  late final _erfcf = _erfcfPtr.asFunction<double Function(double)>();

  double __erfcf(
    double arg0,
  ) {
    return ___erfcf(
      arg0,
    );
  }

  late final ___erfcfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__erfcf');
  late final ___erfcf = ___erfcfPtr.asFunction<double Function(double)>();

  double lgammaf(
    double arg0,
  ) {
    return _lgammaf(
      arg0,
    );
  }

  late final _lgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('lgammaf');
  late final _lgammaf = _lgammafPtr.asFunction<double Function(double)>();

  double __lgammaf(
    double arg0,
  ) {
    return ___lgammaf(
      arg0,
    );
  }

  late final ___lgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__lgammaf');
  late final ___lgammaf = ___lgammafPtr.asFunction<double Function(double)>();

  double tgammaf(
    double arg0,
  ) {
    return _tgammaf(
      arg0,
    );
  }

  late final _tgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tgammaf');
  late final _tgammaf = _tgammafPtr.asFunction<double Function(double)>();

  double __tgammaf(
    double arg0,
  ) {
    return ___tgammaf(
      arg0,
    );
  }

  late final ___tgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__tgammaf');
  late final ___tgammaf = ___tgammafPtr.asFunction<double Function(double)>();

  double gammaf(
    double arg0,
  ) {
    return _gammaf(
      arg0,
    );
  }

  late final _gammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('gammaf');
  late final _gammaf = _gammafPtr.asFunction<double Function(double)>();

  double __gammaf(
    double arg0,
  ) {
    return ___gammaf(
      arg0,
    );
  }

  late final ___gammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__gammaf');
  late final ___gammaf = ___gammafPtr.asFunction<double Function(double)>();

  double lgammaf_r(
    double arg0,
    ffi.Pointer<ffi.Int> __signgamp,
  ) {
    return _lgammaf_r(
      arg0,
      __signgamp,
    );
  }

  late final _lgammaf_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Int>)>>('lgammaf_r');
  late final _lgammaf_r =
      _lgammaf_rPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double __lgammaf_r(
    double arg0,
    ffi.Pointer<ffi.Int> __signgamp,
  ) {
    return ___lgammaf_r(
      arg0,
      __signgamp,
    );
  }

  late final ___lgammaf_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Int>)>>('__lgammaf_r');
  late final ___lgammaf_r = ___lgammaf_rPtr
      .asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double rintf(
    double __x,
  ) {
    return _rintf(
      __x,
    );
  }

  late final _rintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('rintf');
  late final _rintf = _rintfPtr.asFunction<double Function(double)>();

  double __rintf(
    double __x,
  ) {
    return ___rintf(
      __x,
    );
  }

  late final ___rintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__rintf');
  late final ___rintf = ___rintfPtr.asFunction<double Function(double)>();

  double nextafterf(
    double __x,
    double __y,
  ) {
    return _nextafterf(
      __x,
      __y,
    );
  }

  late final _nextafterfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'nextafterf');
  late final _nextafterf =
      _nextafterfPtr.asFunction<double Function(double, double)>();

  double __nextafterf(
    double __x,
    double __y,
  ) {
    return ___nextafterf(
      __x,
      __y,
    );
  }

  late final ___nextafterfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__nextafterf');
  late final ___nextafterf =
      ___nextafterfPtr.asFunction<double Function(double, double)>();

  double remainderf(
    double __x,
    double __y,
  ) {
    return _remainderf(
      __x,
      __y,
    );
  }

  late final _remainderfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'remainderf');
  late final _remainderf =
      _remainderfPtr.asFunction<double Function(double, double)>();

  double __remainderf(
    double __x,
    double __y,
  ) {
    return ___remainderf(
      __x,
      __y,
    );
  }

  late final ___remainderfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__remainderf');
  late final ___remainderf =
      ___remainderfPtr.asFunction<double Function(double, double)>();

  double scalbnf(
    double __x,
    int __n,
  ) {
    return _scalbnf(
      __x,
      __n,
    );
  }

  late final _scalbnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>(
          'scalbnf');
  late final _scalbnf = _scalbnfPtr.asFunction<double Function(double, int)>();

  double __scalbnf(
    double __x,
    int __n,
  ) {
    return ___scalbnf(
      __x,
      __n,
    );
  }

  late final ___scalbnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>(
          '__scalbnf');
  late final ___scalbnf =
      ___scalbnfPtr.asFunction<double Function(double, int)>();

  int ilogbf(
    double __x,
  ) {
    return _ilogbf(
      __x,
    );
  }

  late final _ilogbfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('ilogbf');
  late final _ilogbf = _ilogbfPtr.asFunction<int Function(double)>();

  int __ilogbf(
    double __x,
  ) {
    return ___ilogbf(
      __x,
    );
  }

  late final ___ilogbfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('__ilogbf');
  late final ___ilogbf = ___ilogbfPtr.asFunction<int Function(double)>();

  double scalblnf(
    double __x,
    int __n,
  ) {
    return _scalblnf(
      __x,
      __n,
    );
  }

  late final _scalblnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Long)>>(
          'scalblnf');
  late final _scalblnf =
      _scalblnfPtr.asFunction<double Function(double, int)>();

  double __scalblnf(
    double __x,
    int __n,
  ) {
    return ___scalblnf(
      __x,
      __n,
    );
  }

  late final ___scalblnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Long)>>(
          '__scalblnf');
  late final ___scalblnf =
      ___scalblnfPtr.asFunction<double Function(double, int)>();

  double nearbyintf(
    double __x,
  ) {
    return _nearbyintf(
      __x,
    );
  }

  late final _nearbyintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('nearbyintf');
  late final _nearbyintf = _nearbyintfPtr.asFunction<double Function(double)>();

  double __nearbyintf(
    double __x,
  ) {
    return ___nearbyintf(
      __x,
    );
  }

  late final ___nearbyintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>(
          '__nearbyintf');
  late final ___nearbyintf =
      ___nearbyintfPtr.asFunction<double Function(double)>();

  double roundf(
    double __x,
  ) {
    return _roundf(
      __x,
    );
  }

  late final _roundfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('roundf');
  late final _roundf = _roundfPtr.asFunction<double Function(double)>();

  double __roundf(
    double __x,
  ) {
    return ___roundf(
      __x,
    );
  }

  late final ___roundfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__roundf');
  late final ___roundf = ___roundfPtr.asFunction<double Function(double)>();

  double truncf(
    double __x,
  ) {
    return _truncf(
      __x,
    );
  }

  late final _truncfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('truncf');
  late final _truncf = _truncfPtr.asFunction<double Function(double)>();

  double __truncf(
    double __x,
  ) {
    return ___truncf(
      __x,
    );
  }

  late final ___truncfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__truncf');
  late final ___truncf = ___truncfPtr.asFunction<double Function(double)>();

  double remquof(
    double __x,
    double __y,
    ffi.Pointer<ffi.Int> __quo,
  ) {
    return _remquof(
      __x,
      __y,
      __quo,
    );
  }

  late final _remquofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Float, ffi.Float, ffi.Pointer<ffi.Int>)>>('remquof');
  late final _remquof = _remquofPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int>)>();

  double __remquof(
    double __x,
    double __y,
    ffi.Pointer<ffi.Int> __quo,
  ) {
    return ___remquof(
      __x,
      __y,
      __quo,
    );
  }

  late final ___remquofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Float, ffi.Float, ffi.Pointer<ffi.Int>)>>('__remquof');
  late final ___remquof = ___remquofPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int>)>();

  int lrintf(
    double __x,
  ) {
    return _lrintf(
      __x,
    );
  }

  late final _lrintfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Float)>>('lrintf');
  late final _lrintf = _lrintfPtr.asFunction<int Function(double)>();

  int __lrintf(
    double __x,
  ) {
    return ___lrintf(
      __x,
    );
  }

  late final ___lrintfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Float)>>('__lrintf');
  late final ___lrintf = ___lrintfPtr.asFunction<int Function(double)>();

  int llrintf(
    double __x,
  ) {
    return _llrintf(
      __x,
    );
  }

  late final _llrintfPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>('llrintf');
  late final _llrintf = _llrintfPtr.asFunction<int Function(double)>();

  int __llrintf(
    double __x,
  ) {
    return ___llrintf(
      __x,
    );
  }

  late final ___llrintfPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>(
          '__llrintf');
  late final ___llrintf = ___llrintfPtr.asFunction<int Function(double)>();

  int lroundf(
    double __x,
  ) {
    return _lroundf(
      __x,
    );
  }

  late final _lroundfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Float)>>('lroundf');
  late final _lroundf = _lroundfPtr.asFunction<int Function(double)>();

  int __lroundf(
    double __x,
  ) {
    return ___lroundf(
      __x,
    );
  }

  late final ___lroundfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Float)>>('__lroundf');
  late final ___lroundf = ___lroundfPtr.asFunction<int Function(double)>();

  int llroundf(
    double __x,
  ) {
    return _llroundf(
      __x,
    );
  }

  late final _llroundfPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>('llroundf');
  late final _llroundf = _llroundfPtr.asFunction<int Function(double)>();

  int __llroundf(
    double __x,
  ) {
    return ___llroundf(
      __x,
    );
  }

  late final ___llroundfPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>(
          '__llroundf');
  late final ___llroundf = ___llroundfPtr.asFunction<int Function(double)>();

  double fdimf(
    double __x,
    double __y,
  ) {
    return _fdimf(
      __x,
      __y,
    );
  }

  late final _fdimfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fdimf');
  late final _fdimf = _fdimfPtr.asFunction<double Function(double, double)>();

  double __fdimf(
    double __x,
    double __y,
  ) {
    return ___fdimf(
      __x,
      __y,
    );
  }

  late final ___fdimfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__fdimf');
  late final ___fdimf =
      ___fdimfPtr.asFunction<double Function(double, double)>();

  double fmaxf(
    double __x,
    double __y,
  ) {
    return _fmaxf(
      __x,
      __y,
    );
  }

  late final _fmaxfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmaxf');
  late final _fmaxf = _fmaxfPtr.asFunction<double Function(double, double)>();

  double __fmaxf(
    double __x,
    double __y,
  ) {
    return ___fmaxf(
      __x,
      __y,
    );
  }

  late final ___fmaxfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__fmaxf');
  late final ___fmaxf =
      ___fmaxfPtr.asFunction<double Function(double, double)>();

  double fminf(
    double __x,
    double __y,
  ) {
    return _fminf(
      __x,
      __y,
    );
  }

  late final _fminfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fminf');
  late final _fminf = _fminfPtr.asFunction<double Function(double, double)>();

  double __fminf(
    double __x,
    double __y,
  ) {
    return ___fminf(
      __x,
      __y,
    );
  }

  late final ___fminfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__fminf');
  late final ___fminf =
      ___fminfPtr.asFunction<double Function(double, double)>();

  double fmaf(
    double __x,
    double __y,
    double __z,
  ) {
    return _fmaf(
      __x,
      __y,
      __z,
    );
  }

  late final _fmafPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Float, ffi.Float)>>('fmaf');
  late final _fmaf =
      _fmafPtr.asFunction<double Function(double, double, double)>();

  double __fmaf(
    double __x,
    double __y,
    double __z,
  ) {
    return ___fmaf(
      __x,
      __y,
      __z,
    );
  }

  late final ___fmafPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Float, ffi.Float)>>('__fmaf');
  late final ___fmaf =
      ___fmafPtr.asFunction<double Function(double, double, double)>();

  double scalbf(
    double __x,
    double __n,
  ) {
    return _scalbf(
      __x,
      __n,
    );
  }

  late final _scalbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'scalbf');
  late final _scalbf = _scalbfPtr.asFunction<double Function(double, double)>();

  double __scalbf(
    double __x,
    double __n,
  ) {
    return ___scalbf(
      __x,
      __n,
    );
  }

  late final ___scalbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__scalbf');
  late final ___scalbf =
      ___scalbfPtr.asFunction<double Function(double, double)>();

  late final ffi.Pointer<ffi.Int> _signgam = _lookup<ffi.Int>('signgam');

  int get signgam => _signgam.value;

  set signgam(int value) => _signgam.value = value;

  ffi.Pointer<jpec_enc_t> jpec_enc_new(
    ffi.Pointer<ffi.Uint8> img,
    int w,
    int h,
  ) {
    return _jpec_enc_new(
      img,
      w,
      h,
    );
  }

  late final _jpec_enc_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<jpec_enc_t> Function(
              ffi.Pointer<ffi.Uint8>, ffi.Uint16, ffi.Uint16)>>('jpec_enc_new');
  late final _jpec_enc_new = _jpec_enc_newPtr.asFunction<
      ffi.Pointer<jpec_enc_t> Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  ffi.Pointer<jpec_enc_t> jpec_enc_new2(
    ffi.Pointer<ffi.Uint8> img,
    int w,
    int h,
    int q,
  ) {
    return _jpec_enc_new2(
      img,
      w,
      h,
      q,
    );
  }

  late final _jpec_enc_new2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<jpec_enc_t> Function(ffi.Pointer<ffi.Uint8>, ffi.Uint16,
              ffi.Uint16, ffi.Int)>>('jpec_enc_new2');
  late final _jpec_enc_new2 = _jpec_enc_new2Ptr.asFunction<
      ffi.Pointer<jpec_enc_t> Function(
          ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void jpec_enc_del(
    ffi.Pointer<jpec_enc_t> e,
  ) {
    return _jpec_enc_del(
      e,
    );
  }

  late final _jpec_enc_delPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<jpec_enc_t>)>>(
          'jpec_enc_del');
  late final _jpec_enc_del =
      _jpec_enc_delPtr.asFunction<void Function(ffi.Pointer<jpec_enc_t>)>();

  ffi.Pointer<ffi.Uint8> jpec_enc_run(
    ffi.Pointer<jpec_enc_t> e,
    ffi.Pointer<ffi.Int> len,
  ) {
    return _jpec_enc_run(
      e,
      len,
    );
  }

  late final _jpec_enc_runPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<jpec_enc_t>, ffi.Pointer<ffi.Int>)>>('jpec_enc_run');
  late final _jpec_enc_run = _jpec_enc_runPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(
          ffi.Pointer<jpec_enc_t>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<jpec_buffer_t> jpec_buffer_new() {
    return _jpec_buffer_new();
  }

  late final _jpec_buffer_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<jpec_buffer_t> Function()>>(
          'jpec_buffer_new');
  late final _jpec_buffer_new =
      _jpec_buffer_newPtr.asFunction<ffi.Pointer<jpec_buffer_t> Function()>();

  ffi.Pointer<jpec_buffer_t> jpec_buffer_new2(
    int siz,
  ) {
    return _jpec_buffer_new2(
      siz,
    );
  }

  late final _jpec_buffer_new2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<jpec_buffer_t> Function(ffi.Int)>>(
          'jpec_buffer_new2');
  late final _jpec_buffer_new2 = _jpec_buffer_new2Ptr
      .asFunction<ffi.Pointer<jpec_buffer_t> Function(int)>();

  void jpec_buffer_del(
    ffi.Pointer<jpec_buffer_t> b,
  ) {
    return _jpec_buffer_del(
      b,
    );
  }

  late final _jpec_buffer_delPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<jpec_buffer_t>)>>(
      'jpec_buffer_del');
  late final _jpec_buffer_del = _jpec_buffer_delPtr
      .asFunction<void Function(ffi.Pointer<jpec_buffer_t>)>();

  void jpec_buffer_write_byte(
    ffi.Pointer<jpec_buffer_t> b,
    int val,
  ) {
    return _jpec_buffer_write_byte(
      b,
      val,
    );
  }

  late final _jpec_buffer_write_bytePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<jpec_buffer_t>, ffi.Int)>>('jpec_buffer_write_byte');
  late final _jpec_buffer_write_byte = _jpec_buffer_write_bytePtr
      .asFunction<void Function(ffi.Pointer<jpec_buffer_t>, int)>();

  void jpec_buffer_write_2bytes(
    ffi.Pointer<jpec_buffer_t> b,
    int val,
  ) {
    return _jpec_buffer_write_2bytes(
      b,
      val,
    );
  }

  late final _jpec_buffer_write_2bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<jpec_buffer_t>,
              ffi.Int)>>('jpec_buffer_write_2bytes');
  late final _jpec_buffer_write_2bytes = _jpec_buffer_write_2bytesPtr
      .asFunction<void Function(ffi.Pointer<jpec_buffer_t>, int)>();

  /// Standard JPEG quantizing table
  late final ffi.Pointer<ffi.Pointer<ffi.Uint8>> _jpec_qzr =
      _lookup<ffi.Pointer<ffi.Uint8>>('jpec_qzr');

  ffi.Pointer<ffi.Uint8> get jpec_qzr => _jpec_qzr.value;

  set jpec_qzr(ffi.Pointer<ffi.Uint8> value) => _jpec_qzr.value = value;

  /// DCT coefficients
  late final ffi.Pointer<ffi.Pointer<ffi.Float>> _jpec_dct =
      _lookup<ffi.Pointer<ffi.Float>>('jpec_dct');

  ffi.Pointer<ffi.Float> get jpec_dct => _jpec_dct.value;

  set jpec_dct(ffi.Pointer<ffi.Float> value) => _jpec_dct.value = value;

  /// Zig-zag order
  late final ffi.Pointer<ffi.Pointer<ffi.Int>> _jpec_zz =
      _lookup<ffi.Pointer<ffi.Int>>('jpec_zz');

  ffi.Pointer<ffi.Int> get jpec_zz => _jpec_zz.value;

  set jpec_zz(ffi.Pointer<ffi.Int> value) => _jpec_zz.value = value;

  /// JPEG standard Huffman tables */
  /// /** Luminance (Y) - DC
  late final ffi.Pointer<ffi.Pointer<ffi.Uint8>> _jpec_dc_nodes =
      _lookup<ffi.Pointer<ffi.Uint8>>('jpec_dc_nodes');

  ffi.Pointer<ffi.Uint8> get jpec_dc_nodes => _jpec_dc_nodes.value;

  set jpec_dc_nodes(ffi.Pointer<ffi.Uint8> value) =>
      _jpec_dc_nodes.value = value;

  late final ffi.Pointer<ffi.Int> _jpec_dc_nb_vals =
      _lookup<ffi.Int>('jpec_dc_nb_vals');

  int get jpec_dc_nb_vals => _jpec_dc_nb_vals.value;

  set jpec_dc_nb_vals(int value) => _jpec_dc_nb_vals.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Uint8>> _jpec_dc_vals =
      _lookup<ffi.Pointer<ffi.Uint8>>('jpec_dc_vals');

  ffi.Pointer<ffi.Uint8> get jpec_dc_vals => _jpec_dc_vals.value;

  set jpec_dc_vals(ffi.Pointer<ffi.Uint8> value) => _jpec_dc_vals.value = value;

  /// Luminance (Y) - AC
  late final ffi.Pointer<ffi.Pointer<ffi.Uint8>> _jpec_ac_nodes =
      _lookup<ffi.Pointer<ffi.Uint8>>('jpec_ac_nodes');

  ffi.Pointer<ffi.Uint8> get jpec_ac_nodes => _jpec_ac_nodes.value;

  set jpec_ac_nodes(ffi.Pointer<ffi.Uint8> value) =>
      _jpec_ac_nodes.value = value;

  late final ffi.Pointer<ffi.Int> _jpec_ac_nb_vals =
      _lookup<ffi.Int>('jpec_ac_nb_vals');

  int get jpec_ac_nb_vals => _jpec_ac_nb_vals.value;

  set jpec_ac_nb_vals(int value) => _jpec_ac_nb_vals.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Uint8>> _jpec_ac_vals =
      _lookup<ffi.Pointer<ffi.Uint8>>('jpec_ac_vals');

  ffi.Pointer<ffi.Uint8> get jpec_ac_vals => _jpec_ac_vals.value;

  set jpec_ac_vals(ffi.Pointer<ffi.Uint8> value) => _jpec_ac_vals.value = value;

  /// Huffman inverted tables */
  /// /** Luminance (Y) - DC
  late final ffi.Pointer<ffi.Pointer<ffi.Uint8>> _jpec_dc_len =
      _lookup<ffi.Pointer<ffi.Uint8>>('jpec_dc_len');

  ffi.Pointer<ffi.Uint8> get jpec_dc_len => _jpec_dc_len.value;

  set jpec_dc_len(ffi.Pointer<ffi.Uint8> value) => _jpec_dc_len.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int>> _jpec_dc_code =
      _lookup<ffi.Pointer<ffi.Int>>('jpec_dc_code');

  ffi.Pointer<ffi.Int> get jpec_dc_code => _jpec_dc_code.value;

  set jpec_dc_code(ffi.Pointer<ffi.Int> value) => _jpec_dc_code.value = value;

  /// Luminance (Y) - AC
  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _jpec_ac_len =
      _lookup<ffi.Pointer<ffi.Int8>>('jpec_ac_len');

  ffi.Pointer<ffi.Int8> get jpec_ac_len => _jpec_ac_len.value;

  set jpec_ac_len(ffi.Pointer<ffi.Int8> value) => _jpec_ac_len.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int>> _jpec_ac_code =
      _lookup<ffi.Pointer<ffi.Int>>('jpec_ac_code');

  ffi.Pointer<ffi.Int> get jpec_ac_code => _jpec_ac_code.value;

  set jpec_ac_code(ffi.Pointer<ffi.Int> value) => _jpec_ac_code.value = value;

  /// Skeleton initialization
  void jpec_huff_skel_init(
    ffi.Pointer<jpec_huff_skel_t> skel,
  ) {
    return _jpec_huff_skel_init(
      skel,
    );
  }

  late final _jpec_huff_skel_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<jpec_huff_skel_t>)>>(
      'jpec_huff_skel_init');
  late final _jpec_huff_skel_init = _jpec_huff_skel_initPtr
      .asFunction<void Function(ffi.Pointer<jpec_huff_skel_t>)>();

  ffi.Pointer<jpec_huff_t> jpec_huff_new() {
    return _jpec_huff_new();
  }

  late final _jpec_huff_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<jpec_huff_t> Function()>>(
          'jpec_huff_new');
  late final _jpec_huff_new =
      _jpec_huff_newPtr.asFunction<ffi.Pointer<jpec_huff_t> Function()>();

  void jpec_huff_del(
    ffi.Pointer<jpec_huff_t> h,
  ) {
    return _jpec_huff_del(
      h,
    );
  }

  late final _jpec_huff_delPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<jpec_huff_t>)>>(
          'jpec_huff_del');
  late final _jpec_huff_del =
      _jpec_huff_delPtr.asFunction<void Function(ffi.Pointer<jpec_huff_t>)>();

  void jpec_huff_encode_block(
    ffi.Pointer<jpec_huff_t> h,
    ffi.Pointer<jpec_block_t> block,
    ffi.Pointer<jpec_buffer_t> buf,
  ) {
    return _jpec_huff_encode_block(
      h,
      block,
      buf,
    );
  }

  late final _jpec_huff_encode_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<jpec_huff_t>, ffi.Pointer<jpec_block_t>,
              ffi.Pointer<jpec_buffer_t>)>>('jpec_huff_encode_block');
  late final _jpec_huff_encode_block = _jpec_huff_encode_blockPtr.asFunction<
      void Function(ffi.Pointer<jpec_huff_t>, ffi.Pointer<jpec_block_t>,
          ffi.Pointer<jpec_buffer_t>)>();
}

final class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

final class vector extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Void>> data;

  @ffi.Int()
  external int len;

  @ffi.Int()
  external int alloc;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      elem_free_f;
}

typedef vector2 = ffi.Int;

final class dogecoin_block_header_ extends ffi.Struct {
  @ffi.Int()
  external int version;

  @ffi.Int()
  external int prev_block;

  @ffi.Int()
  external int merkle_root;

  @ffi.Int()
  external int timestamp;

  @ffi.Int()
  external int bits;

  @ffi.Int()
  external int nonce;
}

typedef dogecoin_block_header1 = ffi.Int;

final class const_buffer extends ffi.Opaque {}

final class eckey extends ffi.Struct {
  @ffi.Int()
  external int idx;

  @ffi.Int()
  external int private_key;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> private_key_wif;

  @ffi.Int()
  external int public_key;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> public_key_hex;

  @ffi.Array.multi([35])
  external ffi.Array<ffi.Char> address;

  @ffi.Int()
  external int hh;
}

typedef eckey1 = ffi.Int;

abstract class NODE_STATE {
  static const int NODE_CONNECTING = 1;
  static const int NODE_CONNECTED = 2;
  static const int NODE_ERRORED = 4;
  static const int NODE_TIMEOUT = 8;
  static const int NODE_HEADERSYNC = 16;
  static const int NODE_BLOCKSYNC = 32;
  static const int NODE_MISSBEHAVED = 64;
  static const int NODE_DISCONNECTED = 128;
  static const int NODE_DISCONNECTED_FROM_REMOTE_PEER = 256;
}

final class dogecoin_node_ extends ffi.Struct {
  external sockaddr addr;

  external ffi.Pointer<bufferevent> event_bev;

  external ffi.Pointer<event> timer_event;

  external ffi.Pointer<dogecoin_node_group> nodegroup;

  @ffi.Int()
  external int nodeid;

  @ffi.Int()
  external int lastping;

  @ffi.Int()
  external int time_started_con;

  @ffi.Int()
  external int time_last_request;

  @ffi.Int()
  external int last_requested_inv;

  external ffi.Pointer<ffi.Int> recvBuffer;

  @ffi.Int()
  external int nonce;

  @ffi.Int()
  external int services;

  @ffi.Int()
  external int state;

  @ffi.Int()
  external int missbehavescore;

  @ffi.Int()
  external int version_handshake;

  @ffi.UnsignedInt()
  external int bestknownheight;

  @ffi.Int()
  external int hints;
}

final class sockaddr extends ffi.Struct {
  @sa_family_t()
  external int sa_family;

  @ffi.Array.multi([14])
  external ffi.Array<ffi.Char> sa_data;
}

typedef sa_family_t = ffi.UnsignedShort;

final class bufferevent extends ffi.Opaque {}

final class event extends ffi.Opaque {}

typedef dogecoin_node_group = dogecoin_node_group_;

final class dogecoin_node_group_ extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ctx;

  // external ffi.Pointer<event_base> event_base;

  external ffi.Pointer<ffi.Int> nodes;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Char> clientstr;

  @ffi.Int()
  external int desired_amount_connected_nodes;

  external ffi.Pointer<ffi.Int> chainparams;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char> format)>>
      log_write_cb;

  // external ffi.NativeFunction<
  //     ffi.NativeFunction<
  //             ffi.Int Function(ffi.Pointer<dogecoin_node_>,
  //                 ffi.Pointer<ffi.Int>, ffi.Pointer<const_buffer1>)>
  //         Function(ffi.Pointer<ffi.Int>)> dogecoin_bool;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<dogecoin_node_> node,
              ffi.Pointer<ffi.Int> hdr,
              ffi.Pointer<const_buffer1> buf)>> postcmd_cb;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<dogecoin_node_> node)>>
      node_connection_state_changed_cb;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<dogecoin_node_> node)>>
      handshake_done_cb;
}

final class event_base extends ffi.Opaque {}

final class const_buffer1 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> p;

  @ffi.Int()
  external int len;
}

typedef dogecoin_node1 = dogecoin_node_;

final class const_buffer2 extends ffi.Opaque {}

final class broadcast_ctx extends ffi.Struct {
  external ffi.Pointer<ffi.Int> tx;

  @ffi.UnsignedInt()
  external int timeout;

  @ffi.Int()
  external int debuglevel;

  @ffi.Int()
  external int connected_to_peers;

  @ffi.Int()
  external int max_peers_to_connect;

  @ffi.Int()
  external int max_peers_to_inv;

  @ffi.Int()
  external int inved_to_peers;

  @ffi.Int()
  external int getdata_from_peers;

  @ffi.Int()
  external int found_on_non_inved_peers;

  @ffi.Int()
  external int start_time;
}

final class cstring extends ffi.Struct {
  external ffi.Pointer<ffi.Char> str;

  @ffi.Int()
  external int len;

  @ffi.Int()
  external int alloc;
}

final class __mbstate_t extends ffi.Struct {
  @ffi.Int()
  external int __count;

  external UnnamedUnion1 __value;
}

final class UnnamedUnion1 extends ffi.Union {
  @ffi.UnsignedInt()
  external int __wch;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __wchb;
}

final class _G_fpos_t extends ffi.Struct {
  @__off_t()
  external int __pos;

  external __mbstate_t __state;
}

typedef __off_t = ffi.Long;

final class _G_fpos64_t extends ffi.Struct {
  @__off64_t()
  external int __pos;

  external __mbstate_t __state;
}

typedef __off64_t = ffi.Long;

final class _IO_FILE extends ffi.Struct {
  @ffi.Int()
  external int _flags;

  external ffi.Pointer<ffi.Char> _IO_read_ptr;

  external ffi.Pointer<ffi.Char> _IO_read_end;

  external ffi.Pointer<ffi.Char> _IO_read_base;

  external ffi.Pointer<ffi.Char> _IO_write_base;

  external ffi.Pointer<ffi.Char> _IO_write_ptr;

  external ffi.Pointer<ffi.Char> _IO_write_end;

  external ffi.Pointer<ffi.Char> _IO_buf_base;

  external ffi.Pointer<ffi.Char> _IO_buf_end;

  external ffi.Pointer<ffi.Char> _IO_save_base;

  external ffi.Pointer<ffi.Char> _IO_backup_base;

  external ffi.Pointer<ffi.Char> _IO_save_end;

  external ffi.Pointer<_IO_marker> _markers;

  external ffi.Pointer<_IO_FILE> _chain;

  @ffi.Int()
  external int _fileno;

  @ffi.Int()
  external int _flags2;

  @__off_t()
  external int _old_offset;

  @ffi.UnsignedShort()
  external int _cur_column;

  @ffi.SignedChar()
  external int _vtable_offset;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Char> _shortbuf;

  external ffi.Pointer<_IO_lock_t> _lock;

  @__off64_t()
  external int _offset;

  external ffi.Pointer<_IO_codecvt> _codecvt;

  external ffi.Pointer<_IO_wide_data> _wide_data;

  external ffi.Pointer<_IO_FILE> _freeres_list;

  external ffi.Pointer<ffi.Void> _freeres_buf;

  @ffi.Int()
  external int __pad5;

  @ffi.Int()
  external int _mode;

  @ffi.Char()
  external int _unused2;
}

final class _IO_marker extends ffi.Opaque {}

typedef _IO_lock_t = ffi.Void;

final class _IO_codecvt extends ffi.Opaque {}

final class _IO_wide_data extends ffi.Opaque {}

typedef FILE = _IO_FILE;
typedef __ssize_t = ffi.Long;
typedef fpos_t = __fpos_t;
typedef __fpos_t = _G_fpos_t;

final class div_t extends ffi.Struct {
  @ffi.Int()
  external int quot;

  @ffi.Int()
  external int rem;
}

final class ldiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

final class lldiv_t extends ffi.Struct {
  @ffi.LongLong()
  external int quot;

  @ffi.LongLong()
  external int rem;
}

final class __sigset_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedLong> __val;
}

final class timeval extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__suseconds_t()
  external int tv_usec;
}

typedef __time_t = ffi.Long;
typedef __suseconds_t = ffi.Long;

final class timespec extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__syscall_slong_t()
  external int tv_nsec;
}

typedef __syscall_slong_t = ffi.Long;

final class fd_set extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__fd_mask> __fds_bits;
}

typedef __fd_mask = ffi.Long;

final class __atomic_wide_counter extends ffi.Union {
  @ffi.UnsignedLongLong()
  external int __value64;

  external UnnamedStruct1 __value32;
}

final class UnnamedStruct1 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __low;

  @ffi.UnsignedInt()
  external int __high;
}

final class __pthread_internal_list extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_list> __prev;

  external ffi.Pointer<__pthread_internal_list> __next;
}

final class __pthread_internal_slist extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_slist> __next;
}

final class __pthread_mutex_s extends ffi.Struct {
  @ffi.Int()
  external int __lock;

  @ffi.UnsignedInt()
  external int __count;

  @ffi.Int()
  external int __owner;

  @ffi.UnsignedInt()
  external int __nusers;

  @ffi.Int()
  external int __kind;

  @ffi.Short()
  external int __spins;

  @ffi.Short()
  external int __elision;

  external __pthread_list_t __list;
}

typedef __pthread_list_t = __pthread_internal_list;

final class __pthread_rwlock_arch_t extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __readers;

  @ffi.UnsignedInt()
  external int __writers;

  @ffi.UnsignedInt()
  external int __wrphase_futex;

  @ffi.UnsignedInt()
  external int __writers_futex;

  @ffi.UnsignedInt()
  external int __pad3;

  @ffi.UnsignedInt()
  external int __pad4;

  @ffi.Int()
  external int __cur_writer;

  @ffi.Int()
  external int __shared;

  @ffi.SignedChar()
  external int __rwelision;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedChar> __pad1;

  @ffi.UnsignedLong()
  external int __pad2;

  @ffi.UnsignedInt()
  external int __flags;
}

final class __pthread_cond_s extends ffi.Struct {
  external __atomic_wide_counter __wseq;

  external __atomic_wide_counter __g1_start;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_refs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_size;

  @ffi.UnsignedInt()
  external int __g1_orig_size;

  @ffi.UnsignedInt()
  external int __wrefs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_signals;
}

final class __once_flag extends ffi.Struct {
  @ffi.Int()
  external int __data;
}

final class pthread_mutexattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class pthread_condattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class pthread_attr_t extends ffi.Union {
  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_mutex_t extends ffi.Union {
  external __pthread_mutex_s __data;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_cond_t extends ffi.Union {
  external __pthread_cond_s __data;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Char> __size;

  @ffi.LongLong()
  external int __align;
}

final class pthread_rwlock_t extends ffi.Union {
  external __pthread_rwlock_arch_t __data;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_rwlockattr_t extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_barrier_t extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_barrierattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class random_data extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> fptr;

  external ffi.Pointer<ffi.Int32> rptr;

  external ffi.Pointer<ffi.Int32> state;

  @ffi.Int()
  external int rand_type;

  @ffi.Int()
  external int rand_deg;

  @ffi.Int()
  external int rand_sep;

  external ffi.Pointer<ffi.Int32> end_ptr;
}

final class drand48_data extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __x;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __old_x;

  @ffi.UnsignedShort()
  external int __c;

  @ffi.UnsignedShort()
  external int __init;

  @ffi.UnsignedLongLong()
  external int __a;
}

typedef __uint32_t = ffi.UnsignedInt;
typedef __compar_fn_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

final class __locale_struct extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<__locale_data>> __locales;

  external ffi.Pointer<ffi.UnsignedShort> __ctype_b;

  external ffi.Pointer<ffi.Int> __ctype_tolower;

  external ffi.Pointer<ffi.Int> __ctype_toupper;

  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<ffi.Char>> __names;
}

final class __locale_data extends ffi.Opaque {}

typedef locale_t = __locale_t;
typedef __locale_t = ffi.Pointer<__locale_struct>;

final class UT_hash_bucket extends ffi.Struct {
  external ffi.Pointer<UT_hash_handle> hh_head;

  @ffi.UnsignedInt()
  external int count;

  @ffi.UnsignedInt()
  external int expand_mult;
}

final class UT_hash_handle extends ffi.Struct {
  external ffi.Pointer<UT_hash_table> tbl;

  external ffi.Pointer<ffi.Void> prev;

  external ffi.Pointer<ffi.Void> next;

  external ffi.Pointer<UT_hash_handle> hh_prev;

  external ffi.Pointer<UT_hash_handle> hh_next;

  external ffi.Pointer<ffi.Void> key;

  @ffi.UnsignedInt()
  external int keylen;

  @ffi.UnsignedInt()
  external int hashv;
}

final class UT_hash_table extends ffi.Struct {
  external ffi.Pointer<UT_hash_bucket> buckets;

  @ffi.UnsignedInt()
  external int num_buckets;

  @ffi.UnsignedInt()
  external int log2_num_buckets;

  @ffi.UnsignedInt()
  external int num_items;

  external ffi.Pointer<UT_hash_handle> tail;

  @ffi.Int()
  external int hho;

  @ffi.UnsignedInt()
  external int ideal_chain_maxlen;

  @ffi.UnsignedInt()
  external int nonideal_items;

  @ffi.UnsignedInt()
  external int ineff_expands;

  @ffi.UnsignedInt()
  external int noexpand;

  @ffi.Uint32()
  external int signature;
}

final class dogecoin_key_ extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> privkey;
}

final class dogecoin_pubkey_ extends ffi.Struct {
  @dogecoin_bool1()
  external int compressed;

  @ffi.Array.multi([65])
  external ffi.Array<ffi.Uint8> pubkey;
}

typedef dogecoin_bool1 = ffi.Uint8;

final class dogecoin_rnd_mapper_ extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>
      dogecoin_random_init;

  // external ffi.NativeFunction<
  //     ffi.NativeFunction<
  //             ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Int, ffi.Int)>
  //         Function(ffi.Pointer<ffi.Int>)> dogecoin_bool;
}

typedef dogecoin_rnd_mapper = ffi.Int;

final class buffer extends ffi.Struct {
  external ffi.Pointer<ffi.Void> p;

  @ffi.Int()
  external int len;
}

final class _sha256_context extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint32> state;

  @ffi.Uint64()
  external int bitcount;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> buffer;
}

final class _sha512_context extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint64> state;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint64> bitcount;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Uint8> buffer;
}

typedef sha256_context = ffi.Int;
typedef sha512_context = _sha512_context;

final class _hmac_sha256_context extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> o_key_pad;

  @sha256_context()
  external int ctx;
}

final class _hmac_sha512_context extends ffi.Struct {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Uint8> o_key_pad;

  external sha512_context ctx;
}

typedef hmac_sha256_context = _hmac_sha256_context;
typedef hmac_sha512_context = _hmac_sha512_context;

final class _pbkdf2_hmac_sha256_context extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> f;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> g;

  external ffi.Pointer<ffi.Uint8> pass;

  @ffi.Int()
  external int passlen;

  @ffi.Char()
  external int first;
}

final class _pbkdf2_hmac_sha512_context extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> f;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> g;

  external ffi.Pointer<ffi.Uint8> pass;

  @ffi.Int()
  external int passlen;

  @ffi.Char()
  external int first;
}

typedef pbkdf2_hmac_sha256_context = _pbkdf2_hmac_sha256_context;
typedef pbkdf2_hmac_sha512_context = _pbkdf2_hmac_sha512_context;
typedef AES128_ctx = UnnamedStruct2;

final class UnnamedStruct2 extends ffi.Struct {
  @ffi.Array.multi([11])
  external ffi.Array<ffi.Int> rk;
}

typedef AES192_ctx = UnnamedStruct3;

final class UnnamedStruct3 extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<ffi.Int> rk;
}

typedef AES256_ctx = UnnamedStruct4;

final class UnnamedStruct4 extends ffi.Struct {
  @ffi.Array.multi([15])
  external ffi.Array<ffi.Int> rk;
}

final class iovec extends ffi.Struct {
  external ffi.Pointer<ffi.Void> iov_base;

  @ffi.Int()
  external int iov_len;
}

abstract class __socket_type {
  static const int SOCK_STREAM = 1;
  static const int SOCK_DGRAM = 2;
  static const int SOCK_RAW = 3;
  static const int SOCK_RDM = 4;
  static const int SOCK_SEQPACKET = 5;
  static const int SOCK_DCCP = 6;
  static const int SOCK_PACKET = 10;
  static const int SOCK_CLOEXEC = 524288;
  static const int SOCK_NONBLOCK = 2048;
}

final class sockaddr_storage extends ffi.Struct {
  @sa_family_t()
  external int ss_family;

  @ffi.Array.multi([118])
  external ffi.Array<ffi.Char> __ss_padding;

  @ffi.UnsignedLong()
  external int __ss_align;
}

final class msghdr extends ffi.Struct {
  external ffi.Pointer<ffi.Void> msg_name;

  @socklen_t()
  external int msg_namelen;

  external ffi.Pointer<iovec> msg_iov;

  @ffi.Int()
  external int msg_iovlen;

  external ffi.Pointer<ffi.Void> msg_control;

  @ffi.Int()
  external int msg_controllen;

  @ffi.Int()
  external int msg_flags;
}

typedef socklen_t = __socklen_t;
typedef __socklen_t = ffi.UnsignedInt;

final class cmsghdr extends ffi.Opaque {}

final class __kernel_fd_set extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedLong> fds_bits;
}

final class __kernel_fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> val;
}

final class linger extends ffi.Struct {
  @ffi.Int()
  external int l_onoff;

  @ffi.Int()
  external int l_linger;
}

final class osockaddr extends ffi.Struct {
  @ffi.UnsignedShort()
  external int sa_family;

  @ffi.Array.multi([14])
  external ffi.Array<ffi.UnsignedChar> sa_data;
}

typedef ssize_t1 = __ssize_t;

final class in_addr extends ffi.Struct {
  @in_addr_t()
  external int s_addr;
}

typedef in_addr_t = ffi.Uint32;

final class ip_opts extends ffi.Struct {
  external in_addr ip_dst;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> ip_opts1;
}

final class ip_mreqn extends ffi.Struct {
  external in_addr imr_multiaddr;

  external in_addr imr_address;

  @ffi.Int()
  external int imr_ifindex;
}

final class in_pktinfo extends ffi.Struct {
  @ffi.Int()
  external int ipi_ifindex;

  external in_addr ipi_spec_dst;

  external in_addr ipi_addr;
}

final class in6_addr extends ffi.Struct {
  external UnnamedUnion2 __in6_u;
}

final class UnnamedUnion2 extends ffi.Union {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> __u6_addr8;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint16> __u6_addr16;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint32> __u6_addr32;
}

final class sockaddr_in extends ffi.Struct {
  @sa_family_t()
  external int sin_family;

  @in_port_t()
  external int sin_port;

  external in_addr sin_addr;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.UnsignedChar> sin_zero;
}

typedef in_port_t = ffi.Uint16;

final class sockaddr_in6 extends ffi.Struct {
  @sa_family_t()
  external int sin6_family;

  @in_port_t()
  external int sin6_port;

  @ffi.Uint32()
  external int sin6_flowinfo;

  external in6_addr sin6_addr;

  @ffi.Uint32()
  external int sin6_scope_id;
}

final class ip_mreq extends ffi.Struct {
  external in_addr imr_multiaddr;

  external in_addr imr_interface;
}

final class ip_mreq_source extends ffi.Struct {
  external in_addr imr_multiaddr;

  external in_addr imr_interface;

  external in_addr imr_sourceaddr;
}

final class ipv6_mreq extends ffi.Struct {
  external in6_addr ipv6mr_multiaddr;

  @ffi.UnsignedInt()
  external int ipv6mr_interface;
}

final class group_req extends ffi.Struct {
  @ffi.Uint32()
  external int gr_interface;

  external sockaddr_storage gr_group;
}

final class group_source_req extends ffi.Struct {
  @ffi.Uint32()
  external int gsr_interface;

  external sockaddr_storage gsr_group;

  external sockaddr_storage gsr_source;
}

final class ip_msfilter extends ffi.Struct {
  external in_addr imsf_multiaddr;

  external in_addr imsf_interface;

  @ffi.Uint32()
  external int imsf_fmode;

  @ffi.Uint32()
  external int imsf_numsrc;

  @ffi.Array.multi([1])
  external ffi.Array<in_addr> imsf_slist;
}

final class group_filter extends ffi.Struct {
  @ffi.Uint32()
  external int gf_interface;

  external sockaddr_storage gf_group;

  @ffi.Uint32()
  external int gf_fmode;

  @ffi.Uint32()
  external int gf_numsrc;

  @ffi.Array.multi([1])
  external ffi.Array<sockaddr_storage> gf_slist;
}

abstract class service_bits {
  static const int DOGECOIN_NODE_NONE = 0;
  static const int DOGECOIN_NODE_NETWORK = 1;
  static const int DOGECOIN_NODE_GETUTXO = 2;
  static const int DOGECOIN_NODE_BLOOM = 4;
  static const int DOGECOIN_NODE_XTHIN = 16;
  static const int DOGECOIN_NODE_COMPACT_FILTERS = 64;
}

abstract class DOGECOIN_INV_TYPE {
  static const int DOGECOIN_INV_TYPE_ERROR = 0;
  static const int DOGECOIN_INV_TYPE_TX = 1;
  static const int DOGECOIN_INV_TYPE_BLOCK = 2;
  static const int DOGECOIN_INV_TYPE_FILTERED_BLOCK = 3;
  static const int DOGECOIN_INV_TYPE_CMPCT_BLOCK = 4;
}

final class dogecoin_p2p_msg_hdr_ extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedChar> netmagic;

  @ffi.Array.multi([12])
  external ffi.Array<ffi.Char> command;

  @ffi.Uint32()
  external int data_len;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedChar> hash;
}

final class dogecoin_p2p_inv_msg_ extends ffi.Struct {
  @ffi.Uint32()
  external int type;

  @ffi.Int()
  external int hash;
}

final class dogecoin_p2p_address_ extends ffi.Struct {
  @ffi.Uint32()
  external int time;

  @ffi.Uint64()
  external int services;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedChar> ip;

  @ffi.Uint16()
  external int port;
}

final class dogecoin_p2p_version_msg_ extends ffi.Struct {
  @ffi.Int32()
  external int version;

  @ffi.Uint64()
  external int services;

  @ffi.Int64()
  external int timestamp;

  external dogecoin_p2p_address addr_recv;

  external dogecoin_p2p_address addr_from;

  @ffi.Uint64()
  external int nonce;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> useragent;

  @ffi.Int32()
  external int start_height;

  @ffi.Uint8()
  external int relay;
}

typedef dogecoin_p2p_address = dogecoin_p2p_address_;

/// getdata / inv message types.
/// These numbers are defined by the protocol. When adding a new value, be sure
/// to mention it in the respective BIP.
abstract class GetDataMsg {
  static const int MSG_TX = 1;
  static const int MSG_BLOCK = 2;

  /// !< Defined in BIP37
  static const int MSG_FILTERED_BLOCK = 3;

  /// !< Defined in BIP152
  static const int MSG_CMPCT_BLOCK = 4;
}

typedef dogecoin_p2p_version_msg = dogecoin_p2p_version_msg_;
typedef dogecoin_p2p_inv_msg = dogecoin_p2p_inv_msg_;
typedef dogecoin_p2p_msg_hdr = dogecoin_p2p_msg_hdr_;

final class const_buffer3 extends ffi.Opaque {}

final class dogecoin_btree_node extends ffi.Struct {
  external ffi.Pointer<ffi.Void> key;

  external ffi.Pointer<dogecoin_btree_node> left;

  external ffi.Pointer<dogecoin_btree_node> right;
}

final class working_transaction extends ffi.Struct {
  @ffi.Int()
  external int idx;

  external ffi.Pointer<ffi.Int> transaction;

  @ffi.Int()
  external int hh;
}

typedef working_transaction1 = ffi.Int;

final class dogecoin_dns_seed_ extends ffi.Struct {
  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> domain;
}

final class dogecoin_chainparams_ extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> chainname;

  @ffi.Int()
  external int b58prefix_pubkey_address;

  @ffi.Int()
  external int b58prefix_script_address;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Char> bech32_hrp;

  @ffi.Int()
  external int b58prefix_secret_address;

  /// !private key
  @ffi.Int()
  external int b58prefix_bip32_privkey;

  @ffi.Int()
  external int b58prefix_bip32_pubkey;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedChar> netmagic;

  @ffi.Int()
  external int genesisblockhash;

  @ffi.Int()
  external int default_port;

  @ffi.Array.multi([8])
  external ffi.Array<dogecoin_dns_seed> dnsseeds;
}

typedef dogecoin_dns_seed = ffi.Int;

final class dogecoin_checkpoint_ extends ffi.Struct {
  @ffi.Int()
  external int height;

  external ffi.Pointer<ffi.Char> hash;

  @ffi.Int()
  external int timestamp;

  @ffi.Int()
  external int target;
}

typedef dogecoin_chainparams = dogecoin_chainparams_;
typedef dogecoin_checkpoint = dogecoin_checkpoint_;

final class tm extends ffi.Struct {
  @ffi.Int()
  external int tm_sec;

  @ffi.Int()
  external int tm_min;

  @ffi.Int()
  external int tm_hour;

  @ffi.Int()
  external int tm_mday;

  @ffi.Int()
  external int tm_mon;

  @ffi.Int()
  external int tm_year;

  @ffi.Int()
  external int tm_wday;

  @ffi.Int()
  external int tm_yday;

  @ffi.Int()
  external int tm_isdst;

  @ffi.Long()
  external int tm_gmtoff;

  external ffi.Pointer<ffi.Char> tm_zone;
}

final class itimerspec extends ffi.Struct {
  external timespec it_interval;

  external timespec it_value;
}

final class sigevent extends ffi.Opaque {}

typedef clock_t = __clock_t;
typedef __clock_t = ffi.Long;
typedef time_t = __time_t;
typedef clockid_t = __clockid_t;
typedef __clockid_t = ffi.Int;
typedef pid_t = __pid_t;
typedef __pid_t = ffi.Int;
typedef timer_t = __timer_t;
typedef __timer_t = ffi.Pointer<ffi.Void>;
typedef dogecoin_key = ffi.Int;
typedef dogecoin_pubkey = dogecoin_pubkey_;

final class dogecoin_script_ extends ffi.Struct {
  external ffi.Pointer<ffi.Int> data;

  @ffi.Int()
  external int limit;

  @ffi.Int()
  external int current;
}

final class dogecoin_tx_outpoint_ extends ffi.Struct {
  @ffi.Int()
  external int hash;

  @ffi.Int()
  external int n;
}

final class dogecoin_tx_in_ extends ffi.Struct {
  external dogecoin_tx_outpoint prevout;

  external ffi.Pointer<ffi.Int> script_sig;

  @ffi.Int()
  external int sequence;
}

typedef dogecoin_tx_outpoint = dogecoin_tx_outpoint_;

final class dogecoin_tx_out_ extends ffi.Struct {
  @ffi.Int()
  external int value;

  external ffi.Pointer<ffi.Int> script_pubkey;
}

final class dogecoin_tx_ extends ffi.Struct {
  @ffi.Int()
  external int version;

  external ffi.Pointer<ffi.Int> vin;

  external ffi.Pointer<ffi.Int> vout;

  @ffi.Int()
  external int locktime;
}

typedef dogecoin_tx_out = dogecoin_tx_out_;
typedef dogecoin_tx_in1 = dogecoin_tx_in_;
typedef dogecoin_tx1 = dogecoin_tx_;

abstract class dogecoin_tx_sign_result {
  static const int DOGECOIN_SIGN_UNKNOWN = 0;
  static const int DOGECOIN_SIGN_INVALID_KEY = -2;
  static const int DOGECOIN_SIGN_NO_KEY_MATCH = -3;
  static const int DOGECOIN_SIGN_SIGHASH_FAILED = -4;
  static const int DOGECOIN_SIGN_UNKNOWN_SCRIPT_TYPE = -5;
  static const int DOGECOIN_SIGN_INVALID_TX_OR_SCRIPT = -6;
  static const int DOGECOIN_SIGN_INPUTINDEX_OUT_OF_RANGE = -7;
  static const int DOGECOIN_SIGN_OK = 1;
}

/// It's a struct that has pointers to functions that do the actual memory management.
final class dogecoin_mem_mapper extends ffi.Struct {
  external ffi.Pointer<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int size)>>
      dogecoin_malloc;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Int count, ffi.Int size)>>
      dogecoin_calloc;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void> ptr, ffi.Int size)>> dogecoin_realloc;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> ptr)>>
      dogecoin_free;
}

final class const_buffer4 extends ffi.Opaque {}

final class const_buffer5 extends ffi.Opaque {}

final class const_buffer6 extends ffi.Opaque {}

final class const_buffer7 extends ffi.Opaque {}

final class const_buffer8 extends ffi.Opaque {}

final class const_buffer9 extends ffi.Opaque {}

final class const_buffer10 extends ffi.Opaque {}

final class const_buffer11 extends ffi.Opaque {}

final class const_buffer12 extends ffi.Opaque {}

final class const_buffer13 extends ffi.Opaque {}

final class const_buffer14 extends ffi.Opaque {}

final class const_buffer15 extends ffi.Opaque {}

/// Sighash version types
abstract class dogecoin_sig_version {
  static const int SIGVERSION_BASE = 0;
}

/// Script opcodes
abstract class opcodetype {
  static const int OP_0 = 0;
  static const int OP_FALSE = 0;
  static const int OP_PUSHDATA1 = 76;
  static const int OP_PUSHDATA2 = 77;
  static const int OP_PUSHDATA4 = 78;
  static const int OP_1NEGATE = 79;
  static const int OP_RESERVED = 80;
  static const int OP_1 = 81;
  static const int OP_TRUE = 81;
  static const int OP_2 = 82;
  static const int OP_3 = 83;
  static const int OP_4 = 84;
  static const int OP_5 = 85;
  static const int OP_6 = 86;
  static const int OP_7 = 87;
  static const int OP_8 = 88;
  static const int OP_9 = 89;
  static const int OP_10 = 90;
  static const int OP_11 = 91;
  static const int OP_12 = 92;
  static const int OP_13 = 93;
  static const int OP_14 = 94;
  static const int OP_15 = 95;
  static const int OP_16 = 96;
  static const int OP_NOP = 97;
  static const int OP_VER = 98;
  static const int OP_IF = 99;
  static const int OP_NOTIF = 100;
  static const int OP_VERIF = 101;
  static const int OP_VERNOTIF = 102;
  static const int OP_ELSE = 103;
  static const int OP_ENDIF = 104;
  static const int OP_VERIFY = 105;
  static const int OP_RETURN = 106;
  static const int OP_TOALTSTACK = 107;
  static const int OP_FROMALTSTACK = 108;
  static const int OP_2DROP = 109;
  static const int OP_2DUP = 110;
  static const int OP_3DUP = 111;
  static const int OP_2OVER = 112;
  static const int OP_2ROT = 113;
  static const int OP_2SWAP = 114;
  static const int OP_IFDUP = 115;
  static const int OP_DEPTH = 116;
  static const int OP_DROP = 117;
  static const int OP_DUP = 118;
  static const int OP_NIP = 119;
  static const int OP_OVER = 120;
  static const int OP_PICK = 121;
  static const int OP_ROLL = 122;
  static const int OP_ROT = 123;
  static const int OP_SWAP = 124;
  static const int OP_TUCK = 125;
  static const int OP_CAT = 126;
  static const int OP_SUBSTR = 127;
  static const int OP_LEFT = 128;
  static const int OP_RIGHT = 129;
  static const int OP_SIZE = 130;
  static const int OP_INVERT = 131;
  static const int OP_AND = 132;
  static const int OP_OR = 133;
  static const int OP_XOR = 134;
  static const int OP_EQUAL = 135;
  static const int OP_EQUALVERIFY = 136;
  static const int OP_RESERVED1 = 137;
  static const int OP_RESERVED2 = 138;
  static const int OP_1ADD = 139;
  static const int OP_1SUB = 140;
  static const int OP_2MUL = 141;
  static const int OP_2DIV = 142;
  static const int OP_NEGATE = 143;
  static const int OP_ABS = 144;
  static const int OP_NOT = 145;
  static const int OP_0NOTEQUAL = 146;
  static const int OP_ADD = 147;
  static const int OP_SUB = 148;
  static const int OP_MUL = 149;
  static const int OP_DIV = 150;
  static const int OP_MOD = 151;
  static const int OP_LSHIFT = 152;
  static const int OP_RSHIFT = 153;
  static const int OP_BOOLAND = 154;
  static const int OP_BOOLOR = 155;
  static const int OP_NUMEQUAL = 156;
  static const int OP_NUMEQUALVERIFY = 157;
  static const int OP_NUMNOTEQUAL = 158;
  static const int OP_LESSTHAN = 159;
  static const int OP_GREATERTHAN = 160;
  static const int OP_LESSTHANOREQUAL = 161;
  static const int OP_GREATERTHANOREQUAL = 162;
  static const int OP_MIN = 163;
  static const int OP_MAX = 164;
  static const int OP_WITHIN = 165;
  static const int OP_RIPEMD160 = 166;
  static const int OP_SHA1 = 167;
  static const int OP_SHA256 = 168;
  static const int OP_HASH160 = 169;
  static const int OP_HASH256 = 170;
  static const int OP_CODESEPARATOR = 171;
  static const int OP_CHECKSIG = 172;
  static const int OP_CHECKSIGVERIFY = 173;
  static const int OP_CHECKMULTISIG = 174;
  static const int OP_CHECKMULTISIGVERIFY = 175;
  static const int OP_NOP1 = 176;
  static const int OP_NOP2 = 177;
  static const int OP_CHECKLOCKTIMEVERIFY = 177;
  static const int OP_NOP3 = 178;
  static const int OP_NOP4 = 179;
  static const int OP_NOP5 = 180;
  static const int OP_NOP6 = 181;
  static const int OP_NOP7 = 182;
  static const int OP_NOP8 = 183;
  static const int OP_NOP9 = 184;
  static const int OP_NOP10 = 185;
  static const int OP_SMALLINTEGER = 250;
  static const int OP_PUBKEYS = 251;
  static const int OP_PUBKEYHASH = 253;
  static const int OP_PUBKEY = 254;
  static const int OP_INVALIDOPCODE = 255;
}

abstract class dogecoin_tx_out_type {
  static const int DOGECOIN_TX_INVALID = -1;
  static const int DOGECOIN_TX_NONSTANDARD = 0;
  static const int DOGECOIN_TX_PUBKEY = 1;
  static const int DOGECOIN_TX_PUBKEYHASH = 2;
  static const int DOGECOIN_TX_SCRIPTHASH = 3;
  static const int DOGECOIN_TX_MULTISIG = 4;
}

final class dogecoin_script_op_ extends ffi.Struct {
  @ffi.Int32()
  external int op;

  external ffi.Pointer<ffi.UnsignedChar> data;

  @ffi.Int()
  external int datalen;
}

typedef dogecoin_script_op1 = dogecoin_script_op_;

abstract class qrcodegen_Ecc {
  static const int qrcodegen_Ecc_LOW = 0;
  static const int qrcodegen_Ecc_MEDIUM = 1;
  static const int qrcodegen_Ecc_QUARTILE = 2;
  static const int qrcodegen_Ecc_HIGH = 3;
}

abstract class qrcodegen_Mask {
  static const int qrcodegen_Mask_AUTO = -1;
  static const int qrcodegen_Mask_0 = 0;
  static const int qrcodegen_Mask_1 = 1;
  static const int qrcodegen_Mask_2 = 2;
  static const int qrcodegen_Mask_3 = 3;
  static const int qrcodegen_Mask_4 = 4;
  static const int qrcodegen_Mask_5 = 5;
  static const int qrcodegen_Mask_6 = 6;
  static const int qrcodegen_Mask_7 = 7;
}

abstract class qrcodegen_Mode {
  static const int qrcodegen_Mode_NUMERIC = 1;
  static const int qrcodegen_Mode_ALPHANUMERIC = 2;
  static const int qrcodegen_Mode_BYTE = 4;
  static const int qrcodegen_Mode_KANJI = 8;
  static const int qrcodegen_Mode_ECI = 7;
}

final class qrcodegen_Segment extends ffi.Struct {
  @ffi.Int32()
  external int mode;

  @ffi.Int()
  external int numChars;

  external ffi.Pointer<ffi.Uint8> data;

  @ffi.Int()
  external int bitLength;
}

abstract class LodePNGColorType {
  static const int LCT_GREY = 0;
  static const int LCT_RGB = 2;
  static const int LCT_PALETTE = 3;
  static const int LCT_GREY_ALPHA = 4;
  static const int LCT_RGBA = 6;
  static const int LCT_MAX_OCTET_VALUE = 255;
}

final class LodePNGDecompressSettings extends ffi.Struct {
  @ffi.UnsignedInt()
  external int ignore_adler32;

  @ffi.UnsignedInt()
  external int ignore_nlen;

  @ffi.Int()
  external int max_output_size;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<LodePNGDecompressSettings>)>> custom_zlib;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<LodePNGDecompressSettings>)>> custom_inflate;

  external ffi.Pointer<ffi.Void> custom_context;
}

final class LodePNGCompressSettings extends ffi.Struct {
  @ffi.UnsignedInt()
  external int btype;

  @ffi.UnsignedInt()
  external int use_lz77;

  @ffi.UnsignedInt()
  external int windowsize;

  @ffi.UnsignedInt()
  external int minmatch;

  @ffi.UnsignedInt()
  external int nicematch;

  @ffi.UnsignedInt()
  external int lazymatching;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<LodePNGCompressSettings>)>> custom_zlib;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<LodePNGCompressSettings>)>> custom_deflate;

  external ffi.Pointer<ffi.Void> custom_context;
}

final class LodePNGColorMode extends ffi.Struct {
  @ffi.Int32()
  external int colortype;

  @ffi.UnsignedInt()
  external int bitdepth;

  external ffi.Pointer<ffi.UnsignedChar> palette;

  @ffi.Int()
  external int palettesize;

  @ffi.UnsignedInt()
  external int key_defined;

  @ffi.UnsignedInt()
  external int key_r;

  @ffi.UnsignedInt()
  external int key_g;

  @ffi.UnsignedInt()
  external int key_b;
}

final class LodePNGTime extends ffi.Struct {
  @ffi.UnsignedInt()
  external int year;

  @ffi.UnsignedInt()
  external int month;

  @ffi.UnsignedInt()
  external int day;

  @ffi.UnsignedInt()
  external int hour;

  @ffi.UnsignedInt()
  external int minute;

  @ffi.UnsignedInt()
  external int second;
}

final class LodePNGInfo extends ffi.Struct {
  @ffi.UnsignedInt()
  external int compression_method;

  @ffi.UnsignedInt()
  external int filter_method;

  @ffi.UnsignedInt()
  external int interlace_method;

  external LodePNGColorMode color;

  @ffi.UnsignedInt()
  external int background_defined;

  @ffi.UnsignedInt()
  external int background_r;

  @ffi.UnsignedInt()
  external int background_g;

  @ffi.UnsignedInt()
  external int background_b;

  @ffi.Int()
  external int text_num;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> text_keys;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> text_strings;

  @ffi.Int()
  external int itext_num;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> itext_keys;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> itext_langtags;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> itext_transkeys;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> itext_strings;

  @ffi.UnsignedInt()
  external int time_defined;

  external LodePNGTime time;

  @ffi.UnsignedInt()
  external int phys_defined;

  @ffi.UnsignedInt()
  external int phys_x;

  @ffi.UnsignedInt()
  external int phys_y;

  @ffi.UnsignedInt()
  external int phys_unit;

  @ffi.UnsignedInt()
  external int gama_defined;

  @ffi.UnsignedInt()
  external int gama_gamma;

  @ffi.UnsignedInt()
  external int chrm_defined;

  @ffi.UnsignedInt()
  external int chrm_white_x;

  @ffi.UnsignedInt()
  external int chrm_white_y;

  @ffi.UnsignedInt()
  external int chrm_red_x;

  @ffi.UnsignedInt()
  external int chrm_red_y;

  @ffi.UnsignedInt()
  external int chrm_green_x;

  @ffi.UnsignedInt()
  external int chrm_green_y;

  @ffi.UnsignedInt()
  external int chrm_blue_x;

  @ffi.UnsignedInt()
  external int chrm_blue_y;

  @ffi.UnsignedInt()
  external int srgb_defined;

  @ffi.UnsignedInt()
  external int srgb_intent;

  @ffi.UnsignedInt()
  external int iccp_defined;

  external ffi.Pointer<ffi.Char> iccp_name;

  external ffi.Pointer<ffi.UnsignedChar> iccp_profile;

  @ffi.UnsignedInt()
  external int iccp_profile_size;

  @ffi.UnsignedInt()
  external int sbit_defined;

  @ffi.UnsignedInt()
  external int sbit_r;

  @ffi.UnsignedInt()
  external int sbit_g;

  @ffi.UnsignedInt()
  external int sbit_b;

  @ffi.UnsignedInt()
  external int sbit_a;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Pointer<ffi.UnsignedChar>> unknown_chunks_data;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Int> unknown_chunks_size;
}

final class LodePNGDecoderSettings extends ffi.Struct {
  external LodePNGDecompressSettings zlibsettings;

  @ffi.UnsignedInt()
  external int ignore_crc;

  @ffi.UnsignedInt()
  external int ignore_critical;

  @ffi.UnsignedInt()
  external int ignore_end;

  @ffi.UnsignedInt()
  external int color_convert;

  @ffi.UnsignedInt()
  external int read_text_chunks;

  @ffi.UnsignedInt()
  external int remember_unknown_chunks;

  @ffi.Int()
  external int max_text_size;

  @ffi.Int()
  external int max_icc_size;
}

abstract class LodePNGFilterStrategy {
  static const int LFS_ZERO = 0;
  static const int LFS_ONE = 1;
  static const int LFS_TWO = 2;
  static const int LFS_THREE = 3;
  static const int LFS_FOUR = 4;
  static const int LFS_MINSUM = 5;
  static const int LFS_ENTROPY = 6;
  static const int LFS_BRUTE_FORCE = 7;
  static const int LFS_PREDEFINED = 8;
}

final class LodePNGColorStats extends ffi.Struct {
  @ffi.UnsignedInt()
  external int colored;

  @ffi.UnsignedInt()
  external int key;

  @ffi.UnsignedShort()
  external int key_r;

  @ffi.UnsignedShort()
  external int key_g;

  @ffi.UnsignedShort()
  external int key_b;

  @ffi.UnsignedInt()
  external int alpha;

  @ffi.UnsignedInt()
  external int numcolors;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.UnsignedChar> palette;

  @ffi.UnsignedInt()
  external int bits;

  @ffi.Int()
  external int numpixels;

  @ffi.UnsignedInt()
  external int allow_palette;

  @ffi.UnsignedInt()
  external int allow_greyscale;
}

final class LodePNGEncoderSettings extends ffi.Struct {
  external LodePNGCompressSettings zlibsettings;

  @ffi.UnsignedInt()
  external int auto_convert;

  @ffi.UnsignedInt()
  external int filter_palette_zero;

  @ffi.Int32()
  external int filter_strategy;

  external ffi.Pointer<ffi.UnsignedChar> predefined_filters;

  @ffi.UnsignedInt()
  external int force_palette;

  @ffi.UnsignedInt()
  external int add_id;

  @ffi.UnsignedInt()
  external int text_compression;
}

final class LodePNGState extends ffi.Struct {
  external LodePNGDecoderSettings decoder;

  external LodePNGEncoderSettings encoder;

  external LodePNGColorMode info_raw;

  external LodePNGInfo info_png;

  @ffi.UnsignedInt()
  external int error;
}

typedef __int32_t = ffi.Int;

/// JPEG encoder
final class jpec_enc_t_ extends ffi.Struct {
  /// Input image data
  external ffi.Pointer<ffi.Uint8> img;

  @ffi.Uint16()
  external int w;

  @ffi.Uint16()
  external int h;

  @ffi.Uint16()
  external int w8;

  /// JPEG extensible byte buffer
  external ffi.Pointer<jpec_buffer_t> buf;

  /// Compression parameters
  @ffi.Int()
  external int qual;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Int> dqt;

  /// Current 8x8 block
  @ffi.Int()
  external int bmax;

  @ffi.Int()
  external int bnum;

  @ffi.Uint16()
  external int bx;

  @ffi.Uint16()
  external int by;

  external jpec_block_t block;

  /// Huffman entropy coder
  external ffi.Pointer<jpec_huff_skel_t> hskel;
}

/// Extensible byte buffer
typedef jpec_buffer_t = jpec_buffer_t_;

/// Extensible byte buffer
final class jpec_buffer_t_ extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> stream;

  @ffi.Int()
  external int len;

  @ffi.Int()
  external int siz;
}

/// Structure used to hold and process an image 8x8 block
typedef jpec_block_t = jpec_block_t_;

/// Structure used to hold and process an image 8x8 block
final class jpec_block_t_ extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<ffi.Float> dct;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Int> quant;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Int> zz;

  @ffi.Int()
  external int len;
}

/// Skeleton for an Huffman entropy coder
typedef jpec_huff_skel_t = jpec_huff_skel_t_;

/// Skeleton for an Huffman entropy coder
final class jpec_huff_skel_t_ extends ffi.Struct {
  external ffi.Pointer<ffi.Void> opq;

  external ffi.Pointer<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> opq)>> del;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void> opq,
              ffi.Pointer<jpec_block_t> block,
              ffi.Pointer<jpec_buffer_t> buf)>> encode_block;
}

/// Type of a JPEG encoder object
typedef jpec_enc_t = jpec_enc_t_;

/// Entropy coding data that hold state along blocks
final class jpec_huff_state_t_ extends ffi.Struct {
  @ffi.Int32()
  external int buffer;

  @ffi.Int()
  external int nbits;

  @ffi.Int()
  external int dc;

  external ffi.Pointer<jpec_buffer_t> buf;
}

/// Type of an Huffman JPEG encoder
final class jpec_huff_t_ extends ffi.Struct {
  external jpec_huff_state_t state;
}

/// Entropy coding data that hold state along blocks
typedef jpec_huff_state_t = jpec_huff_state_t_;

/// Type of an Huffman JPEG encoder
typedef jpec_huff_t = jpec_huff_t_;

const int NODE_CONNECTIONSTATE_DISCONNECTED = 0;

const int NODE_CONNECTIONSTATE_CONNECTING = 5;

const int NODE_CONNECTIONSTATE_CONNECTED = 50;

const int NODE_CONNECTIONSTATE_ERRORED = 100;

const int NODE_CONNECTIONSTATE_ERRORED_TIMEOUT = 101;

const int MSG_OOB = 1;

const int MSG_PEEK = 2;

const int MSG_DONTROUTE = 4;

const int MSG_CTRUNC = 8;

const int MSG_PROXY = 16;

const int MSG_TRUNC = 32;

const int MSG_DONTWAIT = 64;

const int MSG_EOR = 128;

const int MSG_WAITALL = 256;

const int MSG_FIN = 512;

const int MSG_SYN = 1024;

const int MSG_CONFIRM = 2048;

const int MSG_RST = 4096;

const int MSG_ERRQUEUE = 8192;

const int MSG_NOSIGNAL = 16384;

const int MSG_MORE = 32768;

const int MSG_WAITFORONE = 65536;

const int MSG_BATCH = 262144;

const int MSG_ZEROCOPY = 67108864;

const int MSG_FASTOPEN = 536870912;

const int MSG_CMSG_CLOEXEC = 1073741824;

const int SCM_RIGHTS = 1;

const int SHUT_RD = 0;

const int SHUT_WR = 1;

const int SHUT_RDWR = 2;

const int IPPROTO_IP = 0;

const int IPPROTO_ICMP = 1;

const int IPPROTO_IGMP = 2;

const int IPPROTO_IPIP = 4;

const int IPPROTO_TCP = 6;

const int IPPROTO_EGP = 8;

const int IPPROTO_PUP = 12;

const int IPPROTO_UDP = 17;

const int IPPROTO_IDP = 22;

const int IPPROTO_TP = 29;

const int IPPROTO_DCCP = 33;

const int IPPROTO_IPV6 = 41;

const int IPPROTO_RSVP = 46;

const int IPPROTO_GRE = 47;

const int IPPROTO_ESP = 50;

const int IPPROTO_AH = 51;

const int IPPROTO_MTP = 92;

const int IPPROTO_BEETPH = 94;

const int IPPROTO_ENCAP = 98;

const int IPPROTO_PIM = 103;

const int IPPROTO_COMP = 108;

const int IPPROTO_SCTP = 132;

const int IPPROTO_UDPLITE = 136;

const int IPPROTO_MPLS = 137;

const int IPPROTO_ETHERNET = 143;

const int IPPROTO_RAW = 255;

const int IPPROTO_MPTCP = 262;

const int IPPROTO_MAX = 263;

const int IPPROTO_HOPOPTS = 0;

const int IPPROTO_ROUTING = 43;

const int IPPROTO_FRAGMENT = 44;

const int IPPROTO_ICMPV6 = 58;

const int IPPROTO_NONE = 59;

const int IPPROTO_DSTOPTS = 60;

const int IPPROTO_MH = 135;

const int IPPORT_ECHO = 7;

const int IPPORT_DISCARD = 9;

const int IPPORT_SYSTAT = 11;

const int IPPORT_DAYTIME = 13;

const int IPPORT_NETSTAT = 15;

const int IPPORT_FTP = 21;

const int IPPORT_TELNET = 23;

const int IPPORT_SMTP = 25;

const int IPPORT_TIMESERVER = 37;

const int IPPORT_NAMESERVER = 42;

const int IPPORT_WHOIS = 43;

const int IPPORT_MTP = 57;

const int IPPORT_TFTP = 69;

const int IPPORT_RJE = 77;

const int IPPORT_FINGER = 79;

const int IPPORT_TTYLINK = 87;

const int IPPORT_SUPDUP = 95;

const int IPPORT_EXECSERVER = 512;

const int IPPORT_LOGINSERVER = 513;

const int IPPORT_CMDSERVER = 514;

const int IPPORT_EFSSERVER = 520;

const int IPPORT_BIFFUDP = 512;

const int IPPORT_WHOSERVER = 513;

const int IPPORT_ROUTESERVER = 520;

const int IPPORT_RESERVED = 1024;

const int IPPORT_USERRESERVED = 5000;

const int SIGHASH_ALL = 1;

const int SIGHASH_NONE = 2;

const int SIGHASH_SINGLE = 3;

const int SIGHASH_ANYONECANPAY = 128;

const int _ISupper = 256;

const int _ISlower = 512;

const int _ISalpha = 1024;

const int _ISdigit = 2048;

const int _ISxdigit = 4096;

const int _ISspace = 8192;

const int _ISprint = 16384;

const int _ISgraph = 32768;

const int _ISblank = 1;

const int _IScntrl = 2;

const int _ISpunct = 4;

const int _ISalnum = 8;

const int FP_NAN = 0;

const int FP_INFINITE = 1;

const int FP_ZERO = 2;

const int FP_SUBNORMAL = 3;

const int FP_NORMAL = 4;

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_60559_BFP__ = 201404;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_60559_COMPLEX__ = 201404;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 36;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int DOGECOIN_BIP32_CHAINCODE_SIZE = 32;

const String BIP44_PURPOSE = '44';

const String BIP44_COIN_TYPE = '3';

const String BIP44_COIN_TYPE_TEST = '1';

const String BIP44_CHANGE_EXTERNAL = '0';

const String BIP44_CHANGE_INTERNAL = '1';

const int BIP44_CHANGE_LEVEL_SIZE = 2;

const String SLIP44_KEY_PATH = 'm/44\'/';

const int BIP44_MAX_ADDRESS = 28;

const int BIP44_KEY_PATH_MAX_LENGTH = 255;

const int BIP44_KEY_PATH_MAX_SIZE = 256;

const int BIP44_ADDRESS_GAP_LIMIT = 20;

const int BIP44_FIRST_ACCOUNT_NODE = 0;

const int BIP44_FIRST_ADDRESS_INDEX = 0;

const int _LIBC_LIMITS_H_ = 1;

const int MB_LEN_MAX = 16;

const int LLONG_MIN = -9223372036854775808;

const int LLONG_MAX = 9223372036854775807;

const int ULLONG_MAX = -1;

const int _BITS_POSIX1_LIM_H = 1;

const int _POSIX_AIO_LISTIO_MAX = 2;

const int _POSIX_AIO_MAX = 1;

const int _POSIX_ARG_MAX = 4096;

const int _POSIX_CHILD_MAX = 25;

const int _POSIX_DELAYTIMER_MAX = 32;

const int _POSIX_HOST_NAME_MAX = 255;

const int _POSIX_LINK_MAX = 8;

const int _POSIX_LOGIN_NAME_MAX = 9;

const int _POSIX_MAX_CANON = 255;

const int _POSIX_MAX_INPUT = 255;

const int _POSIX_MQ_OPEN_MAX = 8;

const int _POSIX_MQ_PRIO_MAX = 32;

const int _POSIX_NAME_MAX = 14;

const int _POSIX_NGROUPS_MAX = 8;

const int _POSIX_OPEN_MAX = 20;

const int _POSIX_PATH_MAX = 256;

const int _POSIX_PIPE_BUF = 512;

const int _POSIX_RE_DUP_MAX = 255;

const int _POSIX_RTSIG_MAX = 8;

const int _POSIX_SEM_NSEMS_MAX = 256;

const int _POSIX_SEM_VALUE_MAX = 32767;

const int _POSIX_SIGQUEUE_MAX = 32;

const int _POSIX_SSIZE_MAX = 32767;

const int _POSIX_STREAM_MAX = 8;

const int _POSIX_SYMLINK_MAX = 255;

const int _POSIX_SYMLOOP_MAX = 8;

const int _POSIX_TIMER_MAX = 32;

const int _POSIX_TTY_NAME_MAX = 9;

const int _POSIX_TZNAME_MAX = 6;

const int _POSIX_CLOCKRES_MIN = 20000000;

const int NGROUPS_MAX = 65536;

const int MAX_CANON = 255;

const int MAX_INPUT = 255;

const int NAME_MAX = 255;

const int PATH_MAX = 4096;

const int PIPE_BUF = 4096;

const int XATTR_NAME_MAX = 255;

const int XATTR_SIZE_MAX = 65536;

const int XATTR_LIST_MAX = 65536;

const int RTSIG_MAX = 32;

const int _POSIX_THREAD_KEYS_MAX = 128;

const int PTHREAD_KEYS_MAX = 1024;

const int _POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4;

const int PTHREAD_DESTRUCTOR_ITERATIONS = 4;

const int _POSIX_THREAD_THREADS_MAX = 64;

const int AIO_PRIO_DELTA_MAX = 20;

const int DELAYTIMER_MAX = 2147483647;

const int TTY_NAME_MAX = 32;

const int LOGIN_NAME_MAX = 256;

const int HOST_NAME_MAX = 64;

const int MQ_PRIO_MAX = 32768;

const int SEM_VALUE_MAX = 2147483647;

const int _BITS_POSIX2_LIM_H = 1;

const int _POSIX2_BC_BASE_MAX = 99;

const int _POSIX2_BC_DIM_MAX = 2048;

const int _POSIX2_BC_SCALE_MAX = 99;

const int _POSIX2_BC_STRING_MAX = 1000;

const int _POSIX2_COLL_WEIGHTS_MAX = 2;

const int _POSIX2_EXPR_NEST_MAX = 32;

const int _POSIX2_LINE_MAX = 2048;

const int _POSIX2_RE_DUP_MAX = 255;

const int _POSIX2_CHARCLASS_NAME_MAX = 14;

const int BC_BASE_MAX = 99;

const int BC_DIM_MAX = 2048;

const int BC_SCALE_MAX = 99;

const int BC_STRING_MAX = 1000;

const int COLL_WEIGHTS_MAX = 255;

const int EXPR_NEST_MAX = 32;

const int LINE_MAX = 2048;

const int CHARCLASS_NAME_MAX = 2048;

const int RE_DUP_MAX = 32767;

const int _STDIO_H = 1;

const int _____fpos_t_defined = 1;

const int ____mbstate_t_defined = 1;

const int _____fpos64_t_defined = 1;

const int ____FILE_defined = 1;

const int __FILE_defined = 1;

const int __struct_FILE_defined = 1;

const int _IO_EOF_SEEN = 16;

const int _IO_ERR_SEEN = 32;

const int _IO_USER_LOCK = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 8192;

const int EOF = -1;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const String P_tmpdir = '/tmp';

const int _BITS_STDIO_LIM_H = 1;

const int L_tmpnam = 20;

const int TMP_MAX = 238328;

const int FILENAME_MAX = 4096;

const int L_ctermid = 9;

const int FOPEN_MAX = 16;

const int __HAVE_FLOAT128 = 0;

const int __HAVE_DISTINCT_FLOAT128 = 0;

const int __HAVE_FLOAT64X = 1;

const int __HAVE_FLOAT64X_LONG_DOUBLE = 1;

const int __HAVE_FLOAT16 = 0;

const int __HAVE_FLOAT32 = 1;

const int __HAVE_FLOAT64 = 1;

const int __HAVE_FLOAT32X = 1;

const int __HAVE_FLOAT128X = 0;

const int __HAVE_DISTINCT_FLOAT16 = 0;

const int __HAVE_DISTINCT_FLOAT32 = 0;

const int __HAVE_DISTINCT_FLOAT64 = 0;

const int __HAVE_DISTINCT_FLOAT32X = 0;

const int __HAVE_DISTINCT_FLOAT64X = 0;

const int __HAVE_DISTINCT_FLOAT128X = 0;

const int __HAVE_FLOAT128_UNLIKE_LDBL = 0;

const int __HAVE_FLOATN_NOT_TYPEDEF = 0;

const int _STDLIB_H = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WSTOPPED = 2;

const int WEXITED = 4;

const int WCONTINUED = 8;

const int WNOWAIT = 16777216;

const int __WNOTHREAD = 536870912;

const int __WALL = 1073741824;

const int __WCLONE = 2147483648;

const int __W_CONTINUED = 65535;

const int __WCOREFLAG = 128;

const int __ldiv_t_defined = 1;

const int __lldiv_t_defined = 1;

const int RAND_MAX = 2147483647;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int _SYS_TYPES_H = 1;

const int __clock_t_defined = 1;

const int __clockid_t_defined = 1;

const int __time_t_defined = 1;

const int __timer_t_defined = 1;

const int __BIT_TYPES_DEFINED__ = 1;

const int _ENDIAN_H = 1;

const int _BITS_ENDIAN_H = 1;

const int __LITTLE_ENDIAN = 1234;

const int __BIG_ENDIAN = 4321;

const int __PDP_ENDIAN = 3412;

const int _BITS_ENDIANNESS_H = 1;

const int __BYTE_ORDER = 1234;

const int __FLOAT_WORD_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int _BITS_BYTESWAP_H = 1;

const int _BITS_UINTN_IDENTITY_H = 1;

const int _SYS_SELECT_H = 1;

const int __sigset_t_defined = 1;

const int _SIGSET_NWORDS = 16;

const int __timeval_defined = 1;

const int _STRUCT_TIMESPEC = 1;

const int __NFDBITS = 64;

const int FD_SETSIZE = 1024;

const int NFDBITS = 64;

const int _BITS_PTHREADTYPES_COMMON_H = 1;

const int _THREAD_SHARED_TYPES_H = 1;

const int _BITS_PTHREADTYPES_ARCH_H = 1;

const int __SIZEOF_PTHREAD_MUTEX_T = 40;

const int __SIZEOF_PTHREAD_ATTR_T = 56;

const int __SIZEOF_PTHREAD_RWLOCK_T = 56;

const int __SIZEOF_PTHREAD_BARRIER_T = 32;

const int __SIZEOF_PTHREAD_MUTEXATTR_T = 4;

const int __SIZEOF_PTHREAD_COND_T = 48;

const int __SIZEOF_PTHREAD_CONDATTR_T = 4;

const int __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;

const int __SIZEOF_PTHREAD_BARRIERATTR_T = 4;

const int _THREAD_MUTEX_INTERNAL_H = 1;

const int __PTHREAD_MUTEX_HAVE_PREV = 1;

const int __PTHREAD_RWLOCK_ELISION_EXTRA = 0;

const int __have_pthread_attr_t = 1;

const int _ALLOCA_H = 1;

const int _STRING_H = 1;

const int _BITS_TYPES_LOCALE_T_H = 1;

const int _BITS_TYPES___LOCALE_T_H = 1;

const int _STRINGS_H = 1;

const int true1 = 1;

const int false1 = 0;

const int ENABLE_DEBUG = 0;

const int DOGECOIN_ECKEY_UNCOMPRESSED_LENGTH = 65;

const int DOGECOIN_ECKEY_COMPRESSED_LENGTH = 33;

const int DOGECOIN_ECKEY_PKEY_LENGTH = 32;

const int DOGECOIN_HASH_LENGTH = 32;

const int MAX_INT32_STRINGLEN = 12;

const int HD_MASTERKEY_STRINGLEN = 112;

const int P2PKH_ADDR_STRINGLEN = 35;

const int WIF_UNCOMPRESSED_PRIVKEY_STRINGLEN = 53;

const int DERIVED_PATH_STRINGLEN = 33;

const int HASH_NONFATAL_OOM = 0;

const int HASH_INITIAL_NUM_BUCKETS = 32;

const int HASH_INITIAL_NUM_BUCKETS_LOG2 = 5;

const int HASH_BKT_CAPACITY_THRESH = 10;

const int HASH_BLOOM_BYTELEN = 0;

const int HASH_SIGNATURE = 2685476833;

const int HASH_BLOOM_SIGNATURE = 2971803890;

const int ENT_STRING_SIZE = 3;

const int MAX_HEX_ENT_SIZE = 65;

const int MAX_MNEMONIC_SIZE = 1024;

const int MAX_PASS_SIZE = 256;

const int MAX_SEED_SIZE = 64;

const int CHG_LEVEL_STRING_SIZE = 2;

const int USE_BIP39_CACHE = 1;

const int BIP39_CACHE_SIZE = 4;

const int _UNISTD_H = 1;

const int R_OK = 4;

const int W_OK = 2;

const int X_OK = 4;

const int F_OK = 0;

const int STDIN_FILENO = 0;

const int STDOUT_FILENO = 1;

const int STDERR_FILENO = 2;

const int SHA256_BLOCK_LENGTH = 64;

const int SHA256_DIGEST_LENGTH = 32;

const int SHA256_DIGEST_STRING_LENGTH = 65;

const int SHA512_BLOCK_LENGTH = 128;

const int SHA512_DIGEST_LENGTH = 64;

const int SHA512_DIGEST_STRING_LENGTH = 129;

const int _ARPA_INET_H = 1;

const int _NETINET_IN_H = 1;

const int _SYS_SOCKET_H = 1;

const int __iovec_defined = 1;

const int SOCK_STREAM = 1;

const int SOCK_DGRAM = 2;

const int SOCK_RAW = 3;

const int SOCK_RDM = 4;

const int SOCK_SEQPACKET = 5;

const int SOCK_DCCP = 6;

const int SOCK_PACKET = 10;

const int SOCK_CLOEXEC = 524288;

const int SOCK_NONBLOCK = 2048;

const int PF_UNSPEC = 0;

const int PF_LOCAL = 1;

const int PF_UNIX = 1;

const int PF_FILE = 1;

const int PF_INET = 2;

const int PF_AX25 = 3;

const int PF_IPX = 4;

const int PF_APPLETALK = 5;

const int PF_NETROM = 6;

const int PF_BRIDGE = 7;

const int PF_ATMPVC = 8;

const int PF_X25 = 9;

const int PF_INET6 = 10;

const int PF_ROSE = 11;

const int PF_DECnet = 12;

const int PF_NETBEUI = 13;

const int PF_SECURITY = 14;

const int PF_KEY = 15;

const int PF_NETLINK = 16;

const int PF_ROUTE = 16;

const int PF_PACKET = 17;

const int PF_ASH = 18;

const int PF_ECONET = 19;

const int PF_ATMSVC = 20;

const int PF_RDS = 21;

const int PF_SNA = 22;

const int PF_IRDA = 23;

const int PF_PPPOX = 24;

const int PF_WANPIPE = 25;

const int PF_LLC = 26;

const int PF_IB = 27;

const int PF_MPLS = 28;

const int PF_CAN = 29;

const int PF_TIPC = 30;

const int PF_BLUETOOTH = 31;

const int PF_IUCV = 32;

const int PF_RXRPC = 33;

const int PF_ISDN = 34;

const int PF_PHONET = 35;

const int PF_IEEE802154 = 36;

const int PF_CAIF = 37;

const int PF_ALG = 38;

const int PF_NFC = 39;

const int PF_VSOCK = 40;

const int PF_KCM = 41;

const int PF_QIPCRTR = 42;

const int PF_SMC = 43;

const int PF_XDP = 44;

const int PF_MCTP = 45;

const int PF_MAX = 46;

const int AF_UNSPEC = 0;

const int AF_LOCAL = 1;

const int AF_UNIX = 1;

const int AF_FILE = 1;

const int AF_INET = 2;

const int AF_AX25 = 3;

const int AF_IPX = 4;

const int AF_APPLETALK = 5;

const int AF_NETROM = 6;

const int AF_BRIDGE = 7;

const int AF_ATMPVC = 8;

const int AF_X25 = 9;

const int AF_INET6 = 10;

const int AF_ROSE = 11;

const int AF_DECnet = 12;

const int AF_NETBEUI = 13;

const int AF_SECURITY = 14;

const int AF_KEY = 15;

const int AF_NETLINK = 16;

const int AF_ROUTE = 16;

const int AF_PACKET = 17;

const int AF_ASH = 18;

const int AF_ECONET = 19;

const int AF_ATMSVC = 20;

const int AF_RDS = 21;

const int AF_SNA = 22;

const int AF_IRDA = 23;

const int AF_PPPOX = 24;

const int AF_WANPIPE = 25;

const int AF_LLC = 26;

const int AF_IB = 27;

const int AF_MPLS = 28;

const int AF_CAN = 29;

const int AF_TIPC = 30;

const int AF_BLUETOOTH = 31;

const int AF_IUCV = 32;

const int AF_RXRPC = 33;

const int AF_ISDN = 34;

const int AF_PHONET = 35;

const int AF_IEEE802154 = 36;

const int AF_CAIF = 37;

const int AF_ALG = 38;

const int AF_NFC = 39;

const int AF_VSOCK = 40;

const int AF_KCM = 41;

const int AF_QIPCRTR = 42;

const int AF_SMC = 43;

const int AF_XDP = 44;

const int AF_MCTP = 45;

const int AF_MAX = 46;

const int SOL_RAW = 255;

const int SOL_DECNET = 261;

const int SOL_X25 = 262;

const int SOL_PACKET = 263;

const int SOL_ATM = 264;

const int SOL_AAL = 265;

const int SOL_IRDA = 266;

const int SOL_NETBEUI = 267;

const int SOL_LLC = 268;

const int SOL_DCCP = 269;

const int SOL_NETLINK = 270;

const int SOL_TIPC = 271;

const int SOL_RXRPC = 272;

const int SOL_PPPOL2TP = 273;

const int SOL_BLUETOOTH = 274;

const int SOL_PNPIPE = 275;

const int SOL_RDS = 276;

const int SOL_IUCV = 277;

const int SOL_CAIF = 278;

const int SOL_ALG = 279;

const int SOL_NFC = 280;

const int SOL_KCM = 281;

const int SOL_TLS = 282;

const int SOL_XDP = 283;

const int SOL_MPTCP = 284;

const int SOL_MCTP = 285;

const int SOL_SMC = 286;

const int SOMAXCONN = 4096;

const int _BITS_SOCKADDR_H = 1;

const int __SOCKADDR_COMMON_SIZE = 2;

const int _SS_SIZE = 128;

const int _SS_PADSIZE = 118;

const int MSG_OOB1 = 1;

const int MSG_PEEK1 = 2;

const int MSG_DONTROUTE1 = 4;

const int MSG_CTRUNC1 = 8;

const int MSG_PROXY1 = 16;

const int MSG_TRUNC1 = 32;

const int MSG_DONTWAIT1 = 64;

const int MSG_EOR1 = 128;

const int MSG_WAITALL1 = 256;

const int MSG_FIN1 = 512;

const int MSG_SYN1 = 1024;

const int MSG_CONFIRM1 = 2048;

const int MSG_RST1 = 4096;

const int MSG_ERRQUEUE1 = 8192;

const int MSG_NOSIGNAL1 = 16384;

const int MSG_MORE1 = 32768;

const int MSG_WAITFORONE1 = 65536;

const int MSG_BATCH1 = 262144;

const int MSG_ZEROCOPY1 = 67108864;

const int MSG_FASTOPEN1 = 536870912;

const int MSG_CMSG_CLOEXEC1 = 1073741824;

const int SCM_RIGHTS1 = 1;

const int __BITS_PER_LONG = 64;

const int FIOSETOWN = 35073;

const int SIOCSPGRP = 35074;

const int FIOGETOWN = 35075;

const int SIOCGPGRP = 35076;

const int SIOCATMARK = 35077;

const int SIOCGSTAMP_OLD = 35078;

const int SIOCGSTAMPNS_OLD = 35079;

const int SOL_SOCKET = 1;

const int SO_DEBUG = 1;

const int SO_REUSEADDR = 2;

const int SO_TYPE = 3;

const int SO_ERROR = 4;

const int SO_DONTROUTE = 5;

const int SO_BROADCAST = 6;

const int SO_SNDBUF = 7;

const int SO_RCVBUF = 8;

const int SO_SNDBUFFORCE = 32;

const int SO_RCVBUFFORCE = 33;

const int SO_KEEPALIVE = 9;

const int SO_OOBINLINE = 10;

const int SO_NO_CHECK = 11;

const int SO_PRIORITY = 12;

const int SO_LINGER = 13;

const int SO_BSDCOMPAT = 14;

const int SO_REUSEPORT = 15;

const int SO_PASSCRED = 16;

const int SO_PEERCRED = 17;

const int SO_RCVLOWAT = 18;

const int SO_SNDLOWAT = 19;

const int SO_RCVTIMEO_OLD = 20;

const int SO_SNDTIMEO_OLD = 21;

const int SO_SECURITY_AUTHENTICATION = 22;

const int SO_SECURITY_ENCRYPTION_TRANSPORT = 23;

const int SO_SECURITY_ENCRYPTION_NETWORK = 24;

const int SO_BINDTODEVICE = 25;

const int SO_ATTACH_FILTER = 26;

const int SO_DETACH_FILTER = 27;

const int SO_GET_FILTER = 26;

const int SO_PEERNAME = 28;

const int SO_ACCEPTCONN = 30;

const int SO_PEERSEC = 31;

const int SO_PASSSEC = 34;

const int SO_MARK = 36;

const int SO_PROTOCOL = 38;

const int SO_DOMAIN = 39;

const int SO_RXQ_OVFL = 40;

const int SO_WIFI_STATUS = 41;

const int SCM_WIFI_STATUS = 41;

const int SO_PEEK_OFF = 42;

const int SO_NOFCS = 43;

const int SO_LOCK_FILTER = 44;

const int SO_SELECT_ERR_QUEUE = 45;

const int SO_BUSY_POLL = 46;

const int SO_MAX_PACING_RATE = 47;

const int SO_BPF_EXTENSIONS = 48;

const int SO_INCOMING_CPU = 49;

const int SO_ATTACH_BPF = 50;

const int SO_DETACH_BPF = 27;

const int SO_ATTACH_REUSEPORT_CBPF = 51;

const int SO_ATTACH_REUSEPORT_EBPF = 52;

const int SO_CNX_ADVICE = 53;

const int SCM_TIMESTAMPING_OPT_STATS = 54;

const int SO_MEMINFO = 55;

const int SO_INCOMING_NAPI_ID = 56;

const int SO_COOKIE = 57;

const int SCM_TIMESTAMPING_PKTINFO = 58;

const int SO_PEERGROUPS = 59;

const int SO_ZEROCOPY = 60;

const int SO_TXTIME = 61;

const int SCM_TXTIME = 61;

const int SO_BINDTOIFINDEX = 62;

const int SO_TIMESTAMP_OLD = 29;

const int SO_TIMESTAMPNS_OLD = 35;

const int SO_TIMESTAMPING_OLD = 37;

const int SO_TIMESTAMP_NEW = 63;

const int SO_TIMESTAMPNS_NEW = 64;

const int SO_TIMESTAMPING_NEW = 65;

const int SO_RCVTIMEO_NEW = 66;

const int SO_SNDTIMEO_NEW = 67;

const int SO_DETACH_REUSEPORT_BPF = 68;

const int SO_PREFER_BUSY_POLL = 69;

const int SO_BUSY_POLL_BUDGET = 70;

const int SO_NETNS_COOKIE = 71;

const int SO_BUF_LOCK = 72;

const int SO_RESERVE_MEM = 73;

const int SO_TXREHASH = 74;

const int SO_RCVMARK = 75;

const int SO_TIMESTAMP = 29;

const int SO_TIMESTAMPNS = 35;

const int SO_TIMESTAMPING = 37;

const int SO_RCVTIMEO = 20;

const int SO_SNDTIMEO = 21;

const int SCM_TIMESTAMP = 29;

const int SCM_TIMESTAMPNS = 35;

const int SCM_TIMESTAMPING = 37;

const int __osockaddr_defined = 1;

const int SHUT_RD1 = 0;

const int SHUT_WR1 = 1;

const int SHUT_RDWR1 = 2;

const int __USE_KERNEL_IPV6_DEFS = 0;

const int IP_OPTIONS = 4;

const int IP_HDRINCL = 3;

const int IP_TOS = 1;

const int IP_TTL = 2;

const int IP_RECVOPTS = 6;

const int IP_RECVRETOPTS = 7;

const int IP_RETOPTS = 7;

const int IP_MULTICAST_IF = 32;

const int IP_MULTICAST_TTL = 33;

const int IP_MULTICAST_LOOP = 34;

const int IP_ADD_MEMBERSHIP = 35;

const int IP_DROP_MEMBERSHIP = 36;

const int IP_UNBLOCK_SOURCE = 37;

const int IP_BLOCK_SOURCE = 38;

const int IP_ADD_SOURCE_MEMBERSHIP = 39;

const int IP_DROP_SOURCE_MEMBERSHIP = 40;

const int IP_MSFILTER = 41;

const int MCAST_JOIN_GROUP = 42;

const int MCAST_BLOCK_SOURCE = 43;

const int MCAST_UNBLOCK_SOURCE = 44;

const int MCAST_LEAVE_GROUP = 45;

const int MCAST_JOIN_SOURCE_GROUP = 46;

const int MCAST_LEAVE_SOURCE_GROUP = 47;

const int MCAST_MSFILTER = 48;

const int IP_MULTICAST_ALL = 49;

const int IP_UNICAST_IF = 50;

const int MCAST_EXCLUDE = 0;

const int MCAST_INCLUDE = 1;

const int IP_ROUTER_ALERT = 5;

const int IP_PKTINFO = 8;

const int IP_PKTOPTIONS = 9;

const int IP_PMTUDISC = 10;

const int IP_MTU_DISCOVER = 10;

const int IP_RECVERR = 11;

const int IP_RECVTTL = 12;

const int IP_RECVTOS = 13;

const int IP_MTU = 14;

const int IP_FREEBIND = 15;

const int IP_IPSEC_POLICY = 16;

const int IP_XFRM_POLICY = 17;

const int IP_PASSSEC = 18;

const int IP_TRANSPARENT = 19;

const int IP_ORIGDSTADDR = 20;

const int IP_RECVORIGDSTADDR = 20;

const int IP_MINTTL = 21;

const int IP_NODEFRAG = 22;

const int IP_CHECKSUM = 23;

const int IP_BIND_ADDRESS_NO_PORT = 24;

const int IP_RECVFRAGSIZE = 25;

const int IP_RECVERR_RFC4884 = 26;

const int IP_PMTUDISC_DONT = 0;

const int IP_PMTUDISC_WANT = 1;

const int IP_PMTUDISC_DO = 2;

const int IP_PMTUDISC_PROBE = 3;

const int IP_PMTUDISC_INTERFACE = 4;

const int IP_PMTUDISC_OMIT = 5;

const int SOL_IP = 0;

const int IP_DEFAULT_MULTICAST_TTL = 1;

const int IP_DEFAULT_MULTICAST_LOOP = 1;

const int IP_MAX_MEMBERSHIPS = 20;

const int IPV6_ADDRFORM = 1;

const int IPV6_2292PKTINFO = 2;

const int IPV6_2292HOPOPTS = 3;

const int IPV6_2292DSTOPTS = 4;

const int IPV6_2292RTHDR = 5;

const int IPV6_2292PKTOPTIONS = 6;

const int IPV6_CHECKSUM = 7;

const int IPV6_2292HOPLIMIT = 8;

const int IPV6_NEXTHOP = 9;

const int IPV6_AUTHHDR = 10;

const int IPV6_UNICAST_HOPS = 16;

const int IPV6_MULTICAST_IF = 17;

const int IPV6_MULTICAST_HOPS = 18;

const int IPV6_MULTICAST_LOOP = 19;

const int IPV6_JOIN_GROUP = 20;

const int IPV6_LEAVE_GROUP = 21;

const int IPV6_ROUTER_ALERT = 22;

const int IPV6_MTU_DISCOVER = 23;

const int IPV6_MTU = 24;

const int IPV6_RECVERR = 25;

const int IPV6_V6ONLY = 26;

const int IPV6_JOIN_ANYCAST = 27;

const int IPV6_LEAVE_ANYCAST = 28;

const int IPV6_MULTICAST_ALL = 29;

const int IPV6_ROUTER_ALERT_ISOLATE = 30;

const int IPV6_RECVERR_RFC4884 = 31;

const int IPV6_IPSEC_POLICY = 34;

const int IPV6_XFRM_POLICY = 35;

const int IPV6_HDRINCL = 36;

const int IPV6_RECVPKTINFO = 49;

const int IPV6_PKTINFO = 50;

const int IPV6_RECVHOPLIMIT = 51;

const int IPV6_HOPLIMIT = 52;

const int IPV6_RECVHOPOPTS = 53;

const int IPV6_HOPOPTS = 54;

const int IPV6_RTHDRDSTOPTS = 55;

const int IPV6_RECVRTHDR = 56;

const int IPV6_RTHDR = 57;

const int IPV6_RECVDSTOPTS = 58;

const int IPV6_DSTOPTS = 59;

const int IPV6_RECVPATHMTU = 60;

const int IPV6_PATHMTU = 61;

const int IPV6_DONTFRAG = 62;

const int IPV6_RECVTCLASS = 66;

const int IPV6_TCLASS = 67;

const int IPV6_AUTOFLOWLABEL = 70;

const int IPV6_ADDR_PREFERENCES = 72;

const int IPV6_MINHOPCOUNT = 73;

const int IPV6_ORIGDSTADDR = 74;

const int IPV6_RECVORIGDSTADDR = 74;

const int IPV6_TRANSPARENT = 75;

const int IPV6_UNICAST_IF = 76;

const int IPV6_RECVFRAGSIZE = 77;

const int IPV6_FREEBIND = 78;

const int IPV6_ADD_MEMBERSHIP = 20;

const int IPV6_DROP_MEMBERSHIP = 21;

const int IPV6_RXHOPOPTS = 54;

const int IPV6_RXDSTOPTS = 59;

const int IPV6_PMTUDISC_DONT = 0;

const int IPV6_PMTUDISC_WANT = 1;

const int IPV6_PMTUDISC_DO = 2;

const int IPV6_PMTUDISC_PROBE = 3;

const int IPV6_PMTUDISC_INTERFACE = 4;

const int IPV6_PMTUDISC_OMIT = 5;

const int SOL_IPV6 = 41;

const int SOL_ICMPV6 = 58;

const int IPV6_RTHDR_LOOSE = 0;

const int IPV6_RTHDR_STRICT = 1;

const int IPV6_RTHDR_TYPE_0 = 0;

const int IPPROTO_IP1 = 0;

const int IPPROTO_ICMP1 = 1;

const int IPPROTO_IGMP1 = 2;

const int IPPROTO_IPIP1 = 4;

const int IPPROTO_TCP1 = 6;

const int IPPROTO_EGP1 = 8;

const int IPPROTO_PUP1 = 12;

const int IPPROTO_UDP1 = 17;

const int IPPROTO_IDP1 = 22;

const int IPPROTO_TP1 = 29;

const int IPPROTO_DCCP1 = 33;

const int IPPROTO_IPV61 = 41;

const int IPPROTO_RSVP1 = 46;

const int IPPROTO_GRE1 = 47;

const int IPPROTO_ESP1 = 50;

const int IPPROTO_AH1 = 51;

const int IPPROTO_MTP1 = 92;

const int IPPROTO_BEETPH1 = 94;

const int IPPROTO_ENCAP1 = 98;

const int IPPROTO_PIM1 = 103;

const int IPPROTO_COMP1 = 108;

const int IPPROTO_SCTP1 = 132;

const int IPPROTO_UDPLITE1 = 136;

const int IPPROTO_MPLS1 = 137;

const int IPPROTO_ETHERNET1 = 143;

const int IPPROTO_RAW1 = 255;

const int IPPROTO_MPTCP1 = 262;

const int IPPROTO_HOPOPTS1 = 0;

const int IPPROTO_ROUTING1 = 43;

const int IPPROTO_FRAGMENT1 = 44;

const int IPPROTO_ICMPV61 = 58;

const int IPPROTO_NONE1 = 59;

const int IPPROTO_DSTOPTS1 = 60;

const int IPPROTO_MH1 = 135;

const int IN_CLASSA_NET = 4278190080;

const int IN_CLASSA_NSHIFT = 24;

const int IN_CLASSA_HOST = 16777215;

const int IN_CLASSA_MAX = 128;

const int IN_CLASSB_NET = 4294901760;

const int IN_CLASSB_NSHIFT = 16;

const int IN_CLASSB_HOST = 65535;

const int IN_CLASSB_MAX = 65536;

const int IN_CLASSC_NET = 4294967040;

const int IN_CLASSC_NSHIFT = 8;

const int IN_CLASSC_HOST = 255;

const int INADDR_ANY = 0;

const int INADDR_BROADCAST = 4294967295;

const int INADDR_NONE = 4294967295;

const int INADDR_DUMMY = 3221225480;

const int IN_LOOPBACKNET = 127;

const int INADDR_LOOPBACK = 2130706433;

const int INADDR_UNSPEC_GROUP = 3758096384;

const int INADDR_ALLHOSTS_GROUP = 3758096385;

const int INADDR_ALLRTRS_GROUP = 3758096386;

const int INADDR_ALLSNOOPERS_GROUP = 3758096490;

const int INADDR_MAX_LOCAL_GROUP = 3758096639;

const int INET_ADDRSTRLEN = 16;

const int INET6_ADDRSTRLEN = 46;

const int TO_UINT8_HEX_BUF_LEN = 2048;

const int VARINT_LEN = 20;

const int _TIME_H = 1;

const int _BITS_TIME_H = 1;

const int CLOCKS_PER_SEC = 1000000;

const int CLOCK_REALTIME = 0;

const int CLOCK_MONOTONIC = 1;

const int CLOCK_PROCESS_CPUTIME_ID = 2;

const int CLOCK_THREAD_CPUTIME_ID = 3;

const int CLOCK_MONOTONIC_RAW = 4;

const int CLOCK_REALTIME_COARSE = 5;

const int CLOCK_MONOTONIC_COARSE = 6;

const int CLOCK_BOOTTIME = 7;

const int CLOCK_REALTIME_ALARM = 8;

const int CLOCK_BOOTTIME_ALARM = 9;

const int CLOCK_TAI = 11;

const int TIMER_ABSTIME = 1;

const int __struct_tm_defined = 1;

const int __itimerspec_defined = 1;

const int TIME_UTC = 1;

const int RSIZE_MAX = 9223372036854775807;

const int LANG_WORD_CNT = 2048;

const int MAX_ENTROPY_BITS = 256;

const int HEX_CHARS_PER_BYTE = 2;

const int MAX_ENTROPY_STRING_SIZE = 65;

const int MAX_CHECKSUM_BITS = 8;

const int MAX_WORDS_IN_MNEMONIC = 24;

const int MAX_CHARS_IN_MNEMONIC_WORD = 16;

const int MAX_MNEMONIC_STRING_SIZE = 769;

const int MAX_CHARS_IN_PASSPHRASE = 256;

const int MAX_PASSPHRASE_STRING_SIZE = 513;

const int ENTROPY_SIZE_STRING_SIZE = 3;

const String BYTE_TO_BINARY_PATTERN = '%c%c%c%c%c%c%c%c';

const String BYTE_TO_FIRST_FOUR_BINARY_PATTERN = '%c%c%c%c';

const String BYTE_TO_FIRST_FIVE_BINARY_PATTERN = '%c%c%c%c%c';

const String BYTE_TO_FIRST_SIX_BINARY_PATTERN = '%c%c%c%c%c%c';

const String BYTE_TO_FIRST_SEVEN_BINARY_PATTERN = '%c%c%c%c%c%c%c';

const int AES_BLOCK_SIZE = 16;

const int qrcodegen_VERSION_MIN = 1;

const int qrcodegen_VERSION_MAX = 40;

const int qrcodegen_BUFFER_LEN_MAX = 3918;

const int _ASSERT_H = 1;

const int _CTYPE_H = 1;

const int _MATH_H = 1;

const int _BITS_LIBM_SIMD_DECL_STUBS_H = 1;

const double HUGE_VAL = double.infinity;

const double HUGE_VALF = double.infinity;

const double HUGE_VALL = double.infinity;

const double INFINITY = double.infinity;

const double NAN = double.nan;

const int __GLIBC_FLT_EVAL_METHOD = 0;

const int __FP_LOGB0_IS_MIN = 1;

const int __FP_LOGBNAN_IS_MIN = 1;

const int FP_ILOGB0 = -2147483648;

const int FP_ILOGBNAN = -2147483648;

const int __MATH_DECLARE_LDOUBLE = 1;

const int FP_NAN1 = 0;

const int FP_INFINITE1 = 1;

const int FP_ZERO1 = 2;

const int FP_SUBNORMAL1 = 3;

const int FP_NORMAL1 = 4;

const int MATH_ERRNO = 1;

const int MATH_ERREXCEPT = 2;

const int math_errhandling = 3;

const double M_E = 2.718281828459045;

const double M_LOG2E = 1.4426950408889634;

const double M_LOG10E = 0.4342944819032518;

const double M_LN2 = 0.6931471805599453;

const double M_LN10 = 2.302585092994046;

const double M_PI = 3.141592653589793;

const double M_PI_2 = 1.5707963267948966;

const double M_PI_4 = 0.7853981633974483;

const double M_1_PI = 0.3183098861837907;

const double M_2_PI = 0.6366197723675814;

const double M_2_SQRTPI = 1.1283791670955126;

const double M_SQRT2 = 1.4142135623730951;

const double M_SQRT1_2 = 0.7071067811865476;
